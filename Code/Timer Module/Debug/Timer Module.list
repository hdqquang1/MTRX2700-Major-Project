
Timer Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000364  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004f8  08000500  00010500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004f8  080004f8  00010500  2**0
                  CONTENTS
  4 .ARM          00000000  080004f8  080004f8  00010500  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004f8  08000500  00010500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004f8  080004f8  000104f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004fc  080004fc  000104fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010500  2**0
                  CONTENTS
 10 .bss          00000030  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010500  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010530  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000a7f  00000000  00000000  00010573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000023d  00000000  00000000  00010ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000b0  00000000  00000000  00011230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000007a  00000000  00000000  000112e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00014c85  00000000  00000000  0001135a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000006cd  00000000  00000000  00025fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000726ba  00000000  00000000  000266ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000218  00000000  00000000  00098d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00098f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004e0 	.word	0x080004e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080004e0 	.word	0x080004e0

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	; (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <main>:
void reset_timer(void); // Resets the timer with the new period
void stop_timer(void);
void stop_leds(void);
void one_shot_init(uint32_t duration_ms);

int main(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
    enable_clocks();
 8000268:	f000 f810 	bl	800028c <enable_clocks>
    initialise_board();
 800026c:	f000 f824 	bl	80002b8 <initialise_board>

    // Initialize timer with a 1-second period and the leds callback
    timer_init(1000, leds);
 8000270:	4905      	ldr	r1, [pc, #20]	; (8000288 <main+0x24>)
 8000272:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000276:	f000 f831 	bl	80002dc <timer_init>
    one_shot_init(5000);
 800027a:	f241 3088 	movw	r0, #5000	; 0x1388
 800027e:	f000 f869 	bl	8000354 <one_shot_init>
 8000282:	2300      	movs	r3, #0
}
 8000284:	4618      	mov	r0, r3
 8000286:	bd80      	pop	{r7, pc}
 8000288:	08000411 	.word	0x08000411

0800028c <enable_clocks>:

void enable_clocks() {
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <enable_clocks+0x28>)
 8000292:	695b      	ldr	r3, [r3, #20]
 8000294:	4a07      	ldr	r2, [pc, #28]	; (80002b4 <enable_clocks+0x28>)
 8000296:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 800029a:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <enable_clocks+0x28>)
 800029e:	69db      	ldr	r3, [r3, #28]
 80002a0:	4a04      	ldr	r2, [pc, #16]	; (80002b4 <enable_clocks+0x28>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	61d3      	str	r3, [r2, #28]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40021000 	.word	0x40021000

080002b8 <initialise_board>:

void initialise_board() {
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <initialise_board+0x20>)
 80002c0:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f245 5255 	movw	r2, #21845	; 0x5555
 80002c8:	801a      	strh	r2, [r3, #0]
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	48001002 	.word	0x48001002

080002dc <timer_init>:

void timer_init(uint32_t interval_ms, void (*cb)(void)) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	6039      	str	r1, [r7, #0]
    TIM2->CR1 &= ~TIM_CR1_CEN; // Disable timer
 80002e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f0:	f023 0301 	bic.w	r3, r3, #1
 80002f4:	6013      	str	r3, [r2, #0]
    TIM2->PSC = 7999; // Prescaler for 1ms resolution at 8MHz
 80002f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002fa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002fe:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = interval_ms; // Set auto-reload value for desired interval
 8000300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM2->DIER |= TIM_DIER_UIE; // Enable update interrupt
 8000308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800030c:	68db      	ldr	r3, [r3, #12]
 800030e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000312:	f043 0301 	orr.w	r3, r3, #1
 8000316:	60d3      	str	r3, [r2, #12]
    NVIC_SetPriority(TIM2_IRQn, 0); // Set priority
 8000318:	2100      	movs	r1, #0
 800031a:	201c      	movs	r0, #28
 800031c:	f7ff ff78 	bl	8000210 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn); // Enable TIM2 interrupt
 8000320:	201c      	movs	r0, #28
 8000322:	f7ff ff57 	bl	80001d4 <__NVIC_EnableIRQ>
    TIM2->CR1 |= TIM_CR1_CEN; // Enable timer
 8000326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6013      	str	r3, [r2, #0]
    callback = cb; // Store the callback function pointer
 8000336:	4a05      	ldr	r2, [pc, #20]	; (800034c <timer_init+0x70>)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	6013      	str	r3, [r2, #0]
    period_ms = interval_ms;
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <timer_init+0x74>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	6013      	str	r3, [r2, #0]
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	2000001c 	.word	0x2000001c
 8000350:	20000020 	.word	0x20000020

08000354 <one_shot_init>:

void one_shot_init(uint32_t duration_ms) {
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
    one_shot_duration_ms = duration_ms; // Set the one-shot duration
 800035c:	4a04      	ldr	r2, [pc, #16]	; (8000370 <one_shot_init+0x1c>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	6013      	str	r3, [r2, #0]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	20000028 	.word	0x20000028

08000374 <TIM2_IRQHandler>:

// Interrupt Service Routine for Timer 2
void TIM2_IRQHandler(void) {
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8000378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800037c:	691b      	ldr	r3, [r3, #16]
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	2b00      	cmp	r3, #0
 8000384:	d020      	beq.n	80003c8 <TIM2_IRQHandler+0x54>
        TIM2->SR &= ~TIM_SR_UIF; // Clear update interrupt flag
 8000386:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800038a:	691b      	ldr	r3, [r3, #16]
 800038c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000390:	f023 0301 	bic.w	r3, r3, #1
 8000394:	6113      	str	r3, [r2, #16]
        if (callback) {
 8000396:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <TIM2_IRQHandler+0x58>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d002      	beq.n	80003a4 <TIM2_IRQHandler+0x30>
            callback(); // Execute the callback function
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <TIM2_IRQHandler+0x58>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4798      	blx	r3
        }
//        // Multiply the period by 1.05 without exceeding some maximum value
//        uint32_t new_period = period_ms * 1.05;
//        set_timer_period(new_period > 1500 ? 1500 : new_period); // Update the period

        one_shot_counter_ms += period_ms;
 80003a4:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <TIM2_IRQHandler+0x5c>)
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <TIM2_IRQHandler+0x60>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4413      	add	r3, r2
 80003ae:	4a08      	ldr	r2, [pc, #32]	; (80003d0 <TIM2_IRQHandler+0x5c>)
 80003b0:	6013      	str	r3, [r2, #0]
		if (one_shot_counter_ms >= one_shot_duration_ms) {
 80003b2:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <TIM2_IRQHandler+0x5c>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <TIM2_IRQHandler+0x64>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d304      	bcc.n	80003c8 <TIM2_IRQHandler+0x54>
			stop_leds(); // Stop the timer and pause LEDs
 80003be:	f000 f80d 	bl	80003dc <stop_leds>
			one_shot_counter_ms = 0; // Reset the counter if needed
 80003c2:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <TIM2_IRQHandler+0x5c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
		}
    }

}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	2000001c 	.word	0x2000001c
 80003d0:	20000024 	.word	0x20000024
 80003d4:	20000020 	.word	0x20000020
 80003d8:	20000028 	.word	0x20000028

080003dc <stop_leds>:

uint32_t get_timer_period(void) {
    return period_ms; // Return the current period
}

void stop_leds(void) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
    stop_timer(); // Stop the timer
 80003e0:	f000 f802 	bl	80003e8 <stop_timer>
    // LED state is automatically preserved as no changes to GPIOE->ODR are made after this point
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <stop_timer>:

void stop_timer(void) {
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
    TIM2->CR1 &= ~TIM_CR1_CEN; // Disable timer
 80003ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003f6:	f023 0301 	bic.w	r3, r3, #1
 80003fa:	6013      	str	r3, [r2, #0]
    // Optional: Reset the counter value if necessary
    TIM2->CNT = 0;
 80003fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000400:	2200      	movs	r2, #0
 8000402:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
	...

08000410 <leds>:
    TIM2->CR1 &= ~TIM_CR1_CEN; // Disable timer
    TIM2->ARR = period_ms; // Update the auto-reload value with the new period
    TIM2->CR1 |= TIM_CR1_CEN; // Enable timer
}

void leds(void) {
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
    static uint32_t current_led = 0;
    // Assuming LEDs are connected to GPIOE pins 8 to 15
    GPIOE->ODR = (1 << (current_led + 8)); // Turn on the current LED
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <leds+0x2c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	3308      	adds	r3, #8
 800041a:	2201      	movs	r2, #1
 800041c:	409a      	lsls	r2, r3
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <leds+0x30>)
 8000420:	615a      	str	r2, [r3, #20]
    current_led = (current_led + 1) % 8; // Move to the next LED
 8000422:	4b06      	ldr	r3, [pc, #24]	; (800043c <leds+0x2c>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	3301      	adds	r3, #1
 8000428:	f003 0307 	and.w	r3, r3, #7
 800042c:	4a03      	ldr	r2, [pc, #12]	; (800043c <leds+0x2c>)
 800042e:	6013      	str	r3, [r2, #0]
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	2000002c 	.word	0x2000002c
 8000440:	48001000 	.word	0x48001000

08000444 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000444:	480d      	ldr	r0, [pc, #52]	; (800047c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000446:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000448:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800044c:	480c      	ldr	r0, [pc, #48]	; (8000480 <LoopForever+0x6>)
  ldr r1, =_edata
 800044e:	490d      	ldr	r1, [pc, #52]	; (8000484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000450:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <LoopForever+0xe>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000454:	e002      	b.n	800045c <LoopCopyDataInit>

08000456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045a:	3304      	adds	r3, #4

0800045c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800045c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000460:	d3f9      	bcc.n	8000456 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000462:	4a0a      	ldr	r2, [pc, #40]	; (800048c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000464:	4c0a      	ldr	r4, [pc, #40]	; (8000490 <LoopForever+0x16>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000468:	e001      	b.n	800046e <LoopFillZerobss>

0800046a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800046c:	3204      	adds	r2, #4

0800046e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000470:	d3fb      	bcc.n	800046a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000472:	f000 f811 	bl	8000498 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000476:	f7ff fef5 	bl	8000264 <main>

0800047a <LoopForever>:

LoopForever:
  b LoopForever
 800047a:	e7fe      	b.n	800047a <LoopForever>
  ldr   r0, =_estack
 800047c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000484:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000488:	08000500 	.word	0x08000500
  ldr r2, =_sbss
 800048c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000490:	20000030 	.word	0x20000030

08000494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000494:	e7fe      	b.n	8000494 <ADC1_2_IRQHandler>
	...

08000498 <__libc_init_array>:
 8000498:	b570      	push	{r4, r5, r6, lr}
 800049a:	4d0d      	ldr	r5, [pc, #52]	; (80004d0 <__libc_init_array+0x38>)
 800049c:	4c0d      	ldr	r4, [pc, #52]	; (80004d4 <__libc_init_array+0x3c>)
 800049e:	1b64      	subs	r4, r4, r5
 80004a0:	10a4      	asrs	r4, r4, #2
 80004a2:	2600      	movs	r6, #0
 80004a4:	42a6      	cmp	r6, r4
 80004a6:	d109      	bne.n	80004bc <__libc_init_array+0x24>
 80004a8:	4d0b      	ldr	r5, [pc, #44]	; (80004d8 <__libc_init_array+0x40>)
 80004aa:	4c0c      	ldr	r4, [pc, #48]	; (80004dc <__libc_init_array+0x44>)
 80004ac:	f000 f818 	bl	80004e0 <_init>
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	10a4      	asrs	r4, r4, #2
 80004b4:	2600      	movs	r6, #0
 80004b6:	42a6      	cmp	r6, r4
 80004b8:	d105      	bne.n	80004c6 <__libc_init_array+0x2e>
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c0:	4798      	blx	r3
 80004c2:	3601      	adds	r6, #1
 80004c4:	e7ee      	b.n	80004a4 <__libc_init_array+0xc>
 80004c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ca:	4798      	blx	r3
 80004cc:	3601      	adds	r6, #1
 80004ce:	e7f2      	b.n	80004b6 <__libc_init_array+0x1e>
 80004d0:	080004f8 	.word	0x080004f8
 80004d4:	080004f8 	.word	0x080004f8
 80004d8:	080004f8 	.word	0x080004f8
 80004dc:	080004fc 	.word	0x080004fc

080004e0 <_init>:
 80004e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e2:	bf00      	nop
 80004e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e6:	bc08      	pop	{r3}
 80004e8:	469e      	mov	lr, r3
 80004ea:	4770      	bx	lr

080004ec <_fini>:
 80004ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ee:	bf00      	nop
 80004f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f2:	bc08      	pop	{r3}
 80004f4:	469e      	mov	lr, r3
 80004f6:	4770      	bx	lr
