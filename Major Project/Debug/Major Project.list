
Major Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  08005f7c  08005f7c  00015f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067a0  080067a0  00020114  2**0
                  CONTENTS
  4 .ARM          00000000  080067a0  080067a0  00020114  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067a0  080067a0  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067a0  080067a0  000167a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067a4  080067a4  000167a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000114  20000000  080067a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020114  2**0
                  CONTENTS
 10 .bss          00000584  20000114  20000114  00020114  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000698  20000698  00020114  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010b7e  00000000  00000000  00020187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000300e  00000000  00000000  00030d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ef8  00000000  00000000  00033d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b48  00000000  00000000  00034c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d521  00000000  00000000  00035758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000152c3  00000000  00000000  00072c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7b33  00000000  00000000  00087f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004700  00000000  00000000  0016fa70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  00174170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000114 	.word	0x20000114
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f64 	.word	0x08005f64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000118 	.word	0x20000118
 80001cc:	08005f64 	.word	0x08005f64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <randomWord>:

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

char* randomWord() {
 8000270:	b580      	push	{r7, lr}
 8000272:	b0ec      	sub	sp, #432	; 0x1b0
 8000274:	af00      	add	r7, sp, #0
	char *words[] = {
 8000276:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800027a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800027e:	4a13      	ldr	r2, [pc, #76]	; (80002cc <randomWord+0x5c>)
 8000280:	4618      	mov	r0, r3
 8000282:	4611      	mov	r1, r2
 8000284:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8000288:	461a      	mov	r2, r3
 800028a:	f004 fe84 	bl	8004f96 <memcpy>
	        "Drinking", "Typing", "Eating", "Having a snowball fight", "Playing the guitar",
	        "Surfing", "Yawning", "Playing golf", "Praying", "Brushing teeth",
	        "Showering", "Meditating", "Singing"
	    };

    int numWords = sizeof(words) / sizeof(words[0]); // Calculate the number of words in the array
 800028e:	2369      	movs	r3, #105	; 0x69
 8000290:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    int randomIndex = rand() % numWords; // Generate a random index within the bounds of the array
 8000294:	f004 fc6c 	bl	8004b70 <rand>
 8000298:	4603      	mov	r3, r0
 800029a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800029e:	fb93 f2f2 	sdiv	r2, r3, r2
 80002a2:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 80002a6:	fb01 f202 	mul.w	r2, r1, r2
 80002aa:	1a9b      	subs	r3, r3, r2
 80002ac:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    return words[randomIndex]; // Return the randomly chosen word
 80002b0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80002b4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80002b8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80002bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	08006380 	.word	0x08006380

080002d0 <initialise_board>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_USB_PCD_Init(void);

void initialise_board() {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d6:	f000 ffcb 	bl	8001270 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80002da:	f000 f831 	bl	8000340 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002de:	f000 f931 	bl	8000544 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002e2:	f000 f88f 	bl	8000404 <MX_I2C1_Init>
  MX_SPI1_Init();
 80002e6:	f000 f8cd 	bl	8000484 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80002ea:	f000 f909 	bl	8000500 <MX_USB_PCD_Init>
  
  BSP_GYRO_Init();
 80002ee:	f003 fe0d 	bl	8003f0c <BSP_GYRO_Init>

  RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <initialise_board+0x64>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <initialise_board+0x64>)
 80002f8:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80002fc:	6153      	str	r3, [r2, #20]

  RCC->APB1ENR |=  RCC_APB1ENR_TIM2EN;
 80002fe:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <initialise_board+0x64>)
 8000300:	69db      	ldr	r3, [r3, #28]
 8000302:	4a0c      	ldr	r2, [pc, #48]	; (8000334 <initialise_board+0x64>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	61d3      	str	r3, [r2, #28]
  RCC->APB1ENR |=  RCC_APB1ENR_TIM3EN;
 800030a:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <initialise_board+0x64>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	4a09      	ldr	r2, [pc, #36]	; (8000334 <initialise_board+0x64>)
 8000310:	f043 0302 	orr.w	r3, r3, #2
 8000314:	61d3      	str	r3, [r2, #28]

  SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000316:	2200      	movs	r2, #0
 8000318:	4907      	ldr	r1, [pc, #28]	; (8000338 <initialise_board+0x68>)
 800031a:	2004      	movs	r0, #4
 800031c:	f000 fbdc 	bl	8000ad8 <SerialInitialise>

  uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <initialise_board+0x6c>)
 8000322:	607b      	str	r3, [r7, #4]
  *led_output_registers = 0x5555;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f245 5255 	movw	r2, #21845	; 0x5555
 800032a:	801a      	strh	r2, [r3, #0]
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40021000 	.word	0x40021000
 8000338:	20000000 	.word	0x20000000
 800033c:	48001002 	.word	0x48001002

08000340 <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b09e      	sub	sp, #120	; 0x78
 8000344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000346:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800034a:	2228      	movs	r2, #40	; 0x28
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f004 fd71 	bl	8004e36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000354:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	60da      	str	r2, [r3, #12]
 8000362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000364:	463b      	mov	r3, r7
 8000366:	223c      	movs	r2, #60	; 0x3c
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f004 fd63 	bl	8004e36 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000370:	2303      	movs	r3, #3
 8000372:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000374:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000378:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037e:	2301      	movs	r3, #1
 8000380:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000382:	2310      	movs	r3, #16
 8000384:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000386:	2302      	movs	r3, #2
 8000388:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800038a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800038e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000390:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000394:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000396:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800039a:	4618      	mov	r0, r3
 800039c:	f001 fd3e 	bl	8001e1c <HAL_RCC_OscConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80003a6:	f000 f94b 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003aa:	230f      	movs	r3, #15
 80003ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ae:	2302      	movs	r3, #2
 80003b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003c4:	2101      	movs	r1, #1
 80003c6:	4618      	mov	r0, r3
 80003c8:	f002 fd66 	bl	8002e98 <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003d2:	f000 f935 	bl	8000640 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80003d6:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <SystemClock_Config+0xc0>)
 80003d8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003da:	2300      	movs	r3, #0
 80003dc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80003de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e4:	463b      	mov	r3, r7
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 ff3c 	bl	8003264 <HAL_RCCEx_PeriphCLKConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003f2:	f000 f925 	bl	8000640 <Error_Handler>
  }
}
 80003f6:	bf00      	nop
 80003f8:	3778      	adds	r7, #120	; 0x78
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	00020020 	.word	0x00020020

08000404 <MX_I2C1_Init>:

// I2C1 Initialization Function
static void MX_I2C1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <MX_I2C1_Init+0x74>)
 800040a:	4a1c      	ldr	r2, [pc, #112]	; (800047c <MX_I2C1_Init+0x78>)
 800040c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800040e:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <MX_I2C1_Init+0x74>)
 8000410:	4a1b      	ldr	r2, [pc, #108]	; (8000480 <MX_I2C1_Init+0x7c>)
 8000412:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000414:	4b18      	ldr	r3, [pc, #96]	; (8000478 <MX_I2C1_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800041a:	4b17      	ldr	r3, [pc, #92]	; (8000478 <MX_I2C1_Init+0x74>)
 800041c:	2201      	movs	r2, #1
 800041e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000420:	4b15      	ldr	r3, [pc, #84]	; (8000478 <MX_I2C1_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000426:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_I2C1_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <MX_I2C1_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_I2C1_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_I2C1_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800043e:	480e      	ldr	r0, [pc, #56]	; (8000478 <MX_I2C1_Init+0x74>)
 8000440:	f001 faf4 	bl	8001a2c <HAL_I2C_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800044a:	f000 f8f9 	bl	8000640 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800044e:	2100      	movs	r1, #0
 8000450:	4809      	ldr	r0, [pc, #36]	; (8000478 <MX_I2C1_Init+0x74>)
 8000452:	f001 fb7a 	bl	8001b4a <HAL_I2CEx_ConfigAnalogFilter>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800045c:	f000 f8f0 	bl	8000640 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000460:	2100      	movs	r1, #0
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_I2C1_Init+0x74>)
 8000464:	f001 fbbc 	bl	8001be0 <HAL_I2CEx_ConfigDigitalFilter>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800046e:	f000 f8e7 	bl	8000640 <Error_Handler>
  }
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000130 	.word	0x20000130
 800047c:	40005400 	.word	0x40005400
 8000480:	2000090e 	.word	0x2000090e

08000484 <MX_SPI1_Init>:

// SPI1 Initialization Function
static void MX_SPI1_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000488:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <MX_SPI1_Init+0x74>)
 800048a:	4a1c      	ldr	r2, [pc, #112]	; (80004fc <MX_SPI1_Init+0x78>)
 800048c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800048e:	4b1a      	ldr	r3, [pc, #104]	; (80004f8 <MX_SPI1_Init+0x74>)
 8000490:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000494:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000496:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <MX_SPI1_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800049c:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <MX_SPI1_Init+0x74>)
 800049e:	f44f 7240 	mov.w	r2, #768	; 0x300
 80004a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004a4:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_SPI1_Init+0x74>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004aa:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <MX_SPI1_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <MX_SPI1_Init+0x74>)
 80004b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <MX_SPI1_Init+0x74>)
 80004ba:	2208      	movs	r2, #8
 80004bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <MX_SPI1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_SPI1_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <MX_SPI1_Init+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_SPI1_Init+0x74>)
 80004d2:	2207      	movs	r2, #7
 80004d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <MX_SPI1_Init+0x74>)
 80004d8:	2200      	movs	r2, #0
 80004da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_SPI1_Init+0x74>)
 80004de:	2208      	movs	r2, #8
 80004e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_SPI1_Init+0x74>)
 80004e4:	f003 f86e 	bl	80035c4 <HAL_SPI_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004ee:	f000 f8a7 	bl	8000640 <Error_Handler>
  }
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000184 	.word	0x20000184
 80004fc:	40013000 	.word	0x40013000

08000500 <MX_USB_PCD_Init>:

// USB Initialization Function
static void MX_USB_PCD_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  hpcd_USB_FS.Instance = USB;
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <MX_USB_PCD_Init+0x3c>)
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <MX_USB_PCD_Init+0x40>)
 8000508:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_USB_PCD_Init+0x3c>)
 800050c:	2208      	movs	r2, #8
 800050e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000510:	4b0a      	ldr	r3, [pc, #40]	; (800053c <MX_USB_PCD_Init+0x3c>)
 8000512:	2202      	movs	r2, #2
 8000514:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_USB_PCD_Init+0x3c>)
 8000518:	2202      	movs	r2, #2
 800051a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800051c:	4b07      	ldr	r3, [pc, #28]	; (800053c <MX_USB_PCD_Init+0x3c>)
 800051e:	2200      	movs	r2, #0
 8000520:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_USB_PCD_Init+0x3c>)
 8000524:	2200      	movs	r2, #0
 8000526:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <MX_USB_PCD_Init+0x3c>)
 800052a:	f001 fba5 	bl	8001c78 <HAL_PCD_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000534:	f000 f884 	bl	8000640 <Error_Handler>
  }
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	200001e8 	.word	0x200001e8
 8000540:	40005c00 	.word	0x40005c00

08000544 <MX_GPIO_Init>:

// GPIO Initialization Function
static void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	; 0x28
 8000548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800055a:	4b37      	ldr	r3, [pc, #220]	; (8000638 <MX_GPIO_Init+0xf4>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a36      	ldr	r2, [pc, #216]	; (8000638 <MX_GPIO_Init+0xf4>)
 8000560:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000564:	6153      	str	r3, [r2, #20]
 8000566:	4b34      	ldr	r3, [pc, #208]	; (8000638 <MX_GPIO_Init+0xf4>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b31      	ldr	r3, [pc, #196]	; (8000638 <MX_GPIO_Init+0xf4>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a30      	ldr	r2, [pc, #192]	; (8000638 <MX_GPIO_Init+0xf4>)
 8000578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800057c:	6153      	str	r3, [r2, #20]
 800057e:	4b2e      	ldr	r3, [pc, #184]	; (8000638 <MX_GPIO_Init+0xf4>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <MX_GPIO_Init+0xf4>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a2a      	ldr	r2, [pc, #168]	; (8000638 <MX_GPIO_Init+0xf4>)
 8000590:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <MX_GPIO_Init+0xf4>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	4b25      	ldr	r3, [pc, #148]	; (8000638 <MX_GPIO_Init+0xf4>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a24      	ldr	r2, [pc, #144]	; (8000638 <MX_GPIO_Init+0xf4>)
 80005a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b22      	ldr	r3, [pc, #136]	; (8000638 <MX_GPIO_Init+0xf4>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_GPIO_Init+0xf4>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <MX_GPIO_Init+0xf4>)
 80005c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <MX_GPIO_Init+0xf4>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005d2:	2200      	movs	r2, #0
 80005d4:	f64f 7108 	movw	r1, #65288	; 0xff08
 80005d8:	4818      	ldr	r0, [pc, #96]	; (800063c <MX_GPIO_Init+0xf8>)
 80005da:	f001 fa0f 	bl	80019fc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80005de:	2337      	movs	r3, #55	; 0x37
 80005e0:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005e2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4619      	mov	r1, r3
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <MX_GPIO_Init+0xf8>)
 80005f4:	f000 ffac 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005f8:	f64f 7308 	movw	r3, #65288	; 0xff08
 80005fc:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	480a      	ldr	r0, [pc, #40]	; (800063c <MX_GPIO_Init+0xf8>)
 8000612:	f000 ff9d 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000616:	2301      	movs	r3, #1
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f000 ff90 	bl	8001550 <HAL_GPIO_Init>
}
 8000630:	bf00      	nop
 8000632:	3728      	adds	r7, #40	; 0x28
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000
 800063c:	48001000 	.word	0x48001000

08000640 <Error_Handler>:

// This function is executed in case of error occurrence.
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	e7fe      	b.n	8000648 <Error_Handler+0x8>
	...

0800064c <flash_leds>:
	*led_output_registers = 0x5555;
}


// Function to flash LEDs for 1 second
void flash_leds() {
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
    // Turn on LEDs
    GPIOE->ODR = 0xFFFF;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <flash_leds+0x34>)
 8000654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000658:	615a      	str	r2, [r3, #20]

    // Delay for 1 second (adjust delay according to system clock)
    for (volatile int i = 0; i < 2000000; i++);
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	e002      	b.n	8000666 <flash_leds+0x1a>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a06      	ldr	r2, [pc, #24]	; (8000684 <flash_leds+0x38>)
 800066a:	4293      	cmp	r3, r2
 800066c:	ddf8      	ble.n	8000660 <flash_leds+0x14>

    // Turn off LEDs
    GPIOE->ODR = 0x0000;
 800066e:	4b04      	ldr	r3, [pc, #16]	; (8000680 <flash_leds+0x34>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	48001000 	.word	0x48001000
 8000684:	001e847f 	.word	0x001e847f

08000688 <set_timesUp>:
#include "headsUp.h"
/* USER CODE END Includes */

uint8_t timesUp = 0;

void set_timesUp(){
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
    if (timesUp == 0) {
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <set_timesUp+0x24>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d103      	bne.n	800069c <set_timesUp+0x14>
        timesUp = 1;
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <set_timesUp+0x24>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
    }
    else {
        timesUp = 0;
    }
}
 800069a:	e002      	b.n	80006a2 <set_timesUp+0x1a>
        timesUp = 0;
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <set_timesUp+0x24>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	200004d4 	.word	0x200004d4

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b5b0      	push	{r4, r5, r7, lr}
 80006b2:	b0a2      	sub	sp, #136	; 0x88
 80006b4:	af00      	add	r7, sp, #0
	initialise_board();
 80006b6:	f7ff fe0b 	bl	80002d0 <initialise_board>
	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 80006ba:	2200      	movs	r2, #0
 80006bc:	49be      	ldr	r1, [pc, #760]	; (80009b8 <main+0x308>)
 80006be:	2004      	movs	r0, #4
 80006c0:	f000 fa0a 	bl	8000ad8 <SerialInitialise>
	uint8_t string_to_send[64] = "This is a string !\r\n";
 80006c4:	4bbd      	ldr	r3, [pc, #756]	; (80009bc <main+0x30c>)
 80006c6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80006ca:	461d      	mov	r5, r3
 80006cc:	6828      	ldr	r0, [r5, #0]
 80006ce:	6869      	ldr	r1, [r5, #4]
 80006d0:	68aa      	ldr	r2, [r5, #8]
 80006d2:	68eb      	ldr	r3, [r5, #12]
 80006d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d6:	6928      	ldr	r0, [r5, #16]
 80006d8:	6020      	str	r0, [r4, #0]
 80006da:	7d2b      	ldrb	r3, [r5, #20]
 80006dc:	7123      	strb	r3, [r4, #4]
 80006de:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 80006e2:	222b      	movs	r2, #43	; 0x2b
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 fba5 	bl	8004e36 <memset>

	float gyro_values[3];

	uint8_t rounds = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	uint8_t finalWinner;
	uint8_t multiplier;
	uint8_t P1leaderboard;
	uint8_t P2leaderboard;

	srand(time(NULL));  // Seed the random number generator once
 80006f2:	2000      	movs	r0, #0
 80006f4:	f004 fba8 	bl	8004e48 <time>
 80006f8:	4602      	mov	r2, r0
 80006fa:	460b      	mov	r3, r1
 80006fc:	4613      	mov	r3, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f004 fa08 	bl	8004b14 <srand>

	while (rounds <= 3){
 8000704:	e1ab      	b.n	8000a5e <main+0x3ae>

		uint8_t P1score = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		uint8_t P2score = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81

		trigger_oneshot(30000, &set_timesUp);
 8000712:	49ab      	ldr	r1, [pc, #684]	; (80009c0 <main+0x310>)
 8000714:	f247 5030 	movw	r0, #30000	; 0x7530
 8000718:	f000 fd1a 	bl	8001150 <trigger_oneshot>
		sprintf(string_to_send, "Player 1 your timer starts now!\r\n");
 800071c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000720:	49a8      	ldr	r1, [pc, #672]	; (80009c4 <main+0x314>)
 8000722:	4618      	mov	r0, r3
 8000724:	f004 fb24 	bl	8004d70 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000728:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800072c:	49a2      	ldr	r1, [pc, #648]	; (80009b8 <main+0x308>)
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fa5f 	bl	8000bf2 <SerialOutputString>

		while (timesUp == 0) {
 8000734:	e072      	b.n	800081c <main+0x16c>
			outcome = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

			uint8_t guessWord[20];
			char* random = randomWord();
 800073c:	f7ff fd98 	bl	8000270 <randomWord>
 8000740:	67b8      	str	r0, [r7, #120]	; 0x78
			strcpy((char*)guessWord, random);
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000748:	4618      	mov	r0, r3
 800074a:	f004 fc1c 	bl	8004f86 <strcpy>
			sprintf(string_to_send, "%s\r\n", (char*)guessWord);
 800074e:	f107 0218 	add.w	r2, r7, #24
 8000752:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000756:	499c      	ldr	r1, [pc, #624]	; (80009c8 <main+0x318>)
 8000758:	4618      	mov	r0, r3
 800075a:	f004 fb09 	bl	8004d70 <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 800075e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000762:	4995      	ldr	r1, [pc, #596]	; (80009b8 <main+0x308>)
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fa44 	bl	8000bf2 <SerialOutputString>

			while (!outcome){
 800076a:	e027      	b.n	80007bc <main+0x10c>
				BSP_GYRO_GetXYZ(&gyro_values[0]);
 800076c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000770:	4618      	mov	r0, r3
 8000772:	f003 fc81 	bl	8004078 <BSP_GYRO_GetXYZ>
				if (gyro_values[1]/20000 >= 25){
 8000776:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800077a:	eddf 6a94 	vldr	s13, [pc, #592]	; 80009cc <main+0x31c>
 800077e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000782:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800078a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078e:	db02      	blt.n	8000796 <main+0xe6>
					outcome = 1;
 8000790:	2301      	movs	r3, #1
 8000792:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
				}
				if (gyro_values[1]/20000 <= -25){
 8000796:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800079a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80009cc <main+0x31c>
 800079e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007a2:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
 80007a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ae:	d802      	bhi.n	80007b6 <main+0x106>
					outcome = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
				}
				HAL_Delay(100);
 80007b6:	2064      	movs	r0, #100	; 0x64
 80007b8:	f000 fdc0 	bl	800133c <HAL_Delay>
			while (!outcome){
 80007bc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d0d3      	beq.n	800076c <main+0xbc>
			}

			if (outcome == 1){
 80007c4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d113      	bne.n	80007f4 <main+0x144>
				P1score++;
 80007cc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80007d0:	3301      	adds	r3, #1
 80007d2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
				sprintf(string_to_send, "Correct!\r\n");
 80007d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007da:	497d      	ldr	r1, [pc, #500]	; (80009d0 <main+0x320>)
 80007dc:	4618      	mov	r0, r3
 80007de:	f004 fac7 	bl	8004d70 <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 80007e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007e6:	4974      	ldr	r1, [pc, #464]	; (80009b8 <main+0x308>)
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fa02 	bl	8000bf2 <SerialOutputString>
				flash_leds();
 80007ee:	f7ff ff2d 	bl	800064c <flash_leds>
 80007f2:	e00f      	b.n	8000814 <main+0x164>
			}
			else if (outcome == 2){
 80007f4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d10b      	bne.n	8000814 <main+0x164>
				sprintf(string_to_send, "Pass!\r\n");
 80007fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000800:	4974      	ldr	r1, [pc, #464]	; (80009d4 <main+0x324>)
 8000802:	4618      	mov	r0, r3
 8000804:	f004 fab4 	bl	8004d70 <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 8000808:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800080c:	496a      	ldr	r1, [pc, #424]	; (80009b8 <main+0x308>)
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f9ef 	bl	8000bf2 <SerialOutputString>
			}
			HAL_Delay(750);
 8000814:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000818:	f000 fd90 	bl	800133c <HAL_Delay>
		while (timesUp == 0) {
 800081c:	4b6e      	ldr	r3, [pc, #440]	; (80009d8 <main+0x328>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d088      	beq.n	8000736 <main+0x86>
		}
		sprintf(string_to_send, "Time's Up! Player 1's score is %d!\r\n", P1score);
 8000824:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8000828:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800082c:	496b      	ldr	r1, [pc, #428]	; (80009dc <main+0x32c>)
 800082e:	4618      	mov	r0, r3
 8000830:	f004 fa9e 	bl	8004d70 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000834:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000838:	495f      	ldr	r1, [pc, #380]	; (80009b8 <main+0x308>)
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f9d9 	bl	8000bf2 <SerialOutputString>
		set_timesUp();
 8000840:	f7ff ff22 	bl	8000688 <set_timesUp>

		// Player 2 plays heads up
		trigger_oneshot(30000, &set_timesUp);
 8000844:	495e      	ldr	r1, [pc, #376]	; (80009c0 <main+0x310>)
 8000846:	f247 5030 	movw	r0, #30000	; 0x7530
 800084a:	f000 fc81 	bl	8001150 <trigger_oneshot>
		sprintf(string_to_send, "Player 2 your timer starts now!\r\n");
 800084e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000852:	4963      	ldr	r1, [pc, #396]	; (80009e0 <main+0x330>)
 8000854:	4618      	mov	r0, r3
 8000856:	f004 fa8b 	bl	8004d70 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 800085a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800085e:	4956      	ldr	r1, [pc, #344]	; (80009b8 <main+0x308>)
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f9c6 	bl	8000bf2 <SerialOutputString>

		while (timesUp == 0) {
 8000866:	e070      	b.n	800094a <main+0x29a>
			outcome = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

			uint8_t guessWord[20];
			char* random = randomWord();
 800086e:	f7ff fcff 	bl	8000270 <randomWord>
 8000872:	67f8      	str	r0, [r7, #124]	; 0x7c
			strcpy((char*)guessWord, random);
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000878:	4618      	mov	r0, r3
 800087a:	f004 fb84 	bl	8004f86 <strcpy>
			sprintf(string_to_send, "%s\r\n", (char*)guessWord);
 800087e:	1d3a      	adds	r2, r7, #4
 8000880:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000884:	4950      	ldr	r1, [pc, #320]	; (80009c8 <main+0x318>)
 8000886:	4618      	mov	r0, r3
 8000888:	f004 fa72 	bl	8004d70 <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 800088c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000890:	4949      	ldr	r1, [pc, #292]	; (80009b8 <main+0x308>)
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f9ad 	bl	8000bf2 <SerialOutputString>

			while (!outcome){
 8000898:	e027      	b.n	80008ea <main+0x23a>
				BSP_GYRO_GetXYZ(&gyro_values[0]);
 800089a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 fbea 	bl	8004078 <BSP_GYRO_GetXYZ>
				if (gyro_values[1]/20000 >= 25){
 80008a4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80008a8:	eddf 6a48 	vldr	s13, [pc, #288]	; 80009cc <main+0x31c>
 80008ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008b0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80008b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008bc:	db02      	blt.n	80008c4 <main+0x214>
					outcome = 1;
 80008be:	2301      	movs	r3, #1
 80008c0:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
				}
				if (gyro_values[1]/20000 <= -25){
 80008c4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80008c8:	eddf 6a40 	vldr	s13, [pc, #256]	; 80009cc <main+0x31c>
 80008cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008d0:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
 80008d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008dc:	d802      	bhi.n	80008e4 <main+0x234>
					outcome = 2;
 80008de:	2302      	movs	r3, #2
 80008e0:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
				}
				HAL_Delay(100);
 80008e4:	2064      	movs	r0, #100	; 0x64
 80008e6:	f000 fd29 	bl	800133c <HAL_Delay>
			while (!outcome){
 80008ea:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0d3      	beq.n	800089a <main+0x1ea>
			}

			if (outcome == 1){
 80008f2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d113      	bne.n	8000922 <main+0x272>
				P2score++;
 80008fa:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80008fe:	3301      	adds	r3, #1
 8000900:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
				sprintf(string_to_send, "Correct!\r\n");
 8000904:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000908:	4931      	ldr	r1, [pc, #196]	; (80009d0 <main+0x320>)
 800090a:	4618      	mov	r0, r3
 800090c:	f004 fa30 	bl	8004d70 <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 8000910:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000914:	4928      	ldr	r1, [pc, #160]	; (80009b8 <main+0x308>)
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f96b 	bl	8000bf2 <SerialOutputString>
				flash_leds();
 800091c:	f7ff fe96 	bl	800064c <flash_leds>
 8000920:	e00f      	b.n	8000942 <main+0x292>
			}
			else if (outcome == 2){
 8000922:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000926:	2b02      	cmp	r3, #2
 8000928:	d10b      	bne.n	8000942 <main+0x292>
				sprintf(string_to_send, "Pass!\r\n");
 800092a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800092e:	4929      	ldr	r1, [pc, #164]	; (80009d4 <main+0x324>)
 8000930:	4618      	mov	r0, r3
 8000932:	f004 fa1d 	bl	8004d70 <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 8000936:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800093a:	491f      	ldr	r1, [pc, #124]	; (80009b8 <main+0x308>)
 800093c:	4618      	mov	r0, r3
 800093e:	f000 f958 	bl	8000bf2 <SerialOutputString>
			}
			HAL_Delay(750);
 8000942:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000946:	f000 fcf9 	bl	800133c <HAL_Delay>
		while (timesUp == 0) {
 800094a:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <main+0x328>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d08a      	beq.n	8000868 <main+0x1b8>
		}
		sprintf(string_to_send, "Time's Up! Player 2's score is %d!\r\n", P2score);
 8000952:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 8000956:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800095a:	4922      	ldr	r1, [pc, #136]	; (80009e4 <main+0x334>)
 800095c:	4618      	mov	r0, r3
 800095e:	f004 fa07 	bl	8004d70 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000962:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000966:	4914      	ldr	r1, [pc, #80]	; (80009b8 <main+0x308>)
 8000968:	4618      	mov	r0, r3
 800096a:	f000 f942 	bl	8000bf2 <SerialOutputString>
		set_timesUp();
 800096e:	f7ff fe8b 	bl	8000688 <set_timesUp>


		// Winner determined
		if (P1score > P2score){
 8000972:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8000976:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800097a:	429a      	cmp	r2, r3
 800097c:	d903      	bls.n	8000986 <main+0x2d6>
			// player 1 will play wavelength
			winner = 1;
 800097e:	2301      	movs	r3, #1
 8000980:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8000984:	e008      	b.n	8000998 <main+0x2e8>
		}
		else if (P2score > P1score){
 8000986:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 800098a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800098e:	429a      	cmp	r2, r3
 8000990:	d902      	bls.n	8000998 <main+0x2e8>
			// player 2 will play wavelength
			winner = 2;
 8000992:	2302      	movs	r3, #2
 8000994:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		}

		// Multiplier
		multiplier = 2;
 8000998:	2302      	movs	r3, #2
 800099a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

		// Wavelength multiplier
		if (winner == 1){
 800099e:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d120      	bne.n	80009e8 <main+0x338>
			P1score = P1score * multiplier;
 80009a6:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80009aa:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80009ae:	fb12 f303 	smulbb	r3, r2, r3
 80009b2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80009b6:	e023      	b.n	8000a00 <main+0x350>
 80009b8:	20000000 	.word	0x20000000
 80009bc:	08006678 	.word	0x08006678
 80009c0:	08000689 	.word	0x08000689
 80009c4:	08006524 	.word	0x08006524
 80009c8:	08006548 	.word	0x08006548
 80009cc:	469c4000 	.word	0x469c4000
 80009d0:	08006550 	.word	0x08006550
 80009d4:	0800655c 	.word	0x0800655c
 80009d8:	200004d4 	.word	0x200004d4
 80009dc:	08006564 	.word	0x08006564
 80009e0:	0800658c 	.word	0x0800658c
 80009e4:	080065b0 	.word	0x080065b0
		}
		else if (winner == 2){
 80009e8:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d107      	bne.n	8000a00 <main+0x350>
			P2score = P2score * multiplier;
 80009f0:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 80009f4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80009f8:	fb12 f303 	smulbb	r3, r2, r3
 80009fc:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
		}

		// Update leaderboard
		P1leaderboard = P1leaderboard + P1score;
 8000a00:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8000a04:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8000a08:	4413      	add	r3, r2
 8000a0a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
		P2leaderboard = P2leaderboard + P2score;
 8000a0e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8000a12:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8000a16:	4413      	add	r3, r2
 8000a18:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		sprintf(string_to_send, "Player 1 your total score is %d!\r\n", P1leaderboard);
 8000a1c:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8000a20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a24:	4927      	ldr	r1, [pc, #156]	; (8000ac4 <main+0x414>)
 8000a26:	4618      	mov	r0, r3
 8000a28:	f004 f9a2 	bl	8004d70 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000a2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a30:	4925      	ldr	r1, [pc, #148]	; (8000ac8 <main+0x418>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f8dd 	bl	8000bf2 <SerialOutputString>
		sprintf(string_to_send, "Player 2 your total score is %d!\r\n", P2leaderboard);
 8000a38:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8000a3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a40:	4922      	ldr	r1, [pc, #136]	; (8000acc <main+0x41c>)
 8000a42:	4618      	mov	r0, r3
 8000a44:	f004 f994 	bl	8004d70 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000a48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a4c:	491e      	ldr	r1, [pc, #120]	; (8000ac8 <main+0x418>)
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f8cf 	bl	8000bf2 <SerialOutputString>

		rounds++;
 8000a54:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000a58:	3301      	adds	r3, #1
 8000a5a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	while (rounds <= 3){
 8000a5e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	f67f ae4f 	bls.w	8000706 <main+0x56>
	}

	// Final winner announced
	if (P1leaderboard > P2leaderboard){
 8000a68:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8000a6c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d90e      	bls.n	8000a92 <main+0x3e2>
		sprintf(string_to_send, "Player 1 Wins with a final score of %d!\r\n", P1leaderboard);
 8000a74:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8000a78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a7c:	4914      	ldr	r1, [pc, #80]	; (8000ad0 <main+0x420>)
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f004 f976 	bl	8004d70 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000a84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a88:	490f      	ldr	r1, [pc, #60]	; (8000ac8 <main+0x418>)
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f8b1 	bl	8000bf2 <SerialOutputString>
 8000a90:	e013      	b.n	8000aba <main+0x40a>
	}
	else if (P2leaderboard > P1leaderboard){
 8000a92:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8000a96:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d90d      	bls.n	8000aba <main+0x40a>
		sprintf(string_to_send, "Player 2 Wins with a final score of %d!\r\n", P2leaderboard);
 8000a9e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8000aa2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aa6:	490b      	ldr	r1, [pc, #44]	; (8000ad4 <main+0x424>)
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f004 f961 	bl	8004d70 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000aae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ab2:	4905      	ldr	r1, [pc, #20]	; (8000ac8 <main+0x418>)
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 f89c 	bl	8000bf2 <SerialOutputString>
 8000aba:	2300      	movs	r3, #0
	}
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3788      	adds	r7, #136	; 0x88
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ac4:	080065d8 	.word	0x080065d8
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	080065fc 	.word	0x080065fc
 8000ad0:	08006620 	.word	0x08006620
 8000ad4:	0800664c 	.word	0x0800664c

08000ad8 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000ad8:	b480      	push	{r7}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	63da      	str	r2, [r3, #60]	; 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000aea:	4b34      	ldr	r3, [pc, #208]	; (8000bbc <SerialInitialise+0xe4>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	4a33      	ldr	r2, [pc, #204]	; (8000bbc <SerialInitialise+0xe4>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <SerialInitialise+0xe4>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	4a30      	ldr	r2, [pc, #192]	; (8000bbc <SerialInitialise+0xe4>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	6a1b      	ldr	r3, [r3, #32]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d106      	bne.n	8000b18 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000b0a:	4b2c      	ldr	r3, [pc, #176]	; (8000bbc <SerialInitialise+0xe4>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	4a2b      	ldr	r2, [pc, #172]	; (8000bbc <SerialInitialise+0xe4>)
 8000b10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b14:	6153      	str	r3, [r2, #20]
		break;
 8000b16:	e000      	b.n	8000b1a <SerialInitialise+0x42>
	default:
		break;
 8000b18:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000b22:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b28:	68ba      	ldr	r2, [r7, #8]
 8000b2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000b2c:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	69d9      	ldr	r1, [r3, #28]
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d821      	bhi.n	8000b9e <SerialInitialise+0xc6>
 8000b5a:	a201      	add	r2, pc, #4	; (adr r2, 8000b60 <SerialInitialise+0x88>)
 8000b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b60:	08000b75 	.word	0x08000b75
 8000b64:	08000b7d 	.word	0x08000b7d
 8000b68:	08000b85 	.word	0x08000b85
 8000b6c:	08000b8d 	.word	0x08000b8d
 8000b70:	08000b95 	.word	0x08000b95
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	2246      	movs	r2, #70	; 0x46
 8000b78:	801a      	strh	r2, [r3, #0]
		break;
 8000b7a:	e010      	b.n	8000b9e <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	2246      	movs	r2, #70	; 0x46
 8000b80:	801a      	strh	r2, [r3, #0]
		break;
 8000b82:	e00c      	b.n	8000b9e <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	2246      	movs	r2, #70	; 0x46
 8000b88:	801a      	strh	r2, [r3, #0]
		break;
 8000b8a:	e008      	b.n	8000b9e <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	2246      	movs	r2, #70	; 0x46
 8000b90:	801a      	strh	r2, [r3, #0]
		break;
 8000b92:	e004      	b.n	8000b9e <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000b9a:	801a      	strh	r2, [r3, #0]
		break;
 8000b9c:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f042 020d 	orr.w	r2, r2, #13
 8000bac:	601a      	str	r2, [r3, #0]
}
 8000bae:	bf00      	nop
 8000bb0:	371c      	adds	r7, #28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8000bcc:	bf00      	nop
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d0f8      	beq.n	8000bce <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	79fa      	ldrb	r2, [r7, #7]
 8000be2:	b292      	uxth	r2, r2
 8000be4:	801a      	strh	r2, [r3, #0]
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b084      	sub	sp, #16
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8000c00:	e00b      	b.n	8000c1a <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	6839      	ldr	r1, [r7, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ffd9 	bl	8000bc0 <SerialOutputChar>
		counter++;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	3301      	adds	r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
		pt++;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3301      	adds	r3, #1
 8000c18:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1ef      	bne.n	8000c02 <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	4798      	blx	r3
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_MspInit+0x44>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <HAL_MspInit+0x44>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6193      	str	r3, [r2, #24]
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_MspInit+0x44>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_MspInit+0x44>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_MspInit+0x44>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c64:	61d3      	str	r3, [r2, #28]
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_MspInit+0x44>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c72:	2007      	movs	r0, #7
 8000c74:	f000 fc38 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40021000 	.word	0x40021000

08000c84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <HAL_I2C_MspInit+0x7c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d127      	bne.n	8000cf6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <HAL_I2C_MspInit+0x80>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	4a16      	ldr	r2, [pc, #88]	; (8000d04 <HAL_I2C_MspInit+0x80>)
 8000cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb0:	6153      	str	r3, [r2, #20]
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <HAL_I2C_MspInit+0x80>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000cbe:	23c0      	movs	r3, #192	; 0xc0
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc2:	2312      	movs	r3, #18
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <HAL_I2C_MspInit+0x84>)
 8000cda:	f000 fc39 	bl	8001550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_I2C_MspInit+0x80>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_I2C_MspInit+0x80>)
 8000ce4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ce8:	61d3      	str	r3, [r2, #28]
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_I2C_MspInit+0x80>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3728      	adds	r7, #40	; 0x28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40005400 	.word	0x40005400
 8000d04:	40021000 	.word	0x40021000
 8000d08:	48000400 	.word	0x48000400

08000d0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <HAL_SPI_MspInit+0x7c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d128      	bne.n	8000d80 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <HAL_SPI_MspInit+0x80>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a16      	ldr	r2, [pc, #88]	; (8000d8c <HAL_SPI_MspInit+0x80>)
 8000d34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <HAL_SPI_MspInit+0x80>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_SPI_MspInit+0x80>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <HAL_SPI_MspInit+0x80>)
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	6153      	str	r3, [r2, #20]
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_SPI_MspInit+0x80>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000d5e:	23e0      	movs	r3, #224	; 0xe0
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7c:	f000 fbe8 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	; 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40013000 	.word	0x40013000
 8000d8c:	40021000 	.word	0x40021000

08000d90 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_SPI_MspDeInit+0x30>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10a      	bne.n	8000db8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_SPI_MspDeInit+0x34>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_SPI_MspDeInit+0x34>)
 8000da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dac:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 8000dae:	21e0      	movs	r1, #224	; 0xe0
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f000 fd46 	bl	8001844 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40013000 	.word	0x40013000
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a18      	ldr	r2, [pc, #96]	; (8000e48 <HAL_PCD_MspInit+0x80>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d129      	bne.n	8000e3e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_PCD_MspInit+0x84>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <HAL_PCD_MspInit+0x84>)
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	6153      	str	r3, [r2, #20]
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_PCD_MspInit+0x84>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000e02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000e14:	230e      	movs	r3, #14
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e22:	f000 fb95 	bl	8001550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <HAL_PCD_MspInit+0x84>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_PCD_MspInit+0x84>)
 8000e2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e30:	61d3      	str	r3, [r2, #28]
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_PCD_MspInit+0x84>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40005c00 	.word	0x40005c00
 8000e4c:	40021000 	.word	0x40021000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9c:	f000 fa2e 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
	return 1;
 8000ea8:	2301      	movs	r3, #1
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <_kill>:

int _kill(int pid, int sig)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ebe:	f004 f835 	bl	8004f2c <__errno>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2216      	movs	r2, #22
 8000ec6:	601a      	str	r2, [r3, #0]
	return -1;
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <_exit>:

void _exit (int status)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ffe7 	bl	8000eb4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ee6:	e7fe      	b.n	8000ee6 <_exit+0x12>

08000ee8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e00a      	b.n	8000f10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000efa:	f3af 8000 	nop.w
 8000efe:	4601      	mov	r1, r0
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	1c5a      	adds	r2, r3, #1
 8000f04:	60ba      	str	r2, [r7, #8]
 8000f06:	b2ca      	uxtb	r2, r1
 8000f08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	dbf0      	blt.n	8000efa <_read+0x12>
	}

return len;
 8000f18:	687b      	ldr	r3, [r7, #4]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	e009      	b.n	8000f48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	60ba      	str	r2, [r7, #8]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	dbf1      	blt.n	8000f34 <_write+0x12>
	}
	return len;
 8000f50:	687b      	ldr	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_close>:

int _close(int file)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
	return -1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f82:	605a      	str	r2, [r3, #4]
	return 0;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_isatty>:

int _isatty(int file)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
	return 1;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
	return 0;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f003 ff9a 	bl	8004f2c <__errno>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_sbrk+0x64>)
 8001014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000a000 	.word	0x2000a000
 8001024:	00000400 	.word	0x00000400
 8001028:	200004d8 	.word	0x200004d8
 800102c:	20000698 	.word	0x20000698

08001030 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <SystemInit+0x20>)
 8001036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <SystemInit+0x20>)
 800103c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0b      	blt.n	800107e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4907      	ldr	r1, [pc, #28]	; (800108c <__NVIC_EnableIRQ+0x38>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e100 	.word	0xe000e100

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <enable_interrupt>:
#define HAL_MULTIPLY_FACTOR 6

// pointer to callback function for oneshot timer
void (*oneshot_callback_function)();

void enable_interrupt(IRQn_Type IRQn, uint32_t priority) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
}
 80010f2:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Tell the NVIC module that TIM2 interrupts should be handled
	NVIC_SetPriority(IRQn, priority);  // Set Priority
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	6839      	ldr	r1, [r7, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ffc8 	bl	8001090 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ffa5 	bl	8001054 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800110a:	b662      	cpsie	i
}
 800110c:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
// run the oneshot timer interrupt handler
	if (TIM2->SR & TIM_SR_UIF) {
 800111c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00e      	beq.n	8001148 <TIM2_IRQHandler+0x30>
		// clear oneshot timer interrupt
		TIM2->SR &= ~TIM_SR_UIF;
 800112a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001134:	f023 0301 	bic.w	r3, r3, #1
 8001138:	6113      	str	r3, [r2, #16]

		if (oneshot_callback_function != NULL)
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <TIM2_IRQHandler+0x34>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <TIM2_IRQHandler+0x30>
		{
			oneshot_callback_function();
 8001142:	4b02      	ldr	r3, [pc, #8]	; (800114c <TIM2_IRQHandler+0x34>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4798      	blx	r3
		}

	}

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200004dc 	.word	0x200004dc

08001150 <trigger_oneshot>:

void trigger_oneshot(uint16_t delay, void (*callback_function)()) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	80fb      	strh	r3, [r7, #6]

	// reset CR1
	TIM2->CR1 = 0x00;
 800115c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

	// set the prescaler to 999, slower than the default clock 1000 times
	TIM2->PSC = PRESCALER; // 1 millisecond or 1 millisecond per count
 8001164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001168:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800116c:	629a      	str	r2, [r3, #40]	; 0x28

	// set the auto reload according to the prescaler
	TIM2->ARR = 0x01; // 8 - 1 millisecond
 800116e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001172:	2201      	movs	r2, #1
 8001174:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->ARR = TIM2->ARR * delay * HAL_MULTIPLY_FACTOR; // delay in millisecond
 8001176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800117a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117c:	88fa      	ldrh	r2, [r7, #6]
 800117e:	fb03 f202 	mul.w	r2, r3, r2
 8001182:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	62cb      	str	r3, [r1, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // enable auto reload buffering
 8001190:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800119e:	6013      	str	r3, [r2, #0]

	// set to only counter overflow raises interrupt flag
	TIM2->CR1 |= TIM_CR1_URS;
 80011a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011aa:	f043 0304 	orr.w	r3, r3, #4
 80011ae:	6013      	str	r3, [r2, #0]

	// set to one-pulse mode
	TIM2->CR1 |= TIM_CR1_OPM;
 80011b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	6013      	str	r3, [r2, #0]

	// re-initialise the counter and generates an update of the registers
	TIM2->EGR |= TIM_EGR_UG;
 80011c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6153      	str	r3, [r2, #20]

	// enable the update interrupt
	TIM2->DIER |= TIM_DIER_UIE;
 80011d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	60d3      	str	r3, [r2, #12]

	// clear the interrupt
	TIM2->SR &= ~TIM_SR_UIF;
 80011e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ea:	f023 0301 	bic.w	r3, r3, #1
 80011ee:	6113      	str	r3, [r2, #16]

	oneshot_callback_function = callback_function;
 80011f0:	4a09      	ldr	r2, [pc, #36]	; (8001218 <trigger_oneshot+0xc8>)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	6013      	str	r3, [r2, #0]

	enable_interrupt(TIM2_IRQn, 0);
 80011f6:	2100      	movs	r1, #0
 80011f8:	201c      	movs	r0, #28
 80011fa:	f7ff ff73 	bl	80010e4 <enable_interrupt>

	// enable counter
	TIM2->CR1 |= TIM_CR1_CEN;
 80011fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6013      	str	r3, [r2, #0]

}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200004dc 	.word	0x200004dc

0800121c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800121c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001254 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001220:	f7ff ff06 	bl	8001030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <LoopForever+0x6>)
  ldr r1, =_edata
 8001226:	490d      	ldr	r1, [pc, #52]	; (800125c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <LoopForever+0xe>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800122c:	e002      	b.n	8001234 <LoopCopyDataInit>

0800122e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001232:	3304      	adds	r3, #4

08001234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001238:	d3f9      	bcc.n	800122e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <LoopForever+0x12>)
  ldr r4, =_ebss
 800123c:	4c0a      	ldr	r4, [pc, #40]	; (8001268 <LoopForever+0x16>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001240:	e001      	b.n	8001246 <LoopFillZerobss>

08001242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001244:	3204      	adds	r2, #4

08001246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001248:	d3fb      	bcc.n	8001242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800124a:	f003 fe75 	bl	8004f38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800124e:	f7ff fa2f 	bl	80006b0 <main>

08001252 <LoopForever>:

LoopForever:
    b LoopForever
 8001252:	e7fe      	b.n	8001252 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001254:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800125c:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8001260:	080067a8 	.word	0x080067a8
  ldr r2, =_sbss
 8001264:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8001268:	20000698 	.word	0x20000698

0800126c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC1_2_IRQHandler>
	...

08001270 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_Init+0x28>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a07      	ldr	r2, [pc, #28]	; (8001298 <HAL_Init+0x28>)
 800127a:	f043 0310 	orr.w	r3, r3, #16
 800127e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 f931 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001286:	2000      	movs	r0, #0
 8001288:	f000 f808 	bl	800129c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800128c:	f7ff fcd6 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40022000 	.word	0x40022000

0800129c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_InitTick+0x54>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_InitTick+0x58>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f93b 	bl	8001536 <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00e      	b.n	80012e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d80a      	bhi.n	80012e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f000 f911 	bl	80014fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_InitTick+0x5c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000040 	.word	0x20000040
 80012f4:	20000048 	.word	0x20000048
 80012f8:	20000044 	.word	0x20000044

080012fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000048 	.word	0x20000048
 8001320:	200004e0 	.word	0x200004e0

08001324 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;  
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	200004e0 	.word	0x200004e0

0800133c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001344:	f7ff ffee 	bl	8001324 <HAL_GetTick>
 8001348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001354:	d005      	beq.n	8001362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_Delay+0x44>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001362:	bf00      	nop
 8001364:	f7ff ffde 	bl	8001324 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8f7      	bhi.n	8001364 <HAL_Delay+0x28>
  {
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000048 	.word	0x20000048

08001384 <__NVIC_SetPriorityGrouping>:
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b6:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	60d3      	str	r3, [r2, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_GetPriorityGrouping>:
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_SetPriority>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	; (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	; (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f7ff ff8e 	bl	80013e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff47 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff5c 	bl	80013cc <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff8e 	bl	800143c <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5d 	bl	80013e8 <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffb0 	bl	80014a4 <SysTick_Config>
 8001544:	4603      	mov	r3, r0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155e:	e154      	b.n	800180a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2101      	movs	r1, #1
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	fa01 f303 	lsl.w	r3, r1, r3
 800156c:	4013      	ands	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 8146 	beq.w	8001804 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	2b01      	cmp	r3, #1
 8001582:	d005      	beq.n	8001590 <HAL_GPIO_Init+0x40>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d130      	bne.n	80015f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c6:	2201      	movs	r2, #1
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	091b      	lsrs	r3, r3, #4
 80015dc:	f003 0201 	and.w	r2, r3, #1
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d017      	beq.n	800162e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	2203      	movs	r2, #3
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d123      	bne.n	8001682 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	08da      	lsrs	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3208      	adds	r2, #8
 8001642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	220f      	movs	r2, #15
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	08da      	lsrs	r2, r3, #3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3208      	adds	r2, #8
 800167c:	6939      	ldr	r1, [r7, #16]
 800167e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	2203      	movs	r2, #3
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0203 	and.w	r2, r3, #3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 80a0 	beq.w	8001804 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c4:	4b58      	ldr	r3, [pc, #352]	; (8001828 <HAL_GPIO_Init+0x2d8>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a57      	ldr	r2, [pc, #348]	; (8001828 <HAL_GPIO_Init+0x2d8>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b55      	ldr	r3, [pc, #340]	; (8001828 <HAL_GPIO_Init+0x2d8>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016dc:	4a53      	ldr	r2, [pc, #332]	; (800182c <HAL_GPIO_Init+0x2dc>)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	220f      	movs	r2, #15
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001706:	d019      	beq.n	800173c <HAL_GPIO_Init+0x1ec>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a49      	ldr	r2, [pc, #292]	; (8001830 <HAL_GPIO_Init+0x2e0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d013      	beq.n	8001738 <HAL_GPIO_Init+0x1e8>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a48      	ldr	r2, [pc, #288]	; (8001834 <HAL_GPIO_Init+0x2e4>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d00d      	beq.n	8001734 <HAL_GPIO_Init+0x1e4>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a47      	ldr	r2, [pc, #284]	; (8001838 <HAL_GPIO_Init+0x2e8>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d007      	beq.n	8001730 <HAL_GPIO_Init+0x1e0>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a46      	ldr	r2, [pc, #280]	; (800183c <HAL_GPIO_Init+0x2ec>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d101      	bne.n	800172c <HAL_GPIO_Init+0x1dc>
 8001728:	2304      	movs	r3, #4
 800172a:	e008      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 800172c:	2305      	movs	r3, #5
 800172e:	e006      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 8001730:	2303      	movs	r3, #3
 8001732:	e004      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 8001734:	2302      	movs	r3, #2
 8001736:	e002      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 800173c:	2300      	movs	r3, #0
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	f002 0203 	and.w	r2, r2, #3
 8001744:	0092      	lsls	r2, r2, #2
 8001746:	4093      	lsls	r3, r2
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800174e:	4937      	ldr	r1, [pc, #220]	; (800182c <HAL_GPIO_Init+0x2dc>)
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	089b      	lsrs	r3, r3, #2
 8001754:	3302      	adds	r3, #2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800175c:	4b38      	ldr	r3, [pc, #224]	; (8001840 <HAL_GPIO_Init+0x2f0>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	43db      	mvns	r3, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001780:	4a2f      	ldr	r2, [pc, #188]	; (8001840 <HAL_GPIO_Init+0x2f0>)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001786:	4b2e      	ldr	r3, [pc, #184]	; (8001840 <HAL_GPIO_Init+0x2f0>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017aa:	4a25      	ldr	r2, [pc, #148]	; (8001840 <HAL_GPIO_Init+0x2f0>)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017b0:	4b23      	ldr	r3, [pc, #140]	; (8001840 <HAL_GPIO_Init+0x2f0>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017d4:	4a1a      	ldr	r2, [pc, #104]	; (8001840 <HAL_GPIO_Init+0x2f0>)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_GPIO_Init+0x2f0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017fe:	4a10      	ldr	r2, [pc, #64]	; (8001840 <HAL_GPIO_Init+0x2f0>)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	3301      	adds	r3, #1
 8001808:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	f47f aea3 	bne.w	8001560 <HAL_GPIO_Init+0x10>
  }
}
 800181a:	bf00      	nop
 800181c:	bf00      	nop
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	40021000 	.word	0x40021000
 800182c:	40010000 	.word	0x40010000
 8001830:	48000400 	.word	0x48000400
 8001834:	48000800 	.word	0x48000800
 8001838:	48000c00 	.word	0x48000c00
 800183c:	48001000 	.word	0x48001000
 8001840:	40010400 	.word	0x40010400

08001844 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001852:	e0b8      	b.n	80019c6 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001854:	2201      	movs	r2, #1
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80ab 	beq.w	80019c0 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800186a:	4a5e      	ldr	r2, [pc, #376]	; (80019e4 <HAL_GPIO_DeInit+0x1a0>)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	3302      	adds	r3, #2
 8001872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001876:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	220f      	movs	r2, #15
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4013      	ands	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001892:	d019      	beq.n	80018c8 <HAL_GPIO_DeInit+0x84>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a54      	ldr	r2, [pc, #336]	; (80019e8 <HAL_GPIO_DeInit+0x1a4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d013      	beq.n	80018c4 <HAL_GPIO_DeInit+0x80>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a53      	ldr	r2, [pc, #332]	; (80019ec <HAL_GPIO_DeInit+0x1a8>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d00d      	beq.n	80018c0 <HAL_GPIO_DeInit+0x7c>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a52      	ldr	r2, [pc, #328]	; (80019f0 <HAL_GPIO_DeInit+0x1ac>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d007      	beq.n	80018bc <HAL_GPIO_DeInit+0x78>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a51      	ldr	r2, [pc, #324]	; (80019f4 <HAL_GPIO_DeInit+0x1b0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d101      	bne.n	80018b8 <HAL_GPIO_DeInit+0x74>
 80018b4:	2304      	movs	r3, #4
 80018b6:	e008      	b.n	80018ca <HAL_GPIO_DeInit+0x86>
 80018b8:	2305      	movs	r3, #5
 80018ba:	e006      	b.n	80018ca <HAL_GPIO_DeInit+0x86>
 80018bc:	2303      	movs	r3, #3
 80018be:	e004      	b.n	80018ca <HAL_GPIO_DeInit+0x86>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e002      	b.n	80018ca <HAL_GPIO_DeInit+0x86>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <HAL_GPIO_DeInit+0x86>
 80018c8:	2300      	movs	r3, #0
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	f002 0203 	and.w	r2, r2, #3
 80018d0:	0092      	lsls	r2, r2, #2
 80018d2:	4093      	lsls	r3, r2
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d132      	bne.n	8001940 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80018da:	4b47      	ldr	r3, [pc, #284]	; (80019f8 <HAL_GPIO_DeInit+0x1b4>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <HAL_GPIO_DeInit+0x1b4>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80018e8:	4b43      	ldr	r3, [pc, #268]	; (80019f8 <HAL_GPIO_DeInit+0x1b4>)
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	4941      	ldr	r1, [pc, #260]	; (80019f8 <HAL_GPIO_DeInit+0x1b4>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80018f6:	4b40      	ldr	r3, [pc, #256]	; (80019f8 <HAL_GPIO_DeInit+0x1b4>)
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	493e      	ldr	r1, [pc, #248]	; (80019f8 <HAL_GPIO_DeInit+0x1b4>)
 8001900:	4013      	ands	r3, r2
 8001902:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001904:	4b3c      	ldr	r3, [pc, #240]	; (80019f8 <HAL_GPIO_DeInit+0x1b4>)
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	43db      	mvns	r3, r3
 800190c:	493a      	ldr	r1, [pc, #232]	; (80019f8 <HAL_GPIO_DeInit+0x1b4>)
 800190e:	4013      	ands	r3, r2
 8001910:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001922:	4a30      	ldr	r2, [pc, #192]	; (80019e4 <HAL_GPIO_DeInit+0x1a0>)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	43da      	mvns	r2, r3
 8001932:	482c      	ldr	r0, [pc, #176]	; (80019e4 <HAL_GPIO_DeInit+0x1a0>)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	400a      	ands	r2, r1
 800193a:	3302      	adds	r3, #2
 800193c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2103      	movs	r1, #3
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	401a      	ands	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	08da      	lsrs	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3208      	adds	r2, #8
 800195e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	08d2      	lsrs	r2, r2, #3
 8001976:	4019      	ands	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3208      	adds	r2, #8
 800197c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	2103      	movs	r1, #3
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	401a      	ands	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	2101      	movs	r1, #1
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	401a      	ands	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2103      	movs	r1, #3
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	401a      	ands	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	609a      	str	r2, [r3, #8]
    }

    position++;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa22 f303 	lsr.w	r3, r2, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f47f af40 	bne.w	8001854 <HAL_GPIO_DeInit+0x10>
  }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	371c      	adds	r7, #28
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40010000 	.word	0x40010000
 80019e8:	48000400 	.word	0x48000400
 80019ec:	48000800 	.word	0x48000800
 80019f0:	48000c00 	.word	0x48000c00
 80019f4:	48001000 	.word	0x48001000
 80019f8:	40010400 	.word	0x40010400

080019fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a0c:	787b      	ldrb	r3, [r7, #1]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a12:	887a      	ldrh	r2, [r7, #2]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a18:	e002      	b.n	8001a20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e081      	b.n	8001b42 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d106      	bne.n	8001a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff f916 	bl	8000c84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2224      	movs	r2, #36	; 0x24
 8001a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0201 	bic.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d107      	bne.n	8001aa6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	e006      	b.n	8001ab4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ab2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d104      	bne.n	8001ac6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ac4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ad8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ae8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69d9      	ldr	r1, [r3, #28]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1a      	ldr	r2, [r3, #32]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d138      	bne.n	8001bd2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e032      	b.n	8001bd4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2224      	movs	r2, #36	; 0x24
 8001b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0201 	bic.w	r2, r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b9c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6819      	ldr	r1, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0201 	orr.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bd2:	2302      	movs	r3, #2
  }
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b20      	cmp	r3, #32
 8001bf4:	d139      	bne.n	8001c6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e033      	b.n	8001c6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2224      	movs	r2, #36	; 0x24
 8001c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0201 	orr.w	r2, r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c6a:	2302      	movs	r3, #2
  }
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7a:	b08b      	sub	sp, #44	; 0x2c
 8001c7c:	af06      	add	r7, sp, #24
 8001c7e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e0c4      	b.n	8001e14 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d106      	bne.n	8001ca4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff f892 	bl	8000dc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f002 f8ef 	bl	8003e94 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
 8001cba:	e040      	b.n	8001d3e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	440b      	add	r3, r1
 8001ccc:	3301      	adds	r3, #1
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	3303      	adds	r3, #3
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	440b      	add	r3, r1
 8001d0a:	3338      	adds	r3, #56	; 0x38
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	333c      	adds	r3, #60	; 0x3c
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	440b      	add	r3, r1
 8001d32:	3340      	adds	r3, #64	; 0x40
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d3b9      	bcc.n	8001cbc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	e044      	b.n	8001dd8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	440b      	add	r3, r1
 8001d88:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d3b5      	bcc.n	8001d4e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	687e      	ldr	r6, [r7, #4]
 8001dea:	466d      	mov	r5, sp
 8001dec:	f106 0410 	add.w	r4, r6, #16
 8001df0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df4:	6823      	ldr	r3, [r4, #0]
 8001df6:	602b      	str	r3, [r5, #0]
 8001df8:	1d33      	adds	r3, r6, #4
 8001dfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dfc:	6838      	ldr	r0, [r7, #0]
 8001dfe:	f002 f864 	bl	8003eca <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e2c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d102      	bne.n	8001e42 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f001 b823 	b.w	8002e88 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 817d 	beq.w	8002152 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e58:	4bbc      	ldr	r3, [pc, #752]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d00c      	beq.n	8001e7e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e64:	4bb9      	ldr	r3, [pc, #740]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d15c      	bne.n	8001f2a <HAL_RCC_OscConfig+0x10e>
 8001e70:	4bb6      	ldr	r3, [pc, #728]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7c:	d155      	bne.n	8001f2a <HAL_RCC_OscConfig+0x10e>
 8001e7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e82:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e92:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	095b      	lsrs	r3, r3, #5
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d102      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x94>
 8001eaa:	4ba8      	ldr	r3, [pc, #672]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	e015      	b.n	8001edc <HAL_RCC_OscConfig+0xc0>
 8001eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eb4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ecc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001ed8:	4b9c      	ldr	r3, [pc, #624]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ee0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001ee4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001ee8:	fa92 f2a2 	rbit	r2, r2
 8001eec:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001ef0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001ef4:	fab2 f282 	clz	r2, r2
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f042 0220 	orr.w	r2, r2, #32
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	f002 021f 	and.w	r2, r2, #31
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 811f 	beq.w	8002150 <HAL_RCC_OscConfig+0x334>
 8001f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f040 8116 	bne.w	8002150 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	f000 bfaf 	b.w	8002e88 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x12e>
 8001f3c:	4b83      	ldr	r3, [pc, #524]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a82      	ldr	r2, [pc, #520]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	e036      	b.n	8001fb8 <HAL_RCC_OscConfig+0x19c>
 8001f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x158>
 8001f5a:	4b7c      	ldr	r3, [pc, #496]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a7b      	ldr	r2, [pc, #492]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b79      	ldr	r3, [pc, #484]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a78      	ldr	r2, [pc, #480]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e021      	b.n	8001fb8 <HAL_RCC_OscConfig+0x19c>
 8001f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x184>
 8001f86:	4b71      	ldr	r3, [pc, #452]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a70      	ldr	r2, [pc, #448]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b6e      	ldr	r3, [pc, #440]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a6d      	ldr	r2, [pc, #436]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0x19c>
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a69      	ldr	r2, [pc, #420]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b67      	ldr	r3, [pc, #412]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a66      	ldr	r2, [pc, #408]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fb8:	4b64      	ldr	r3, [pc, #400]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	f023 020f 	bic.w	r2, r3, #15
 8001fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	495f      	ldr	r1, [pc, #380]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d059      	beq.n	8002096 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7ff f99f 	bl	8001324 <HAL_GetTick>
 8001fe6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	e00a      	b.n	8002002 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fec:	f7ff f99a 	bl	8001324 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b64      	cmp	r3, #100	; 0x64
 8001ffa:	d902      	bls.n	8002002 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	f000 bf43 	b.w	8002e88 <HAL_RCC_OscConfig+0x106c>
 8002002:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002006:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002016:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d102      	bne.n	8002034 <HAL_RCC_OscConfig+0x218>
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	e015      	b.n	8002060 <HAL_RCC_OscConfig+0x244>
 8002034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002038:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800204c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002050:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800205c:	4b3b      	ldr	r3, [pc, #236]	; (800214c <HAL_RCC_OscConfig+0x330>)
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002064:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002068:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800206c:	fa92 f2a2 	rbit	r2, r2
 8002070:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002074:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002078:	fab2 f282 	clz	r2, r2
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	f042 0220 	orr.w	r2, r2, #32
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	f002 021f 	and.w	r2, r2, #31
 8002088:	2101      	movs	r1, #1
 800208a:	fa01 f202 	lsl.w	r2, r1, r2
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ab      	beq.n	8001fec <HAL_RCC_OscConfig+0x1d0>
 8002094:	e05d      	b.n	8002152 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7ff f945 	bl	8001324 <HAL_GetTick>
 800209a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a0:	f7ff f940 	bl	8001324 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b64      	cmp	r3, #100	; 0x64
 80020ae:	d902      	bls.n	80020b6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	f000 bee9 	b.w	8002e88 <HAL_RCC_OscConfig+0x106c>
 80020b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ba:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80020ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	095b      	lsrs	r3, r3, #5
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d102      	bne.n	80020e8 <HAL_RCC_OscConfig+0x2cc>
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <HAL_RCC_OscConfig+0x330>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	e015      	b.n	8002114 <HAL_RCC_OscConfig+0x2f8>
 80020e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ec:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80020fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002100:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002104:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002110:	4b0e      	ldr	r3, [pc, #56]	; (800214c <HAL_RCC_OscConfig+0x330>)
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002118:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800211c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002120:	fa92 f2a2 	rbit	r2, r2
 8002124:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002128:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800212c:	fab2 f282 	clz	r2, r2
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	f042 0220 	orr.w	r2, r2, #32
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	f002 021f 	and.w	r2, r2, #31
 800213c:	2101      	movs	r1, #1
 800213e:	fa01 f202 	lsl.w	r2, r1, r2
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1ab      	bne.n	80020a0 <HAL_RCC_OscConfig+0x284>
 8002148:	e003      	b.n	8002152 <HAL_RCC_OscConfig+0x336>
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002156:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 817d 	beq.w	8002462 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002168:	4ba6      	ldr	r3, [pc, #664]	; (8002404 <HAL_RCC_OscConfig+0x5e8>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002174:	4ba3      	ldr	r3, [pc, #652]	; (8002404 <HAL_RCC_OscConfig+0x5e8>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	d172      	bne.n	8002266 <HAL_RCC_OscConfig+0x44a>
 8002180:	4ba0      	ldr	r3, [pc, #640]	; (8002404 <HAL_RCC_OscConfig+0x5e8>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d16c      	bne.n	8002266 <HAL_RCC_OscConfig+0x44a>
 800218c:	2302      	movs	r3, #2
 800218e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800219e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d102      	bne.n	80021bc <HAL_RCC_OscConfig+0x3a0>
 80021b6:	4b93      	ldr	r3, [pc, #588]	; (8002404 <HAL_RCC_OscConfig+0x5e8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	e013      	b.n	80021e4 <HAL_RCC_OscConfig+0x3c8>
 80021bc:	2302      	movs	r3, #2
 80021be:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80021ce:	2302      	movs	r3, #2
 80021d0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80021d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80021e0:	4b88      	ldr	r3, [pc, #544]	; (8002404 <HAL_RCC_OscConfig+0x5e8>)
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	2202      	movs	r2, #2
 80021e6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80021ea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80021ee:	fa92 f2a2 	rbit	r2, r2
 80021f2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80021f6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80021fa:	fab2 f282 	clz	r2, r2
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	f042 0220 	orr.w	r2, r2, #32
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	f002 021f 	and.w	r2, r2, #31
 800220a:	2101      	movs	r1, #1
 800220c:	fa01 f202 	lsl.w	r2, r1, r2
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_RCC_OscConfig+0x410>
 8002216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d002      	beq.n	800222c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	f000 be2e 	b.w	8002e88 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222c:	4b75      	ldr	r3, [pc, #468]	; (8002404 <HAL_RCC_OscConfig+0x5e8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002238:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	21f8      	movs	r1, #248	; 0xf8
 8002242:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800224a:	fa91 f1a1 	rbit	r1, r1
 800224e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002252:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002256:	fab1 f181 	clz	r1, r1
 800225a:	b2c9      	uxtb	r1, r1
 800225c:	408b      	lsls	r3, r1
 800225e:	4969      	ldr	r1, [pc, #420]	; (8002404 <HAL_RCC_OscConfig+0x5e8>)
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002264:	e0fd      	b.n	8002462 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8088 	beq.w	8002388 <HAL_RCC_OscConfig+0x56c>
 8002278:	2301      	movs	r3, #1
 800227a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800228a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002298:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	461a      	mov	r2, r3
 80022a0:	2301      	movs	r3, #1
 80022a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff f83e 	bl	8001324 <HAL_GetTick>
 80022a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ae:	f7ff f839 	bl	8001324 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d902      	bls.n	80022c4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	f000 bde2 	b.w	8002e88 <HAL_RCC_OscConfig+0x106c>
 80022c4:	2302      	movs	r3, #2
 80022c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80022d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022da:	fab3 f383 	clz	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d102      	bne.n	80022f4 <HAL_RCC_OscConfig+0x4d8>
 80022ee:	4b45      	ldr	r3, [pc, #276]	; (8002404 <HAL_RCC_OscConfig+0x5e8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	e013      	b.n	800231c <HAL_RCC_OscConfig+0x500>
 80022f4:	2302      	movs	r3, #2
 80022f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002306:	2302      	movs	r3, #2
 8002308:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800230c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002318:	4b3a      	ldr	r3, [pc, #232]	; (8002404 <HAL_RCC_OscConfig+0x5e8>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	2202      	movs	r2, #2
 800231e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002322:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002326:	fa92 f2a2 	rbit	r2, r2
 800232a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800232e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002332:	fab2 f282 	clz	r2, r2
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	f042 0220 	orr.w	r2, r2, #32
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	f002 021f 	and.w	r2, r2, #31
 8002342:	2101      	movs	r1, #1
 8002344:	fa01 f202 	lsl.w	r2, r1, r2
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0af      	beq.n	80022ae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234e:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <HAL_RCC_OscConfig+0x5e8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	21f8      	movs	r1, #248	; 0xf8
 8002364:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800236c:	fa91 f1a1 	rbit	r1, r1
 8002370:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002374:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002378:	fab1 f181 	clz	r1, r1
 800237c:	b2c9      	uxtb	r1, r1
 800237e:	408b      	lsls	r3, r1
 8002380:	4920      	ldr	r1, [pc, #128]	; (8002404 <HAL_RCC_OscConfig+0x5e8>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
 8002386:	e06c      	b.n	8002462 <HAL_RCC_OscConfig+0x646>
 8002388:	2301      	movs	r3, #1
 800238a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800239a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	461a      	mov	r2, r3
 80023b0:	2300      	movs	r3, #0
 80023b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe ffb6 	bl	8001324 <HAL_GetTick>
 80023b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023bc:	e00a      	b.n	80023d4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023be:	f7fe ffb1 	bl	8001324 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d902      	bls.n	80023d4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	f000 bd5a 	b.w	8002e88 <HAL_RCC_OscConfig+0x106c>
 80023d4:	2302      	movs	r3, #2
 80023d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80023e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	095b      	lsrs	r3, r3, #5
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d104      	bne.n	8002408 <HAL_RCC_OscConfig+0x5ec>
 80023fe:	4b01      	ldr	r3, [pc, #4]	; (8002404 <HAL_RCC_OscConfig+0x5e8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	e015      	b.n	8002430 <HAL_RCC_OscConfig+0x614>
 8002404:	40021000 	.word	0x40021000
 8002408:	2302      	movs	r3, #2
 800240a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800241a:	2302      	movs	r3, #2
 800241c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002420:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800242c:	4bc8      	ldr	r3, [pc, #800]	; (8002750 <HAL_RCC_OscConfig+0x934>)
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	2202      	movs	r2, #2
 8002432:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002436:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800243a:	fa92 f2a2 	rbit	r2, r2
 800243e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002442:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002446:	fab2 f282 	clz	r2, r2
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	f042 0220 	orr.w	r2, r2, #32
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	f002 021f 	and.w	r2, r2, #31
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1ad      	bne.n	80023be <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002466:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8110 	beq.w	8002698 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d079      	beq.n	800257c <HAL_RCC_OscConfig+0x760>
 8002488:	2301      	movs	r3, #1
 800248a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800249a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	4bab      	ldr	r3, [pc, #684]	; (8002754 <HAL_RCC_OscConfig+0x938>)
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	461a      	mov	r2, r3
 80024ae:	2301      	movs	r3, #1
 80024b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b2:	f7fe ff37 	bl	8001324 <HAL_GetTick>
 80024b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024bc:	f7fe ff32 	bl	8001324 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d902      	bls.n	80024d2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	f000 bcdb 	b.w	8002e88 <HAL_RCC_OscConfig+0x106c>
 80024d2:	2302      	movs	r3, #2
 80024d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024ec:	2202      	movs	r2, #2
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	fa93 f2a3 	rbit	r2, r3
 80024fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002502:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002510:	2202      	movs	r2, #2
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	fa93 f2a3 	rbit	r2, r3
 8002522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002526:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800252a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252c:	4b88      	ldr	r3, [pc, #544]	; (8002750 <HAL_RCC_OscConfig+0x934>)
 800252e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002534:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002538:	2102      	movs	r1, #2
 800253a:	6019      	str	r1, [r3, #0]
 800253c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002540:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	fa93 f1a3 	rbit	r1, r3
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002552:	6019      	str	r1, [r3, #0]
  return result;
 8002554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002558:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	2101      	movs	r1, #1
 8002570:	fa01 f303 	lsl.w	r3, r1, r3
 8002574:	4013      	ands	r3, r2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0a0      	beq.n	80024bc <HAL_RCC_OscConfig+0x6a0>
 800257a:	e08d      	b.n	8002698 <HAL_RCC_OscConfig+0x87c>
 800257c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002580:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002584:	2201      	movs	r2, #1
 8002586:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	fa93 f2a3 	rbit	r2, r3
 8002596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800259e:	601a      	str	r2, [r3, #0]
  return result;
 80025a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025a8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b68      	ldr	r3, [pc, #416]	; (8002754 <HAL_RCC_OscConfig+0x938>)
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	461a      	mov	r2, r3
 80025ba:	2300      	movs	r3, #0
 80025bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025be:	f7fe feb1 	bl	8001324 <HAL_GetTick>
 80025c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c6:	e00a      	b.n	80025de <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c8:	f7fe feac 	bl	8001324 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d902      	bls.n	80025de <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	f000 bc55 	b.w	8002e88 <HAL_RCC_OscConfig+0x106c>
 80025de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80025e6:	2202      	movs	r2, #2
 80025e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	fa93 f2a3 	rbit	r2, r3
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800260a:	2202      	movs	r2, #2
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002612:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f2a3 	rbit	r2, r3
 800261c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002620:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800262e:	2202      	movs	r2, #2
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	fa93 f2a3 	rbit	r2, r3
 8002640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002644:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002648:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264a:	4b41      	ldr	r3, [pc, #260]	; (8002750 <HAL_RCC_OscConfig+0x934>)
 800264c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800264e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002652:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002656:	2102      	movs	r1, #2
 8002658:	6019      	str	r1, [r3, #0]
 800265a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	fa93 f1a3 	rbit	r1, r3
 8002668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002670:	6019      	str	r1, [r3, #0]
  return result;
 8002672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002676:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2101      	movs	r1, #1
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d197      	bne.n	80025c8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 81a1 	beq.w	80029f0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b4:	4b26      	ldr	r3, [pc, #152]	; (8002750 <HAL_RCC_OscConfig+0x934>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d116      	bne.n	80026ee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c0:	4b23      	ldr	r3, [pc, #140]	; (8002750 <HAL_RCC_OscConfig+0x934>)
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	4a22      	ldr	r2, [pc, #136]	; (8002750 <HAL_RCC_OscConfig+0x934>)
 80026c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ca:	61d3      	str	r3, [r2, #28]
 80026cc:	4b20      	ldr	r3, [pc, #128]	; (8002750 <HAL_RCC_OscConfig+0x934>)
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80026e6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <HAL_RCC_OscConfig+0x93c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d11a      	bne.n	8002730 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <HAL_RCC_OscConfig+0x93c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a16      	ldr	r2, [pc, #88]	; (8002758 <HAL_RCC_OscConfig+0x93c>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002706:	f7fe fe0d 	bl	8001324 <HAL_GetTick>
 800270a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270e:	e009      	b.n	8002724 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002710:	f7fe fe08 	bl	8001324 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b64      	cmp	r3, #100	; 0x64
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e3b1      	b.n	8002e88 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_RCC_OscConfig+0x93c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ef      	beq.n	8002710 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d10d      	bne.n	800275c <HAL_RCC_OscConfig+0x940>
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <HAL_RCC_OscConfig+0x934>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	4a02      	ldr	r2, [pc, #8]	; (8002750 <HAL_RCC_OscConfig+0x934>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6213      	str	r3, [r2, #32]
 800274c:	e03c      	b.n	80027c8 <HAL_RCC_OscConfig+0x9ac>
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000
 8002754:	10908120 	.word	0x10908120
 8002758:	40007000 	.word	0x40007000
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10c      	bne.n	8002786 <HAL_RCC_OscConfig+0x96a>
 800276c:	4bc1      	ldr	r3, [pc, #772]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	4ac0      	ldr	r2, [pc, #768]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	6213      	str	r3, [r2, #32]
 8002778:	4bbe      	ldr	r3, [pc, #760]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	4abd      	ldr	r2, [pc, #756]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 800277e:	f023 0304 	bic.w	r3, r3, #4
 8002782:	6213      	str	r3, [r2, #32]
 8002784:	e020      	b.n	80027c8 <HAL_RCC_OscConfig+0x9ac>
 8002786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b05      	cmp	r3, #5
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x994>
 8002796:	4bb7      	ldr	r3, [pc, #732]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4ab6      	ldr	r2, [pc, #728]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6213      	str	r3, [r2, #32]
 80027a2:	4bb4      	ldr	r3, [pc, #720]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4ab3      	ldr	r2, [pc, #716]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6213      	str	r3, [r2, #32]
 80027ae:	e00b      	b.n	80027c8 <HAL_RCC_OscConfig+0x9ac>
 80027b0:	4bb0      	ldr	r3, [pc, #704]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4aaf      	ldr	r2, [pc, #700]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	6213      	str	r3, [r2, #32]
 80027bc:	4bad      	ldr	r3, [pc, #692]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	4aac      	ldr	r2, [pc, #688]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 80027c2:	f023 0304 	bic.w	r3, r3, #4
 80027c6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8081 	beq.w	80028dc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027da:	f7fe fda3 	bl	8001324 <HAL_GetTick>
 80027de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e2:	e00b      	b.n	80027fc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7fe fd9e 	bl	8001324 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e345      	b.n	8002e88 <HAL_RCC_OscConfig+0x106c>
 80027fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002800:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002804:	2202      	movs	r2, #2
 8002806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	fa93 f2a3 	rbit	r2, r3
 8002816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002824:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002828:	2202      	movs	r2, #2
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002830:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	fa93 f2a3 	rbit	r2, r3
 800283a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002842:	601a      	str	r2, [r3, #0]
  return result;
 8002844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002848:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800284c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d102      	bne.n	8002868 <HAL_RCC_OscConfig+0xa4c>
 8002862:	4b84      	ldr	r3, [pc, #528]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	e013      	b.n	8002890 <HAL_RCC_OscConfig+0xa74>
 8002868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002870:	2202      	movs	r2, #2
 8002872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002878:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	fa93 f2a3 	rbit	r2, r3
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	4b79      	ldr	r3, [pc, #484]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002894:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002898:	2102      	movs	r1, #2
 800289a:	6011      	str	r1, [r2, #0]
 800289c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028a0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	fa92 f1a2 	rbit	r1, r2
 80028aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80028b2:	6011      	str	r1, [r2, #0]
  return result;
 80028b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028b8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	fab2 f282 	clz	r2, r2
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	f002 021f 	and.w	r2, r2, #31
 80028ce:	2101      	movs	r1, #1
 80028d0:	fa01 f202 	lsl.w	r2, r1, r2
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d084      	beq.n	80027e4 <HAL_RCC_OscConfig+0x9c8>
 80028da:	e07f      	b.n	80029dc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028dc:	f7fe fd22 	bl	8001324 <HAL_GetTick>
 80028e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e4:	e00b      	b.n	80028fe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e6:	f7fe fd1d 	bl	8001324 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e2c4      	b.n	8002e88 <HAL_RCC_OscConfig+0x106c>
 80028fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002902:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002906:	2202      	movs	r2, #2
 8002908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	fa93 f2a3 	rbit	r2, r3
 8002918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800292a:	2202      	movs	r2, #2
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002932:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	fa93 f2a3 	rbit	r2, r3
 800293c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002940:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002944:	601a      	str	r2, [r3, #0]
  return result;
 8002946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800294e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f043 0302 	orr.w	r3, r3, #2
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d102      	bne.n	800296a <HAL_RCC_OscConfig+0xb4e>
 8002964:	4b43      	ldr	r3, [pc, #268]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	e013      	b.n	8002992 <HAL_RCC_OscConfig+0xb76>
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002972:	2202      	movs	r2, #2
 8002974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	fa93 f2a3 	rbit	r2, r3
 8002984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002988:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	4b39      	ldr	r3, [pc, #228]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002996:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800299a:	2102      	movs	r1, #2
 800299c:	6011      	str	r1, [r2, #0]
 800299e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	fa92 f1a2 	rbit	r1, r2
 80029ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80029b4:	6011      	str	r1, [r2, #0]
  return result;
 80029b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ba:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	fab2 f282 	clz	r2, r2
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	f002 021f 	and.w	r2, r2, #31
 80029d0:	2101      	movs	r1, #1
 80029d2:	fa01 f202 	lsl.w	r2, r1, r2
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d184      	bne.n	80028e6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d105      	bne.n	80029f0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e4:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 80029ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8242 	beq.w	8002e86 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a02:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <HAL_RCC_OscConfig+0xc58>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	f000 8213 	beq.w	8002e36 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	f040 8162 	bne.w	8002ce6 <HAL_RCC_OscConfig+0xeca>
 8002a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a26:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a34:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	fa93 f2a3 	rbit	r2, r3
 8002a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a42:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a46:	601a      	str	r2, [r3, #0]
  return result;
 8002a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a50:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	461a      	mov	r2, r3
 8002a64:	2300      	movs	r3, #0
 8002a66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7fe fc5c 	bl	8001324 <HAL_GetTick>
 8002a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a70:	e00c      	b.n	8002a8c <HAL_RCC_OscConfig+0xc70>
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a78:	f7fe fc54 	bl	8001324 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e1fd      	b.n	8002e88 <HAL_RCC_OscConfig+0x106c>
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	fa93 f2a3 	rbit	r2, r3
 8002aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ab0:	601a      	str	r2, [r3, #0]
  return result;
 8002ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002aba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d102      	bne.n	8002ad6 <HAL_RCC_OscConfig+0xcba>
 8002ad0:	4bb0      	ldr	r3, [pc, #704]	; (8002d94 <HAL_RCC_OscConfig+0xf78>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	e027      	b.n	8002b26 <HAL_RCC_OscConfig+0xd0a>
 8002ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ada:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ade:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	fa93 f2a3 	rbit	r2, r3
 8002af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	fa93 f2a3 	rbit	r2, r3
 8002b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	4b9c      	ldr	r3, [pc, #624]	; (8002d94 <HAL_RCC_OscConfig+0xf78>)
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b2a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b2e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b32:	6011      	str	r1, [r2, #0]
 8002b34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b38:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	fa92 f1a2 	rbit	r1, r2
 8002b42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b46:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b4a:	6011      	str	r1, [r2, #0]
  return result;
 8002b4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b50:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	fab2 f282 	clz	r2, r2
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	f042 0220 	orr.w	r2, r2, #32
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	f002 021f 	and.w	r2, r2, #31
 8002b66:	2101      	movs	r1, #1
 8002b68:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d182      	bne.n	8002a78 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b72:	4b88      	ldr	r3, [pc, #544]	; (8002d94 <HAL_RCC_OscConfig+0xf78>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	430b      	orrs	r3, r1
 8002b94:	497f      	ldr	r1, [pc, #508]	; (8002d94 <HAL_RCC_OscConfig+0xf78>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
 8002b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ba2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bac:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	fa93 f2a3 	rbit	r2, r3
 8002bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002bbe:	601a      	str	r2, [r3, #0]
  return result;
 8002bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002bc8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2301      	movs	r3, #1
 8002bde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe fba0 	bl	8001324 <HAL_GetTick>
 8002be4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be8:	e009      	b.n	8002bfe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bea:	f7fe fb9b 	bl	8001324 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e144      	b.n	8002e88 <HAL_RCC_OscConfig+0x106c>
 8002bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c02:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c10:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	fa93 f2a3 	rbit	r2, r3
 8002c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c22:	601a      	str	r2, [r3, #0]
  return result;
 8002c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c28:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d102      	bne.n	8002c48 <HAL_RCC_OscConfig+0xe2c>
 8002c42:	4b54      	ldr	r3, [pc, #336]	; (8002d94 <HAL_RCC_OscConfig+0xf78>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	e027      	b.n	8002c98 <HAL_RCC_OscConfig+0xe7c>
 8002c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	fa93 f2a3 	rbit	r2, r3
 8002c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c68:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002c76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c80:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	fa93 f2a3 	rbit	r2, r3
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <HAL_RCC_OscConfig+0xf78>)
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c9c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ca0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ca4:	6011      	str	r1, [r2, #0]
 8002ca6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002caa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	fa92 f1a2 	rbit	r1, r2
 8002cb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cb8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002cbc:	6011      	str	r1, [r2, #0]
  return result;
 8002cbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cc2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	fab2 f282 	clz	r2, r2
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	f042 0220 	orr.w	r2, r2, #32
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	f002 021f 	and.w	r2, r2, #31
 8002cd8:	2101      	movs	r1, #1
 8002cda:	fa01 f202 	lsl.w	r2, r1, r2
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d082      	beq.n	8002bea <HAL_RCC_OscConfig+0xdce>
 8002ce4:	e0cf      	b.n	8002e86 <HAL_RCC_OscConfig+0x106a>
 8002ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cea:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002cee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	fa93 f2a3 	rbit	r2, r3
 8002d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d06:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d0a:	601a      	str	r2, [r3, #0]
  return result;
 8002d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d10:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d14:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	461a      	mov	r2, r3
 8002d28:	2300      	movs	r3, #0
 8002d2a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fafa 	bl	8001324 <HAL_GetTick>
 8002d30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d34:	e009      	b.n	8002d4a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d36:	f7fe faf5 	bl	8001324 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e09e      	b.n	8002e88 <HAL_RCC_OscConfig+0x106c>
 8002d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	fa93 f2a3 	rbit	r2, r3
 8002d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d6e:	601a      	str	r2, [r3, #0]
  return result;
 8002d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d74:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d104      	bne.n	8002d98 <HAL_RCC_OscConfig+0xf7c>
 8002d8e:	4b01      	ldr	r3, [pc, #4]	; (8002d94 <HAL_RCC_OscConfig+0xf78>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	e029      	b.n	8002de8 <HAL_RCC_OscConfig+0xfcc>
 8002d94:	40021000 	.word	0x40021000
 8002d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	fa93 f2a3 	rbit	r2, r3
 8002db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002dc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	fa93 f2a3 	rbit	r2, r3
 8002dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dde:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	4b2b      	ldr	r3, [pc, #172]	; (8002e94 <HAL_RCC_OscConfig+0x1078>)
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dec:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002df0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002df4:	6011      	str	r1, [r2, #0]
 8002df6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dfa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	fa92 f1a2 	rbit	r1, r2
 8002e04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e08:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e0c:	6011      	str	r1, [r2, #0]
  return result;
 8002e0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e12:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	fab2 f282 	clz	r2, r2
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	f042 0220 	orr.w	r2, r2, #32
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	f002 021f 	and.w	r2, r2, #31
 8002e28:	2101      	movs	r1, #1
 8002e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d180      	bne.n	8002d36 <HAL_RCC_OscConfig+0xf1a>
 8002e34:	e027      	b.n	8002e86 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e01e      	b.n	8002e88 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e4a:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_RCC_OscConfig+0x1078>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e56:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d10b      	bne.n	8002e82 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d001      	beq.n	8002e86 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000

08002e98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b09e      	sub	sp, #120	; 0x78
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e162      	b.n	8003176 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b90      	ldr	r3, [pc, #576]	; (80030f4 <HAL_RCC_ClockConfig+0x25c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d910      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	4b8d      	ldr	r3, [pc, #564]	; (80030f4 <HAL_RCC_ClockConfig+0x25c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 0207 	bic.w	r2, r3, #7
 8002ec6:	498b      	ldr	r1, [pc, #556]	; (80030f4 <HAL_RCC_ClockConfig+0x25c>)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b89      	ldr	r3, [pc, #548]	; (80030f4 <HAL_RCC_ClockConfig+0x25c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e14a      	b.n	8003176 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eec:	4b82      	ldr	r3, [pc, #520]	; (80030f8 <HAL_RCC_ClockConfig+0x260>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	497f      	ldr	r1, [pc, #508]	; (80030f8 <HAL_RCC_ClockConfig+0x260>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80dc 	beq.w	80030c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d13c      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xf6>
 8002f14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f18:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d102      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xa6>
 8002f38:	4b6f      	ldr	r3, [pc, #444]	; (80030f8 <HAL_RCC_ClockConfig+0x260>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	e00f      	b.n	8002f5e <HAL_RCC_ClockConfig+0xc6>
 8002f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f46:	fa93 f3a3 	rbit	r3, r3
 8002f4a:	667b      	str	r3, [r7, #100]	; 0x64
 8002f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f50:	663b      	str	r3, [r7, #96]	; 0x60
 8002f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f5a:	4b67      	ldr	r3, [pc, #412]	; (80030f8 <HAL_RCC_ClockConfig+0x260>)
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f62:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f66:	fa92 f2a2 	rbit	r2, r2
 8002f6a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f6e:	fab2 f282 	clz	r2, r2
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	f042 0220 	orr.w	r2, r2, #32
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	f002 021f 	and.w	r2, r2, #31
 8002f7e:	2101      	movs	r1, #1
 8002f80:	fa01 f202 	lsl.w	r2, r1, r2
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d17b      	bne.n	8003082 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e0f3      	b.n	8003176 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d13c      	bne.n	8003010 <HAL_RCC_ClockConfig+0x178>
 8002f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	095b      	lsrs	r3, r3, #5
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d102      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x128>
 8002fba:	4b4f      	ldr	r3, [pc, #316]	; (80030f8 <HAL_RCC_ClockConfig+0x260>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	e00f      	b.n	8002fe0 <HAL_RCC_ClockConfig+0x148>
 8002fc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fc4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8002fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8002fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fdc:	4b46      	ldr	r3, [pc, #280]	; (80030f8 <HAL_RCC_ClockConfig+0x260>)
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fe8:	fa92 f2a2 	rbit	r2, r2
 8002fec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ff0:	fab2 f282 	clz	r2, r2
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	f042 0220 	orr.w	r2, r2, #32
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	f002 021f 	and.w	r2, r2, #31
 8003000:	2101      	movs	r1, #1
 8003002:	fa01 f202 	lsl.w	r2, r1, r2
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d13a      	bne.n	8003082 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0b2      	b.n	8003176 <HAL_RCC_ClockConfig+0x2de>
 8003010:	2302      	movs	r3, #2
 8003012:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	095b      	lsrs	r3, r3, #5
 8003026:	b2db      	uxtb	r3, r3
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d102      	bne.n	8003038 <HAL_RCC_ClockConfig+0x1a0>
 8003032:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <HAL_RCC_ClockConfig+0x260>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	e00d      	b.n	8003054 <HAL_RCC_ClockConfig+0x1bc>
 8003038:	2302      	movs	r3, #2
 800303a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
 8003044:	2302      	movs	r3, #2
 8003046:	623b      	str	r3, [r7, #32]
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	fa93 f3a3 	rbit	r3, r3
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	4b29      	ldr	r3, [pc, #164]	; (80030f8 <HAL_RCC_ClockConfig+0x260>)
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	2202      	movs	r2, #2
 8003056:	61ba      	str	r2, [r7, #24]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	fa92 f2a2 	rbit	r2, r2
 800305e:	617a      	str	r2, [r7, #20]
  return result;
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	fab2 f282 	clz	r2, r2
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	f042 0220 	orr.w	r2, r2, #32
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	f002 021f 	and.w	r2, r2, #31
 8003072:	2101      	movs	r1, #1
 8003074:	fa01 f202 	lsl.w	r2, r1, r2
 8003078:	4013      	ands	r3, r2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e079      	b.n	8003176 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003082:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HAL_RCC_ClockConfig+0x260>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f023 0203 	bic.w	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	491a      	ldr	r1, [pc, #104]	; (80030f8 <HAL_RCC_ClockConfig+0x260>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003094:	f7fe f946 	bl	8001324 <HAL_GetTick>
 8003098:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309a:	e00a      	b.n	80030b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800309c:	f7fe f942 	bl	8001324 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e061      	b.n	8003176 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b2:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <HAL_RCC_ClockConfig+0x260>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 020c 	and.w	r2, r3, #12
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d1eb      	bne.n	800309c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCC_ClockConfig+0x25c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d214      	bcs.n	80030fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_RCC_ClockConfig+0x25c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 0207 	bic.w	r2, r3, #7
 80030da:	4906      	ldr	r1, [pc, #24]	; (80030f4 <HAL_RCC_ClockConfig+0x25c>)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <HAL_RCC_ClockConfig+0x25c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e040      	b.n	8003176 <HAL_RCC_ClockConfig+0x2de>
 80030f4:	40022000 	.word	0x40022000
 80030f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003108:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <HAL_RCC_ClockConfig+0x2e8>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	491a      	ldr	r1, [pc, #104]	; (8003180 <HAL_RCC_ClockConfig+0x2e8>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003126:	4b16      	ldr	r3, [pc, #88]	; (8003180 <HAL_RCC_ClockConfig+0x2e8>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4912      	ldr	r1, [pc, #72]	; (8003180 <HAL_RCC_ClockConfig+0x2e8>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800313a:	f000 f829 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 800313e:	4601      	mov	r1, r0
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <HAL_RCC_ClockConfig+0x2e8>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003148:	22f0      	movs	r2, #240	; 0xf0
 800314a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	fa92 f2a2 	rbit	r2, r2
 8003152:	60fa      	str	r2, [r7, #12]
  return result;
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	fab2 f282 	clz	r2, r2
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	40d3      	lsrs	r3, r2
 800315e:	4a09      	ldr	r2, [pc, #36]	; (8003184 <HAL_RCC_ClockConfig+0x2ec>)
 8003160:	5cd3      	ldrb	r3, [r2, r3]
 8003162:	fa21 f303 	lsr.w	r3, r1, r3
 8003166:	4a08      	ldr	r2, [pc, #32]	; (8003188 <HAL_RCC_ClockConfig+0x2f0>)
 8003168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <HAL_RCC_ClockConfig+0x2f4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe f894 	bl	800129c <HAL_InitTick>
  
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3778      	adds	r7, #120	; 0x78
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	08006690 	.word	0x08006690
 8003188:	20000040 	.word	0x20000040
 800318c:	20000044 	.word	0x20000044

08003190 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	b08b      	sub	sp, #44	; 0x2c
 8003194:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	2300      	movs	r3, #0
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	2300      	movs	r3, #0
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80031aa:	4b29      	ldr	r3, [pc, #164]	; (8003250 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d002      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x30>
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d003      	beq.n	80031c6 <HAL_RCC_GetSysClockFreq+0x36>
 80031be:	e03c      	b.n	800323a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031c0:	4b24      	ldr	r3, [pc, #144]	; (8003254 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031c2:	623b      	str	r3, [r7, #32]
      break;
 80031c4:	e03c      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80031cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80031d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	fa92 f2a2 	rbit	r2, r2
 80031d8:	607a      	str	r2, [r7, #4]
  return result;
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	fab2 f282 	clz	r2, r2
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	40d3      	lsrs	r3, r2
 80031e4:	4a1c      	ldr	r2, [pc, #112]	; (8003258 <HAL_RCC_GetSysClockFreq+0xc8>)
 80031e6:	5cd3      	ldrb	r3, [r2, r3]
 80031e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80031ea:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	220f      	movs	r2, #15
 80031f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	fa92 f2a2 	rbit	r2, r2
 80031fc:	60fa      	str	r2, [r7, #12]
  return result;
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	fab2 f282 	clz	r2, r2
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	40d3      	lsrs	r3, r2
 8003208:	4a14      	ldr	r2, [pc, #80]	; (800325c <HAL_RCC_GetSysClockFreq+0xcc>)
 800320a:	5cd3      	ldrb	r3, [r2, r3]
 800320c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003218:	4a0e      	ldr	r2, [pc, #56]	; (8003254 <HAL_RCC_GetSysClockFreq+0xc4>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
 8003228:	e004      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	4a0c      	ldr	r2, [pc, #48]	; (8003260 <HAL_RCC_GetSysClockFreq+0xd0>)
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	623b      	str	r3, [r7, #32]
      break;
 8003238:	e002      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_RCC_GetSysClockFreq+0xc4>)
 800323c:	623b      	str	r3, [r7, #32]
      break;
 800323e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003240:	6a3b      	ldr	r3, [r7, #32]
}
 8003242:	4618      	mov	r0, r3
 8003244:	372c      	adds	r7, #44	; 0x2c
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000
 8003254:	007a1200 	.word	0x007a1200
 8003258:	080066a0 	.word	0x080066a0
 800325c:	080066b0 	.word	0x080066b0
 8003260:	003d0900 	.word	0x003d0900

08003264 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b092      	sub	sp, #72	; 0x48
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003274:	2300      	movs	r3, #0
 8003276:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80d4 	beq.w	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003288:	4b4e      	ldr	r3, [pc, #312]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10e      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003294:	4b4b      	ldr	r3, [pc, #300]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	4a4a      	ldr	r2, [pc, #296]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329e:	61d3      	str	r3, [r2, #28]
 80032a0:	4b48      	ldr	r3, [pc, #288]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ac:	2301      	movs	r3, #1
 80032ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b2:	4b45      	ldr	r3, [pc, #276]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d118      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032be:	4b42      	ldr	r3, [pc, #264]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a41      	ldr	r2, [pc, #260]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ca:	f7fe f82b 	bl	8001324 <HAL_GetTick>
 80032ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d0:	e008      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d2:	f7fe f827 	bl	8001324 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b64      	cmp	r3, #100	; 0x64
 80032de:	d901      	bls.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e169      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e4:	4b38      	ldr	r3, [pc, #224]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032f0:	4b34      	ldr	r3, [pc, #208]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8084 	beq.w	800340a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800330a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800330c:	429a      	cmp	r2, r3
 800330e:	d07c      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003310:	4b2c      	ldr	r3, [pc, #176]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800331a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800331e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	461a      	mov	r2, r3
 8003332:	4b26      	ldr	r3, [pc, #152]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	461a      	mov	r2, r3
 800333a:	2301      	movs	r3, #1
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003342:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003346:	fa93 f3a3 	rbit	r3, r3
 800334a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800334c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	461a      	mov	r2, r3
 8003356:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	461a      	mov	r2, r3
 800335e:	2300      	movs	r3, #0
 8003360:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003362:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003366:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d04b      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7fd ffd7 	bl	8001324 <HAL_GetTick>
 8003376:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003378:	e00a      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7fd ffd3 	bl	8001324 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	; 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e113      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003390:	2302      	movs	r3, #2
 8003392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
 800339c:	2302      	movs	r3, #2
 800339e:	623b      	str	r3, [r7, #32]
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	61fb      	str	r3, [r7, #28]
  return result;
 80033a8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f043 0302 	orr.w	r3, r3, #2
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d108      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80033be:	4b01      	ldr	r3, [pc, #4]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	e00d      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40007000 	.word	0x40007000
 80033cc:	10908100 	.word	0x10908100
 80033d0:	2302      	movs	r3, #2
 80033d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	fa93 f3a3 	rbit	r3, r3
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	4b78      	ldr	r3, [pc, #480]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	2202      	movs	r2, #2
 80033e2:	613a      	str	r2, [r7, #16]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	fa92 f2a2 	rbit	r2, r2
 80033ea:	60fa      	str	r2, [r7, #12]
  return result;
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	fab2 f282 	clz	r2, r2
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	f002 021f 	and.w	r2, r2, #31
 80033fe:	2101      	movs	r1, #1
 8003400:	fa01 f202 	lsl.w	r2, r1, r2
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0b7      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800340a:	4b6d      	ldr	r3, [pc, #436]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	496a      	ldr	r1, [pc, #424]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003418:	4313      	orrs	r3, r2
 800341a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800341c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003420:	2b01      	cmp	r3, #1
 8003422:	d105      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003424:	4b66      	ldr	r3, [pc, #408]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	4a65      	ldr	r2, [pc, #404]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800342a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800343c:	4b60      	ldr	r3, [pc, #384]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	f023 0203 	bic.w	r2, r3, #3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	495d      	ldr	r1, [pc, #372]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800344a:	4313      	orrs	r3, r2
 800344c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800345a:	4b59      	ldr	r3, [pc, #356]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	4956      	ldr	r1, [pc, #344]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003468:	4313      	orrs	r3, r2
 800346a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003478:	4b51      	ldr	r3, [pc, #324]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	494e      	ldr	r1, [pc, #312]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003486:	4313      	orrs	r3, r2
 8003488:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003496:	4b4a      	ldr	r3, [pc, #296]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f023 0210 	bic.w	r2, r3, #16
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	4947      	ldr	r1, [pc, #284]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80034b4:	4b42      	ldr	r3, [pc, #264]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	493f      	ldr	r1, [pc, #252]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034d2:	4b3b      	ldr	r3, [pc, #236]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f023 0220 	bic.w	r2, r3, #32
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4938      	ldr	r1, [pc, #224]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034f0:	4b33      	ldr	r3, [pc, #204]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	4930      	ldr	r1, [pc, #192]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800350e:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	4929      	ldr	r1, [pc, #164]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800351c:	4313      	orrs	r3, r2
 800351e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800352c:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	4921      	ldr	r1, [pc, #132]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800353a:	4313      	orrs	r3, r2
 800353c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003546:	2b00      	cmp	r3, #0
 8003548:	d008      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800354a:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	491a      	ldr	r1, [pc, #104]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003558:	4313      	orrs	r3, r2
 800355a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003568:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	4912      	ldr	r1, [pc, #72]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003576:	4313      	orrs	r3, r2
 8003578:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d008      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003586:	4b0e      	ldr	r3, [pc, #56]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	490b      	ldr	r1, [pc, #44]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003594:	4313      	orrs	r3, r2
 8003596:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80035a4:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b0:	4903      	ldr	r1, [pc, #12]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3748      	adds	r7, #72	; 0x48
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40021000 	.word	0x40021000

080035c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e09d      	b.n	8003712 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d108      	bne.n	80035f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035e6:	d009      	beq.n	80035fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	61da      	str	r2, [r3, #28]
 80035ee:	e005      	b.n	80035fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd fb78 	bl	8000d0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003632:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800363c:	d902      	bls.n	8003644 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	e002      	b.n	800364a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003648:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003652:	d007      	beq.n	8003664 <HAL_SPI_Init+0xa0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800365c:	d002      	beq.n	8003664 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a6:	ea42 0103 	orr.w	r1, r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	0c1b      	lsrs	r3, r3, #16
 80036c0:	f003 0204 	and.w	r2, r3, #4
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80036e0:	ea42 0103 	orr.w	r1, r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003700:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e01a      	b.n	8003762 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003742:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7fd fb23 	bl	8000d90 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b08a      	sub	sp, #40	; 0x28
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003778:	2301      	movs	r3, #1
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_SPI_TransmitReceive+0x26>
 800378c:	2302      	movs	r3, #2
 800378e:	e20a      	b.n	8003ba6 <HAL_SPI_TransmitReceive+0x43c>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003798:	f7fd fdc4 	bl	8001324 <HAL_GetTick>
 800379c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037a4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80037ac:	887b      	ldrh	r3, [r7, #2]
 80037ae:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80037b0:	887b      	ldrh	r3, [r7, #2]
 80037b2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037b4:	7efb      	ldrb	r3, [r7, #27]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d00e      	beq.n	80037d8 <HAL_SPI_TransmitReceive+0x6e>
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037c0:	d106      	bne.n	80037d0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d102      	bne.n	80037d0 <HAL_SPI_TransmitReceive+0x66>
 80037ca:	7efb      	ldrb	r3, [r7, #27]
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d003      	beq.n	80037d8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80037d0:	2302      	movs	r3, #2
 80037d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80037d6:	e1e0      	b.n	8003b9a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <HAL_SPI_TransmitReceive+0x80>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_SPI_TransmitReceive+0x80>
 80037e4:	887b      	ldrh	r3, [r7, #2]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d103      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80037f0:	e1d3      	b.n	8003b9a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d003      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2205      	movs	r2, #5
 8003802:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	887a      	ldrh	r2, [r7, #2]
 8003816:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	887a      	ldrh	r2, [r7, #2]
 800381e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	887a      	ldrh	r2, [r7, #2]
 800382c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	887a      	ldrh	r2, [r7, #2]
 8003832:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003848:	d802      	bhi.n	8003850 <HAL_SPI_TransmitReceive+0xe6>
 800384a:	8a3b      	ldrh	r3, [r7, #16]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d908      	bls.n	8003862 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800385e:	605a      	str	r2, [r3, #4]
 8003860:	e007      	b.n	8003872 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003870:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	d007      	beq.n	8003890 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800388e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003898:	f240 8081 	bls.w	800399e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_SPI_TransmitReceive+0x140>
 80038a4:	8a7b      	ldrh	r3, [r7, #18]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d16d      	bne.n	8003986 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	881a      	ldrh	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	1c9a      	adds	r2, r3, #2
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ce:	e05a      	b.n	8003986 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d11b      	bne.n	8003916 <HAL_SPI_TransmitReceive+0x1ac>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d016      	beq.n	8003916 <HAL_SPI_TransmitReceive+0x1ac>
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d113      	bne.n	8003916 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	881a      	ldrh	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	1c9a      	adds	r2, r3, #2
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b01      	cmp	r3, #1
 8003922:	d11c      	bne.n	800395e <HAL_SPI_TransmitReceive+0x1f4>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d016      	beq.n	800395e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	b292      	uxth	r2, r2
 800393c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	1c9a      	adds	r2, r3, #2
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800395a:	2301      	movs	r3, #1
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800395e:	f7fd fce1 	bl	8001324 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800396a:	429a      	cmp	r2, r3
 800396c:	d80b      	bhi.n	8003986 <HAL_SPI_TransmitReceive+0x21c>
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003974:	d007      	beq.n	8003986 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003984:	e109      	b.n	8003b9a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d19f      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x166>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d199      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x166>
 800399c:	e0e3      	b.n	8003b66 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_SPI_TransmitReceive+0x244>
 80039a6:	8a7b      	ldrh	r3, [r7, #18]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	f040 80cf 	bne.w	8003b4c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d912      	bls.n	80039de <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	881a      	ldrh	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	1c9a      	adds	r2, r3, #2
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b02      	subs	r3, #2
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039dc:	e0b6      	b.n	8003b4c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	330c      	adds	r3, #12
 80039e8:	7812      	ldrb	r2, [r2, #0]
 80039ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a04:	e0a2      	b.n	8003b4c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d134      	bne.n	8003a7e <HAL_SPI_TransmitReceive+0x314>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d02f      	beq.n	8003a7e <HAL_SPI_TransmitReceive+0x314>
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d12c      	bne.n	8003a7e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d912      	bls.n	8003a54 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	881a      	ldrh	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	1c9a      	adds	r2, r3, #2
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b02      	subs	r3, #2
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a52:	e012      	b.n	8003a7a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	7812      	ldrb	r2, [r2, #0]
 8003a60:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d148      	bne.n	8003b1e <HAL_SPI_TransmitReceive+0x3b4>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d042      	beq.n	8003b1e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d923      	bls.n	8003aec <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	b292      	uxth	r2, r2
 8003ab0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	1c9a      	adds	r2, r3, #2
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b02      	subs	r3, #2
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d81f      	bhi.n	8003b1a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ae8:	605a      	str	r2, [r3, #4]
 8003aea:	e016      	b.n	8003b1a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f103 020c 	add.w	r2, r3, #12
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	7812      	ldrb	r2, [r2, #0]
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b1e:	f7fd fc01 	bl	8001324 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d803      	bhi.n	8003b36 <HAL_SPI_TransmitReceive+0x3cc>
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d102      	bne.n	8003b3c <HAL_SPI_TransmitReceive+0x3d2>
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d107      	bne.n	8003b4c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003b4a:	e026      	b.n	8003b9a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f47f af57 	bne.w	8003a06 <HAL_SPI_TransmitReceive+0x29c>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f47f af50 	bne.w	8003a06 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f94c 	bl	8003e08 <SPI_EndRxTxTransaction>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b90:	e003      	b.n	8003b9a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ba2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3728      	adds	r7, #40	; 0x28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bbc:	b2db      	uxtb	r3, r3
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bdc:	f7fd fba2 	bl	8001324 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	4413      	add	r3, r2
 8003bea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bec:	f7fd fb9a 	bl	8001324 <HAL_GetTick>
 8003bf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bf2:	4b39      	ldr	r3, [pc, #228]	; (8003cd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	015b      	lsls	r3, r3, #5
 8003bf8:	0d1b      	lsrs	r3, r3, #20
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	fb02 f303 	mul.w	r3, r2, r3
 8003c00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c02:	e054      	b.n	8003cae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0a:	d050      	beq.n	8003cae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c0c:	f7fd fb8a 	bl	8001324 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d902      	bls.n	8003c22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d13d      	bne.n	8003c9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c3a:	d111      	bne.n	8003c60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c44:	d004      	beq.n	8003c50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4e:	d107      	bne.n	8003c60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c68:	d10f      	bne.n	8003c8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e017      	b.n	8003cce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	bf0c      	ite	eq
 8003cbe:	2301      	moveq	r3, #1
 8003cc0:	2300      	movne	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d19b      	bne.n	8003c04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3720      	adds	r7, #32
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000040 	.word	0x20000040

08003cdc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08a      	sub	sp, #40	; 0x28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003cea:	2300      	movs	r3, #0
 8003cec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cee:	f7fd fb19 	bl	8001324 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	1a9b      	subs	r3, r3, r2
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003cfe:	f7fd fb11 	bl	8001324 <HAL_GetTick>
 8003d02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d0c:	4b3d      	ldr	r3, [pc, #244]	; (8003e04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	00da      	lsls	r2, r3, #3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	0d1b      	lsrs	r3, r3, #20
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1e:	fb02 f303 	mul.w	r3, r2, r3
 8003d22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d24:	e060      	b.n	8003de8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d2c:	d107      	bne.n	8003d3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d104      	bne.n	8003d3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d44:	d050      	beq.n	8003de8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d46:	f7fd faed 	bl	8001324 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d902      	bls.n	8003d5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d13d      	bne.n	8003dd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d74:	d111      	bne.n	8003d9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7e:	d004      	beq.n	8003d8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d88:	d107      	bne.n	8003d9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da2:	d10f      	bne.n	8003dc4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e010      	b.n	8003dfa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4013      	ands	r3, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d196      	bne.n	8003d26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3728      	adds	r7, #40	; 0x28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000040 	.word	0x20000040

08003e08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7ff ff5b 	bl	8003cdc <SPI_WaitFifoStateUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d007      	beq.n	8003e3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e30:	f043 0220 	orr.w	r2, r3, #32
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e027      	b.n	8003e8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2200      	movs	r2, #0
 8003e44:	2180      	movs	r1, #128	; 0x80
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7ff fec0 	bl	8003bcc <SPI_WaitFlagStateUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d007      	beq.n	8003e62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e56:	f043 0220 	orr.w	r2, r3, #32
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e014      	b.n	8003e8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f7ff ff34 	bl	8003cdc <SPI_WaitFifoStateUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d007      	beq.n	8003e8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7e:	f043 0220 	orr.w	r2, r3, #32
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e000      	b.n	8003e8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e9c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ea0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003eca:	b084      	sub	sp, #16
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	f107 0014 	add.w	r0, r7, #20
 8003ed8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	b004      	add	sp, #16
 8003f0a:	4770      	bx	lr

08003f0c <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003f16:	2300      	movs	r3, #0
 8003f18:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	703b      	strb	r3, [r7, #0]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8003f22:	4b52      	ldr	r3, [pc, #328]	; (800406c <BSP_GYRO_Init+0x160>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4798      	blx	r3
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2bd4      	cmp	r3, #212	; 0xd4
 8003f2c:	d005      	beq.n	8003f3a <BSP_GYRO_Init+0x2e>
 8003f2e:	4b4f      	ldr	r3, [pc, #316]	; (800406c <BSP_GYRO_Init+0x160>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	4798      	blx	r3
 8003f34:	4603      	mov	r3, r0
 8003f36:	2bd5      	cmp	r3, #213	; 0xd5
 8003f38:	d146      	bne.n	8003fc8 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8003f3a:	4b4d      	ldr	r3, [pc, #308]	; (8004070 <BSP_GYRO_Init+0x164>)
 8003f3c:	4a4b      	ldr	r2, [pc, #300]	; (800406c <BSP_GYRO_Init+0x160>)
 8003f3e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8003f40:	2308      	movs	r3, #8
 8003f42:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8003f44:	2300      	movs	r3, #0
 8003f46:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8003f48:	2307      	movs	r3, #7
 8003f4a:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8003f4c:	2330      	movs	r3, #48	; 0x30
 8003f4e:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8003f50:	2300      	movs	r3, #0
 8003f52:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8003f54:	2300      	movs	r3, #0
 8003f56:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8003f58:	2310      	movs	r3, #16
 8003f5a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003f5c:	793a      	ldrb	r2, [r7, #4]
 8003f5e:	797b      	ldrb	r3, [r7, #5]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003f64:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003f66:	4313      	orrs	r3, r2
 8003f68:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003f72:	7a3a      	ldrb	r2, [r7, #8]
 8003f74:	7a7b      	ldrb	r3, [r7, #9]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8003f7a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	89bb      	ldrh	r3, [r7, #12]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8003f8c:	4b38      	ldr	r3, [pc, #224]	; (8004070 <BSP_GYRO_Init+0x164>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	89ba      	ldrh	r2, [r7, #12]
 8003f94:	4610      	mov	r0, r2
 8003f96:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003fa0:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8003fa2:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8003faa:	4b31      	ldr	r3, [pc, #196]	; (8004070 <BSP_GYRO_Init+0x164>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	89ba      	ldrh	r2, [r7, #12]
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8003fb8:	4b2d      	ldr	r3, [pc, #180]	; (8004070 <BSP_GYRO_Init+0x164>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	2010      	movs	r0, #16
 8003fc0:	4798      	blx	r3

    ret = GYRO_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	73fb      	strb	r3, [r7, #15]
 8003fc6:	e04b      	b.n	8004060 <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 8003fc8:	4b2a      	ldr	r3, [pc, #168]	; (8004074 <BSP_GYRO_Init+0x168>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	4798      	blx	r3
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2bd3      	cmp	r3, #211	; 0xd3
 8003fd2:	d145      	bne.n	8004060 <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8003fd4:	4b26      	ldr	r3, [pc, #152]	; (8004070 <BSP_GYRO_Init+0x164>)
 8003fd6:	4a27      	ldr	r2, [pc, #156]	; (8004074 <BSP_GYRO_Init+0x168>)
 8003fd8:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 8003fda:	2308      	movs	r3, #8
 8003fdc:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 8003fe2:	2307      	movs	r3, #7
 8003fe4:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 8003fe6:	2330      	movs	r3, #48	; 0x30
 8003fe8:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8003fea:	2300      	movs	r3, #0
 8003fec:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 8003ff2:	2310      	movs	r3, #16
 8003ff4:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003ff6:	793a      	ldrb	r2, [r7, #4]
 8003ff8:	797b      	ldrb	r3, [r7, #5]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003ffe:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004000:	4313      	orrs	r3, r2
 8004002:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004004:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004006:	4313      	orrs	r3, r2
 8004008:	b2db      	uxtb	r3, r3
 800400a:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800400c:	7a3a      	ldrb	r2, [r7, #8]
 800400e:	7a7b      	ldrb	r3, [r7, #9]
 8004010:	4313      	orrs	r3, r2
 8004012:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8004014:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004016:	4313      	orrs	r3, r2
 8004018:	b2db      	uxtb	r3, r3
 800401a:	b29b      	uxth	r3, r3
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	b29a      	uxth	r2, r3
 8004020:	89bb      	ldrh	r3, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8004026:	4b12      	ldr	r3, [pc, #72]	; (8004070 <BSP_GYRO_Init+0x164>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	89ba      	ldrh	r2, [r7, #12]
 800402e:	4610      	mov	r0, r2
 8004030:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 8004032:	2300      	movs	r3, #0
 8004034:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 8004036:	2300      	movs	r3, #0
 8004038:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800403a:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800403c:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800403e:	4313      	orrs	r3, r2
 8004040:	b2db      	uxtb	r3, r3
 8004042:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8004044:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <BSP_GYRO_Init+0x164>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	89ba      	ldrh	r2, [r7, #12]
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	4610      	mov	r0, r2
 8004050:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 8004052:	4b07      	ldr	r3, [pc, #28]	; (8004070 <BSP_GYRO_Init+0x164>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	2010      	movs	r0, #16
 800405a:	4798      	blx	r3

    ret = GYRO_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004060:	7bfb      	ldrb	r3, [r7, #15]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000080 	.word	0x20000080
 8004070:	200004e4 	.word	0x200004e4
 8004074:	2000004c 	.word	0x2000004c

08004078 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <BSP_GYRO_GetXYZ+0x24>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	2b00      	cmp	r3, #0
 8004088:	d004      	beq.n	8004094 <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 800408a:	4b04      	ldr	r3, [pc, #16]	; (800409c <BSP_GYRO_GetXYZ+0x24>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4798      	blx	r3
  }
}
 8004094:	bf00      	nop
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	200004e4 	.word	0x200004e4

080040a0 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80040aa:	2300      	movs	r3, #0
 80040ac:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 80040ae:	f000 fc7f 	bl	80049b0 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 80040b8:	f107 030f 	add.w	r3, r7, #15
 80040bc:	2201      	movs	r2, #1
 80040be:	2120      	movs	r1, #32
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fcbb 	bl	8004a3c <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	0a1b      	lsrs	r3, r3, #8
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 80040d0:	f107 030f 	add.w	r3, r7, #15
 80040d4:	2201      	movs	r2, #1
 80040d6:	2123      	movs	r1, #35	; 0x23
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fcaf 	bl	8004a3c <GYRO_IO_Write>
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 80040e6:	b480      	push	{r7}
 80040e8:	af00      	add	r7, sp, #0
}
 80040ea:	bf00      	nop
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 80040fa:	f000 fc59 	bl	80049b0 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 80040fe:	1dfb      	adds	r3, r7, #7
 8004100:	2201      	movs	r2, #1
 8004102:	210f      	movs	r1, #15
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fccb 	bl	8004aa0 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 800410a:	79fb      	ldrb	r3, [r7, #7]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800411a:	1dfb      	adds	r3, r7, #7
 800411c:	2201      	movs	r2, #1
 800411e:	2124      	movs	r1, #36	; 0x24
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fcbd 	bl	8004aa0 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800412c:	b2db      	uxtb	r3, r3
 800412e:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8004130:	1dfb      	adds	r3, r7, #7
 8004132:	2201      	movs	r2, #1
 8004134:	2124      	movs	r1, #36	; 0x24
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fc80 	bl	8004a3c <GYRO_IO_Write>
}
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8004158:	f107 030f 	add.w	r3, r7, #15
 800415c:	2201      	movs	r2, #1
 800415e:	2120      	movs	r1, #32
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fc6b 	bl	8004a3c <GYRO_IO_Write>
}
 8004166:	bf00      	nop
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
 8004174:	4603      	mov	r3, r0
 8004176:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8004178:	2300      	movs	r3, #0
 800417a:	73fb      	strb	r3, [r7, #15]
 800417c:	2300      	movs	r3, #0
 800417e:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8004180:	f107 030f 	add.w	r3, r7, #15
 8004184:	2201      	movs	r2, #1
 8004186:	2130      	movs	r1, #48	; 0x30
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fc89 	bl	8004aa0 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800418e:	f107 030e 	add.w	r3, r7, #14
 8004192:	2201      	movs	r2, #1
 8004194:	2122      	movs	r1, #34	; 0x22
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fc82 	bl	8004aa0 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	121b      	asrs	r3, r3, #8
 80041ac:	b25a      	sxtb	r2, r3
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	b25b      	sxtb	r3, r3
 80041b2:	4313      	orrs	r3, r2
 80041b4:	b25b      	sxtb	r3, r3
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 80041ba:	7bbb      	ldrb	r3, [r7, #14]
 80041bc:	f023 0320 	bic.w	r3, r3, #32
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	7bbb      	ldrb	r3, [r7, #14]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 80041d0:	f107 030f 	add.w	r3, r7, #15
 80041d4:	2201      	movs	r2, #1
 80041d6:	2130      	movs	r1, #48	; 0x30
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fc2f 	bl	8004a3c <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 80041de:	f107 030e 	add.w	r3, r7, #14
 80041e2:	2201      	movs	r2, #1
 80041e4:	2122      	movs	r1, #34	; 0x22
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fc28 	bl	8004a3c <GYRO_IO_Write>
}
 80041ec:	bf00      	nop
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80041fe:	f107 030f 	add.w	r3, r7, #15
 8004202:	2201      	movs	r2, #1
 8004204:	2122      	movs	r1, #34	; 0x22
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fc4a 	bl	8004aa0 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004218:	b2db      	uxtb	r3, r3
 800421a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004222:	b2db      	uxtb	r3, r3
 8004224:	73fb      	strb	r3, [r7, #15]
 8004226:	e00c      	b.n	8004242 <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d109      	bne.n	8004242 <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	f023 0308 	bic.w	r3, r3, #8
 8004234:	b2db      	uxtb	r3, r3
 8004236:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	f043 0308 	orr.w	r3, r3, #8
 800423e:	b2db      	uxtb	r3, r3
 8004240:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8004242:	f107 030f 	add.w	r3, r7, #15
 8004246:	2201      	movs	r2, #1
 8004248:	2122      	movs	r1, #34	; 0x22
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fbf6 	bl	8004a3c <GYRO_IO_Write>
}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8004262:	f107 030f 	add.w	r3, r7, #15
 8004266:	2201      	movs	r2, #1
 8004268:	2122      	movs	r1, #34	; 0x22
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fc18 	bl	8004aa0 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d107      	bne.n	8004286 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800427c:	b2db      	uxtb	r3, r3
 800427e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	73fb      	strb	r3, [r7, #15]
 8004284:	e009      	b.n	800429a <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d106      	bne.n	800429a <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	f023 0308 	bic.w	r3, r3, #8
 8004292:	b2db      	uxtb	r3, r3
 8004294:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800429a:	f107 030f 	add.w	r3, r7, #15
 800429e:	2201      	movs	r2, #1
 80042a0:	2122      	movs	r1, #34	; 0x22
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fbca 	bl	8004a3c <GYRO_IO_Write>
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80042ba:	f107 030f 	add.w	r3, r7, #15
 80042be:	2201      	movs	r2, #1
 80042c0:	2121      	movs	r1, #33	; 0x21
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fbec 	bl	8004aa0 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80042d2:	7bfa      	ldrb	r2, [r7, #15]
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80042dc:	f107 030f 	add.w	r3, r7, #15
 80042e0:	2201      	movs	r2, #1
 80042e2:	2121      	movs	r1, #33	; 0x21
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fba9 	bl	8004a3c <GYRO_IO_Write>
}
 80042ea:	bf00      	nop
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	4603      	mov	r3, r0
 80042fa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80042fc:	f107 030f 	add.w	r3, r7, #15
 8004300:	2201      	movs	r2, #1
 8004302:	2124      	movs	r1, #36	; 0x24
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fbcb 	bl	8004aa0 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	f023 0310 	bic.w	r3, r3, #16
 8004310:	b2db      	uxtb	r3, r3
 8004312:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8004314:	7bfa      	ldrb	r2, [r7, #15]
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	4313      	orrs	r3, r2
 800431a:	b2db      	uxtb	r3, r3
 800431c:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800431e:	f107 030f 	add.w	r3, r7, #15
 8004322:	2201      	movs	r2, #1
 8004324:	2124      	movs	r1, #36	; 0x24
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fb88 	bl	8004a3c <GYRO_IO_Write>
}
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 800433c:	2300      	movs	r3, #0
 800433e:	61bb      	str	r3, [r7, #24]
 8004340:	2300      	movs	r3, #0
 8004342:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8004344:	f107 0310 	add.w	r3, r7, #16
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800435c:	f107 030f 	add.w	r3, r7, #15
 8004360:	2201      	movs	r2, #1
 8004362:	2123      	movs	r1, #35	; 0x23
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fb9b 	bl	8004aa0 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 800436a:	f107 0318 	add.w	r3, r7, #24
 800436e:	2206      	movs	r2, #6
 8004370:	2128      	movs	r1, #40	; 0x28
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fb94 	bl	8004aa0 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d123      	bne.n	80043ca <I3G4250D_ReadXYZAngRate+0x96>
  {
    for (i = 0; i < 3; i++)
 8004382:	2300      	movs	r3, #0
 8004384:	623b      	str	r3, [r7, #32]
 8004386:	e01c      	b.n	80043c2 <I3G4250D_ReadXYZAngRate+0x8e>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	3301      	adds	r3, #1
 800438e:	3328      	adds	r3, #40	; 0x28
 8004390:	443b      	add	r3, r7
 8004392:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004396:	b29b      	uxth	r3, r3
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	b29a      	uxth	r2, r3
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	3328      	adds	r3, #40	; 0x28
 80043a2:	443b      	add	r3, r7
 80043a4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	b21a      	sxth	r2, r3
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	3328      	adds	r3, #40	; 0x28
 80043b6:	443b      	add	r3, r7
 80043b8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	3301      	adds	r3, #1
 80043c0:	623b      	str	r3, [r7, #32]
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	dddf      	ble.n	8004388 <I3G4250D_ReadXYZAngRate+0x54>
 80043c8:	e022      	b.n	8004410 <I3G4250D_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 80043ca:	2300      	movs	r3, #0
 80043cc:	623b      	str	r3, [r7, #32]
 80043ce:	e01c      	b.n	800440a <I3G4250D_ReadXYZAngRate+0xd6>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	3328      	adds	r3, #40	; 0x28
 80043d6:	443b      	add	r3, r7
 80043d8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	3301      	adds	r3, #1
 80043e8:	3328      	adds	r3, #40	; 0x28
 80043ea:	443b      	add	r3, r7
 80043ec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	4413      	add	r3, r2
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	b21a      	sxth	r2, r3
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	3328      	adds	r3, #40	; 0x28
 80043fe:	443b      	add	r3, r7
 8004400:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	3301      	adds	r3, #1
 8004408:	623b      	str	r3, [r7, #32]
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	2b02      	cmp	r3, #2
 800440e:	dddf      	ble.n	80043d0 <I3G4250D_ReadXYZAngRate+0x9c>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004416:	2b20      	cmp	r3, #32
 8004418:	d00c      	beq.n	8004434 <I3G4250D_ReadXYZAngRate+0x100>
 800441a:	2b20      	cmp	r3, #32
 800441c:	dc0d      	bgt.n	800443a <I3G4250D_ReadXYZAngRate+0x106>
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <I3G4250D_ReadXYZAngRate+0xf4>
 8004422:	2b10      	cmp	r3, #16
 8004424:	d003      	beq.n	800442e <I3G4250D_ReadXYZAngRate+0xfa>
 8004426:	e008      	b.n	800443a <I3G4250D_ReadXYZAngRate+0x106>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8004428:	4b15      	ldr	r3, [pc, #84]	; (8004480 <I3G4250D_ReadXYZAngRate+0x14c>)
 800442a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800442c:	e005      	b.n	800443a <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 800442e:	4b15      	ldr	r3, [pc, #84]	; (8004484 <I3G4250D_ReadXYZAngRate+0x150>)
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004432:	e002      	b.n	800443a <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8004434:	4b14      	ldr	r3, [pc, #80]	; (8004488 <I3G4250D_ReadXYZAngRate+0x154>)
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004438:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 800443a:	2300      	movs	r3, #0
 800443c:	623b      	str	r3, [r7, #32]
 800443e:	e016      	b.n	800446e <I3G4250D_ReadXYZAngRate+0x13a>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	3328      	adds	r3, #40	; 0x28
 8004446:	443b      	add	r3, r7
 8004448:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800444c:	ee07 3a90 	vmov	s15, r3
 8004450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	4413      	add	r3, r2
 800445c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004464:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	3301      	adds	r3, #1
 800446c:	623b      	str	r3, [r7, #32]
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	2b02      	cmp	r3, #2
 8004472:	dde5      	ble.n	8004440 <I3G4250D_ReadXYZAngRate+0x10c>
  }
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	3728      	adds	r7, #40	; 0x28
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	410c0000 	.word	0x410c0000
 8004484:	418c0000 	.word	0x418c0000
 8004488:	428c0000 	.word	0x428c0000

0800448c <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004496:	2300      	movs	r3, #0
 8004498:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800449a:	f000 fa89 	bl	80049b0 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80044a4:	f107 030f 	add.w	r3, r7, #15
 80044a8:	2201      	movs	r2, #1
 80044aa:	2120      	movs	r1, #32
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fac5 	bl	8004a3c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80044bc:	f107 030f 	add.w	r3, r7, #15
 80044c0:	2201      	movs	r2, #1
 80044c2:	2123      	movs	r1, #35	; 0x23
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fab9 	bl	8004a3c <GYRO_IO_Write>
}
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80044d2:	b480      	push	{r7}
 80044d4:	af00      	add	r7, sp, #0
}
 80044d6:	bf00      	nop
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80044e6:	f000 fa63 	bl	80049b0 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80044ea:	1dfb      	adds	r3, r7, #7
 80044ec:	2201      	movs	r2, #1
 80044ee:	210f      	movs	r1, #15
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fad5 	bl	8004aa0 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80044f6:	79fb      	ldrb	r3, [r7, #7]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004506:	1dfb      	adds	r3, r7, #7
 8004508:	2201      	movs	r2, #1
 800450a:	2124      	movs	r1, #36	; 0x24
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fac7 	bl	8004aa0 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004518:	b2db      	uxtb	r3, r3
 800451a:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800451c:	1dfb      	adds	r3, r7, #7
 800451e:	2201      	movs	r2, #1
 8004520:	2124      	movs	r1, #36	; 0x24
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fa8a 	bl	8004a3c <GYRO_IO_Write>
}
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800453a:	2300      	movs	r3, #0
 800453c:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8004544:	f107 030f 	add.w	r3, r7, #15
 8004548:	2201      	movs	r2, #1
 800454a:	2120      	movs	r1, #32
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fa75 	bl	8004a3c <GYRO_IO_Write>
}
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	4603      	mov	r3, r0
 8004562:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8004564:	2300      	movs	r3, #0
 8004566:	73fb      	strb	r3, [r7, #15]
 8004568:	2300      	movs	r3, #0
 800456a:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800456c:	f107 030f 	add.w	r3, r7, #15
 8004570:	2201      	movs	r2, #1
 8004572:	2130      	movs	r1, #48	; 0x30
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fa93 	bl	8004aa0 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800457a:	f107 030e 	add.w	r3, r7, #14
 800457e:	2201      	movs	r2, #1
 8004580:	2122      	movs	r1, #34	; 0x22
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fa8c 	bl	8004aa0 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800458e:	b2db      	uxtb	r3, r3
 8004590:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	121b      	asrs	r3, r3, #8
 8004598:	b25a      	sxtb	r2, r3
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	b25b      	sxtb	r3, r3
 800459e:	4313      	orrs	r3, r2
 80045a0:	b25b      	sxtb	r3, r3
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80045a6:	7bbb      	ldrb	r3, [r7, #14]
 80045a8:	f023 0320 	bic.w	r3, r3, #32
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80045b0:	88fb      	ldrh	r3, [r7, #6]
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	7bbb      	ldrb	r3, [r7, #14]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80045bc:	f107 030f 	add.w	r3, r7, #15
 80045c0:	2201      	movs	r2, #1
 80045c2:	2130      	movs	r1, #48	; 0x30
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fa39 	bl	8004a3c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80045ca:	f107 030e 	add.w	r3, r7, #14
 80045ce:	2201      	movs	r2, #1
 80045d0:	2122      	movs	r1, #34	; 0x22
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fa32 	bl	8004a3c <GYRO_IO_Write>
}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80045ea:	f107 030f 	add.w	r3, r7, #15
 80045ee:	2201      	movs	r2, #1
 80045f0:	2122      	movs	r1, #34	; 0x22
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fa54 	bl	8004aa0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10a      	bne.n	8004614 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004604:	b2db      	uxtb	r3, r3
 8004606:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800460e:	b2db      	uxtb	r3, r3
 8004610:	73fb      	strb	r3, [r7, #15]
 8004612:	e00c      	b.n	800462e <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d109      	bne.n	800462e <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	f023 0308 	bic.w	r3, r3, #8
 8004620:	b2db      	uxtb	r3, r3
 8004622:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	f043 0308 	orr.w	r3, r3, #8
 800462a:	b2db      	uxtb	r3, r3
 800462c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800462e:	f107 030f 	add.w	r3, r7, #15
 8004632:	2201      	movs	r2, #1
 8004634:	2122      	movs	r1, #34	; 0x22
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fa00 	bl	8004a3c <GYRO_IO_Write>
}
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	4603      	mov	r3, r0
 800464c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800464e:	f107 030f 	add.w	r3, r7, #15
 8004652:	2201      	movs	r2, #1
 8004654:	2122      	movs	r1, #34	; 0x22
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fa22 	bl	8004aa0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d107      	bne.n	8004672 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004668:	b2db      	uxtb	r3, r3
 800466a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	73fb      	strb	r3, [r7, #15]
 8004670:	e009      	b.n	8004686 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d106      	bne.n	8004686 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	f023 0308 	bic.w	r3, r3, #8
 800467e:	b2db      	uxtb	r3, r3
 8004680:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004686:	f107 030f 	add.w	r3, r7, #15
 800468a:	2201      	movs	r2, #1
 800468c:	2122      	movs	r1, #34	; 0x22
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f9d4 	bl	8004a3c <GYRO_IO_Write>
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80046a6:	f107 030f 	add.w	r3, r7, #15
 80046aa:	2201      	movs	r2, #1
 80046ac:	2121      	movs	r1, #33	; 0x21
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 f9f6 	bl	8004aa0 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80046be:	7bfa      	ldrb	r2, [r7, #15]
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80046c8:	f107 030f 	add.w	r3, r7, #15
 80046cc:	2201      	movs	r2, #1
 80046ce:	2121      	movs	r1, #33	; 0x21
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 f9b3 	bl	8004a3c <GYRO_IO_Write>
}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	4603      	mov	r3, r0
 80046e6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80046e8:	f107 030f 	add.w	r3, r7, #15
 80046ec:	2201      	movs	r2, #1
 80046ee:	2124      	movs	r1, #36	; 0x24
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 f9d5 	bl	8004aa0 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	f023 0310 	bic.w	r3, r3, #16
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8004700:	7bfa      	ldrb	r2, [r7, #15]
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	4313      	orrs	r3, r2
 8004706:	b2db      	uxtb	r3, r3
 8004708:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800470a:	f107 030f 	add.w	r3, r7, #15
 800470e:	2201      	movs	r2, #1
 8004710:	2124      	movs	r1, #36	; 0x24
 8004712:	4618      	mov	r0, r3
 8004714:	f000 f992 	bl	8004a3c <GYRO_IO_Write>
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08a      	sub	sp, #40	; 0x28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8004728:	2300      	movs	r3, #0
 800472a:	61bb      	str	r3, [r7, #24]
 800472c:	2300      	movs	r3, #0
 800472e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8004730:	f107 0310 	add.w	r3, r7, #16
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8004744:	2300      	movs	r3, #0
 8004746:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8004748:	f107 030f 	add.w	r3, r7, #15
 800474c:	2201      	movs	r2, #1
 800474e:	2123      	movs	r1, #35	; 0x23
 8004750:	4618      	mov	r0, r3
 8004752:	f000 f9a5 	bl	8004aa0 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8004756:	f107 0318 	add.w	r3, r7, #24
 800475a:	2206      	movs	r2, #6
 800475c:	2128      	movs	r1, #40	; 0x28
 800475e:	4618      	mov	r0, r3
 8004760:	f000 f99e 	bl	8004aa0 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d123      	bne.n	80047b6 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 800476e:	2300      	movs	r3, #0
 8004770:	623b      	str	r3, [r7, #32]
 8004772:	e01c      	b.n	80047ae <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	3301      	adds	r3, #1
 800477a:	3328      	adds	r3, #40	; 0x28
 800477c:	443b      	add	r3, r7
 800477e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004782:	b29b      	uxth	r3, r3
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	b29a      	uxth	r2, r3
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	3328      	adds	r3, #40	; 0x28
 800478e:	443b      	add	r3, r7
 8004790:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004794:	b29b      	uxth	r3, r3
 8004796:	4413      	add	r3, r2
 8004798:	b29b      	uxth	r3, r3
 800479a:	b21a      	sxth	r2, r3
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	3328      	adds	r3, #40	; 0x28
 80047a2:	443b      	add	r3, r7
 80047a4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	3301      	adds	r3, #1
 80047ac:	623b      	str	r3, [r7, #32]
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	dddf      	ble.n	8004774 <L3GD20_ReadXYZAngRate+0x54>
 80047b4:	e022      	b.n	80047fc <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80047b6:	2300      	movs	r3, #0
 80047b8:	623b      	str	r3, [r7, #32]
 80047ba:	e01c      	b.n	80047f6 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	3328      	adds	r3, #40	; 0x28
 80047c2:	443b      	add	r3, r7
 80047c4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	021b      	lsls	r3, r3, #8
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	3301      	adds	r3, #1
 80047d4:	3328      	adds	r3, #40	; 0x28
 80047d6:	443b      	add	r3, r7
 80047d8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	4413      	add	r3, r2
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	b21a      	sxth	r2, r3
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	3328      	adds	r3, #40	; 0x28
 80047ea:	443b      	add	r3, r7
 80047ec:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	3301      	adds	r3, #1
 80047f4:	623b      	str	r3, [r7, #32]
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	dddf      	ble.n	80047bc <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004802:	2b20      	cmp	r3, #32
 8004804:	d00c      	beq.n	8004820 <L3GD20_ReadXYZAngRate+0x100>
 8004806:	2b20      	cmp	r3, #32
 8004808:	dc0d      	bgt.n	8004826 <L3GD20_ReadXYZAngRate+0x106>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <L3GD20_ReadXYZAngRate+0xf4>
 800480e:	2b10      	cmp	r3, #16
 8004810:	d003      	beq.n	800481a <L3GD20_ReadXYZAngRate+0xfa>
 8004812:	e008      	b.n	8004826 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8004814:	4b15      	ldr	r3, [pc, #84]	; (800486c <L3GD20_ReadXYZAngRate+0x14c>)
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8004818:	e005      	b.n	8004826 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800481a:	4b15      	ldr	r3, [pc, #84]	; (8004870 <L3GD20_ReadXYZAngRate+0x150>)
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800481e:	e002      	b.n	8004826 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8004820:	4b14      	ldr	r3, [pc, #80]	; (8004874 <L3GD20_ReadXYZAngRate+0x154>)
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8004824:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8004826:	2300      	movs	r3, #0
 8004828:	623b      	str	r3, [r7, #32]
 800482a:	e016      	b.n	800485a <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	3328      	adds	r3, #40	; 0x28
 8004832:	443b      	add	r3, r7
 8004834:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8004838:	ee07 3a90 	vmov	s15, r3
 800483c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	4413      	add	r3, r2
 8004848:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800484c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004850:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	3301      	adds	r3, #1
 8004858:	623b      	str	r3, [r7, #32]
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	2b02      	cmp	r3, #2
 800485e:	dde5      	ble.n	800482c <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	3728      	adds	r7, #40	; 0x28
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	410c0000 	.word	0x410c0000
 8004870:	418c0000 	.word	0x418c0000
 8004874:	428c0000 	.word	0x428c0000

08004878 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800487c:	481a      	ldr	r0, [pc, #104]	; (80048e8 <SPIx_Init+0x70>)
 800487e:	f7ff f996 	bl	8003bae <HAL_SPI_GetState>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d12c      	bne.n	80048e2 <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8004888:	4b17      	ldr	r3, [pc, #92]	; (80048e8 <SPIx_Init+0x70>)
 800488a:	4a18      	ldr	r2, [pc, #96]	; (80048ec <SPIx_Init+0x74>)
 800488c:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800488e:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <SPIx_Init+0x70>)
 8004890:	2218      	movs	r2, #24
 8004892:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 8004894:	4b14      	ldr	r3, [pc, #80]	; (80048e8 <SPIx_Init+0x70>)
 8004896:	2200      	movs	r2, #0
 8004898:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800489a:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <SPIx_Init+0x70>)
 800489c:	2200      	movs	r2, #0
 800489e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80048a0:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <SPIx_Init+0x70>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048a6:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <SPIx_Init+0x70>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80048ac:	4b0e      	ldr	r3, [pc, #56]	; (80048e8 <SPIx_Init+0x70>)
 80048ae:	2207      	movs	r2, #7
 80048b0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80048b2:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <SPIx_Init+0x70>)
 80048b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80048b8:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048ba:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <SPIx_Init+0x70>)
 80048bc:	2200      	movs	r2, #0
 80048be:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80048c0:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <SPIx_Init+0x70>)
 80048c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048c6:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 80048c8:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <SPIx_Init+0x70>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80048ce:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <SPIx_Init+0x70>)
 80048d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80048d4:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 80048d6:	4804      	ldr	r0, [pc, #16]	; (80048e8 <SPIx_Init+0x70>)
 80048d8:	f000 f836 	bl	8004948 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80048dc:	4802      	ldr	r0, [pc, #8]	; (80048e8 <SPIx_Init+0x70>)
 80048de:	f7fe fe71 	bl	80035c4 <HAL_SPI_Init>
  }
}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	200004e8 	.word	0x200004e8
 80048ec:	40013000 	.word	0x40013000

080048f0 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	4603      	mov	r3, r0
 80048f8:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 80048fa:	2300      	movs	r3, #0
 80048fc:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <SPIx_WriteRead+0x38>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f107 020f 	add.w	r2, r7, #15
 8004906:	1df9      	adds	r1, r7, #7
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	2301      	movs	r3, #1
 800490c:	4807      	ldr	r0, [pc, #28]	; (800492c <SPIx_WriteRead+0x3c>)
 800490e:	f7fe ff2c 	bl	800376a <HAL_SPI_TransmitReceive>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8004918:	f000 f80a 	bl	8004930 <SPIx_Error>
  }
  
  return receivedbyte;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	200000b4 	.word	0x200000b4
 800492c:	200004e8 	.word	0x200004e8

08004930 <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8004934:	4803      	ldr	r0, [pc, #12]	; (8004944 <SPIx_Error+0x14>)
 8004936:	f7fe fef0 	bl	800371a <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 800493a:	f7ff ff9d 	bl	8004878 <SPIx_Init>
}
 800493e:	bf00      	nop
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	200004e8 	.word	0x200004e8

08004948 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8004950:	4b16      	ldr	r3, [pc, #88]	; (80049ac <SPIx_MspInit+0x64>)
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	4a15      	ldr	r2, [pc, #84]	; (80049ac <SPIx_MspInit+0x64>)
 8004956:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800495a:	6193      	str	r3, [r2, #24]
 800495c:	4b13      	ldr	r3, [pc, #76]	; (80049ac <SPIx_MspInit+0x64>)
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8004968:	4b10      	ldr	r3, [pc, #64]	; (80049ac <SPIx_MspInit+0x64>)
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	4a0f      	ldr	r2, [pc, #60]	; (80049ac <SPIx_MspInit+0x64>)
 800496e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004972:	6153      	str	r3, [r2, #20]
 8004974:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <SPIx_MspInit+0x64>)
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8004980:	23e0      	movs	r3, #224	; 0xe0
 8004982:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004984:	2302      	movs	r3, #2
 8004986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8004988:	2300      	movs	r3, #0
 800498a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800498c:	2303      	movs	r3, #3
 800498e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8004990:	2305      	movs	r3, #5
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8004994:	f107 0314 	add.w	r3, r7, #20
 8004998:	4619      	mov	r1, r3
 800499a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800499e:	f7fc fdd7 	bl	8001550 <HAL_GPIO_Init>
}
 80049a2:	bf00      	nop
 80049a4:	3728      	adds	r7, #40	; 0x28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000

080049b0 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80049b6:	4b1f      	ldr	r3, [pc, #124]	; (8004a34 <GYRO_IO_Init+0x84>)
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	4a1e      	ldr	r2, [pc, #120]	; (8004a34 <GYRO_IO_Init+0x84>)
 80049bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049c0:	6153      	str	r3, [r2, #20]
 80049c2:	4b1c      	ldr	r3, [pc, #112]	; (8004a34 <GYRO_IO_Init+0x84>)
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ca:	60bb      	str	r3, [r7, #8]
 80049cc:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80049ce:	2308      	movs	r3, #8
 80049d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80049d2:	2301      	movs	r3, #1
 80049d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80049da:	2303      	movs	r3, #3
 80049dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80049de:	f107 030c 	add.w	r3, r7, #12
 80049e2:	4619      	mov	r1, r3
 80049e4:	4814      	ldr	r0, [pc, #80]	; (8004a38 <GYRO_IO_Init+0x88>)
 80049e6:	f7fc fdb3 	bl	8001550 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 80049ea:	2201      	movs	r2, #1
 80049ec:	2108      	movs	r1, #8
 80049ee:	4812      	ldr	r0, [pc, #72]	; (8004a38 <GYRO_IO_Init+0x88>)
 80049f0:	f7fd f804 	bl	80019fc <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80049f4:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <GYRO_IO_Init+0x84>)
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	4a0e      	ldr	r2, [pc, #56]	; (8004a34 <GYRO_IO_Init+0x84>)
 80049fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049fe:	6153      	str	r3, [r2, #20]
 8004a00:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <GYRO_IO_Init+0x84>)
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a08:	607b      	str	r3, [r7, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a14:	2303      	movs	r3, #3
 8004a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004a1c:	f107 030c 	add.w	r3, r7, #12
 8004a20:	4619      	mov	r1, r3
 8004a22:	4805      	ldr	r0, [pc, #20]	; (8004a38 <GYRO_IO_Init+0x88>)
 8004a24:	f7fc fd94 	bl	8001550 <HAL_GPIO_Init>
  
  SPIx_Init();
 8004a28:	f7ff ff26 	bl	8004878 <SPIx_Init>
}
 8004a2c:	bf00      	nop
 8004a2e:	3720      	adds	r7, #32
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	48001000 	.word	0x48001000

08004a3c <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	70fb      	strb	r3, [r7, #3]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8004a4c:	883b      	ldrh	r3, [r7, #0]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d903      	bls.n	8004a5a <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8004a52:	78fb      	ldrb	r3, [r7, #3]
 8004a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a58:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2108      	movs	r1, #8
 8004a5e:	480f      	ldr	r0, [pc, #60]	; (8004a9c <GYRO_IO_Write+0x60>)
 8004a60:	f7fc ffcc 	bl	80019fc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff ff42 	bl	80048f0 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8004a6c:	e00a      	b.n	8004a84 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff ff3c 	bl	80048f0 <SPIx_WriteRead>
    NumByteToWrite--;
 8004a78:	883b      	ldrh	r3, [r7, #0]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3301      	adds	r3, #1
 8004a82:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8004a84:	883b      	ldrh	r3, [r7, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f1      	bne.n	8004a6e <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	2108      	movs	r1, #8
 8004a8e:	4803      	ldr	r0, [pc, #12]	; (8004a9c <GYRO_IO_Write+0x60>)
 8004a90:	f7fc ffb4 	bl	80019fc <HAL_GPIO_WritePin>
}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	48001000 	.word	0x48001000

08004aa0 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
 8004aac:	4613      	mov	r3, r2
 8004aae:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8004ab0:	883b      	ldrh	r3, [r7, #0]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d904      	bls.n	8004ac0 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004abc:	70fb      	strb	r3, [r7, #3]
 8004abe:	e003      	b.n	8004ac8 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ac6:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2108      	movs	r1, #8
 8004acc:	4810      	ldr	r0, [pc, #64]	; (8004b10 <GYRO_IO_Read+0x70>)
 8004ace:	f7fc ff95 	bl	80019fc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ff0b 	bl	80048f0 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8004ada:	e00c      	b.n	8004af6 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8004adc:	2000      	movs	r0, #0
 8004ade:	f7ff ff07 	bl	80048f0 <SPIx_WriteRead>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8004aea:	883b      	ldrh	r3, [r7, #0]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3301      	adds	r3, #1
 8004af4:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8004af6:	883b      	ldrh	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1ef      	bne.n	8004adc <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004afc:	2201      	movs	r2, #1
 8004afe:	2108      	movs	r1, #8
 8004b00:	4803      	ldr	r0, [pc, #12]	; (8004b10 <GYRO_IO_Read+0x70>)
 8004b02:	f7fc ff7b 	bl	80019fc <HAL_GPIO_WritePin>
}  
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	48001000 	.word	0x48001000

08004b14 <srand>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <srand+0x44>)
 8004b18:	681d      	ldr	r5, [r3, #0]
 8004b1a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	b9b3      	cbnz	r3, 8004b4e <srand+0x3a>
 8004b20:	2018      	movs	r0, #24
 8004b22:	f000 fab1 	bl	8005088 <malloc>
 8004b26:	4602      	mov	r2, r0
 8004b28:	6328      	str	r0, [r5, #48]	; 0x30
 8004b2a:	b920      	cbnz	r0, 8004b36 <srand+0x22>
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <srand+0x48>)
 8004b2e:	480c      	ldr	r0, [pc, #48]	; (8004b60 <srand+0x4c>)
 8004b30:	2146      	movs	r1, #70	; 0x46
 8004b32:	f000 fa3f 	bl	8004fb4 <__assert_func>
 8004b36:	490b      	ldr	r1, [pc, #44]	; (8004b64 <srand+0x50>)
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <srand+0x54>)
 8004b3a:	e9c0 1300 	strd	r1, r3, [r0]
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <srand+0x58>)
 8004b40:	6083      	str	r3, [r0, #8]
 8004b42:	230b      	movs	r3, #11
 8004b44:	8183      	strh	r3, [r0, #12]
 8004b46:	2100      	movs	r1, #0
 8004b48:	2001      	movs	r0, #1
 8004b4a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004b4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004b50:	2200      	movs	r2, #0
 8004b52:	611c      	str	r4, [r3, #16]
 8004b54:	615a      	str	r2, [r3, #20]
 8004b56:	bd38      	pop	{r3, r4, r5, pc}
 8004b58:	20000110 	.word	0x20000110
 8004b5c:	080066c0 	.word	0x080066c0
 8004b60:	080066d7 	.word	0x080066d7
 8004b64:	abcd330e 	.word	0xabcd330e
 8004b68:	e66d1234 	.word	0xe66d1234
 8004b6c:	0005deec 	.word	0x0005deec

08004b70 <rand>:
 8004b70:	4b16      	ldr	r3, [pc, #88]	; (8004bcc <rand+0x5c>)
 8004b72:	b510      	push	{r4, lr}
 8004b74:	681c      	ldr	r4, [r3, #0]
 8004b76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b78:	b9b3      	cbnz	r3, 8004ba8 <rand+0x38>
 8004b7a:	2018      	movs	r0, #24
 8004b7c:	f000 fa84 	bl	8005088 <malloc>
 8004b80:	4602      	mov	r2, r0
 8004b82:	6320      	str	r0, [r4, #48]	; 0x30
 8004b84:	b920      	cbnz	r0, 8004b90 <rand+0x20>
 8004b86:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <rand+0x60>)
 8004b88:	4812      	ldr	r0, [pc, #72]	; (8004bd4 <rand+0x64>)
 8004b8a:	2152      	movs	r1, #82	; 0x52
 8004b8c:	f000 fa12 	bl	8004fb4 <__assert_func>
 8004b90:	4911      	ldr	r1, [pc, #68]	; (8004bd8 <rand+0x68>)
 8004b92:	4b12      	ldr	r3, [pc, #72]	; (8004bdc <rand+0x6c>)
 8004b94:	e9c0 1300 	strd	r1, r3, [r0]
 8004b98:	4b11      	ldr	r3, [pc, #68]	; (8004be0 <rand+0x70>)
 8004b9a:	6083      	str	r3, [r0, #8]
 8004b9c:	230b      	movs	r3, #11
 8004b9e:	8183      	strh	r3, [r0, #12]
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	2001      	movs	r0, #1
 8004ba4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004ba8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004baa:	480e      	ldr	r0, [pc, #56]	; (8004be4 <rand+0x74>)
 8004bac:	690b      	ldr	r3, [r1, #16]
 8004bae:	694c      	ldr	r4, [r1, #20]
 8004bb0:	4a0d      	ldr	r2, [pc, #52]	; (8004be8 <rand+0x78>)
 8004bb2:	4358      	muls	r0, r3
 8004bb4:	fb02 0004 	mla	r0, r2, r4, r0
 8004bb8:	fba3 3202 	umull	r3, r2, r3, r2
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	eb40 0002 	adc.w	r0, r0, r2
 8004bc2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004bc6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004bca:	bd10      	pop	{r4, pc}
 8004bcc:	20000110 	.word	0x20000110
 8004bd0:	080066c0 	.word	0x080066c0
 8004bd4:	080066d7 	.word	0x080066d7
 8004bd8:	abcd330e 	.word	0xabcd330e
 8004bdc:	e66d1234 	.word	0xe66d1234
 8004be0:	0005deec 	.word	0x0005deec
 8004be4:	5851f42d 	.word	0x5851f42d
 8004be8:	4c957f2d 	.word	0x4c957f2d

08004bec <std>:
 8004bec:	2300      	movs	r3, #0
 8004bee:	b510      	push	{r4, lr}
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	e9c0 3300 	strd	r3, r3, [r0]
 8004bf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bfa:	6083      	str	r3, [r0, #8]
 8004bfc:	8181      	strh	r1, [r0, #12]
 8004bfe:	6643      	str	r3, [r0, #100]	; 0x64
 8004c00:	81c2      	strh	r2, [r0, #14]
 8004c02:	6183      	str	r3, [r0, #24]
 8004c04:	4619      	mov	r1, r3
 8004c06:	2208      	movs	r2, #8
 8004c08:	305c      	adds	r0, #92	; 0x5c
 8004c0a:	f000 f914 	bl	8004e36 <memset>
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <std+0x58>)
 8004c10:	6263      	str	r3, [r4, #36]	; 0x24
 8004c12:	4b0d      	ldr	r3, [pc, #52]	; (8004c48 <std+0x5c>)
 8004c14:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c16:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <std+0x60>)
 8004c18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <std+0x64>)
 8004c1c:	6323      	str	r3, [r4, #48]	; 0x30
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <std+0x68>)
 8004c20:	6224      	str	r4, [r4, #32]
 8004c22:	429c      	cmp	r4, r3
 8004c24:	d006      	beq.n	8004c34 <std+0x48>
 8004c26:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004c2a:	4294      	cmp	r4, r2
 8004c2c:	d002      	beq.n	8004c34 <std+0x48>
 8004c2e:	33d0      	adds	r3, #208	; 0xd0
 8004c30:	429c      	cmp	r4, r3
 8004c32:	d105      	bne.n	8004c40 <std+0x54>
 8004c34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c3c:	f000 b9a0 	b.w	8004f80 <__retarget_lock_init_recursive>
 8004c40:	bd10      	pop	{r4, pc}
 8004c42:	bf00      	nop
 8004c44:	08004db1 	.word	0x08004db1
 8004c48:	08004dd3 	.word	0x08004dd3
 8004c4c:	08004e0b 	.word	0x08004e0b
 8004c50:	08004e2f 	.word	0x08004e2f
 8004c54:	2000054c 	.word	0x2000054c

08004c58 <stdio_exit_handler>:
 8004c58:	4a02      	ldr	r2, [pc, #8]	; (8004c64 <stdio_exit_handler+0xc>)
 8004c5a:	4903      	ldr	r1, [pc, #12]	; (8004c68 <stdio_exit_handler+0x10>)
 8004c5c:	4803      	ldr	r0, [pc, #12]	; (8004c6c <stdio_exit_handler+0x14>)
 8004c5e:	f000 b869 	b.w	8004d34 <_fwalk_sglue>
 8004c62:	bf00      	nop
 8004c64:	200000b8 	.word	0x200000b8
 8004c68:	080058cd 	.word	0x080058cd
 8004c6c:	200000c4 	.word	0x200000c4

08004c70 <cleanup_stdio>:
 8004c70:	6841      	ldr	r1, [r0, #4]
 8004c72:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <cleanup_stdio+0x34>)
 8004c74:	4299      	cmp	r1, r3
 8004c76:	b510      	push	{r4, lr}
 8004c78:	4604      	mov	r4, r0
 8004c7a:	d001      	beq.n	8004c80 <cleanup_stdio+0x10>
 8004c7c:	f000 fe26 	bl	80058cc <_fflush_r>
 8004c80:	68a1      	ldr	r1, [r4, #8]
 8004c82:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <cleanup_stdio+0x38>)
 8004c84:	4299      	cmp	r1, r3
 8004c86:	d002      	beq.n	8004c8e <cleanup_stdio+0x1e>
 8004c88:	4620      	mov	r0, r4
 8004c8a:	f000 fe1f 	bl	80058cc <_fflush_r>
 8004c8e:	68e1      	ldr	r1, [r4, #12]
 8004c90:	4b06      	ldr	r3, [pc, #24]	; (8004cac <cleanup_stdio+0x3c>)
 8004c92:	4299      	cmp	r1, r3
 8004c94:	d004      	beq.n	8004ca0 <cleanup_stdio+0x30>
 8004c96:	4620      	mov	r0, r4
 8004c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c9c:	f000 be16 	b.w	80058cc <_fflush_r>
 8004ca0:	bd10      	pop	{r4, pc}
 8004ca2:	bf00      	nop
 8004ca4:	2000054c 	.word	0x2000054c
 8004ca8:	200005b4 	.word	0x200005b4
 8004cac:	2000061c 	.word	0x2000061c

08004cb0 <global_stdio_init.part.0>:
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <global_stdio_init.part.0+0x30>)
 8004cb4:	4c0b      	ldr	r4, [pc, #44]	; (8004ce4 <global_stdio_init.part.0+0x34>)
 8004cb6:	4a0c      	ldr	r2, [pc, #48]	; (8004ce8 <global_stdio_init.part.0+0x38>)
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	4620      	mov	r0, r4
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2104      	movs	r1, #4
 8004cc0:	f7ff ff94 	bl	8004bec <std>
 8004cc4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004cc8:	2201      	movs	r2, #1
 8004cca:	2109      	movs	r1, #9
 8004ccc:	f7ff ff8e 	bl	8004bec <std>
 8004cd0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cda:	2112      	movs	r1, #18
 8004cdc:	f7ff bf86 	b.w	8004bec <std>
 8004ce0:	20000684 	.word	0x20000684
 8004ce4:	2000054c 	.word	0x2000054c
 8004ce8:	08004c59 	.word	0x08004c59

08004cec <__sfp_lock_acquire>:
 8004cec:	4801      	ldr	r0, [pc, #4]	; (8004cf4 <__sfp_lock_acquire+0x8>)
 8004cee:	f000 b948 	b.w	8004f82 <__retarget_lock_acquire_recursive>
 8004cf2:	bf00      	nop
 8004cf4:	2000068d 	.word	0x2000068d

08004cf8 <__sfp_lock_release>:
 8004cf8:	4801      	ldr	r0, [pc, #4]	; (8004d00 <__sfp_lock_release+0x8>)
 8004cfa:	f000 b943 	b.w	8004f84 <__retarget_lock_release_recursive>
 8004cfe:	bf00      	nop
 8004d00:	2000068d 	.word	0x2000068d

08004d04 <__sinit>:
 8004d04:	b510      	push	{r4, lr}
 8004d06:	4604      	mov	r4, r0
 8004d08:	f7ff fff0 	bl	8004cec <__sfp_lock_acquire>
 8004d0c:	6a23      	ldr	r3, [r4, #32]
 8004d0e:	b11b      	cbz	r3, 8004d18 <__sinit+0x14>
 8004d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d14:	f7ff bff0 	b.w	8004cf8 <__sfp_lock_release>
 8004d18:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <__sinit+0x28>)
 8004d1a:	6223      	str	r3, [r4, #32]
 8004d1c:	4b04      	ldr	r3, [pc, #16]	; (8004d30 <__sinit+0x2c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f5      	bne.n	8004d10 <__sinit+0xc>
 8004d24:	f7ff ffc4 	bl	8004cb0 <global_stdio_init.part.0>
 8004d28:	e7f2      	b.n	8004d10 <__sinit+0xc>
 8004d2a:	bf00      	nop
 8004d2c:	08004c71 	.word	0x08004c71
 8004d30:	20000684 	.word	0x20000684

08004d34 <_fwalk_sglue>:
 8004d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d38:	4607      	mov	r7, r0
 8004d3a:	4688      	mov	r8, r1
 8004d3c:	4614      	mov	r4, r2
 8004d3e:	2600      	movs	r6, #0
 8004d40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d44:	f1b9 0901 	subs.w	r9, r9, #1
 8004d48:	d505      	bpl.n	8004d56 <_fwalk_sglue+0x22>
 8004d4a:	6824      	ldr	r4, [r4, #0]
 8004d4c:	2c00      	cmp	r4, #0
 8004d4e:	d1f7      	bne.n	8004d40 <_fwalk_sglue+0xc>
 8004d50:	4630      	mov	r0, r6
 8004d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d56:	89ab      	ldrh	r3, [r5, #12]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d907      	bls.n	8004d6c <_fwalk_sglue+0x38>
 8004d5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d60:	3301      	adds	r3, #1
 8004d62:	d003      	beq.n	8004d6c <_fwalk_sglue+0x38>
 8004d64:	4629      	mov	r1, r5
 8004d66:	4638      	mov	r0, r7
 8004d68:	47c0      	blx	r8
 8004d6a:	4306      	orrs	r6, r0
 8004d6c:	3568      	adds	r5, #104	; 0x68
 8004d6e:	e7e9      	b.n	8004d44 <_fwalk_sglue+0x10>

08004d70 <siprintf>:
 8004d70:	b40e      	push	{r1, r2, r3}
 8004d72:	b500      	push	{lr}
 8004d74:	b09c      	sub	sp, #112	; 0x70
 8004d76:	ab1d      	add	r3, sp, #116	; 0x74
 8004d78:	9002      	str	r0, [sp, #8]
 8004d7a:	9006      	str	r0, [sp, #24]
 8004d7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d80:	4809      	ldr	r0, [pc, #36]	; (8004da8 <siprintf+0x38>)
 8004d82:	9107      	str	r1, [sp, #28]
 8004d84:	9104      	str	r1, [sp, #16]
 8004d86:	4909      	ldr	r1, [pc, #36]	; (8004dac <siprintf+0x3c>)
 8004d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d8c:	9105      	str	r1, [sp, #20]
 8004d8e:	6800      	ldr	r0, [r0, #0]
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	a902      	add	r1, sp, #8
 8004d94:	f000 fa86 	bl	80052a4 <_svfiprintf_r>
 8004d98:	9b02      	ldr	r3, [sp, #8]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	b01c      	add	sp, #112	; 0x70
 8004da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004da4:	b003      	add	sp, #12
 8004da6:	4770      	bx	lr
 8004da8:	20000110 	.word	0x20000110
 8004dac:	ffff0208 	.word	0xffff0208

08004db0 <__sread>:
 8004db0:	b510      	push	{r4, lr}
 8004db2:	460c      	mov	r4, r1
 8004db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db8:	f000 f894 	bl	8004ee4 <_read_r>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	bfab      	itete	ge
 8004dc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8004dc4:	181b      	addge	r3, r3, r0
 8004dc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dca:	bfac      	ite	ge
 8004dcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004dce:	81a3      	strhlt	r3, [r4, #12]
 8004dd0:	bd10      	pop	{r4, pc}

08004dd2 <__swrite>:
 8004dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd6:	461f      	mov	r7, r3
 8004dd8:	898b      	ldrh	r3, [r1, #12]
 8004dda:	05db      	lsls	r3, r3, #23
 8004ddc:	4605      	mov	r5, r0
 8004dde:	460c      	mov	r4, r1
 8004de0:	4616      	mov	r6, r2
 8004de2:	d505      	bpl.n	8004df0 <__swrite+0x1e>
 8004de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de8:	2302      	movs	r3, #2
 8004dea:	2200      	movs	r2, #0
 8004dec:	f000 f868 	bl	8004ec0 <_lseek_r>
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dfa:	81a3      	strh	r3, [r4, #12]
 8004dfc:	4632      	mov	r2, r6
 8004dfe:	463b      	mov	r3, r7
 8004e00:	4628      	mov	r0, r5
 8004e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e06:	f000 b87f 	b.w	8004f08 <_write_r>

08004e0a <__sseek>:
 8004e0a:	b510      	push	{r4, lr}
 8004e0c:	460c      	mov	r4, r1
 8004e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e12:	f000 f855 	bl	8004ec0 <_lseek_r>
 8004e16:	1c43      	adds	r3, r0, #1
 8004e18:	89a3      	ldrh	r3, [r4, #12]
 8004e1a:	bf15      	itete	ne
 8004e1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e26:	81a3      	strheq	r3, [r4, #12]
 8004e28:	bf18      	it	ne
 8004e2a:	81a3      	strhne	r3, [r4, #12]
 8004e2c:	bd10      	pop	{r4, pc}

08004e2e <__sclose>:
 8004e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e32:	f000 b823 	b.w	8004e7c <_close_r>

08004e36 <memset>:
 8004e36:	4402      	add	r2, r0
 8004e38:	4603      	mov	r3, r0
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d100      	bne.n	8004e40 <memset+0xa>
 8004e3e:	4770      	bx	lr
 8004e40:	f803 1b01 	strb.w	r1, [r3], #1
 8004e44:	e7f9      	b.n	8004e3a <memset+0x4>
	...

08004e48 <time>:
 8004e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <time+0x30>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	4669      	mov	r1, sp
 8004e50:	4604      	mov	r4, r0
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	f000 f822 	bl	8004e9c <_gettimeofday_r>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	bfbe      	ittt	lt
 8004e5c:	f04f 32ff 	movlt.w	r2, #4294967295
 8004e60:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e64:	e9cd 2300 	strdlt	r2, r3, [sp]
 8004e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e6c:	b10c      	cbz	r4, 8004e72 <time+0x2a>
 8004e6e:	e9c4 0100 	strd	r0, r1, [r4]
 8004e72:	b004      	add	sp, #16
 8004e74:	bd10      	pop	{r4, pc}
 8004e76:	bf00      	nop
 8004e78:	20000110 	.word	0x20000110

08004e7c <_close_r>:
 8004e7c:	b538      	push	{r3, r4, r5, lr}
 8004e7e:	4d06      	ldr	r5, [pc, #24]	; (8004e98 <_close_r+0x1c>)
 8004e80:	2300      	movs	r3, #0
 8004e82:	4604      	mov	r4, r0
 8004e84:	4608      	mov	r0, r1
 8004e86:	602b      	str	r3, [r5, #0]
 8004e88:	f7fc f867 	bl	8000f5a <_close>
 8004e8c:	1c43      	adds	r3, r0, #1
 8004e8e:	d102      	bne.n	8004e96 <_close_r+0x1a>
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	b103      	cbz	r3, 8004e96 <_close_r+0x1a>
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	bd38      	pop	{r3, r4, r5, pc}
 8004e98:	20000688 	.word	0x20000688

08004e9c <_gettimeofday_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	4d07      	ldr	r5, [pc, #28]	; (8004ebc <_gettimeofday_r+0x20>)
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	4608      	mov	r0, r1
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	602b      	str	r3, [r5, #0]
 8004eaa:	f001 f853 	bl	8005f54 <_gettimeofday>
 8004eae:	1c43      	adds	r3, r0, #1
 8004eb0:	d102      	bne.n	8004eb8 <_gettimeofday_r+0x1c>
 8004eb2:	682b      	ldr	r3, [r5, #0]
 8004eb4:	b103      	cbz	r3, 8004eb8 <_gettimeofday_r+0x1c>
 8004eb6:	6023      	str	r3, [r4, #0]
 8004eb8:	bd38      	pop	{r3, r4, r5, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000688 	.word	0x20000688

08004ec0 <_lseek_r>:
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	4d07      	ldr	r5, [pc, #28]	; (8004ee0 <_lseek_r+0x20>)
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	4608      	mov	r0, r1
 8004ec8:	4611      	mov	r1, r2
 8004eca:	2200      	movs	r2, #0
 8004ecc:	602a      	str	r2, [r5, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f7fc f86a 	bl	8000fa8 <_lseek>
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	d102      	bne.n	8004ede <_lseek_r+0x1e>
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	b103      	cbz	r3, 8004ede <_lseek_r+0x1e>
 8004edc:	6023      	str	r3, [r4, #0]
 8004ede:	bd38      	pop	{r3, r4, r5, pc}
 8004ee0:	20000688 	.word	0x20000688

08004ee4 <_read_r>:
 8004ee4:	b538      	push	{r3, r4, r5, lr}
 8004ee6:	4d07      	ldr	r5, [pc, #28]	; (8004f04 <_read_r+0x20>)
 8004ee8:	4604      	mov	r4, r0
 8004eea:	4608      	mov	r0, r1
 8004eec:	4611      	mov	r1, r2
 8004eee:	2200      	movs	r2, #0
 8004ef0:	602a      	str	r2, [r5, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f7fb fff8 	bl	8000ee8 <_read>
 8004ef8:	1c43      	adds	r3, r0, #1
 8004efa:	d102      	bne.n	8004f02 <_read_r+0x1e>
 8004efc:	682b      	ldr	r3, [r5, #0]
 8004efe:	b103      	cbz	r3, 8004f02 <_read_r+0x1e>
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	bd38      	pop	{r3, r4, r5, pc}
 8004f04:	20000688 	.word	0x20000688

08004f08 <_write_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	4d07      	ldr	r5, [pc, #28]	; (8004f28 <_write_r+0x20>)
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	4608      	mov	r0, r1
 8004f10:	4611      	mov	r1, r2
 8004f12:	2200      	movs	r2, #0
 8004f14:	602a      	str	r2, [r5, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	f7fc f803 	bl	8000f22 <_write>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d102      	bne.n	8004f26 <_write_r+0x1e>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	b103      	cbz	r3, 8004f26 <_write_r+0x1e>
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
 8004f28:	20000688 	.word	0x20000688

08004f2c <__errno>:
 8004f2c:	4b01      	ldr	r3, [pc, #4]	; (8004f34 <__errno+0x8>)
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	20000110 	.word	0x20000110

08004f38 <__libc_init_array>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	4d0d      	ldr	r5, [pc, #52]	; (8004f70 <__libc_init_array+0x38>)
 8004f3c:	4c0d      	ldr	r4, [pc, #52]	; (8004f74 <__libc_init_array+0x3c>)
 8004f3e:	1b64      	subs	r4, r4, r5
 8004f40:	10a4      	asrs	r4, r4, #2
 8004f42:	2600      	movs	r6, #0
 8004f44:	42a6      	cmp	r6, r4
 8004f46:	d109      	bne.n	8004f5c <__libc_init_array+0x24>
 8004f48:	4d0b      	ldr	r5, [pc, #44]	; (8004f78 <__libc_init_array+0x40>)
 8004f4a:	4c0c      	ldr	r4, [pc, #48]	; (8004f7c <__libc_init_array+0x44>)
 8004f4c:	f001 f80a 	bl	8005f64 <_init>
 8004f50:	1b64      	subs	r4, r4, r5
 8004f52:	10a4      	asrs	r4, r4, #2
 8004f54:	2600      	movs	r6, #0
 8004f56:	42a6      	cmp	r6, r4
 8004f58:	d105      	bne.n	8004f66 <__libc_init_array+0x2e>
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
 8004f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f60:	4798      	blx	r3
 8004f62:	3601      	adds	r6, #1
 8004f64:	e7ee      	b.n	8004f44 <__libc_init_array+0xc>
 8004f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6a:	4798      	blx	r3
 8004f6c:	3601      	adds	r6, #1
 8004f6e:	e7f2      	b.n	8004f56 <__libc_init_array+0x1e>
 8004f70:	080067a0 	.word	0x080067a0
 8004f74:	080067a0 	.word	0x080067a0
 8004f78:	080067a0 	.word	0x080067a0
 8004f7c:	080067a4 	.word	0x080067a4

08004f80 <__retarget_lock_init_recursive>:
 8004f80:	4770      	bx	lr

08004f82 <__retarget_lock_acquire_recursive>:
 8004f82:	4770      	bx	lr

08004f84 <__retarget_lock_release_recursive>:
 8004f84:	4770      	bx	lr

08004f86 <strcpy>:
 8004f86:	4603      	mov	r3, r0
 8004f88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f8c:	f803 2b01 	strb.w	r2, [r3], #1
 8004f90:	2a00      	cmp	r2, #0
 8004f92:	d1f9      	bne.n	8004f88 <strcpy+0x2>
 8004f94:	4770      	bx	lr

08004f96 <memcpy>:
 8004f96:	440a      	add	r2, r1
 8004f98:	4291      	cmp	r1, r2
 8004f9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f9e:	d100      	bne.n	8004fa2 <memcpy+0xc>
 8004fa0:	4770      	bx	lr
 8004fa2:	b510      	push	{r4, lr}
 8004fa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fac:	4291      	cmp	r1, r2
 8004fae:	d1f9      	bne.n	8004fa4 <memcpy+0xe>
 8004fb0:	bd10      	pop	{r4, pc}
	...

08004fb4 <__assert_func>:
 8004fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004fb6:	4614      	mov	r4, r2
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <__assert_func+0x2c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4605      	mov	r5, r0
 8004fc0:	68d8      	ldr	r0, [r3, #12]
 8004fc2:	b14c      	cbz	r4, 8004fd8 <__assert_func+0x24>
 8004fc4:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <__assert_func+0x30>)
 8004fc6:	9100      	str	r1, [sp, #0]
 8004fc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004fcc:	4906      	ldr	r1, [pc, #24]	; (8004fe8 <__assert_func+0x34>)
 8004fce:	462b      	mov	r3, r5
 8004fd0:	f000 fca4 	bl	800591c <fiprintf>
 8004fd4:	f000 fcde 	bl	8005994 <abort>
 8004fd8:	4b04      	ldr	r3, [pc, #16]	; (8004fec <__assert_func+0x38>)
 8004fda:	461c      	mov	r4, r3
 8004fdc:	e7f3      	b.n	8004fc6 <__assert_func+0x12>
 8004fde:	bf00      	nop
 8004fe0:	20000110 	.word	0x20000110
 8004fe4:	0800672f 	.word	0x0800672f
 8004fe8:	0800673c 	.word	0x0800673c
 8004fec:	0800676a 	.word	0x0800676a

08004ff0 <_free_r>:
 8004ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ff2:	2900      	cmp	r1, #0
 8004ff4:	d044      	beq.n	8005080 <_free_r+0x90>
 8004ff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ffa:	9001      	str	r0, [sp, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f1a1 0404 	sub.w	r4, r1, #4
 8005002:	bfb8      	it	lt
 8005004:	18e4      	addlt	r4, r4, r3
 8005006:	f000 f8e7 	bl	80051d8 <__malloc_lock>
 800500a:	4a1e      	ldr	r2, [pc, #120]	; (8005084 <_free_r+0x94>)
 800500c:	9801      	ldr	r0, [sp, #4]
 800500e:	6813      	ldr	r3, [r2, #0]
 8005010:	b933      	cbnz	r3, 8005020 <_free_r+0x30>
 8005012:	6063      	str	r3, [r4, #4]
 8005014:	6014      	str	r4, [r2, #0]
 8005016:	b003      	add	sp, #12
 8005018:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800501c:	f000 b8e2 	b.w	80051e4 <__malloc_unlock>
 8005020:	42a3      	cmp	r3, r4
 8005022:	d908      	bls.n	8005036 <_free_r+0x46>
 8005024:	6825      	ldr	r5, [r4, #0]
 8005026:	1961      	adds	r1, r4, r5
 8005028:	428b      	cmp	r3, r1
 800502a:	bf01      	itttt	eq
 800502c:	6819      	ldreq	r1, [r3, #0]
 800502e:	685b      	ldreq	r3, [r3, #4]
 8005030:	1949      	addeq	r1, r1, r5
 8005032:	6021      	streq	r1, [r4, #0]
 8005034:	e7ed      	b.n	8005012 <_free_r+0x22>
 8005036:	461a      	mov	r2, r3
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	b10b      	cbz	r3, 8005040 <_free_r+0x50>
 800503c:	42a3      	cmp	r3, r4
 800503e:	d9fa      	bls.n	8005036 <_free_r+0x46>
 8005040:	6811      	ldr	r1, [r2, #0]
 8005042:	1855      	adds	r5, r2, r1
 8005044:	42a5      	cmp	r5, r4
 8005046:	d10b      	bne.n	8005060 <_free_r+0x70>
 8005048:	6824      	ldr	r4, [r4, #0]
 800504a:	4421      	add	r1, r4
 800504c:	1854      	adds	r4, r2, r1
 800504e:	42a3      	cmp	r3, r4
 8005050:	6011      	str	r1, [r2, #0]
 8005052:	d1e0      	bne.n	8005016 <_free_r+0x26>
 8005054:	681c      	ldr	r4, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	6053      	str	r3, [r2, #4]
 800505a:	440c      	add	r4, r1
 800505c:	6014      	str	r4, [r2, #0]
 800505e:	e7da      	b.n	8005016 <_free_r+0x26>
 8005060:	d902      	bls.n	8005068 <_free_r+0x78>
 8005062:	230c      	movs	r3, #12
 8005064:	6003      	str	r3, [r0, #0]
 8005066:	e7d6      	b.n	8005016 <_free_r+0x26>
 8005068:	6825      	ldr	r5, [r4, #0]
 800506a:	1961      	adds	r1, r4, r5
 800506c:	428b      	cmp	r3, r1
 800506e:	bf04      	itt	eq
 8005070:	6819      	ldreq	r1, [r3, #0]
 8005072:	685b      	ldreq	r3, [r3, #4]
 8005074:	6063      	str	r3, [r4, #4]
 8005076:	bf04      	itt	eq
 8005078:	1949      	addeq	r1, r1, r5
 800507a:	6021      	streq	r1, [r4, #0]
 800507c:	6054      	str	r4, [r2, #4]
 800507e:	e7ca      	b.n	8005016 <_free_r+0x26>
 8005080:	b003      	add	sp, #12
 8005082:	bd30      	pop	{r4, r5, pc}
 8005084:	20000690 	.word	0x20000690

08005088 <malloc>:
 8005088:	4b02      	ldr	r3, [pc, #8]	; (8005094 <malloc+0xc>)
 800508a:	4601      	mov	r1, r0
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	f000 b823 	b.w	80050d8 <_malloc_r>
 8005092:	bf00      	nop
 8005094:	20000110 	.word	0x20000110

08005098 <sbrk_aligned>:
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	4e0e      	ldr	r6, [pc, #56]	; (80050d4 <sbrk_aligned+0x3c>)
 800509c:	460c      	mov	r4, r1
 800509e:	6831      	ldr	r1, [r6, #0]
 80050a0:	4605      	mov	r5, r0
 80050a2:	b911      	cbnz	r1, 80050aa <sbrk_aligned+0x12>
 80050a4:	f000 fc66 	bl	8005974 <_sbrk_r>
 80050a8:	6030      	str	r0, [r6, #0]
 80050aa:	4621      	mov	r1, r4
 80050ac:	4628      	mov	r0, r5
 80050ae:	f000 fc61 	bl	8005974 <_sbrk_r>
 80050b2:	1c43      	adds	r3, r0, #1
 80050b4:	d00a      	beq.n	80050cc <sbrk_aligned+0x34>
 80050b6:	1cc4      	adds	r4, r0, #3
 80050b8:	f024 0403 	bic.w	r4, r4, #3
 80050bc:	42a0      	cmp	r0, r4
 80050be:	d007      	beq.n	80050d0 <sbrk_aligned+0x38>
 80050c0:	1a21      	subs	r1, r4, r0
 80050c2:	4628      	mov	r0, r5
 80050c4:	f000 fc56 	bl	8005974 <_sbrk_r>
 80050c8:	3001      	adds	r0, #1
 80050ca:	d101      	bne.n	80050d0 <sbrk_aligned+0x38>
 80050cc:	f04f 34ff 	mov.w	r4, #4294967295
 80050d0:	4620      	mov	r0, r4
 80050d2:	bd70      	pop	{r4, r5, r6, pc}
 80050d4:	20000694 	.word	0x20000694

080050d8 <_malloc_r>:
 80050d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050dc:	1ccd      	adds	r5, r1, #3
 80050de:	f025 0503 	bic.w	r5, r5, #3
 80050e2:	3508      	adds	r5, #8
 80050e4:	2d0c      	cmp	r5, #12
 80050e6:	bf38      	it	cc
 80050e8:	250c      	movcc	r5, #12
 80050ea:	2d00      	cmp	r5, #0
 80050ec:	4607      	mov	r7, r0
 80050ee:	db01      	blt.n	80050f4 <_malloc_r+0x1c>
 80050f0:	42a9      	cmp	r1, r5
 80050f2:	d905      	bls.n	8005100 <_malloc_r+0x28>
 80050f4:	230c      	movs	r3, #12
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	2600      	movs	r6, #0
 80050fa:	4630      	mov	r0, r6
 80050fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005100:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80051d4 <_malloc_r+0xfc>
 8005104:	f000 f868 	bl	80051d8 <__malloc_lock>
 8005108:	f8d8 3000 	ldr.w	r3, [r8]
 800510c:	461c      	mov	r4, r3
 800510e:	bb5c      	cbnz	r4, 8005168 <_malloc_r+0x90>
 8005110:	4629      	mov	r1, r5
 8005112:	4638      	mov	r0, r7
 8005114:	f7ff ffc0 	bl	8005098 <sbrk_aligned>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	4604      	mov	r4, r0
 800511c:	d155      	bne.n	80051ca <_malloc_r+0xf2>
 800511e:	f8d8 4000 	ldr.w	r4, [r8]
 8005122:	4626      	mov	r6, r4
 8005124:	2e00      	cmp	r6, #0
 8005126:	d145      	bne.n	80051b4 <_malloc_r+0xdc>
 8005128:	2c00      	cmp	r4, #0
 800512a:	d048      	beq.n	80051be <_malloc_r+0xe6>
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	4631      	mov	r1, r6
 8005130:	4638      	mov	r0, r7
 8005132:	eb04 0903 	add.w	r9, r4, r3
 8005136:	f000 fc1d 	bl	8005974 <_sbrk_r>
 800513a:	4581      	cmp	r9, r0
 800513c:	d13f      	bne.n	80051be <_malloc_r+0xe6>
 800513e:	6821      	ldr	r1, [r4, #0]
 8005140:	1a6d      	subs	r5, r5, r1
 8005142:	4629      	mov	r1, r5
 8005144:	4638      	mov	r0, r7
 8005146:	f7ff ffa7 	bl	8005098 <sbrk_aligned>
 800514a:	3001      	adds	r0, #1
 800514c:	d037      	beq.n	80051be <_malloc_r+0xe6>
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	442b      	add	r3, r5
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	f8d8 3000 	ldr.w	r3, [r8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d038      	beq.n	80051ce <_malloc_r+0xf6>
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	42a2      	cmp	r2, r4
 8005160:	d12b      	bne.n	80051ba <_malloc_r+0xe2>
 8005162:	2200      	movs	r2, #0
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	e00f      	b.n	8005188 <_malloc_r+0xb0>
 8005168:	6822      	ldr	r2, [r4, #0]
 800516a:	1b52      	subs	r2, r2, r5
 800516c:	d41f      	bmi.n	80051ae <_malloc_r+0xd6>
 800516e:	2a0b      	cmp	r2, #11
 8005170:	d917      	bls.n	80051a2 <_malloc_r+0xca>
 8005172:	1961      	adds	r1, r4, r5
 8005174:	42a3      	cmp	r3, r4
 8005176:	6025      	str	r5, [r4, #0]
 8005178:	bf18      	it	ne
 800517a:	6059      	strne	r1, [r3, #4]
 800517c:	6863      	ldr	r3, [r4, #4]
 800517e:	bf08      	it	eq
 8005180:	f8c8 1000 	streq.w	r1, [r8]
 8005184:	5162      	str	r2, [r4, r5]
 8005186:	604b      	str	r3, [r1, #4]
 8005188:	4638      	mov	r0, r7
 800518a:	f104 060b 	add.w	r6, r4, #11
 800518e:	f000 f829 	bl	80051e4 <__malloc_unlock>
 8005192:	f026 0607 	bic.w	r6, r6, #7
 8005196:	1d23      	adds	r3, r4, #4
 8005198:	1af2      	subs	r2, r6, r3
 800519a:	d0ae      	beq.n	80050fa <_malloc_r+0x22>
 800519c:	1b9b      	subs	r3, r3, r6
 800519e:	50a3      	str	r3, [r4, r2]
 80051a0:	e7ab      	b.n	80050fa <_malloc_r+0x22>
 80051a2:	42a3      	cmp	r3, r4
 80051a4:	6862      	ldr	r2, [r4, #4]
 80051a6:	d1dd      	bne.n	8005164 <_malloc_r+0x8c>
 80051a8:	f8c8 2000 	str.w	r2, [r8]
 80051ac:	e7ec      	b.n	8005188 <_malloc_r+0xb0>
 80051ae:	4623      	mov	r3, r4
 80051b0:	6864      	ldr	r4, [r4, #4]
 80051b2:	e7ac      	b.n	800510e <_malloc_r+0x36>
 80051b4:	4634      	mov	r4, r6
 80051b6:	6876      	ldr	r6, [r6, #4]
 80051b8:	e7b4      	b.n	8005124 <_malloc_r+0x4c>
 80051ba:	4613      	mov	r3, r2
 80051bc:	e7cc      	b.n	8005158 <_malloc_r+0x80>
 80051be:	230c      	movs	r3, #12
 80051c0:	603b      	str	r3, [r7, #0]
 80051c2:	4638      	mov	r0, r7
 80051c4:	f000 f80e 	bl	80051e4 <__malloc_unlock>
 80051c8:	e797      	b.n	80050fa <_malloc_r+0x22>
 80051ca:	6025      	str	r5, [r4, #0]
 80051cc:	e7dc      	b.n	8005188 <_malloc_r+0xb0>
 80051ce:	605b      	str	r3, [r3, #4]
 80051d0:	deff      	udf	#255	; 0xff
 80051d2:	bf00      	nop
 80051d4:	20000690 	.word	0x20000690

080051d8 <__malloc_lock>:
 80051d8:	4801      	ldr	r0, [pc, #4]	; (80051e0 <__malloc_lock+0x8>)
 80051da:	f7ff bed2 	b.w	8004f82 <__retarget_lock_acquire_recursive>
 80051de:	bf00      	nop
 80051e0:	2000068c 	.word	0x2000068c

080051e4 <__malloc_unlock>:
 80051e4:	4801      	ldr	r0, [pc, #4]	; (80051ec <__malloc_unlock+0x8>)
 80051e6:	f7ff becd 	b.w	8004f84 <__retarget_lock_release_recursive>
 80051ea:	bf00      	nop
 80051ec:	2000068c 	.word	0x2000068c

080051f0 <__ssputs_r>:
 80051f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051f4:	688e      	ldr	r6, [r1, #8]
 80051f6:	461f      	mov	r7, r3
 80051f8:	42be      	cmp	r6, r7
 80051fa:	680b      	ldr	r3, [r1, #0]
 80051fc:	4682      	mov	sl, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	4690      	mov	r8, r2
 8005202:	d82c      	bhi.n	800525e <__ssputs_r+0x6e>
 8005204:	898a      	ldrh	r2, [r1, #12]
 8005206:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800520a:	d026      	beq.n	800525a <__ssputs_r+0x6a>
 800520c:	6965      	ldr	r5, [r4, #20]
 800520e:	6909      	ldr	r1, [r1, #16]
 8005210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005214:	eba3 0901 	sub.w	r9, r3, r1
 8005218:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800521c:	1c7b      	adds	r3, r7, #1
 800521e:	444b      	add	r3, r9
 8005220:	106d      	asrs	r5, r5, #1
 8005222:	429d      	cmp	r5, r3
 8005224:	bf38      	it	cc
 8005226:	461d      	movcc	r5, r3
 8005228:	0553      	lsls	r3, r2, #21
 800522a:	d527      	bpl.n	800527c <__ssputs_r+0x8c>
 800522c:	4629      	mov	r1, r5
 800522e:	f7ff ff53 	bl	80050d8 <_malloc_r>
 8005232:	4606      	mov	r6, r0
 8005234:	b360      	cbz	r0, 8005290 <__ssputs_r+0xa0>
 8005236:	6921      	ldr	r1, [r4, #16]
 8005238:	464a      	mov	r2, r9
 800523a:	f7ff feac 	bl	8004f96 <memcpy>
 800523e:	89a3      	ldrh	r3, [r4, #12]
 8005240:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005248:	81a3      	strh	r3, [r4, #12]
 800524a:	6126      	str	r6, [r4, #16]
 800524c:	6165      	str	r5, [r4, #20]
 800524e:	444e      	add	r6, r9
 8005250:	eba5 0509 	sub.w	r5, r5, r9
 8005254:	6026      	str	r6, [r4, #0]
 8005256:	60a5      	str	r5, [r4, #8]
 8005258:	463e      	mov	r6, r7
 800525a:	42be      	cmp	r6, r7
 800525c:	d900      	bls.n	8005260 <__ssputs_r+0x70>
 800525e:	463e      	mov	r6, r7
 8005260:	6820      	ldr	r0, [r4, #0]
 8005262:	4632      	mov	r2, r6
 8005264:	4641      	mov	r1, r8
 8005266:	f000 fb6b 	bl	8005940 <memmove>
 800526a:	68a3      	ldr	r3, [r4, #8]
 800526c:	1b9b      	subs	r3, r3, r6
 800526e:	60a3      	str	r3, [r4, #8]
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	4433      	add	r3, r6
 8005274:	6023      	str	r3, [r4, #0]
 8005276:	2000      	movs	r0, #0
 8005278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527c:	462a      	mov	r2, r5
 800527e:	f000 fb90 	bl	80059a2 <_realloc_r>
 8005282:	4606      	mov	r6, r0
 8005284:	2800      	cmp	r0, #0
 8005286:	d1e0      	bne.n	800524a <__ssputs_r+0x5a>
 8005288:	6921      	ldr	r1, [r4, #16]
 800528a:	4650      	mov	r0, sl
 800528c:	f7ff feb0 	bl	8004ff0 <_free_r>
 8005290:	230c      	movs	r3, #12
 8005292:	f8ca 3000 	str.w	r3, [sl]
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800529c:	81a3      	strh	r3, [r4, #12]
 800529e:	f04f 30ff 	mov.w	r0, #4294967295
 80052a2:	e7e9      	b.n	8005278 <__ssputs_r+0x88>

080052a4 <_svfiprintf_r>:
 80052a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a8:	4698      	mov	r8, r3
 80052aa:	898b      	ldrh	r3, [r1, #12]
 80052ac:	061b      	lsls	r3, r3, #24
 80052ae:	b09d      	sub	sp, #116	; 0x74
 80052b0:	4607      	mov	r7, r0
 80052b2:	460d      	mov	r5, r1
 80052b4:	4614      	mov	r4, r2
 80052b6:	d50e      	bpl.n	80052d6 <_svfiprintf_r+0x32>
 80052b8:	690b      	ldr	r3, [r1, #16]
 80052ba:	b963      	cbnz	r3, 80052d6 <_svfiprintf_r+0x32>
 80052bc:	2140      	movs	r1, #64	; 0x40
 80052be:	f7ff ff0b 	bl	80050d8 <_malloc_r>
 80052c2:	6028      	str	r0, [r5, #0]
 80052c4:	6128      	str	r0, [r5, #16]
 80052c6:	b920      	cbnz	r0, 80052d2 <_svfiprintf_r+0x2e>
 80052c8:	230c      	movs	r3, #12
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	f04f 30ff 	mov.w	r0, #4294967295
 80052d0:	e0d0      	b.n	8005474 <_svfiprintf_r+0x1d0>
 80052d2:	2340      	movs	r3, #64	; 0x40
 80052d4:	616b      	str	r3, [r5, #20]
 80052d6:	2300      	movs	r3, #0
 80052d8:	9309      	str	r3, [sp, #36]	; 0x24
 80052da:	2320      	movs	r3, #32
 80052dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80052e4:	2330      	movs	r3, #48	; 0x30
 80052e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800548c <_svfiprintf_r+0x1e8>
 80052ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052ee:	f04f 0901 	mov.w	r9, #1
 80052f2:	4623      	mov	r3, r4
 80052f4:	469a      	mov	sl, r3
 80052f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052fa:	b10a      	cbz	r2, 8005300 <_svfiprintf_r+0x5c>
 80052fc:	2a25      	cmp	r2, #37	; 0x25
 80052fe:	d1f9      	bne.n	80052f4 <_svfiprintf_r+0x50>
 8005300:	ebba 0b04 	subs.w	fp, sl, r4
 8005304:	d00b      	beq.n	800531e <_svfiprintf_r+0x7a>
 8005306:	465b      	mov	r3, fp
 8005308:	4622      	mov	r2, r4
 800530a:	4629      	mov	r1, r5
 800530c:	4638      	mov	r0, r7
 800530e:	f7ff ff6f 	bl	80051f0 <__ssputs_r>
 8005312:	3001      	adds	r0, #1
 8005314:	f000 80a9 	beq.w	800546a <_svfiprintf_r+0x1c6>
 8005318:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800531a:	445a      	add	r2, fp
 800531c:	9209      	str	r2, [sp, #36]	; 0x24
 800531e:	f89a 3000 	ldrb.w	r3, [sl]
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 80a1 	beq.w	800546a <_svfiprintf_r+0x1c6>
 8005328:	2300      	movs	r3, #0
 800532a:	f04f 32ff 	mov.w	r2, #4294967295
 800532e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005332:	f10a 0a01 	add.w	sl, sl, #1
 8005336:	9304      	str	r3, [sp, #16]
 8005338:	9307      	str	r3, [sp, #28]
 800533a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800533e:	931a      	str	r3, [sp, #104]	; 0x68
 8005340:	4654      	mov	r4, sl
 8005342:	2205      	movs	r2, #5
 8005344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005348:	4850      	ldr	r0, [pc, #320]	; (800548c <_svfiprintf_r+0x1e8>)
 800534a:	f7fa ff41 	bl	80001d0 <memchr>
 800534e:	9a04      	ldr	r2, [sp, #16]
 8005350:	b9d8      	cbnz	r0, 800538a <_svfiprintf_r+0xe6>
 8005352:	06d0      	lsls	r0, r2, #27
 8005354:	bf44      	itt	mi
 8005356:	2320      	movmi	r3, #32
 8005358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800535c:	0711      	lsls	r1, r2, #28
 800535e:	bf44      	itt	mi
 8005360:	232b      	movmi	r3, #43	; 0x2b
 8005362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005366:	f89a 3000 	ldrb.w	r3, [sl]
 800536a:	2b2a      	cmp	r3, #42	; 0x2a
 800536c:	d015      	beq.n	800539a <_svfiprintf_r+0xf6>
 800536e:	9a07      	ldr	r2, [sp, #28]
 8005370:	4654      	mov	r4, sl
 8005372:	2000      	movs	r0, #0
 8005374:	f04f 0c0a 	mov.w	ip, #10
 8005378:	4621      	mov	r1, r4
 800537a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800537e:	3b30      	subs	r3, #48	; 0x30
 8005380:	2b09      	cmp	r3, #9
 8005382:	d94d      	bls.n	8005420 <_svfiprintf_r+0x17c>
 8005384:	b1b0      	cbz	r0, 80053b4 <_svfiprintf_r+0x110>
 8005386:	9207      	str	r2, [sp, #28]
 8005388:	e014      	b.n	80053b4 <_svfiprintf_r+0x110>
 800538a:	eba0 0308 	sub.w	r3, r0, r8
 800538e:	fa09 f303 	lsl.w	r3, r9, r3
 8005392:	4313      	orrs	r3, r2
 8005394:	9304      	str	r3, [sp, #16]
 8005396:	46a2      	mov	sl, r4
 8005398:	e7d2      	b.n	8005340 <_svfiprintf_r+0x9c>
 800539a:	9b03      	ldr	r3, [sp, #12]
 800539c:	1d19      	adds	r1, r3, #4
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	9103      	str	r1, [sp, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	bfbb      	ittet	lt
 80053a6:	425b      	neglt	r3, r3
 80053a8:	f042 0202 	orrlt.w	r2, r2, #2
 80053ac:	9307      	strge	r3, [sp, #28]
 80053ae:	9307      	strlt	r3, [sp, #28]
 80053b0:	bfb8      	it	lt
 80053b2:	9204      	strlt	r2, [sp, #16]
 80053b4:	7823      	ldrb	r3, [r4, #0]
 80053b6:	2b2e      	cmp	r3, #46	; 0x2e
 80053b8:	d10c      	bne.n	80053d4 <_svfiprintf_r+0x130>
 80053ba:	7863      	ldrb	r3, [r4, #1]
 80053bc:	2b2a      	cmp	r3, #42	; 0x2a
 80053be:	d134      	bne.n	800542a <_svfiprintf_r+0x186>
 80053c0:	9b03      	ldr	r3, [sp, #12]
 80053c2:	1d1a      	adds	r2, r3, #4
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	9203      	str	r2, [sp, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	bfb8      	it	lt
 80053cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80053d0:	3402      	adds	r4, #2
 80053d2:	9305      	str	r3, [sp, #20]
 80053d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800549c <_svfiprintf_r+0x1f8>
 80053d8:	7821      	ldrb	r1, [r4, #0]
 80053da:	2203      	movs	r2, #3
 80053dc:	4650      	mov	r0, sl
 80053de:	f7fa fef7 	bl	80001d0 <memchr>
 80053e2:	b138      	cbz	r0, 80053f4 <_svfiprintf_r+0x150>
 80053e4:	9b04      	ldr	r3, [sp, #16]
 80053e6:	eba0 000a 	sub.w	r0, r0, sl
 80053ea:	2240      	movs	r2, #64	; 0x40
 80053ec:	4082      	lsls	r2, r0
 80053ee:	4313      	orrs	r3, r2
 80053f0:	3401      	adds	r4, #1
 80053f2:	9304      	str	r3, [sp, #16]
 80053f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f8:	4825      	ldr	r0, [pc, #148]	; (8005490 <_svfiprintf_r+0x1ec>)
 80053fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053fe:	2206      	movs	r2, #6
 8005400:	f7fa fee6 	bl	80001d0 <memchr>
 8005404:	2800      	cmp	r0, #0
 8005406:	d038      	beq.n	800547a <_svfiprintf_r+0x1d6>
 8005408:	4b22      	ldr	r3, [pc, #136]	; (8005494 <_svfiprintf_r+0x1f0>)
 800540a:	bb1b      	cbnz	r3, 8005454 <_svfiprintf_r+0x1b0>
 800540c:	9b03      	ldr	r3, [sp, #12]
 800540e:	3307      	adds	r3, #7
 8005410:	f023 0307 	bic.w	r3, r3, #7
 8005414:	3308      	adds	r3, #8
 8005416:	9303      	str	r3, [sp, #12]
 8005418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800541a:	4433      	add	r3, r6
 800541c:	9309      	str	r3, [sp, #36]	; 0x24
 800541e:	e768      	b.n	80052f2 <_svfiprintf_r+0x4e>
 8005420:	fb0c 3202 	mla	r2, ip, r2, r3
 8005424:	460c      	mov	r4, r1
 8005426:	2001      	movs	r0, #1
 8005428:	e7a6      	b.n	8005378 <_svfiprintf_r+0xd4>
 800542a:	2300      	movs	r3, #0
 800542c:	3401      	adds	r4, #1
 800542e:	9305      	str	r3, [sp, #20]
 8005430:	4619      	mov	r1, r3
 8005432:	f04f 0c0a 	mov.w	ip, #10
 8005436:	4620      	mov	r0, r4
 8005438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800543c:	3a30      	subs	r2, #48	; 0x30
 800543e:	2a09      	cmp	r2, #9
 8005440:	d903      	bls.n	800544a <_svfiprintf_r+0x1a6>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0c6      	beq.n	80053d4 <_svfiprintf_r+0x130>
 8005446:	9105      	str	r1, [sp, #20]
 8005448:	e7c4      	b.n	80053d4 <_svfiprintf_r+0x130>
 800544a:	fb0c 2101 	mla	r1, ip, r1, r2
 800544e:	4604      	mov	r4, r0
 8005450:	2301      	movs	r3, #1
 8005452:	e7f0      	b.n	8005436 <_svfiprintf_r+0x192>
 8005454:	ab03      	add	r3, sp, #12
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	462a      	mov	r2, r5
 800545a:	4b0f      	ldr	r3, [pc, #60]	; (8005498 <_svfiprintf_r+0x1f4>)
 800545c:	a904      	add	r1, sp, #16
 800545e:	4638      	mov	r0, r7
 8005460:	f3af 8000 	nop.w
 8005464:	1c42      	adds	r2, r0, #1
 8005466:	4606      	mov	r6, r0
 8005468:	d1d6      	bne.n	8005418 <_svfiprintf_r+0x174>
 800546a:	89ab      	ldrh	r3, [r5, #12]
 800546c:	065b      	lsls	r3, r3, #25
 800546e:	f53f af2d 	bmi.w	80052cc <_svfiprintf_r+0x28>
 8005472:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005474:	b01d      	add	sp, #116	; 0x74
 8005476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547a:	ab03      	add	r3, sp, #12
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	462a      	mov	r2, r5
 8005480:	4b05      	ldr	r3, [pc, #20]	; (8005498 <_svfiprintf_r+0x1f4>)
 8005482:	a904      	add	r1, sp, #16
 8005484:	4638      	mov	r0, r7
 8005486:	f000 f879 	bl	800557c <_printf_i>
 800548a:	e7eb      	b.n	8005464 <_svfiprintf_r+0x1c0>
 800548c:	0800676b 	.word	0x0800676b
 8005490:	08006775 	.word	0x08006775
 8005494:	00000000 	.word	0x00000000
 8005498:	080051f1 	.word	0x080051f1
 800549c:	08006771 	.word	0x08006771

080054a0 <_printf_common>:
 80054a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a4:	4616      	mov	r6, r2
 80054a6:	4699      	mov	r9, r3
 80054a8:	688a      	ldr	r2, [r1, #8]
 80054aa:	690b      	ldr	r3, [r1, #16]
 80054ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054b0:	4293      	cmp	r3, r2
 80054b2:	bfb8      	it	lt
 80054b4:	4613      	movlt	r3, r2
 80054b6:	6033      	str	r3, [r6, #0]
 80054b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054bc:	4607      	mov	r7, r0
 80054be:	460c      	mov	r4, r1
 80054c0:	b10a      	cbz	r2, 80054c6 <_printf_common+0x26>
 80054c2:	3301      	adds	r3, #1
 80054c4:	6033      	str	r3, [r6, #0]
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	0699      	lsls	r1, r3, #26
 80054ca:	bf42      	ittt	mi
 80054cc:	6833      	ldrmi	r3, [r6, #0]
 80054ce:	3302      	addmi	r3, #2
 80054d0:	6033      	strmi	r3, [r6, #0]
 80054d2:	6825      	ldr	r5, [r4, #0]
 80054d4:	f015 0506 	ands.w	r5, r5, #6
 80054d8:	d106      	bne.n	80054e8 <_printf_common+0x48>
 80054da:	f104 0a19 	add.w	sl, r4, #25
 80054de:	68e3      	ldr	r3, [r4, #12]
 80054e0:	6832      	ldr	r2, [r6, #0]
 80054e2:	1a9b      	subs	r3, r3, r2
 80054e4:	42ab      	cmp	r3, r5
 80054e6:	dc26      	bgt.n	8005536 <_printf_common+0x96>
 80054e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054ec:	1e13      	subs	r3, r2, #0
 80054ee:	6822      	ldr	r2, [r4, #0]
 80054f0:	bf18      	it	ne
 80054f2:	2301      	movne	r3, #1
 80054f4:	0692      	lsls	r2, r2, #26
 80054f6:	d42b      	bmi.n	8005550 <_printf_common+0xb0>
 80054f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054fc:	4649      	mov	r1, r9
 80054fe:	4638      	mov	r0, r7
 8005500:	47c0      	blx	r8
 8005502:	3001      	adds	r0, #1
 8005504:	d01e      	beq.n	8005544 <_printf_common+0xa4>
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	6922      	ldr	r2, [r4, #16]
 800550a:	f003 0306 	and.w	r3, r3, #6
 800550e:	2b04      	cmp	r3, #4
 8005510:	bf02      	ittt	eq
 8005512:	68e5      	ldreq	r5, [r4, #12]
 8005514:	6833      	ldreq	r3, [r6, #0]
 8005516:	1aed      	subeq	r5, r5, r3
 8005518:	68a3      	ldr	r3, [r4, #8]
 800551a:	bf0c      	ite	eq
 800551c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005520:	2500      	movne	r5, #0
 8005522:	4293      	cmp	r3, r2
 8005524:	bfc4      	itt	gt
 8005526:	1a9b      	subgt	r3, r3, r2
 8005528:	18ed      	addgt	r5, r5, r3
 800552a:	2600      	movs	r6, #0
 800552c:	341a      	adds	r4, #26
 800552e:	42b5      	cmp	r5, r6
 8005530:	d11a      	bne.n	8005568 <_printf_common+0xc8>
 8005532:	2000      	movs	r0, #0
 8005534:	e008      	b.n	8005548 <_printf_common+0xa8>
 8005536:	2301      	movs	r3, #1
 8005538:	4652      	mov	r2, sl
 800553a:	4649      	mov	r1, r9
 800553c:	4638      	mov	r0, r7
 800553e:	47c0      	blx	r8
 8005540:	3001      	adds	r0, #1
 8005542:	d103      	bne.n	800554c <_printf_common+0xac>
 8005544:	f04f 30ff 	mov.w	r0, #4294967295
 8005548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554c:	3501      	adds	r5, #1
 800554e:	e7c6      	b.n	80054de <_printf_common+0x3e>
 8005550:	18e1      	adds	r1, r4, r3
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	2030      	movs	r0, #48	; 0x30
 8005556:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800555a:	4422      	add	r2, r4
 800555c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005560:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005564:	3302      	adds	r3, #2
 8005566:	e7c7      	b.n	80054f8 <_printf_common+0x58>
 8005568:	2301      	movs	r3, #1
 800556a:	4622      	mov	r2, r4
 800556c:	4649      	mov	r1, r9
 800556e:	4638      	mov	r0, r7
 8005570:	47c0      	blx	r8
 8005572:	3001      	adds	r0, #1
 8005574:	d0e6      	beq.n	8005544 <_printf_common+0xa4>
 8005576:	3601      	adds	r6, #1
 8005578:	e7d9      	b.n	800552e <_printf_common+0x8e>
	...

0800557c <_printf_i>:
 800557c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005580:	7e0f      	ldrb	r7, [r1, #24]
 8005582:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005584:	2f78      	cmp	r7, #120	; 0x78
 8005586:	4691      	mov	r9, r2
 8005588:	4680      	mov	r8, r0
 800558a:	460c      	mov	r4, r1
 800558c:	469a      	mov	sl, r3
 800558e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005592:	d807      	bhi.n	80055a4 <_printf_i+0x28>
 8005594:	2f62      	cmp	r7, #98	; 0x62
 8005596:	d80a      	bhi.n	80055ae <_printf_i+0x32>
 8005598:	2f00      	cmp	r7, #0
 800559a:	f000 80d4 	beq.w	8005746 <_printf_i+0x1ca>
 800559e:	2f58      	cmp	r7, #88	; 0x58
 80055a0:	f000 80c0 	beq.w	8005724 <_printf_i+0x1a8>
 80055a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055ac:	e03a      	b.n	8005624 <_printf_i+0xa8>
 80055ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055b2:	2b15      	cmp	r3, #21
 80055b4:	d8f6      	bhi.n	80055a4 <_printf_i+0x28>
 80055b6:	a101      	add	r1, pc, #4	; (adr r1, 80055bc <_printf_i+0x40>)
 80055b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055bc:	08005615 	.word	0x08005615
 80055c0:	08005629 	.word	0x08005629
 80055c4:	080055a5 	.word	0x080055a5
 80055c8:	080055a5 	.word	0x080055a5
 80055cc:	080055a5 	.word	0x080055a5
 80055d0:	080055a5 	.word	0x080055a5
 80055d4:	08005629 	.word	0x08005629
 80055d8:	080055a5 	.word	0x080055a5
 80055dc:	080055a5 	.word	0x080055a5
 80055e0:	080055a5 	.word	0x080055a5
 80055e4:	080055a5 	.word	0x080055a5
 80055e8:	0800572d 	.word	0x0800572d
 80055ec:	08005655 	.word	0x08005655
 80055f0:	080056e7 	.word	0x080056e7
 80055f4:	080055a5 	.word	0x080055a5
 80055f8:	080055a5 	.word	0x080055a5
 80055fc:	0800574f 	.word	0x0800574f
 8005600:	080055a5 	.word	0x080055a5
 8005604:	08005655 	.word	0x08005655
 8005608:	080055a5 	.word	0x080055a5
 800560c:	080055a5 	.word	0x080055a5
 8005610:	080056ef 	.word	0x080056ef
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	1d1a      	adds	r2, r3, #4
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	602a      	str	r2, [r5, #0]
 800561c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005624:	2301      	movs	r3, #1
 8005626:	e09f      	b.n	8005768 <_printf_i+0x1ec>
 8005628:	6820      	ldr	r0, [r4, #0]
 800562a:	682b      	ldr	r3, [r5, #0]
 800562c:	0607      	lsls	r7, r0, #24
 800562e:	f103 0104 	add.w	r1, r3, #4
 8005632:	6029      	str	r1, [r5, #0]
 8005634:	d501      	bpl.n	800563a <_printf_i+0xbe>
 8005636:	681e      	ldr	r6, [r3, #0]
 8005638:	e003      	b.n	8005642 <_printf_i+0xc6>
 800563a:	0646      	lsls	r6, r0, #25
 800563c:	d5fb      	bpl.n	8005636 <_printf_i+0xba>
 800563e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005642:	2e00      	cmp	r6, #0
 8005644:	da03      	bge.n	800564e <_printf_i+0xd2>
 8005646:	232d      	movs	r3, #45	; 0x2d
 8005648:	4276      	negs	r6, r6
 800564a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800564e:	485a      	ldr	r0, [pc, #360]	; (80057b8 <_printf_i+0x23c>)
 8005650:	230a      	movs	r3, #10
 8005652:	e012      	b.n	800567a <_printf_i+0xfe>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	6820      	ldr	r0, [r4, #0]
 8005658:	1d19      	adds	r1, r3, #4
 800565a:	6029      	str	r1, [r5, #0]
 800565c:	0605      	lsls	r5, r0, #24
 800565e:	d501      	bpl.n	8005664 <_printf_i+0xe8>
 8005660:	681e      	ldr	r6, [r3, #0]
 8005662:	e002      	b.n	800566a <_printf_i+0xee>
 8005664:	0641      	lsls	r1, r0, #25
 8005666:	d5fb      	bpl.n	8005660 <_printf_i+0xe4>
 8005668:	881e      	ldrh	r6, [r3, #0]
 800566a:	4853      	ldr	r0, [pc, #332]	; (80057b8 <_printf_i+0x23c>)
 800566c:	2f6f      	cmp	r7, #111	; 0x6f
 800566e:	bf0c      	ite	eq
 8005670:	2308      	moveq	r3, #8
 8005672:	230a      	movne	r3, #10
 8005674:	2100      	movs	r1, #0
 8005676:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800567a:	6865      	ldr	r5, [r4, #4]
 800567c:	60a5      	str	r5, [r4, #8]
 800567e:	2d00      	cmp	r5, #0
 8005680:	bfa2      	ittt	ge
 8005682:	6821      	ldrge	r1, [r4, #0]
 8005684:	f021 0104 	bicge.w	r1, r1, #4
 8005688:	6021      	strge	r1, [r4, #0]
 800568a:	b90e      	cbnz	r6, 8005690 <_printf_i+0x114>
 800568c:	2d00      	cmp	r5, #0
 800568e:	d04b      	beq.n	8005728 <_printf_i+0x1ac>
 8005690:	4615      	mov	r5, r2
 8005692:	fbb6 f1f3 	udiv	r1, r6, r3
 8005696:	fb03 6711 	mls	r7, r3, r1, r6
 800569a:	5dc7      	ldrb	r7, [r0, r7]
 800569c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056a0:	4637      	mov	r7, r6
 80056a2:	42bb      	cmp	r3, r7
 80056a4:	460e      	mov	r6, r1
 80056a6:	d9f4      	bls.n	8005692 <_printf_i+0x116>
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d10b      	bne.n	80056c4 <_printf_i+0x148>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	07de      	lsls	r6, r3, #31
 80056b0:	d508      	bpl.n	80056c4 <_printf_i+0x148>
 80056b2:	6923      	ldr	r3, [r4, #16]
 80056b4:	6861      	ldr	r1, [r4, #4]
 80056b6:	4299      	cmp	r1, r3
 80056b8:	bfde      	ittt	le
 80056ba:	2330      	movle	r3, #48	; 0x30
 80056bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056c4:	1b52      	subs	r2, r2, r5
 80056c6:	6122      	str	r2, [r4, #16]
 80056c8:	f8cd a000 	str.w	sl, [sp]
 80056cc:	464b      	mov	r3, r9
 80056ce:	aa03      	add	r2, sp, #12
 80056d0:	4621      	mov	r1, r4
 80056d2:	4640      	mov	r0, r8
 80056d4:	f7ff fee4 	bl	80054a0 <_printf_common>
 80056d8:	3001      	adds	r0, #1
 80056da:	d14a      	bne.n	8005772 <_printf_i+0x1f6>
 80056dc:	f04f 30ff 	mov.w	r0, #4294967295
 80056e0:	b004      	add	sp, #16
 80056e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	f043 0320 	orr.w	r3, r3, #32
 80056ec:	6023      	str	r3, [r4, #0]
 80056ee:	4833      	ldr	r0, [pc, #204]	; (80057bc <_printf_i+0x240>)
 80056f0:	2778      	movs	r7, #120	; 0x78
 80056f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	6829      	ldr	r1, [r5, #0]
 80056fa:	061f      	lsls	r7, r3, #24
 80056fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005700:	d402      	bmi.n	8005708 <_printf_i+0x18c>
 8005702:	065f      	lsls	r7, r3, #25
 8005704:	bf48      	it	mi
 8005706:	b2b6      	uxthmi	r6, r6
 8005708:	07df      	lsls	r7, r3, #31
 800570a:	bf48      	it	mi
 800570c:	f043 0320 	orrmi.w	r3, r3, #32
 8005710:	6029      	str	r1, [r5, #0]
 8005712:	bf48      	it	mi
 8005714:	6023      	strmi	r3, [r4, #0]
 8005716:	b91e      	cbnz	r6, 8005720 <_printf_i+0x1a4>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	f023 0320 	bic.w	r3, r3, #32
 800571e:	6023      	str	r3, [r4, #0]
 8005720:	2310      	movs	r3, #16
 8005722:	e7a7      	b.n	8005674 <_printf_i+0xf8>
 8005724:	4824      	ldr	r0, [pc, #144]	; (80057b8 <_printf_i+0x23c>)
 8005726:	e7e4      	b.n	80056f2 <_printf_i+0x176>
 8005728:	4615      	mov	r5, r2
 800572a:	e7bd      	b.n	80056a8 <_printf_i+0x12c>
 800572c:	682b      	ldr	r3, [r5, #0]
 800572e:	6826      	ldr	r6, [r4, #0]
 8005730:	6961      	ldr	r1, [r4, #20]
 8005732:	1d18      	adds	r0, r3, #4
 8005734:	6028      	str	r0, [r5, #0]
 8005736:	0635      	lsls	r5, r6, #24
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	d501      	bpl.n	8005740 <_printf_i+0x1c4>
 800573c:	6019      	str	r1, [r3, #0]
 800573e:	e002      	b.n	8005746 <_printf_i+0x1ca>
 8005740:	0670      	lsls	r0, r6, #25
 8005742:	d5fb      	bpl.n	800573c <_printf_i+0x1c0>
 8005744:	8019      	strh	r1, [r3, #0]
 8005746:	2300      	movs	r3, #0
 8005748:	6123      	str	r3, [r4, #16]
 800574a:	4615      	mov	r5, r2
 800574c:	e7bc      	b.n	80056c8 <_printf_i+0x14c>
 800574e:	682b      	ldr	r3, [r5, #0]
 8005750:	1d1a      	adds	r2, r3, #4
 8005752:	602a      	str	r2, [r5, #0]
 8005754:	681d      	ldr	r5, [r3, #0]
 8005756:	6862      	ldr	r2, [r4, #4]
 8005758:	2100      	movs	r1, #0
 800575a:	4628      	mov	r0, r5
 800575c:	f7fa fd38 	bl	80001d0 <memchr>
 8005760:	b108      	cbz	r0, 8005766 <_printf_i+0x1ea>
 8005762:	1b40      	subs	r0, r0, r5
 8005764:	6060      	str	r0, [r4, #4]
 8005766:	6863      	ldr	r3, [r4, #4]
 8005768:	6123      	str	r3, [r4, #16]
 800576a:	2300      	movs	r3, #0
 800576c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005770:	e7aa      	b.n	80056c8 <_printf_i+0x14c>
 8005772:	6923      	ldr	r3, [r4, #16]
 8005774:	462a      	mov	r2, r5
 8005776:	4649      	mov	r1, r9
 8005778:	4640      	mov	r0, r8
 800577a:	47d0      	blx	sl
 800577c:	3001      	adds	r0, #1
 800577e:	d0ad      	beq.n	80056dc <_printf_i+0x160>
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	079b      	lsls	r3, r3, #30
 8005784:	d413      	bmi.n	80057ae <_printf_i+0x232>
 8005786:	68e0      	ldr	r0, [r4, #12]
 8005788:	9b03      	ldr	r3, [sp, #12]
 800578a:	4298      	cmp	r0, r3
 800578c:	bfb8      	it	lt
 800578e:	4618      	movlt	r0, r3
 8005790:	e7a6      	b.n	80056e0 <_printf_i+0x164>
 8005792:	2301      	movs	r3, #1
 8005794:	4632      	mov	r2, r6
 8005796:	4649      	mov	r1, r9
 8005798:	4640      	mov	r0, r8
 800579a:	47d0      	blx	sl
 800579c:	3001      	adds	r0, #1
 800579e:	d09d      	beq.n	80056dc <_printf_i+0x160>
 80057a0:	3501      	adds	r5, #1
 80057a2:	68e3      	ldr	r3, [r4, #12]
 80057a4:	9903      	ldr	r1, [sp, #12]
 80057a6:	1a5b      	subs	r3, r3, r1
 80057a8:	42ab      	cmp	r3, r5
 80057aa:	dcf2      	bgt.n	8005792 <_printf_i+0x216>
 80057ac:	e7eb      	b.n	8005786 <_printf_i+0x20a>
 80057ae:	2500      	movs	r5, #0
 80057b0:	f104 0619 	add.w	r6, r4, #25
 80057b4:	e7f5      	b.n	80057a2 <_printf_i+0x226>
 80057b6:	bf00      	nop
 80057b8:	0800677c 	.word	0x0800677c
 80057bc:	0800678d 	.word	0x0800678d

080057c0 <__sflush_r>:
 80057c0:	898a      	ldrh	r2, [r1, #12]
 80057c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c6:	4605      	mov	r5, r0
 80057c8:	0710      	lsls	r0, r2, #28
 80057ca:	460c      	mov	r4, r1
 80057cc:	d458      	bmi.n	8005880 <__sflush_r+0xc0>
 80057ce:	684b      	ldr	r3, [r1, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	dc05      	bgt.n	80057e0 <__sflush_r+0x20>
 80057d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	dc02      	bgt.n	80057e0 <__sflush_r+0x20>
 80057da:	2000      	movs	r0, #0
 80057dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057e2:	2e00      	cmp	r6, #0
 80057e4:	d0f9      	beq.n	80057da <__sflush_r+0x1a>
 80057e6:	2300      	movs	r3, #0
 80057e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057ec:	682f      	ldr	r7, [r5, #0]
 80057ee:	6a21      	ldr	r1, [r4, #32]
 80057f0:	602b      	str	r3, [r5, #0]
 80057f2:	d032      	beq.n	800585a <__sflush_r+0x9a>
 80057f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	075a      	lsls	r2, r3, #29
 80057fa:	d505      	bpl.n	8005808 <__sflush_r+0x48>
 80057fc:	6863      	ldr	r3, [r4, #4]
 80057fe:	1ac0      	subs	r0, r0, r3
 8005800:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005802:	b10b      	cbz	r3, 8005808 <__sflush_r+0x48>
 8005804:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005806:	1ac0      	subs	r0, r0, r3
 8005808:	2300      	movs	r3, #0
 800580a:	4602      	mov	r2, r0
 800580c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800580e:	6a21      	ldr	r1, [r4, #32]
 8005810:	4628      	mov	r0, r5
 8005812:	47b0      	blx	r6
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	d106      	bne.n	8005828 <__sflush_r+0x68>
 800581a:	6829      	ldr	r1, [r5, #0]
 800581c:	291d      	cmp	r1, #29
 800581e:	d82b      	bhi.n	8005878 <__sflush_r+0xb8>
 8005820:	4a29      	ldr	r2, [pc, #164]	; (80058c8 <__sflush_r+0x108>)
 8005822:	410a      	asrs	r2, r1
 8005824:	07d6      	lsls	r6, r2, #31
 8005826:	d427      	bmi.n	8005878 <__sflush_r+0xb8>
 8005828:	2200      	movs	r2, #0
 800582a:	6062      	str	r2, [r4, #4]
 800582c:	04d9      	lsls	r1, r3, #19
 800582e:	6922      	ldr	r2, [r4, #16]
 8005830:	6022      	str	r2, [r4, #0]
 8005832:	d504      	bpl.n	800583e <__sflush_r+0x7e>
 8005834:	1c42      	adds	r2, r0, #1
 8005836:	d101      	bne.n	800583c <__sflush_r+0x7c>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	b903      	cbnz	r3, 800583e <__sflush_r+0x7e>
 800583c:	6560      	str	r0, [r4, #84]	; 0x54
 800583e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005840:	602f      	str	r7, [r5, #0]
 8005842:	2900      	cmp	r1, #0
 8005844:	d0c9      	beq.n	80057da <__sflush_r+0x1a>
 8005846:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800584a:	4299      	cmp	r1, r3
 800584c:	d002      	beq.n	8005854 <__sflush_r+0x94>
 800584e:	4628      	mov	r0, r5
 8005850:	f7ff fbce 	bl	8004ff0 <_free_r>
 8005854:	2000      	movs	r0, #0
 8005856:	6360      	str	r0, [r4, #52]	; 0x34
 8005858:	e7c0      	b.n	80057dc <__sflush_r+0x1c>
 800585a:	2301      	movs	r3, #1
 800585c:	4628      	mov	r0, r5
 800585e:	47b0      	blx	r6
 8005860:	1c41      	adds	r1, r0, #1
 8005862:	d1c8      	bne.n	80057f6 <__sflush_r+0x36>
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0c5      	beq.n	80057f6 <__sflush_r+0x36>
 800586a:	2b1d      	cmp	r3, #29
 800586c:	d001      	beq.n	8005872 <__sflush_r+0xb2>
 800586e:	2b16      	cmp	r3, #22
 8005870:	d101      	bne.n	8005876 <__sflush_r+0xb6>
 8005872:	602f      	str	r7, [r5, #0]
 8005874:	e7b1      	b.n	80057da <__sflush_r+0x1a>
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800587c:	81a3      	strh	r3, [r4, #12]
 800587e:	e7ad      	b.n	80057dc <__sflush_r+0x1c>
 8005880:	690f      	ldr	r7, [r1, #16]
 8005882:	2f00      	cmp	r7, #0
 8005884:	d0a9      	beq.n	80057da <__sflush_r+0x1a>
 8005886:	0793      	lsls	r3, r2, #30
 8005888:	680e      	ldr	r6, [r1, #0]
 800588a:	bf08      	it	eq
 800588c:	694b      	ldreq	r3, [r1, #20]
 800588e:	600f      	str	r7, [r1, #0]
 8005890:	bf18      	it	ne
 8005892:	2300      	movne	r3, #0
 8005894:	eba6 0807 	sub.w	r8, r6, r7
 8005898:	608b      	str	r3, [r1, #8]
 800589a:	f1b8 0f00 	cmp.w	r8, #0
 800589e:	dd9c      	ble.n	80057da <__sflush_r+0x1a>
 80058a0:	6a21      	ldr	r1, [r4, #32]
 80058a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058a4:	4643      	mov	r3, r8
 80058a6:	463a      	mov	r2, r7
 80058a8:	4628      	mov	r0, r5
 80058aa:	47b0      	blx	r6
 80058ac:	2800      	cmp	r0, #0
 80058ae:	dc06      	bgt.n	80058be <__sflush_r+0xfe>
 80058b0:	89a3      	ldrh	r3, [r4, #12]
 80058b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b6:	81a3      	strh	r3, [r4, #12]
 80058b8:	f04f 30ff 	mov.w	r0, #4294967295
 80058bc:	e78e      	b.n	80057dc <__sflush_r+0x1c>
 80058be:	4407      	add	r7, r0
 80058c0:	eba8 0800 	sub.w	r8, r8, r0
 80058c4:	e7e9      	b.n	800589a <__sflush_r+0xda>
 80058c6:	bf00      	nop
 80058c8:	dfbffffe 	.word	0xdfbffffe

080058cc <_fflush_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	690b      	ldr	r3, [r1, #16]
 80058d0:	4605      	mov	r5, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	b913      	cbnz	r3, 80058dc <_fflush_r+0x10>
 80058d6:	2500      	movs	r5, #0
 80058d8:	4628      	mov	r0, r5
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	b118      	cbz	r0, 80058e6 <_fflush_r+0x1a>
 80058de:	6a03      	ldr	r3, [r0, #32]
 80058e0:	b90b      	cbnz	r3, 80058e6 <_fflush_r+0x1a>
 80058e2:	f7ff fa0f 	bl	8004d04 <__sinit>
 80058e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f3      	beq.n	80058d6 <_fflush_r+0xa>
 80058ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058f0:	07d0      	lsls	r0, r2, #31
 80058f2:	d404      	bmi.n	80058fe <_fflush_r+0x32>
 80058f4:	0599      	lsls	r1, r3, #22
 80058f6:	d402      	bmi.n	80058fe <_fflush_r+0x32>
 80058f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058fa:	f7ff fb42 	bl	8004f82 <__retarget_lock_acquire_recursive>
 80058fe:	4628      	mov	r0, r5
 8005900:	4621      	mov	r1, r4
 8005902:	f7ff ff5d 	bl	80057c0 <__sflush_r>
 8005906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005908:	07da      	lsls	r2, r3, #31
 800590a:	4605      	mov	r5, r0
 800590c:	d4e4      	bmi.n	80058d8 <_fflush_r+0xc>
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	059b      	lsls	r3, r3, #22
 8005912:	d4e1      	bmi.n	80058d8 <_fflush_r+0xc>
 8005914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005916:	f7ff fb35 	bl	8004f84 <__retarget_lock_release_recursive>
 800591a:	e7dd      	b.n	80058d8 <_fflush_r+0xc>

0800591c <fiprintf>:
 800591c:	b40e      	push	{r1, r2, r3}
 800591e:	b503      	push	{r0, r1, lr}
 8005920:	4601      	mov	r1, r0
 8005922:	ab03      	add	r3, sp, #12
 8005924:	4805      	ldr	r0, [pc, #20]	; (800593c <fiprintf+0x20>)
 8005926:	f853 2b04 	ldr.w	r2, [r3], #4
 800592a:	6800      	ldr	r0, [r0, #0]
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	f000 f891 	bl	8005a54 <_vfiprintf_r>
 8005932:	b002      	add	sp, #8
 8005934:	f85d eb04 	ldr.w	lr, [sp], #4
 8005938:	b003      	add	sp, #12
 800593a:	4770      	bx	lr
 800593c:	20000110 	.word	0x20000110

08005940 <memmove>:
 8005940:	4288      	cmp	r0, r1
 8005942:	b510      	push	{r4, lr}
 8005944:	eb01 0402 	add.w	r4, r1, r2
 8005948:	d902      	bls.n	8005950 <memmove+0x10>
 800594a:	4284      	cmp	r4, r0
 800594c:	4623      	mov	r3, r4
 800594e:	d807      	bhi.n	8005960 <memmove+0x20>
 8005950:	1e43      	subs	r3, r0, #1
 8005952:	42a1      	cmp	r1, r4
 8005954:	d008      	beq.n	8005968 <memmove+0x28>
 8005956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800595a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800595e:	e7f8      	b.n	8005952 <memmove+0x12>
 8005960:	4402      	add	r2, r0
 8005962:	4601      	mov	r1, r0
 8005964:	428a      	cmp	r2, r1
 8005966:	d100      	bne.n	800596a <memmove+0x2a>
 8005968:	bd10      	pop	{r4, pc}
 800596a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800596e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005972:	e7f7      	b.n	8005964 <memmove+0x24>

08005974 <_sbrk_r>:
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	4d06      	ldr	r5, [pc, #24]	; (8005990 <_sbrk_r+0x1c>)
 8005978:	2300      	movs	r3, #0
 800597a:	4604      	mov	r4, r0
 800597c:	4608      	mov	r0, r1
 800597e:	602b      	str	r3, [r5, #0]
 8005980:	f7fb fb20 	bl	8000fc4 <_sbrk>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d102      	bne.n	800598e <_sbrk_r+0x1a>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	b103      	cbz	r3, 800598e <_sbrk_r+0x1a>
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	20000688 	.word	0x20000688

08005994 <abort>:
 8005994:	b508      	push	{r3, lr}
 8005996:	2006      	movs	r0, #6
 8005998:	f000 fa34 	bl	8005e04 <raise>
 800599c:	2001      	movs	r0, #1
 800599e:	f7fb fa99 	bl	8000ed4 <_exit>

080059a2 <_realloc_r>:
 80059a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a6:	4680      	mov	r8, r0
 80059a8:	4614      	mov	r4, r2
 80059aa:	460e      	mov	r6, r1
 80059ac:	b921      	cbnz	r1, 80059b8 <_realloc_r+0x16>
 80059ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059b2:	4611      	mov	r1, r2
 80059b4:	f7ff bb90 	b.w	80050d8 <_malloc_r>
 80059b8:	b92a      	cbnz	r2, 80059c6 <_realloc_r+0x24>
 80059ba:	f7ff fb19 	bl	8004ff0 <_free_r>
 80059be:	4625      	mov	r5, r4
 80059c0:	4628      	mov	r0, r5
 80059c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059c6:	f000 fa39 	bl	8005e3c <_malloc_usable_size_r>
 80059ca:	4284      	cmp	r4, r0
 80059cc:	4607      	mov	r7, r0
 80059ce:	d802      	bhi.n	80059d6 <_realloc_r+0x34>
 80059d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059d4:	d812      	bhi.n	80059fc <_realloc_r+0x5a>
 80059d6:	4621      	mov	r1, r4
 80059d8:	4640      	mov	r0, r8
 80059da:	f7ff fb7d 	bl	80050d8 <_malloc_r>
 80059de:	4605      	mov	r5, r0
 80059e0:	2800      	cmp	r0, #0
 80059e2:	d0ed      	beq.n	80059c0 <_realloc_r+0x1e>
 80059e4:	42bc      	cmp	r4, r7
 80059e6:	4622      	mov	r2, r4
 80059e8:	4631      	mov	r1, r6
 80059ea:	bf28      	it	cs
 80059ec:	463a      	movcs	r2, r7
 80059ee:	f7ff fad2 	bl	8004f96 <memcpy>
 80059f2:	4631      	mov	r1, r6
 80059f4:	4640      	mov	r0, r8
 80059f6:	f7ff fafb 	bl	8004ff0 <_free_r>
 80059fa:	e7e1      	b.n	80059c0 <_realloc_r+0x1e>
 80059fc:	4635      	mov	r5, r6
 80059fe:	e7df      	b.n	80059c0 <_realloc_r+0x1e>

08005a00 <__sfputc_r>:
 8005a00:	6893      	ldr	r3, [r2, #8]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	b410      	push	{r4}
 8005a08:	6093      	str	r3, [r2, #8]
 8005a0a:	da08      	bge.n	8005a1e <__sfputc_r+0x1e>
 8005a0c:	6994      	ldr	r4, [r2, #24]
 8005a0e:	42a3      	cmp	r3, r4
 8005a10:	db01      	blt.n	8005a16 <__sfputc_r+0x16>
 8005a12:	290a      	cmp	r1, #10
 8005a14:	d103      	bne.n	8005a1e <__sfputc_r+0x1e>
 8005a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a1a:	f000 b935 	b.w	8005c88 <__swbuf_r>
 8005a1e:	6813      	ldr	r3, [r2, #0]
 8005a20:	1c58      	adds	r0, r3, #1
 8005a22:	6010      	str	r0, [r2, #0]
 8005a24:	7019      	strb	r1, [r3, #0]
 8005a26:	4608      	mov	r0, r1
 8005a28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <__sfputs_r>:
 8005a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a30:	4606      	mov	r6, r0
 8005a32:	460f      	mov	r7, r1
 8005a34:	4614      	mov	r4, r2
 8005a36:	18d5      	adds	r5, r2, r3
 8005a38:	42ac      	cmp	r4, r5
 8005a3a:	d101      	bne.n	8005a40 <__sfputs_r+0x12>
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	e007      	b.n	8005a50 <__sfputs_r+0x22>
 8005a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a44:	463a      	mov	r2, r7
 8005a46:	4630      	mov	r0, r6
 8005a48:	f7ff ffda 	bl	8005a00 <__sfputc_r>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d1f3      	bne.n	8005a38 <__sfputs_r+0xa>
 8005a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a54 <_vfiprintf_r>:
 8005a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a58:	460d      	mov	r5, r1
 8005a5a:	b09d      	sub	sp, #116	; 0x74
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	4698      	mov	r8, r3
 8005a60:	4606      	mov	r6, r0
 8005a62:	b118      	cbz	r0, 8005a6c <_vfiprintf_r+0x18>
 8005a64:	6a03      	ldr	r3, [r0, #32]
 8005a66:	b90b      	cbnz	r3, 8005a6c <_vfiprintf_r+0x18>
 8005a68:	f7ff f94c 	bl	8004d04 <__sinit>
 8005a6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a6e:	07d9      	lsls	r1, r3, #31
 8005a70:	d405      	bmi.n	8005a7e <_vfiprintf_r+0x2a>
 8005a72:	89ab      	ldrh	r3, [r5, #12]
 8005a74:	059a      	lsls	r2, r3, #22
 8005a76:	d402      	bmi.n	8005a7e <_vfiprintf_r+0x2a>
 8005a78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a7a:	f7ff fa82 	bl	8004f82 <__retarget_lock_acquire_recursive>
 8005a7e:	89ab      	ldrh	r3, [r5, #12]
 8005a80:	071b      	lsls	r3, r3, #28
 8005a82:	d501      	bpl.n	8005a88 <_vfiprintf_r+0x34>
 8005a84:	692b      	ldr	r3, [r5, #16]
 8005a86:	b99b      	cbnz	r3, 8005ab0 <_vfiprintf_r+0x5c>
 8005a88:	4629      	mov	r1, r5
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f000 f93a 	bl	8005d04 <__swsetup_r>
 8005a90:	b170      	cbz	r0, 8005ab0 <_vfiprintf_r+0x5c>
 8005a92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a94:	07dc      	lsls	r4, r3, #31
 8005a96:	d504      	bpl.n	8005aa2 <_vfiprintf_r+0x4e>
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	b01d      	add	sp, #116	; 0x74
 8005a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa2:	89ab      	ldrh	r3, [r5, #12]
 8005aa4:	0598      	lsls	r0, r3, #22
 8005aa6:	d4f7      	bmi.n	8005a98 <_vfiprintf_r+0x44>
 8005aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005aaa:	f7ff fa6b 	bl	8004f84 <__retarget_lock_release_recursive>
 8005aae:	e7f3      	b.n	8005a98 <_vfiprintf_r+0x44>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab4:	2320      	movs	r3, #32
 8005ab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005aba:	f8cd 800c 	str.w	r8, [sp, #12]
 8005abe:	2330      	movs	r3, #48	; 0x30
 8005ac0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005c74 <_vfiprintf_r+0x220>
 8005ac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ac8:	f04f 0901 	mov.w	r9, #1
 8005acc:	4623      	mov	r3, r4
 8005ace:	469a      	mov	sl, r3
 8005ad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ad4:	b10a      	cbz	r2, 8005ada <_vfiprintf_r+0x86>
 8005ad6:	2a25      	cmp	r2, #37	; 0x25
 8005ad8:	d1f9      	bne.n	8005ace <_vfiprintf_r+0x7a>
 8005ada:	ebba 0b04 	subs.w	fp, sl, r4
 8005ade:	d00b      	beq.n	8005af8 <_vfiprintf_r+0xa4>
 8005ae0:	465b      	mov	r3, fp
 8005ae2:	4622      	mov	r2, r4
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	f7ff ffa1 	bl	8005a2e <__sfputs_r>
 8005aec:	3001      	adds	r0, #1
 8005aee:	f000 80a9 	beq.w	8005c44 <_vfiprintf_r+0x1f0>
 8005af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005af4:	445a      	add	r2, fp
 8005af6:	9209      	str	r2, [sp, #36]	; 0x24
 8005af8:	f89a 3000 	ldrb.w	r3, [sl]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 80a1 	beq.w	8005c44 <_vfiprintf_r+0x1f0>
 8005b02:	2300      	movs	r3, #0
 8005b04:	f04f 32ff 	mov.w	r2, #4294967295
 8005b08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b0c:	f10a 0a01 	add.w	sl, sl, #1
 8005b10:	9304      	str	r3, [sp, #16]
 8005b12:	9307      	str	r3, [sp, #28]
 8005b14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b18:	931a      	str	r3, [sp, #104]	; 0x68
 8005b1a:	4654      	mov	r4, sl
 8005b1c:	2205      	movs	r2, #5
 8005b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b22:	4854      	ldr	r0, [pc, #336]	; (8005c74 <_vfiprintf_r+0x220>)
 8005b24:	f7fa fb54 	bl	80001d0 <memchr>
 8005b28:	9a04      	ldr	r2, [sp, #16]
 8005b2a:	b9d8      	cbnz	r0, 8005b64 <_vfiprintf_r+0x110>
 8005b2c:	06d1      	lsls	r1, r2, #27
 8005b2e:	bf44      	itt	mi
 8005b30:	2320      	movmi	r3, #32
 8005b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b36:	0713      	lsls	r3, r2, #28
 8005b38:	bf44      	itt	mi
 8005b3a:	232b      	movmi	r3, #43	; 0x2b
 8005b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b40:	f89a 3000 	ldrb.w	r3, [sl]
 8005b44:	2b2a      	cmp	r3, #42	; 0x2a
 8005b46:	d015      	beq.n	8005b74 <_vfiprintf_r+0x120>
 8005b48:	9a07      	ldr	r2, [sp, #28]
 8005b4a:	4654      	mov	r4, sl
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	f04f 0c0a 	mov.w	ip, #10
 8005b52:	4621      	mov	r1, r4
 8005b54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b58:	3b30      	subs	r3, #48	; 0x30
 8005b5a:	2b09      	cmp	r3, #9
 8005b5c:	d94d      	bls.n	8005bfa <_vfiprintf_r+0x1a6>
 8005b5e:	b1b0      	cbz	r0, 8005b8e <_vfiprintf_r+0x13a>
 8005b60:	9207      	str	r2, [sp, #28]
 8005b62:	e014      	b.n	8005b8e <_vfiprintf_r+0x13a>
 8005b64:	eba0 0308 	sub.w	r3, r0, r8
 8005b68:	fa09 f303 	lsl.w	r3, r9, r3
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	9304      	str	r3, [sp, #16]
 8005b70:	46a2      	mov	sl, r4
 8005b72:	e7d2      	b.n	8005b1a <_vfiprintf_r+0xc6>
 8005b74:	9b03      	ldr	r3, [sp, #12]
 8005b76:	1d19      	adds	r1, r3, #4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	9103      	str	r1, [sp, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	bfbb      	ittet	lt
 8005b80:	425b      	neglt	r3, r3
 8005b82:	f042 0202 	orrlt.w	r2, r2, #2
 8005b86:	9307      	strge	r3, [sp, #28]
 8005b88:	9307      	strlt	r3, [sp, #28]
 8005b8a:	bfb8      	it	lt
 8005b8c:	9204      	strlt	r2, [sp, #16]
 8005b8e:	7823      	ldrb	r3, [r4, #0]
 8005b90:	2b2e      	cmp	r3, #46	; 0x2e
 8005b92:	d10c      	bne.n	8005bae <_vfiprintf_r+0x15a>
 8005b94:	7863      	ldrb	r3, [r4, #1]
 8005b96:	2b2a      	cmp	r3, #42	; 0x2a
 8005b98:	d134      	bne.n	8005c04 <_vfiprintf_r+0x1b0>
 8005b9a:	9b03      	ldr	r3, [sp, #12]
 8005b9c:	1d1a      	adds	r2, r3, #4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	9203      	str	r2, [sp, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	bfb8      	it	lt
 8005ba6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005baa:	3402      	adds	r4, #2
 8005bac:	9305      	str	r3, [sp, #20]
 8005bae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c84 <_vfiprintf_r+0x230>
 8005bb2:	7821      	ldrb	r1, [r4, #0]
 8005bb4:	2203      	movs	r2, #3
 8005bb6:	4650      	mov	r0, sl
 8005bb8:	f7fa fb0a 	bl	80001d0 <memchr>
 8005bbc:	b138      	cbz	r0, 8005bce <_vfiprintf_r+0x17a>
 8005bbe:	9b04      	ldr	r3, [sp, #16]
 8005bc0:	eba0 000a 	sub.w	r0, r0, sl
 8005bc4:	2240      	movs	r2, #64	; 0x40
 8005bc6:	4082      	lsls	r2, r0
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	3401      	adds	r4, #1
 8005bcc:	9304      	str	r3, [sp, #16]
 8005bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd2:	4829      	ldr	r0, [pc, #164]	; (8005c78 <_vfiprintf_r+0x224>)
 8005bd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bd8:	2206      	movs	r2, #6
 8005bda:	f7fa faf9 	bl	80001d0 <memchr>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d03f      	beq.n	8005c62 <_vfiprintf_r+0x20e>
 8005be2:	4b26      	ldr	r3, [pc, #152]	; (8005c7c <_vfiprintf_r+0x228>)
 8005be4:	bb1b      	cbnz	r3, 8005c2e <_vfiprintf_r+0x1da>
 8005be6:	9b03      	ldr	r3, [sp, #12]
 8005be8:	3307      	adds	r3, #7
 8005bea:	f023 0307 	bic.w	r3, r3, #7
 8005bee:	3308      	adds	r3, #8
 8005bf0:	9303      	str	r3, [sp, #12]
 8005bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf4:	443b      	add	r3, r7
 8005bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8005bf8:	e768      	b.n	8005acc <_vfiprintf_r+0x78>
 8005bfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bfe:	460c      	mov	r4, r1
 8005c00:	2001      	movs	r0, #1
 8005c02:	e7a6      	b.n	8005b52 <_vfiprintf_r+0xfe>
 8005c04:	2300      	movs	r3, #0
 8005c06:	3401      	adds	r4, #1
 8005c08:	9305      	str	r3, [sp, #20]
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	f04f 0c0a 	mov.w	ip, #10
 8005c10:	4620      	mov	r0, r4
 8005c12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c16:	3a30      	subs	r2, #48	; 0x30
 8005c18:	2a09      	cmp	r2, #9
 8005c1a:	d903      	bls.n	8005c24 <_vfiprintf_r+0x1d0>
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0c6      	beq.n	8005bae <_vfiprintf_r+0x15a>
 8005c20:	9105      	str	r1, [sp, #20]
 8005c22:	e7c4      	b.n	8005bae <_vfiprintf_r+0x15a>
 8005c24:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c28:	4604      	mov	r4, r0
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e7f0      	b.n	8005c10 <_vfiprintf_r+0x1bc>
 8005c2e:	ab03      	add	r3, sp, #12
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	462a      	mov	r2, r5
 8005c34:	4b12      	ldr	r3, [pc, #72]	; (8005c80 <_vfiprintf_r+0x22c>)
 8005c36:	a904      	add	r1, sp, #16
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f3af 8000 	nop.w
 8005c3e:	4607      	mov	r7, r0
 8005c40:	1c78      	adds	r0, r7, #1
 8005c42:	d1d6      	bne.n	8005bf2 <_vfiprintf_r+0x19e>
 8005c44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c46:	07d9      	lsls	r1, r3, #31
 8005c48:	d405      	bmi.n	8005c56 <_vfiprintf_r+0x202>
 8005c4a:	89ab      	ldrh	r3, [r5, #12]
 8005c4c:	059a      	lsls	r2, r3, #22
 8005c4e:	d402      	bmi.n	8005c56 <_vfiprintf_r+0x202>
 8005c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c52:	f7ff f997 	bl	8004f84 <__retarget_lock_release_recursive>
 8005c56:	89ab      	ldrh	r3, [r5, #12]
 8005c58:	065b      	lsls	r3, r3, #25
 8005c5a:	f53f af1d 	bmi.w	8005a98 <_vfiprintf_r+0x44>
 8005c5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c60:	e71c      	b.n	8005a9c <_vfiprintf_r+0x48>
 8005c62:	ab03      	add	r3, sp, #12
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	462a      	mov	r2, r5
 8005c68:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <_vfiprintf_r+0x22c>)
 8005c6a:	a904      	add	r1, sp, #16
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f7ff fc85 	bl	800557c <_printf_i>
 8005c72:	e7e4      	b.n	8005c3e <_vfiprintf_r+0x1ea>
 8005c74:	0800676b 	.word	0x0800676b
 8005c78:	08006775 	.word	0x08006775
 8005c7c:	00000000 	.word	0x00000000
 8005c80:	08005a2f 	.word	0x08005a2f
 8005c84:	08006771 	.word	0x08006771

08005c88 <__swbuf_r>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	460e      	mov	r6, r1
 8005c8c:	4614      	mov	r4, r2
 8005c8e:	4605      	mov	r5, r0
 8005c90:	b118      	cbz	r0, 8005c9a <__swbuf_r+0x12>
 8005c92:	6a03      	ldr	r3, [r0, #32]
 8005c94:	b90b      	cbnz	r3, 8005c9a <__swbuf_r+0x12>
 8005c96:	f7ff f835 	bl	8004d04 <__sinit>
 8005c9a:	69a3      	ldr	r3, [r4, #24]
 8005c9c:	60a3      	str	r3, [r4, #8]
 8005c9e:	89a3      	ldrh	r3, [r4, #12]
 8005ca0:	071a      	lsls	r2, r3, #28
 8005ca2:	d525      	bpl.n	8005cf0 <__swbuf_r+0x68>
 8005ca4:	6923      	ldr	r3, [r4, #16]
 8005ca6:	b31b      	cbz	r3, 8005cf0 <__swbuf_r+0x68>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	6922      	ldr	r2, [r4, #16]
 8005cac:	1a98      	subs	r0, r3, r2
 8005cae:	6963      	ldr	r3, [r4, #20]
 8005cb0:	b2f6      	uxtb	r6, r6
 8005cb2:	4283      	cmp	r3, r0
 8005cb4:	4637      	mov	r7, r6
 8005cb6:	dc04      	bgt.n	8005cc2 <__swbuf_r+0x3a>
 8005cb8:	4621      	mov	r1, r4
 8005cba:	4628      	mov	r0, r5
 8005cbc:	f7ff fe06 	bl	80058cc <_fflush_r>
 8005cc0:	b9e0      	cbnz	r0, 8005cfc <__swbuf_r+0x74>
 8005cc2:	68a3      	ldr	r3, [r4, #8]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	60a3      	str	r3, [r4, #8]
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	6022      	str	r2, [r4, #0]
 8005cce:	701e      	strb	r6, [r3, #0]
 8005cd0:	6962      	ldr	r2, [r4, #20]
 8005cd2:	1c43      	adds	r3, r0, #1
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d004      	beq.n	8005ce2 <__swbuf_r+0x5a>
 8005cd8:	89a3      	ldrh	r3, [r4, #12]
 8005cda:	07db      	lsls	r3, r3, #31
 8005cdc:	d506      	bpl.n	8005cec <__swbuf_r+0x64>
 8005cde:	2e0a      	cmp	r6, #10
 8005ce0:	d104      	bne.n	8005cec <__swbuf_r+0x64>
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f7ff fdf1 	bl	80058cc <_fflush_r>
 8005cea:	b938      	cbnz	r0, 8005cfc <__swbuf_r+0x74>
 8005cec:	4638      	mov	r0, r7
 8005cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f000 f806 	bl	8005d04 <__swsetup_r>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	d0d5      	beq.n	8005ca8 <__swbuf_r+0x20>
 8005cfc:	f04f 37ff 	mov.w	r7, #4294967295
 8005d00:	e7f4      	b.n	8005cec <__swbuf_r+0x64>
	...

08005d04 <__swsetup_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4b2a      	ldr	r3, [pc, #168]	; (8005db0 <__swsetup_r+0xac>)
 8005d08:	4605      	mov	r5, r0
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	460c      	mov	r4, r1
 8005d0e:	b118      	cbz	r0, 8005d18 <__swsetup_r+0x14>
 8005d10:	6a03      	ldr	r3, [r0, #32]
 8005d12:	b90b      	cbnz	r3, 8005d18 <__swsetup_r+0x14>
 8005d14:	f7fe fff6 	bl	8004d04 <__sinit>
 8005d18:	89a3      	ldrh	r3, [r4, #12]
 8005d1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d1e:	0718      	lsls	r0, r3, #28
 8005d20:	d422      	bmi.n	8005d68 <__swsetup_r+0x64>
 8005d22:	06d9      	lsls	r1, r3, #27
 8005d24:	d407      	bmi.n	8005d36 <__swsetup_r+0x32>
 8005d26:	2309      	movs	r3, #9
 8005d28:	602b      	str	r3, [r5, #0]
 8005d2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d2e:	81a3      	strh	r3, [r4, #12]
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295
 8005d34:	e034      	b.n	8005da0 <__swsetup_r+0x9c>
 8005d36:	0758      	lsls	r0, r3, #29
 8005d38:	d512      	bpl.n	8005d60 <__swsetup_r+0x5c>
 8005d3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d3c:	b141      	cbz	r1, 8005d50 <__swsetup_r+0x4c>
 8005d3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d42:	4299      	cmp	r1, r3
 8005d44:	d002      	beq.n	8005d4c <__swsetup_r+0x48>
 8005d46:	4628      	mov	r0, r5
 8005d48:	f7ff f952 	bl	8004ff0 <_free_r>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	6363      	str	r3, [r4, #52]	; 0x34
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d56:	81a3      	strh	r3, [r4, #12]
 8005d58:	2300      	movs	r3, #0
 8005d5a:	6063      	str	r3, [r4, #4]
 8005d5c:	6923      	ldr	r3, [r4, #16]
 8005d5e:	6023      	str	r3, [r4, #0]
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	f043 0308 	orr.w	r3, r3, #8
 8005d66:	81a3      	strh	r3, [r4, #12]
 8005d68:	6923      	ldr	r3, [r4, #16]
 8005d6a:	b94b      	cbnz	r3, 8005d80 <__swsetup_r+0x7c>
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d76:	d003      	beq.n	8005d80 <__swsetup_r+0x7c>
 8005d78:	4621      	mov	r1, r4
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	f000 f88c 	bl	8005e98 <__smakebuf_r>
 8005d80:	89a0      	ldrh	r0, [r4, #12]
 8005d82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d86:	f010 0301 	ands.w	r3, r0, #1
 8005d8a:	d00a      	beq.n	8005da2 <__swsetup_r+0x9e>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60a3      	str	r3, [r4, #8]
 8005d90:	6963      	ldr	r3, [r4, #20]
 8005d92:	425b      	negs	r3, r3
 8005d94:	61a3      	str	r3, [r4, #24]
 8005d96:	6923      	ldr	r3, [r4, #16]
 8005d98:	b943      	cbnz	r3, 8005dac <__swsetup_r+0xa8>
 8005d9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d9e:	d1c4      	bne.n	8005d2a <__swsetup_r+0x26>
 8005da0:	bd38      	pop	{r3, r4, r5, pc}
 8005da2:	0781      	lsls	r1, r0, #30
 8005da4:	bf58      	it	pl
 8005da6:	6963      	ldrpl	r3, [r4, #20]
 8005da8:	60a3      	str	r3, [r4, #8]
 8005daa:	e7f4      	b.n	8005d96 <__swsetup_r+0x92>
 8005dac:	2000      	movs	r0, #0
 8005dae:	e7f7      	b.n	8005da0 <__swsetup_r+0x9c>
 8005db0:	20000110 	.word	0x20000110

08005db4 <_raise_r>:
 8005db4:	291f      	cmp	r1, #31
 8005db6:	b538      	push	{r3, r4, r5, lr}
 8005db8:	4604      	mov	r4, r0
 8005dba:	460d      	mov	r5, r1
 8005dbc:	d904      	bls.n	8005dc8 <_raise_r+0x14>
 8005dbe:	2316      	movs	r3, #22
 8005dc0:	6003      	str	r3, [r0, #0]
 8005dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005dca:	b112      	cbz	r2, 8005dd2 <_raise_r+0x1e>
 8005dcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005dd0:	b94b      	cbnz	r3, 8005de6 <_raise_r+0x32>
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f000 f830 	bl	8005e38 <_getpid_r>
 8005dd8:	462a      	mov	r2, r5
 8005dda:	4601      	mov	r1, r0
 8005ddc:	4620      	mov	r0, r4
 8005dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005de2:	f000 b817 	b.w	8005e14 <_kill_r>
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d00a      	beq.n	8005e00 <_raise_r+0x4c>
 8005dea:	1c59      	adds	r1, r3, #1
 8005dec:	d103      	bne.n	8005df6 <_raise_r+0x42>
 8005dee:	2316      	movs	r3, #22
 8005df0:	6003      	str	r3, [r0, #0]
 8005df2:	2001      	movs	r0, #1
 8005df4:	e7e7      	b.n	8005dc6 <_raise_r+0x12>
 8005df6:	2400      	movs	r4, #0
 8005df8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	4798      	blx	r3
 8005e00:	2000      	movs	r0, #0
 8005e02:	e7e0      	b.n	8005dc6 <_raise_r+0x12>

08005e04 <raise>:
 8005e04:	4b02      	ldr	r3, [pc, #8]	; (8005e10 <raise+0xc>)
 8005e06:	4601      	mov	r1, r0
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	f7ff bfd3 	b.w	8005db4 <_raise_r>
 8005e0e:	bf00      	nop
 8005e10:	20000110 	.word	0x20000110

08005e14 <_kill_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	4d07      	ldr	r5, [pc, #28]	; (8005e34 <_kill_r+0x20>)
 8005e18:	2300      	movs	r3, #0
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	4611      	mov	r1, r2
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	f7fb f847 	bl	8000eb4 <_kill>
 8005e26:	1c43      	adds	r3, r0, #1
 8005e28:	d102      	bne.n	8005e30 <_kill_r+0x1c>
 8005e2a:	682b      	ldr	r3, [r5, #0]
 8005e2c:	b103      	cbz	r3, 8005e30 <_kill_r+0x1c>
 8005e2e:	6023      	str	r3, [r4, #0]
 8005e30:	bd38      	pop	{r3, r4, r5, pc}
 8005e32:	bf00      	nop
 8005e34:	20000688 	.word	0x20000688

08005e38 <_getpid_r>:
 8005e38:	f7fb b834 	b.w	8000ea4 <_getpid>

08005e3c <_malloc_usable_size_r>:
 8005e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e40:	1f18      	subs	r0, r3, #4
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	bfbc      	itt	lt
 8005e46:	580b      	ldrlt	r3, [r1, r0]
 8005e48:	18c0      	addlt	r0, r0, r3
 8005e4a:	4770      	bx	lr

08005e4c <__swhatbuf_r>:
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	460c      	mov	r4, r1
 8005e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e54:	2900      	cmp	r1, #0
 8005e56:	b096      	sub	sp, #88	; 0x58
 8005e58:	4615      	mov	r5, r2
 8005e5a:	461e      	mov	r6, r3
 8005e5c:	da0d      	bge.n	8005e7a <__swhatbuf_r+0x2e>
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e64:	f04f 0100 	mov.w	r1, #0
 8005e68:	bf0c      	ite	eq
 8005e6a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005e6e:	2340      	movne	r3, #64	; 0x40
 8005e70:	2000      	movs	r0, #0
 8005e72:	6031      	str	r1, [r6, #0]
 8005e74:	602b      	str	r3, [r5, #0]
 8005e76:	b016      	add	sp, #88	; 0x58
 8005e78:	bd70      	pop	{r4, r5, r6, pc}
 8005e7a:	466a      	mov	r2, sp
 8005e7c:	f000 f848 	bl	8005f10 <_fstat_r>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	dbec      	blt.n	8005e5e <__swhatbuf_r+0x12>
 8005e84:	9901      	ldr	r1, [sp, #4]
 8005e86:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e8a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e8e:	4259      	negs	r1, r3
 8005e90:	4159      	adcs	r1, r3
 8005e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e96:	e7eb      	b.n	8005e70 <__swhatbuf_r+0x24>

08005e98 <__smakebuf_r>:
 8005e98:	898b      	ldrh	r3, [r1, #12]
 8005e9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e9c:	079d      	lsls	r5, r3, #30
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	d507      	bpl.n	8005eb4 <__smakebuf_r+0x1c>
 8005ea4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	6123      	str	r3, [r4, #16]
 8005eac:	2301      	movs	r3, #1
 8005eae:	6163      	str	r3, [r4, #20]
 8005eb0:	b002      	add	sp, #8
 8005eb2:	bd70      	pop	{r4, r5, r6, pc}
 8005eb4:	ab01      	add	r3, sp, #4
 8005eb6:	466a      	mov	r2, sp
 8005eb8:	f7ff ffc8 	bl	8005e4c <__swhatbuf_r>
 8005ebc:	9900      	ldr	r1, [sp, #0]
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	f7ff f909 	bl	80050d8 <_malloc_r>
 8005ec6:	b948      	cbnz	r0, 8005edc <__smakebuf_r+0x44>
 8005ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ecc:	059a      	lsls	r2, r3, #22
 8005ece:	d4ef      	bmi.n	8005eb0 <__smakebuf_r+0x18>
 8005ed0:	f023 0303 	bic.w	r3, r3, #3
 8005ed4:	f043 0302 	orr.w	r3, r3, #2
 8005ed8:	81a3      	strh	r3, [r4, #12]
 8005eda:	e7e3      	b.n	8005ea4 <__smakebuf_r+0xc>
 8005edc:	89a3      	ldrh	r3, [r4, #12]
 8005ede:	6020      	str	r0, [r4, #0]
 8005ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee4:	81a3      	strh	r3, [r4, #12]
 8005ee6:	9b00      	ldr	r3, [sp, #0]
 8005ee8:	6163      	str	r3, [r4, #20]
 8005eea:	9b01      	ldr	r3, [sp, #4]
 8005eec:	6120      	str	r0, [r4, #16]
 8005eee:	b15b      	cbz	r3, 8005f08 <__smakebuf_r+0x70>
 8005ef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	f000 f81d 	bl	8005f34 <_isatty_r>
 8005efa:	b128      	cbz	r0, 8005f08 <__smakebuf_r+0x70>
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	81a3      	strh	r3, [r4, #12]
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	431d      	orrs	r5, r3
 8005f0c:	81a5      	strh	r5, [r4, #12]
 8005f0e:	e7cf      	b.n	8005eb0 <__smakebuf_r+0x18>

08005f10 <_fstat_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4d07      	ldr	r5, [pc, #28]	; (8005f30 <_fstat_r+0x20>)
 8005f14:	2300      	movs	r3, #0
 8005f16:	4604      	mov	r4, r0
 8005f18:	4608      	mov	r0, r1
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	602b      	str	r3, [r5, #0]
 8005f1e:	f7fb f828 	bl	8000f72 <_fstat>
 8005f22:	1c43      	adds	r3, r0, #1
 8005f24:	d102      	bne.n	8005f2c <_fstat_r+0x1c>
 8005f26:	682b      	ldr	r3, [r5, #0]
 8005f28:	b103      	cbz	r3, 8005f2c <_fstat_r+0x1c>
 8005f2a:	6023      	str	r3, [r4, #0]
 8005f2c:	bd38      	pop	{r3, r4, r5, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000688 	.word	0x20000688

08005f34 <_isatty_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4d06      	ldr	r5, [pc, #24]	; (8005f50 <_isatty_r+0x1c>)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	602b      	str	r3, [r5, #0]
 8005f40:	f7fb f827 	bl	8000f92 <_isatty>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d102      	bne.n	8005f4e <_isatty_r+0x1a>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	b103      	cbz	r3, 8005f4e <_isatty_r+0x1a>
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	20000688 	.word	0x20000688

08005f54 <_gettimeofday>:
 8005f54:	4b02      	ldr	r3, [pc, #8]	; (8005f60 <_gettimeofday+0xc>)
 8005f56:	2258      	movs	r2, #88	; 0x58
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5e:	4770      	bx	lr
 8005f60:	20000688 	.word	0x20000688

08005f64 <_init>:
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	bf00      	nop
 8005f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6a:	bc08      	pop	{r3}
 8005f6c:	469e      	mov	lr, r3
 8005f6e:	4770      	bx	lr

08005f70 <_fini>:
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	bf00      	nop
 8005f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f76:	bc08      	pop	{r3}
 8005f78:	469e      	mov	lr, r3
 8005f7a:	4770      	bx	lr
