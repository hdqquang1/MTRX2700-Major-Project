
Major Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a14c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed4  0800a2e0  0800a2e0  0000b2e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1b4  0800b1b4  0000d2c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1b4  0800b1b4  0000c1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1bc  0800b1bc  0000d2c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1bc  0800b1bc  0000c1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b1c0  0800b1c0  0000c1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c0  20000000  0800b1c4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d2c0  2**0
                  CONTENTS
 10 .bss          000008f4  200002c0  200002c0  0000d2c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bb4  20000bb4  0000d2c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d2c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010fcb  00000000  00000000  0000d2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032df  00000000  00000000  0001e2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  000215a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bae  00000000  00000000  00022500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003dc0f  00000000  00000000  000230ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016eab  00000000  00000000  00060cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7ba3  00000000  00000000  00077b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015f70b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005218  00000000  00000000  0015f750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00164968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c0 	.word	0x200002c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2c4 	.word	0x0800a2c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	0800a2c4 	.word	0x0800a2c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <get_button_state>:

#define CORRECT 0b11111111
#define INCORRECT 0b01010101


uint8_t get_button_state(void){
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
	return GPIOA->IDR;
 8000cf8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	b2db      	uxtb	r3, r3
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <set_leds>:


// set_leds - Set LEDs pattern by binary number
// Input: binary led mask pattern
void set_leds(uint8_t led_mask_pattern)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000d16:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <set_leds+0x20>)
 8000d18:	60fb      	str	r3, [r7, #12]

	if (led_mask_pattern <= 255 && led_mask_pattern >= 0)
	{
		*led_register = led_mask_pattern;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	79fa      	ldrb	r2, [r7, #7]
 8000d1e:	701a      	strb	r2, [r3, #0]
	}
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	48001015 	.word	0x48001015

08000d30 <get_leds>:


// get_leds - Get LEDs current state
// Returns LEDs current state
uint8_t get_leds(void){
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000d36:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <get_leds+0x1c>)
 8000d38:	607b      	str	r3, [r7, #4]
	return *led_register;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	48001015 	.word	0x48001015

08000d50 <correct_leds>:


// correct_leds - Turn on circle LEDs pattern for 1s
void correct_leds(void){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
    // Turn on LEDs
    set_leds(CORRECT);
 8000d54:	20ff      	movs	r0, #255	@ 0xff
 8000d56:	f7ff ffd9 	bl	8000d0c <set_leds>

    // Delay for 1 second (adjust delay according to system clock)
    delay(1000);
 8000d5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d5e:	f001 fa47 	bl	80021f0 <delay>

    // Turn off LEDs
    set_leds(0);
 8000d62:	2000      	movs	r0, #0
 8000d64:	f7ff ffd2 	bl	8000d0c <set_leds>
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <incorrect_leds>:


// incorrect_leds - Turn on cross LEDs pattern for 1s
void incorrect_leds(void){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
    // Turn on LEDs
    set_leds(INCORRECT);
 8000d70:	2055      	movs	r0, #85	@ 0x55
 8000d72:	f7ff ffcb 	bl	8000d0c <set_leds>

    // Delay for 1 second (adjust delay according to system clock)
    delay(1000);
 8000d76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d7a:	f001 fa39 	bl	80021f0 <delay>

    // Turn off LEDs
    set_leds(0);
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f7ff ffc4 	bl	8000d0c <set_leds>
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <end_leds>:


// end_leds - Turn on circle LEDs pattern for 2s
void end_leds(void){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	 // Turn on LEDs
	set_leds(CORRECT);
 8000d8c:	20ff      	movs	r0, #255	@ 0xff
 8000d8e:	f7ff ffbd 	bl	8000d0c <set_leds>

	// Delay for 5 second (adjust delay according to system clock)
	delay(2000);
 8000d92:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d96:	f001 fa2b 	bl	80021f0 <delay>

	// Turn off LEDs
	 set_leds(0);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f7ff ffb6 	bl	8000d0c <set_leds>
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <chase_leds>:


// chase_leds - Shift LED 1 by 1
void chase_leds(void){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
	uint8_t mask = get_leds() << 1;
 8000daa:	f7ff ffc1 	bl	8000d30 <get_leds>
 8000dae:	4603      	mov	r3, r0
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	71fb      	strb	r3, [r7, #7]
	set_leds(mask);
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ffa8 	bl	8000d0c <set_leds>
	if (get_leds() == 0) {
 8000dbc:	f7ff ffb8 	bl	8000d30 <get_leds>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d102      	bne.n	8000dcc <chase_leds+0x28>
		set_leds(1);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f7ff ffa0 	bl	8000d0c <set_leds>
	}
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <get_gyro_values>:
#include "BSP/stm32f3_discovery_gyroscope.h"


// get_gyro_values - Get pitch gyroscope value
// Returns pitch gyroscope value in degree
float get_gyro_values(void){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
	float gyro_values[3];

	BSP_GYRO_GetXYZ(&gyro_values[0]);
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f004 f941 	bl	8005064 <BSP_GYRO_GetXYZ>

	return gyro_values[1]/20000;
 8000de2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000de6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000dfc <get_gyro_values+0x28>
 8000dea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000dee:	eef0 7a66 	vmov.f32	s15, s13
}
 8000df2:	eeb0 0a67 	vmov.f32	s0, s15
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	469c4000 	.word	0x469c4000

08000e00 <randomWord>:
#include "stm32f303xc.h"
#include "timers.h"

#define NUM_WORDS 100 // Total number of words in the array

char* randomWord() {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b0ec      	sub	sp, #432	@ 0x1b0
 8000e04:	af00      	add	r7, sp, #0
    static char* words[NUM_WORDS]; // Static array to store words
    static int usedIndices[NUM_WORDS] = {0}; // Static array to track used indices
    static int wordsCount = 0; // Count of words added to the array

    // Check if all words have been used, reset if needed
    if (wordsCount == NUM_WORDS) {
 8000e06:	4b29      	ldr	r3, [pc, #164]	@ (8000eac <randomWord+0xac>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b64      	cmp	r3, #100	@ 0x64
 8000e0c:	d108      	bne.n	8000e20 <randomWord+0x20>
        wordsCount = 0;
 8000e0e:	4b27      	ldr	r3, [pc, #156]	@ (8000eac <randomWord+0xac>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
        memset(usedIndices, 0, sizeof(usedIndices));
 8000e14:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4825      	ldr	r0, [pc, #148]	@ (8000eb0 <randomWord+0xb0>)
 8000e1c:	f005 feef 	bl	8006bfe <memset>
    }

	char *allWords[] = {
 8000e20:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000e24:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8000e28:	4a22      	ldr	r2, [pc, #136]	@ (8000eb4 <randomWord+0xb4>)
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8000e32:	461a      	mov	r2, r3
 8000e34:	f005 ff6b 	bl	8006d0e <memcpy>
	        "Drinking", "Typing", "Eating", "Having a snowball fight", "Playing the guitar",
	        "Surfing", "Yawning", "Playing golf", "Praying", "Brushing teeth",
	        "Showering", "Meditating", "Singing"
	};

    int numWords = sizeof(allWords) / sizeof(allWords[0]); // Calculate the number of words in the array
 8000e38:	2369      	movs	r3, #105	@ 0x69
 8000e3a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac

    int randomIndex;
    do {
        randomIndex = rand() % numWords; // Generate a random index within the bounds of the array
 8000e3e:	f004 fe89 	bl	8005b54 <rand>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8000e48:	fb93 f2f2 	sdiv	r2, r3, r2
 8000e4c:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 8000e50:	fb01 f202 	mul.w	r2, r1, r2
 8000e54:	1a9b      	subs	r3, r3, r2
 8000e56:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    } while (usedIndices[randomIndex]); // Check if the word at this index has been used
 8000e5a:	4a15      	ldr	r2, [pc, #84]	@ (8000eb0 <randomWord+0xb0>)
 8000e5c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1ea      	bne.n	8000e3e <randomWord+0x3e>

    usedIndices[randomIndex] = 1; // Mark this index as used
 8000e68:	4a11      	ldr	r2, [pc, #68]	@ (8000eb0 <randomWord+0xb0>)
 8000e6a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000e6e:	2101      	movs	r1, #1
 8000e70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    words[wordsCount++] = allWords[randomIndex]; // Add the word to the array
 8000e74:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <randomWord+0xac>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	1c5a      	adds	r2, r3, #1
 8000e7a:	490c      	ldr	r1, [pc, #48]	@ (8000eac <randomWord+0xac>)
 8000e7c:	600a      	str	r2, [r1, #0]
 8000e7e:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8000e82:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 8000e86:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 8000e8a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000e8e:	490a      	ldr	r1, [pc, #40]	@ (8000eb8 <randomWord+0xb8>)
 8000e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return words[wordsCount - 1]; // Return the last added word
 8000e94:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <randomWord+0xac>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	4a07      	ldr	r2, [pc, #28]	@ (8000eb8 <randomWord+0xb8>)
 8000e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200002e0 	.word	0x200002e0
 8000eb0:	200002e4 	.word	0x200002e4
 8000eb4:	0800a6e4 	.word	0x0800a6e4
 8000eb8:	20000474 	.word	0x20000474

08000ebc <randomTopic>:


#define NUM_TOPICS 9 // Total number of topics in the array

char* randomTopic() {
 8000ebc:	b5b0      	push	{r4, r5, r7, lr}
 8000ebe:	b08c      	sub	sp, #48	@ 0x30
 8000ec0:	af00      	add	r7, sp, #0
    static char* topics[NUM_TOPICS]; // Static array to store words
    static int usedIndices[NUM_TOPICS] = {0}; // Static array to track used indices
    static int topicCount = 0; // Count of words added to the array

    // Check if all words have been used, reset if needed
    if (topicCount == NUM_TOPICS) {
 8000ec2:	4b22      	ldr	r3, [pc, #136]	@ (8000f4c <randomTopic+0x90>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b09      	cmp	r3, #9
 8000ec8:	d107      	bne.n	8000eda <randomTopic+0x1e>
    	topicCount = 0;
 8000eca:	4b20      	ldr	r3, [pc, #128]	@ (8000f4c <randomTopic+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
        memset(usedIndices, 0, sizeof(usedIndices));
 8000ed0:	2224      	movs	r2, #36	@ 0x24
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	481e      	ldr	r0, [pc, #120]	@ (8000f50 <randomTopic+0x94>)
 8000ed6:	f005 fe92 	bl	8006bfe <memset>
    }

	char *allTopics[] = {
 8000eda:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <randomTopic+0x98>)
 8000edc:	1d3c      	adds	r4, r7, #4
 8000ede:	461d      	mov	r5, r3
 8000ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee8:	682b      	ldr	r3, [r5, #0]
 8000eea:	6023      	str	r3, [r4, #0]
	        "<-Normal pet  Exotic pet->", "<-Useless body part  Useful body part->", "<-Person you could beat up  Person who'd beat you up->",
			"<-Bad pizza topping  Good pizza topping->", "<-Useless major  Useful major->", "<-Worst living person  Greatest living person->",
			"<-Boring hobby  Interesting hobby->", "<-Unsexy emoji  sexy emoji->", "<-Good subject  Bad subject->"
	};

    int numTopics = sizeof(allTopics) / sizeof(allTopics[0]); // Calculate the number of words in the array
 8000eec:	2309      	movs	r3, #9
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c

    int randomIndex;
    do {
        randomIndex = rand() % numTopics; // Generate a random index within the bounds of the array
 8000ef0:	f004 fe30 	bl	8005b54 <rand>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ef8:	fb93 f2f2 	sdiv	r2, r3, r2
 8000efc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000efe:	fb01 f202 	mul.w	r2, r1, r2
 8000f02:	1a9b      	subs	r3, r3, r2
 8000f04:	62bb      	str	r3, [r7, #40]	@ 0x28
    } while (usedIndices[randomIndex]); // Check if the word at this index has been used
 8000f06:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <randomTopic+0x94>)
 8000f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1ee      	bne.n	8000ef0 <randomTopic+0x34>

    usedIndices[randomIndex] = 1; // Mark this index as used
 8000f12:	4a0f      	ldr	r2, [pc, #60]	@ (8000f50 <randomTopic+0x94>)
 8000f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f16:	2101      	movs	r1, #1
 8000f18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    topics[topicCount++] = allTopics[randomIndex]; // Add the word to the array
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <randomTopic+0x90>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	1c53      	adds	r3, r2, #1
 8000f22:	490a      	ldr	r1, [pc, #40]	@ (8000f4c <randomTopic+0x90>)
 8000f24:	600b      	str	r3, [r1, #0]
 8000f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	3330      	adds	r3, #48	@ 0x30
 8000f2c:	443b      	add	r3, r7
 8000f2e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000f32:	4909      	ldr	r1, [pc, #36]	@ (8000f58 <randomTopic+0x9c>)
 8000f34:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

    return topics[topicCount - 1]; // Return the last added word
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <randomTopic+0x90>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	4a06      	ldr	r2, [pc, #24]	@ (8000f58 <randomTopic+0x9c>)
 8000f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3730      	adds	r7, #48	@ 0x30
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f4c:	20000604 	.word	0x20000604
 8000f50:	20000608 	.word	0x20000608
 8000f54:	0800a9e4 	.word	0x0800a9e4
 8000f58:	2000062c 	.word	0x2000062c

08000f5c <set_timesUp>:


uint8_t timesUp = 0;

void set_timesUp(){
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
    if (timesUp == 0) {
 8000f60:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <set_timesUp+0x24>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d103      	bne.n	8000f70 <set_timesUp+0x14>
        timesUp = 1;
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <set_timesUp+0x24>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
    }
    else {
        timesUp = 0;
    }
}
 8000f6e:	e002      	b.n	8000f76 <set_timesUp+0x1a>
        timesUp = 0;
 8000f70:	4b03      	ldr	r3, [pc, #12]	@ (8000f80 <set_timesUp+0x24>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	200002dc 	.word	0x200002dc

08000f84 <headsUp>:

void headsUp(uint8_t *P1score, uint8_t *P2score){
 8000f84:	b5b0      	push	{r4, r5, r7, lr}
 8000f86:	b09a      	sub	sp, #104	@ 0x68
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]

	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000f8e:	4b7b      	ldr	r3, [pc, #492]	@ (800117c <headsUp+0x1f8>)
 8000f90:	f107 041c 	add.w	r4, r7, #28
 8000f94:	461d      	mov	r5, r3
 8000f96:	6828      	ldr	r0, [r5, #0]
 8000f98:	6869      	ldr	r1, [r5, #4]
 8000f9a:	68aa      	ldr	r2, [r5, #8]
 8000f9c:	68eb      	ldr	r3, [r5, #12]
 8000f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa0:	6928      	ldr	r0, [r5, #16]
 8000fa2:	6020      	str	r0, [r4, #0]
 8000fa4:	7d2b      	ldrb	r3, [r5, #20]
 8000fa6:	7123      	strb	r3, [r4, #4]
 8000fa8:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 8000fac:	222b      	movs	r2, #43	@ 0x2b
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f005 fe24 	bl	8006bfe <memset>

	for (int i = 1; i <= 2; i++) {
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8000fba:	e0d6      	b.n	800116a <headsUp+0x1e6>
		uint8_t Pscore = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

		sprintf(string_to_send, "Player %d your timer starts now!\r\n", i);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000fc8:	496d      	ldr	r1, [pc, #436]	@ (8001180 <headsUp+0x1fc>)
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f005 fdb4 	bl	8006b38 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	496b      	ldr	r1, [pc, #428]	@ (8001184 <headsUp+0x200>)
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fd91 	bl	8001afe <SerialOutputString>
		game_timer(10000, &set_timesUp);
 8000fdc:	496a      	ldr	r1, [pc, #424]	@ (8001188 <headsUp+0x204>)
 8000fde:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000fe2:	f001 f8a3 	bl	800212c <game_timer>

		while (timesUp == 0) {
 8000fe6:	e06f      	b.n	80010c8 <headsUp+0x144>
			uint8_t outcome = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62


			uint8_t guessWord[20];
			char* random = randomWord();
 8000fee:	f7ff ff07 	bl	8000e00 <randomWord>
 8000ff2:	65f8      	str	r0, [r7, #92]	@ 0x5c
			strcpy((char*)guessWord, random);
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 fe7f 	bl	8006cfe <strcpy>
			sprintf(string_to_send, "%s\r\n", (char*)guessWord);
 8001000:	f107 0208 	add.w	r2, r7, #8
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4960      	ldr	r1, [pc, #384]	@ (800118c <headsUp+0x208>)
 800100a:	4618      	mov	r0, r3
 800100c:	f005 fd94 	bl	8006b38 <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	495b      	ldr	r1, [pc, #364]	@ (8001184 <headsUp+0x200>)
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fd71 	bl	8001afe <SerialOutputString>

			while (!outcome){
 800101c:	e026      	b.n	800106c <headsUp+0xe8>
				if (get_gyro_values() >= 25){
 800101e:	f7ff fed9 	bl	8000dd4 <get_gyro_values>
 8001022:	eef0 7a40 	vmov.f32	s15, s0
 8001026:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800102a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800102e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001032:	db02      	blt.n	800103a <headsUp+0xb6>
					outcome = 1;
 8001034:	2301      	movs	r3, #1
 8001036:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
				}
				if (get_gyro_values() <= -25){
 800103a:	f7ff fecb 	bl	8000dd4 <get_gyro_values>
 800103e:	eef0 7a40 	vmov.f32	s15, s0
 8001042:	eebb 7a09 	vmov.f32	s14, #185	@ 0xc1c80000 -25.0
 8001046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800104a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104e:	d802      	bhi.n	8001056 <headsUp+0xd2>
					outcome = 2;
 8001050:	2302      	movs	r3, #2
 8001052:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
				}
				if (timesUp){
 8001056:	4b4e      	ldr	r3, [pc, #312]	@ (8001190 <headsUp+0x20c>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <headsUp+0xe2>
					outcome = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
					break;
 8001064:	e006      	b.n	8001074 <headsUp+0xf0>
				}
				delay(100);
 8001066:	2064      	movs	r0, #100	@ 0x64
 8001068:	f001 f8c2 	bl	80021f0 <delay>
			while (!outcome){
 800106c:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0d4      	beq.n	800101e <headsUp+0x9a>
			}

			if (outcome == 1){
 8001074:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8001078:	2b01      	cmp	r3, #1
 800107a:	d113      	bne.n	80010a4 <headsUp+0x120>
				Pscore++;
 800107c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001080:	3301      	adds	r3, #1
 8001082:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
				sprintf(string_to_send, "Correct!\r\n");
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4942      	ldr	r1, [pc, #264]	@ (8001194 <headsUp+0x210>)
 800108c:	4618      	mov	r0, r3
 800108e:	f005 fd53 	bl	8006b38 <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	493b      	ldr	r1, [pc, #236]	@ (8001184 <headsUp+0x200>)
 8001098:	4618      	mov	r0, r3
 800109a:	f000 fd30 	bl	8001afe <SerialOutputString>
				correct_leds();
 800109e:	f7ff fe57 	bl	8000d50 <correct_leds>
 80010a2:	e011      	b.n	80010c8 <headsUp+0x144>
			}
			else if (outcome == 2){
 80010a4:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d112      	bne.n	80010d2 <headsUp+0x14e>
				sprintf(string_to_send, "Pass!\r\n");
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4939      	ldr	r1, [pc, #228]	@ (8001198 <headsUp+0x214>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f005 fd40 	bl	8006b38 <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4931      	ldr	r1, [pc, #196]	@ (8001184 <headsUp+0x200>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 fd1d 	bl	8001afe <SerialOutputString>
				incorrect_leds();
 80010c4:	f7ff fe52 	bl	8000d6c <incorrect_leds>
		while (timesUp == 0) {
 80010c8:	4b31      	ldr	r3, [pc, #196]	@ (8001190 <headsUp+0x20c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d08b      	beq.n	8000fe8 <headsUp+0x64>
 80010d0:	e000      	b.n	80010d4 <headsUp+0x150>
			}
			else{
				break;
 80010d2:	bf00      	nop
			}
		}
		sprintf(string_to_send, "Time's Up! Player %d's score is %d!\r\n", i, Pscore);
 80010d4:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80010d8:	f107 001c 	add.w	r0, r7, #28
 80010dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80010de:	492f      	ldr	r1, [pc, #188]	@ (800119c <headsUp+0x218>)
 80010e0:	f005 fd2a 	bl	8006b38 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4926      	ldr	r1, [pc, #152]	@ (8001184 <headsUp+0x200>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 fd07 	bl	8001afe <SerialOutputString>
		end_leds();
 80010f0:	f7ff fe4a 	bl	8000d88 <end_leds>
		if (i == 1){
 80010f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d11a      	bne.n	8001130 <headsUp+0x1ac>
			*P1score = Pscore;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 8001100:	701a      	strb	r2, [r3, #0]
			sprintf(string_to_send, "Press to continue\r\n");
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4926      	ldr	r1, [pc, #152]	@ (80011a0 <headsUp+0x21c>)
 8001108:	4618      	mov	r0, r3
 800110a:	f005 fd15 	bl	8006b38 <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	491c      	ldr	r1, [pc, #112]	@ (8001184 <headsUp+0x200>)
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fcf2 	bl	8001afe <SerialOutputString>
			while ((get_button_state() & 0x01) == 0) {}
 800111a:	bf00      	nop
 800111c:	f7ff fdea 	bl	8000cf4 <get_button_state>
 8001120:	4603      	mov	r3, r0
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0f8      	beq.n	800111c <headsUp+0x198>
			set_timesUp();
 800112a:	f7ff ff17 	bl	8000f5c <set_timesUp>
 800112e:	e019      	b.n	8001164 <headsUp+0x1e0>
		}
		else {
			*P2score = Pscore;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 8001136:	701a      	strb	r2, [r3, #0]
			sprintf(string_to_send, "Press to continue\r\n");
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4918      	ldr	r1, [pc, #96]	@ (80011a0 <headsUp+0x21c>)
 800113e:	4618      	mov	r0, r3
 8001140:	f005 fcfa 	bl	8006b38 <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	490e      	ldr	r1, [pc, #56]	@ (8001184 <headsUp+0x200>)
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fcd7 	bl	8001afe <SerialOutputString>
			while ((get_button_state() & 0x01) == 0) {}
 8001150:	bf00      	nop
 8001152:	f7ff fdcf 	bl	8000cf4 <get_button_state>
 8001156:	4603      	mov	r3, r0
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f8      	beq.n	8001152 <headsUp+0x1ce>
			set_timesUp();
 8001160:	f7ff fefc 	bl	8000f5c <set_timesUp>
	for (int i = 1; i <= 2; i++) {
 8001164:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001166:	3301      	adds	r3, #1
 8001168:	667b      	str	r3, [r7, #100]	@ 0x64
 800116a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800116c:	2b02      	cmp	r3, #2
 800116e:	f77f af25 	ble.w	8000fbc <headsUp+0x38>
		}
	}
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3768      	adds	r7, #104	@ 0x68
 8001178:	46bd      	mov	sp, r7
 800117a:	bdb0      	pop	{r4, r5, r7, pc}
 800117c:	0800aa84 	.word	0x0800aa84
 8001180:	0800aa08 	.word	0x0800aa08
 8001184:	20000000 	.word	0x20000000
 8001188:	08000f5d 	.word	0x08000f5d
 800118c:	0800aa2c 	.word	0x0800aa2c
 8001190:	200002dc 	.word	0x200002dc
 8001194:	0800aa34 	.word	0x0800aa34
 8001198:	0800aa40 	.word	0x0800aa40
 800119c:	0800aa48 	.word	0x0800aa48
 80011a0:	0800aa70 	.word	0x0800aa70

080011a4 <initialise_board>:
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_USB_PCD_Init(void);

// initialise_board() - Initialise all necessary modules
void initialise_board() {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011aa:	f001 f87d 	bl	80022a8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80011ae:	f000 f839 	bl	8001224 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b2:	f000 f939 	bl	8001428 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011b6:	f000 f897 	bl	80012e8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80011ba:	f000 f8d5 	bl	8001368 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80011be:	f000 f911 	bl	80013e4 <MX_USB_PCD_Init>
  
  // Initialise gyroscope
  BSP_GYRO_Init();
 80011c2:	f003 fe9b 	bl	8004efc <BSP_GYRO_Init>

  // Enable GPIOA, GPIOC, and GPIOE
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80011c6:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <initialise_board+0x70>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4a12      	ldr	r2, [pc, #72]	@ (8001214 <initialise_board+0x70>)
 80011cc:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80011d0:	6153      	str	r3, [r2, #20]

  // Enable TIM2 and TIM3
  RCC->APB1ENR |=  RCC_APB1ENR_TIM2EN;
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <initialise_board+0x70>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <initialise_board+0x70>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	61d3      	str	r3, [r2, #28]
  RCC->APB1ENR |=  RCC_APB1ENR_TIM3EN;
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <initialise_board+0x70>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001214 <initialise_board+0x70>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	61d3      	str	r3, [r2, #28]

  // Initialise USART1 and UART4
  SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 80011ea:	2200      	movs	r2, #0
 80011ec:	490a      	ldr	r1, [pc, #40]	@ (8001218 <initialise_board+0x74>)
 80011ee:	2004      	movs	r0, #4
 80011f0:	f000 fbe6 	bl	80019c0 <SerialInitialise>
  SerialInitialise(BAUD_115200, &UART4_PORT, 0x00);
 80011f4:	2200      	movs	r2, #0
 80011f6:	4909      	ldr	r1, [pc, #36]	@ (800121c <initialise_board+0x78>)
 80011f8:	2004      	movs	r0, #4
 80011fa:	f000 fbe1 	bl	80019c0 <SerialInitialise>

  // Initialise LEDs
  uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80011fe:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <initialise_board+0x7c>)
 8001200:	607b      	str	r3, [r7, #4]
  *led_output_registers = 0x5555;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f245 5255 	movw	r2, #21845	@ 0x5555
 8001208:	801a      	strh	r2, [r3, #0]
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	20000000 	.word	0x20000000
 800121c:	20000040 	.word	0x20000040
 8001220:	48001002 	.word	0x48001002

08001224 <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b09e      	sub	sp, #120	@ 0x78
 8001228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800122e:	2228      	movs	r2, #40	@ 0x28
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f005 fce3 	bl	8006bfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001238:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001248:	463b      	mov	r3, r7
 800124a:	223c      	movs	r2, #60	@ 0x3c
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f005 fcd5 	bl	8006bfe <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001254:	2303      	movs	r3, #3
 8001256:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001258:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800125c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001262:	2301      	movs	r3, #1
 8001264:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001266:	2310      	movs	r3, #16
 8001268:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126a:	2302      	movs	r3, #2
 800126c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800126e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001272:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001274:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001278:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800127e:	4618      	mov	r0, r3
 8001280:	f001 fdc4 	bl	8002e0c <HAL_RCC_OscConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800128a:	f000 f94b 	bl	8001524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128e:	230f      	movs	r3, #15
 8001290:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001292:	2302      	movs	r3, #2
 8001294:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800129a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800129e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012a4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80012a8:	2101      	movs	r1, #1
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 fdec 	bl	8003e88 <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012b6:	f000 f935 	bl	8001524 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80012ba:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <SystemClock_Config+0xc0>)
 80012bc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80012c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4618      	mov	r0, r3
 80012cc:	f002 ffc2 	bl	8004254 <HAL_RCCEx_PeriphCLKConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80012d6:	f000 f925 	bl	8001524 <Error_Handler>
  }
}
 80012da:	bf00      	nop
 80012dc:	3778      	adds	r7, #120	@ 0x78
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	00020020 	.word	0x00020020

080012e8 <MX_I2C1_Init>:

// I2C1 Initialization Function
static void MX_I2C1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <MX_I2C1_Init+0x74>)
 80012ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001360 <MX_I2C1_Init+0x78>)
 80012f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80012f2:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <MX_I2C1_Init+0x74>)
 80012f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001364 <MX_I2C1_Init+0x7c>)
 80012f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012f8:	4b18      	ldr	r3, [pc, #96]	@ (800135c <MX_I2C1_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012fe:	4b17      	ldr	r3, [pc, #92]	@ (800135c <MX_I2C1_Init+0x74>)
 8001300:	2201      	movs	r2, #1
 8001302:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <MX_I2C1_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_I2C1_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <MX_I2C1_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_I2C1_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131c:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <MX_I2C1_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001322:	480e      	ldr	r0, [pc, #56]	@ (800135c <MX_I2C1_Init+0x74>)
 8001324:	f001 fb7a 	bl	8002a1c <HAL_I2C_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800132e:	f000 f8f9 	bl	8001524 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001332:	2100      	movs	r1, #0
 8001334:	4809      	ldr	r0, [pc, #36]	@ (800135c <MX_I2C1_Init+0x74>)
 8001336:	f001 fc00 	bl	8002b3a <HAL_I2CEx_ConfigAnalogFilter>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001340:	f000 f8f0 	bl	8001524 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001344:	2100      	movs	r1, #0
 8001346:	4805      	ldr	r0, [pc, #20]	@ (800135c <MX_I2C1_Init+0x74>)
 8001348:	f001 fc42 	bl	8002bd0 <HAL_I2CEx_ConfigDigitalFilter>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001352:	f000 f8e7 	bl	8001524 <Error_Handler>
  }
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000650 	.word	0x20000650
 8001360:	40005400 	.word	0x40005400
 8001364:	2000090e 	.word	0x2000090e

08001368 <MX_SPI1_Init>:

// SPI1 Initialization Function
static void MX_SPI1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <MX_SPI1_Init+0x74>)
 800136e:	4a1c      	ldr	r2, [pc, #112]	@ (80013e0 <MX_SPI1_Init+0x78>)
 8001370:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <MX_SPI1_Init+0x74>)
 8001374:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001378:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800137a:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <MX_SPI1_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <MX_SPI1_Init+0x74>)
 8001382:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001386:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001388:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <MX_SPI1_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800138e:	4b13      	ldr	r3, [pc, #76]	@ (80013dc <MX_SPI1_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001394:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <MX_SPI1_Init+0x74>)
 8001396:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800139a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <MX_SPI1_Init+0x74>)
 800139e:	2208      	movs	r2, #8
 80013a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <MX_SPI1_Init+0x74>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <MX_SPI1_Init+0x74>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <MX_SPI1_Init+0x74>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <MX_SPI1_Init+0x74>)
 80013b6:	2207      	movs	r2, #7
 80013b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013ba:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <MX_SPI1_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <MX_SPI1_Init+0x74>)
 80013c2:	2208      	movs	r2, #8
 80013c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_SPI1_Init+0x74>)
 80013c8:	f003 f8f4 	bl	80045b4 <HAL_SPI_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013d2:	f000 f8a7 	bl	8001524 <Error_Handler>
  }
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200006a4 	.word	0x200006a4
 80013e0:	40013000 	.word	0x40013000

080013e4 <MX_USB_PCD_Init>:

// USB Initialization Function
static void MX_USB_PCD_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  hpcd_USB_FS.Instance = USB;
 80013e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <MX_USB_PCD_Init+0x3c>)
 80013ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001424 <MX_USB_PCD_Init+0x40>)
 80013ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <MX_USB_PCD_Init+0x3c>)
 80013f0:	2208      	movs	r2, #8
 80013f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <MX_USB_PCD_Init+0x3c>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013fa:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <MX_USB_PCD_Init+0x3c>)
 80013fc:	2202      	movs	r2, #2
 80013fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001400:	4b07      	ldr	r3, [pc, #28]	@ (8001420 <MX_USB_PCD_Init+0x3c>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <MX_USB_PCD_Init+0x3c>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800140c:	4804      	ldr	r0, [pc, #16]	@ (8001420 <MX_USB_PCD_Init+0x3c>)
 800140e:	f001 fc2b 	bl	8002c68 <HAL_PCD_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001418:	f000 f884 	bl	8001524 <Error_Handler>
  }
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000708 	.word	0x20000708
 8001424:	40005c00 	.word	0x40005c00

08001428 <MX_GPIO_Init>:

// GPIO Initialization Function
static void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	@ 0x28
 800142c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800143e:	4b37      	ldr	r3, [pc, #220]	@ (800151c <MX_GPIO_Init+0xf4>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	4a36      	ldr	r2, [pc, #216]	@ (800151c <MX_GPIO_Init+0xf4>)
 8001444:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001448:	6153      	str	r3, [r2, #20]
 800144a:	4b34      	ldr	r3, [pc, #208]	@ (800151c <MX_GPIO_Init+0xf4>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	4b31      	ldr	r3, [pc, #196]	@ (800151c <MX_GPIO_Init+0xf4>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	4a30      	ldr	r2, [pc, #192]	@ (800151c <MX_GPIO_Init+0xf4>)
 800145c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001460:	6153      	str	r3, [r2, #20]
 8001462:	4b2e      	ldr	r3, [pc, #184]	@ (800151c <MX_GPIO_Init+0xf4>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146e:	4b2b      	ldr	r3, [pc, #172]	@ (800151c <MX_GPIO_Init+0xf4>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a2a      	ldr	r2, [pc, #168]	@ (800151c <MX_GPIO_Init+0xf4>)
 8001474:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001478:	6153      	str	r3, [r2, #20]
 800147a:	4b28      	ldr	r3, [pc, #160]	@ (800151c <MX_GPIO_Init+0xf4>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b25      	ldr	r3, [pc, #148]	@ (800151c <MX_GPIO_Init+0xf4>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	4a24      	ldr	r2, [pc, #144]	@ (800151c <MX_GPIO_Init+0xf4>)
 800148c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001490:	6153      	str	r3, [r2, #20]
 8001492:	4b22      	ldr	r3, [pc, #136]	@ (800151c <MX_GPIO_Init+0xf4>)
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <MX_GPIO_Init+0xf4>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	4a1e      	ldr	r2, [pc, #120]	@ (800151c <MX_GPIO_Init+0xf4>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a8:	6153      	str	r3, [r2, #20]
 80014aa:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <MX_GPIO_Init+0xf4>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80014b6:	2200      	movs	r2, #0
 80014b8:	f64f 7108 	movw	r1, #65288	@ 0xff08
 80014bc:	4818      	ldr	r0, [pc, #96]	@ (8001520 <MX_GPIO_Init+0xf8>)
 80014be:	f001 fa95 	bl	80029ec <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80014c2:	2337      	movs	r3, #55	@ 0x37
 80014c4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014c6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4812      	ldr	r0, [pc, #72]	@ (8001520 <MX_GPIO_Init+0xf8>)
 80014d8:	f001 f832 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80014dc:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80014e0:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	480a      	ldr	r0, [pc, #40]	@ (8001520 <MX_GPIO_Init+0xf8>)
 80014f6:	f001 f823 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014fa:	2301      	movs	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001510:	f001 f816 	bl	8002540 <HAL_GPIO_Init>
}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	@ 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000
 8001520:	48001000 	.word	0x48001000

08001524 <Error_Handler>:

// This function is executed in case of error occurrence.
void Error_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <Error_Handler+0x8>

08001530 <main>:
  */

#define BUFFER_SIZE 100

int main(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b0a6      	sub	sp, #152	@ 0x98
 8001534:	af00      	add	r7, sp, #0
	initialise_board();
 8001536:	f7ff fe35 	bl	80011a4 <initialise_board>
	//test_gyroscope();
	//test_io_and_timer();

	uint8_t buffer[BUFFER_SIZE];

	srand(get_gyro_values());
 800153a:	f7ff fc4b 	bl	8000dd4 <get_gyro_values>
 800153e:	eef0 7a40 	vmov.f32	s15, s0
 8001542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001546:	ee17 0a90 	vmov	r0, s15
 800154a:	f004 fad5 	bl	8005af8 <srand>

	uint8_t rounds = 1;
 800154e:	2301      	movs	r3, #1
 8001550:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	uint8_t winner;
	uint8_t multiplier;
	uint8_t P1leaderboard = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
	uint8_t P2leaderboard = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
	uint8_t prize;

	while (rounds <= 3) {
 8001560:	e0ac      	b.n	80016bc <main+0x18c>
		uint8_t P1score = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		uint8_t P2score = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		headsUp(&P1score, &P2score);
 800156e:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 8001572:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fd03 	bl	8000f84 <headsUp>

		// Winner determined
		if (P1score > P2score){
 800157e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001582:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001586:	429a      	cmp	r2, r3
 8001588:	d903      	bls.n	8001592 <main+0x62>
			// player 1 will play wavelength
			winner = 1;
 800158a:	2301      	movs	r3, #1
 800158c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8001590:	e009      	b.n	80015a6 <main+0x76>
		}
		else if (P2score > P1score){
 8001592:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001596:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800159a:	429a      	cmp	r2, r3
 800159c:	f240 8094 	bls.w	80016c8 <main+0x198>
			// player 2 will play wavelength
			winner = 2;
 80015a0:	2302      	movs	r3, #2
 80015a2:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
		}
		else {
			break;
		}

		sprintf(buffer, "Player %d can play wavelength\r\n", winner);
 80015a6:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 80015aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ae:	49a6      	ldr	r1, [pc, #664]	@ (8001848 <main+0x318>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f005 fac1 	bl	8006b38 <siprintf>
		SerialOutputString(buffer, &USART1_PORT);
 80015b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ba:	49a4      	ldr	r1, [pc, #656]	@ (800184c <main+0x31c>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fa9e 	bl	8001afe <SerialOutputString>

		uint8_t guessTopic[20];
		char* random = randomTopic();
 80015c2:	f7ff fc7b 	bl	8000ebc <randomTopic>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		strcpy((char*)guessTopic, random);
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80015d4:	4618      	mov	r0, r3
 80015d6:	f005 fb92 	bl	8006cfe <strcpy>
		sprintf(buffer, "%s\r\n", (char*)guessTopic);
 80015da:	f107 0210 	add.w	r2, r7, #16
 80015de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015e2:	499b      	ldr	r1, [pc, #620]	@ (8001850 <main+0x320>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f005 faa7 	bl	8006b38 <siprintf>
		SerialOutputString(buffer, &USART1_PORT);
 80015ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ee:	4997      	ldr	r1, [pc, #604]	@ (800184c <main+0x31c>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fa84 	bl	8001afe <SerialOutputString>

		uint8_t buffer[16];
		SerialInputString(buffer, 16, &UART4_PORT, '\r');
 80015f6:	4638      	mov	r0, r7
 80015f8:	230d      	movs	r3, #13
 80015fa:	4a96      	ldr	r2, [pc, #600]	@ (8001854 <main+0x324>)
 80015fc:	2110      	movs	r1, #16
 80015fe:	f000 fad1 	bl	8001ba4 <SerialInputString>
		multiplier = atoi(buffer);
 8001602:	463b      	mov	r3, r7
 8001604:	4618      	mov	r0, r3
 8001606:	f004 fa73 	bl	8005af0 <atoi>
 800160a:	4603      	mov	r3, r0
 800160c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

		sprintf(buffer, "Wavelength result %d!\r\n", multiplier);
 8001610:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8001614:	463b      	mov	r3, r7
 8001616:	4990      	ldr	r1, [pc, #576]	@ (8001858 <main+0x328>)
 8001618:	4618      	mov	r0, r3
 800161a:	f005 fa8d 	bl	8006b38 <siprintf>
		SerialOutputString(buffer, &USART1_PORT);
 800161e:	463b      	mov	r3, r7
 8001620:	498a      	ldr	r1, [pc, #552]	@ (800184c <main+0x31c>)
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fa6b 	bl	8001afe <SerialOutputString>

		// Wavelength multiplier
		if (winner == 1){
 8001628:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800162c:	2b01      	cmp	r3, #1
 800162e:	d109      	bne.n	8001644 <main+0x114>
			P1score = P1score * multiplier;
 8001630:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001634:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8001638:	fb12 f303 	smulbb	r3, r2, r3
 800163c:	b2db      	uxtb	r3, r3
 800163e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001642:	e00c      	b.n	800165e <main+0x12e>
		}
		else if (winner == 2){
 8001644:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8001648:	2b02      	cmp	r3, #2
 800164a:	d108      	bne.n	800165e <main+0x12e>
			P2score = P2score * multiplier;
 800164c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001650:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8001654:	fb12 f303 	smulbb	r3, r2, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		}

		// Update leaderboard
		P1leaderboard = P1leaderboard + P1score;
 800165e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001662:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8001666:	4413      	add	r3, r2
 8001668:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
		P2leaderboard = P2leaderboard + P2score;
 800166c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001670:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8001674:	4413      	add	r3, r2
 8001676:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
		sprintf(buffer, "Player 1 your total score is %d!\r\n", P1leaderboard);
 800167a:	f897 2095 	ldrb.w	r2, [r7, #149]	@ 0x95
 800167e:	463b      	mov	r3, r7
 8001680:	4976      	ldr	r1, [pc, #472]	@ (800185c <main+0x32c>)
 8001682:	4618      	mov	r0, r3
 8001684:	f005 fa58 	bl	8006b38 <siprintf>
		SerialOutputString(buffer, &USART1_PORT);
 8001688:	463b      	mov	r3, r7
 800168a:	4970      	ldr	r1, [pc, #448]	@ (800184c <main+0x31c>)
 800168c:	4618      	mov	r0, r3
 800168e:	f000 fa36 	bl	8001afe <SerialOutputString>
		sprintf(buffer, "Player 2 your total score is %d!\r\n", P2leaderboard);
 8001692:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 8001696:	463b      	mov	r3, r7
 8001698:	4971      	ldr	r1, [pc, #452]	@ (8001860 <main+0x330>)
 800169a:	4618      	mov	r0, r3
 800169c:	f005 fa4c 	bl	8006b38 <siprintf>
		SerialOutputString(buffer, &USART1_PORT);
 80016a0:	463b      	mov	r3, r7
 80016a2:	496a      	ldr	r1, [pc, #424]	@ (800184c <main+0x31c>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 fa2a 	bl	8001afe <SerialOutputString>

		delay(1500);
 80016aa:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80016ae:	f000 fd9f 	bl	80021f0 <delay>

		rounds++;
 80016b2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80016b6:	3301      	adds	r3, #1
 80016b8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	while (rounds <= 3) {
 80016bc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	f67f af4e 	bls.w	8001562 <main+0x32>
 80016c6:	e000      	b.n	80016ca <main+0x19a>
			break;
 80016c8:	bf00      	nop
	}

	// Final winner announced
	if (P1leaderboard > P2leaderboard){
 80016ca:	f897 2095 	ldrb.w	r2, [r7, #149]	@ 0x95
 80016ce:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d90e      	bls.n	80016f4 <main+0x1c4>
		sprintf(buffer, "Player 1 Wins with a final score of %d!\r\n", P1leaderboard);
 80016d6:	f897 2095 	ldrb.w	r2, [r7, #149]	@ 0x95
 80016da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016de:	4961      	ldr	r1, [pc, #388]	@ (8001864 <main+0x334>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f005 fa29 	bl	8006b38 <siprintf>
		SerialOutputString(buffer, &USART1_PORT);
 80016e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016ea:	4958      	ldr	r1, [pc, #352]	@ (800184c <main+0x31c>)
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 fa06 	bl	8001afe <SerialOutputString>
 80016f2:	e013      	b.n	800171c <main+0x1ec>
	}
	else if (P2leaderboard > P1leaderboard){
 80016f4:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 80016f8:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d90d      	bls.n	800171c <main+0x1ec>
		sprintf(buffer, "Player 2 Wins with a final score of %d!\r\n", P2leaderboard);
 8001700:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 8001704:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001708:	4957      	ldr	r1, [pc, #348]	@ (8001868 <main+0x338>)
 800170a:	4618      	mov	r0, r3
 800170c:	f005 fa14 	bl	8006b38 <siprintf>
		SerialOutputString(buffer, &USART1_PORT);
 8001710:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001714:	494d      	ldr	r1, [pc, #308]	@ (800184c <main+0x31c>)
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f9f1 	bl	8001afe <SerialOutputString>
	}
	sprintf(buffer, "Winner can spin the wheel now!\r\n");
 800171c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001720:	4952      	ldr	r1, [pc, #328]	@ (800186c <main+0x33c>)
 8001722:	4618      	mov	r0, r3
 8001724:	f005 fa08 	bl	8006b38 <siprintf>
	SerialOutputString(buffer, &USART1_PORT);
 8001728:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800172c:	4947      	ldr	r1, [pc, #284]	@ (800184c <main+0x31c>)
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f9e5 	bl	8001afe <SerialOutputString>

	roulette(&prize);
 8001734:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8001738:	4618      	mov	r0, r3
 800173a:	f000 f8a9 	bl	8001890 <roulette>

	switch(prize) {
 800173e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001742:	3b01      	subs	r3, #1
 8001744:	2b07      	cmp	r3, #7
 8001746:	d87c      	bhi.n	8001842 <main+0x312>
 8001748:	a201      	add	r2, pc, #4	@ (adr r2, 8001750 <main+0x220>)
 800174a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174e:	bf00      	nop
 8001750:	08001771 	.word	0x08001771
 8001754:	0800178b 	.word	0x0800178b
 8001758:	080017a5 	.word	0x080017a5
 800175c:	080017bf 	.word	0x080017bf
 8001760:	080017d9 	.word	0x080017d9
 8001764:	080017f3 	.word	0x080017f3
 8001768:	0800180d 	.word	0x0800180d
 800176c:	08001827 	.word	0x08001827
	case 1:
		sprintf(buffer, "You won a deluxe pen!\r\n");
 8001770:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001774:	493e      	ldr	r1, [pc, #248]	@ (8001870 <main+0x340>)
 8001776:	4618      	mov	r0, r3
 8001778:	f005 f9de 	bl	8006b38 <siprintf>
		SerialOutputString(buffer, &USART1_PORT);
 800177c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001780:	4932      	ldr	r1, [pc, #200]	@ (800184c <main+0x31c>)
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f9bb 	bl	8001afe <SerialOutputString>
		break;
 8001788:	e05b      	b.n	8001842 <main+0x312>
	case 2:
		sprintf(buffer, "You won an exclusive notebook!\r\n");
 800178a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800178e:	4939      	ldr	r1, [pc, #228]	@ (8001874 <main+0x344>)
 8001790:	4618      	mov	r0, r3
 8001792:	f005 f9d1 	bl	8006b38 <siprintf>
		SerialOutputString(buffer, &USART1_PORT);
 8001796:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800179a:	492c      	ldr	r1, [pc, #176]	@ (800184c <main+0x31c>)
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f9ae 	bl	8001afe <SerialOutputString>
		break;
 80017a2:	e04e      	b.n	8001842 <main+0x312>
	case 3:
		sprintf(buffer, "You won a high accuracy ruler!\r\n");
 80017a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017a8:	4933      	ldr	r1, [pc, #204]	@ (8001878 <main+0x348>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f005 f9c4 	bl	8006b38 <siprintf>
		SerialOutputString(buffer, &USART1_PORT);
 80017b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017b4:	4925      	ldr	r1, [pc, #148]	@ (800184c <main+0x31c>)
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f9a1 	bl	8001afe <SerialOutputString>
		break;
 80017bc:	e041      	b.n	8001842 <main+0x312>
	case 4:
		sprintf(buffer, "You won a world class hydration container!\r\n");
 80017be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017c2:	492e      	ldr	r1, [pc, #184]	@ (800187c <main+0x34c>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f005 f9b7 	bl	8006b38 <siprintf>
		SerialOutputString(buffer, &USART1_PORT);
 80017ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ce:	491f      	ldr	r1, [pc, #124]	@ (800184c <main+0x31c>)
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f994 	bl	8001afe <SerialOutputString>
		break;
 80017d6:	e034      	b.n	8001842 <main+0x312>
	case 5:
		sprintf(buffer, "You won an exclusive rubber band!\r\n");
 80017d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017dc:	4928      	ldr	r1, [pc, #160]	@ (8001880 <main+0x350>)
 80017de:	4618      	mov	r0, r3
 80017e0:	f005 f9aa 	bl	8006b38 <siprintf>
		SerialOutputString(buffer, &USART1_PORT);
 80017e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017e8:	4918      	ldr	r1, [pc, #96]	@ (800184c <main+0x31c>)
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f987 	bl	8001afe <SerialOutputString>
		break;
 80017f0:	e027      	b.n	8001842 <main+0x312>
	case 6:
		sprintf(buffer, "You won an exclusive signature from Omar!\r\n");
 80017f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017f6:	4923      	ldr	r1, [pc, #140]	@ (8001884 <main+0x354>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f005 f99d 	bl	8006b38 <siprintf>
		SerialOutputString(buffer, &USART1_PORT);
 80017fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001802:	4912      	ldr	r1, [pc, #72]	@ (800184c <main+0x31c>)
 8001804:	4618      	mov	r0, r3
 8001806:	f000 f97a 	bl	8001afe <SerialOutputString>
		break;
 800180a:	e01a      	b.n	8001842 <main+0x312>
	case 7:
		sprintf(buffer, "You won a luxurious charger!\r\n");
 800180c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001810:	491d      	ldr	r1, [pc, #116]	@ (8001888 <main+0x358>)
 8001812:	4618      	mov	r0, r3
 8001814:	f005 f990 	bl	8006b38 <siprintf>
		SerialOutputString(buffer, &USART1_PORT);
 8001818:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800181c:	490b      	ldr	r1, [pc, #44]	@ (800184c <main+0x31c>)
 800181e:	4618      	mov	r0, r3
 8001820:	f000 f96d 	bl	8001afe <SerialOutputString>
		break;
 8001824:	e00d      	b.n	8001842 <main+0x312>
	case 8:
		sprintf(buffer, "You won a high precision pencil sharpener!\r\n");
 8001826:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800182a:	4918      	ldr	r1, [pc, #96]	@ (800188c <main+0x35c>)
 800182c:	4618      	mov	r0, r3
 800182e:	f005 f983 	bl	8006b38 <siprintf>
		SerialOutputString(buffer, &USART1_PORT);
 8001832:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001836:	4905      	ldr	r1, [pc, #20]	@ (800184c <main+0x31c>)
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f960 	bl	8001afe <SerialOutputString>
		break;
 800183e:	bf00      	nop
 8001840:	e7ff      	b.n	8001842 <main+0x312>
	}


	for(;;){};
 8001842:	bf00      	nop
 8001844:	e7fd      	b.n	8001842 <main+0x312>
 8001846:	bf00      	nop
 8001848:	0800aa9c 	.word	0x0800aa9c
 800184c:	20000000 	.word	0x20000000
 8001850:	0800aabc 	.word	0x0800aabc
 8001854:	20000040 	.word	0x20000040
 8001858:	0800aac4 	.word	0x0800aac4
 800185c:	0800aadc 	.word	0x0800aadc
 8001860:	0800ab00 	.word	0x0800ab00
 8001864:	0800ab24 	.word	0x0800ab24
 8001868:	0800ab50 	.word	0x0800ab50
 800186c:	0800ab7c 	.word	0x0800ab7c
 8001870:	0800aba0 	.word	0x0800aba0
 8001874:	0800abb8 	.word	0x0800abb8
 8001878:	0800abdc 	.word	0x0800abdc
 800187c:	0800ac00 	.word	0x0800ac00
 8001880:	0800ac30 	.word	0x0800ac30
 8001884:	0800ac54 	.word	0x0800ac54
 8001888:	0800ac80 	.word	0x0800ac80
 800188c:	0800aca0 	.word	0x0800aca0

08001890 <roulette>:

#include "digital_io.h"
#include "serial.h"
#include "timers.h"

void roulette(uint8_t *prize){
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b094      	sub	sp, #80	@ 0x50
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	while ((get_button_state() & 0x01) == 0) {}
 8001898:	bf00      	nop
 800189a:	f7ff fa2b 	bl	8000cf4 <get_button_state>
 800189e:	4603      	mov	r3, r0
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f8      	beq.n	800189a <roulette+0xa>
	uint16_t delay_period = 25;
 80018a8:	2319      	movs	r3, #25
 80018aa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

	for (uint8_t i = 1; i < 6; i++) {
 80018ae:	2301      	movs	r3, #1
 80018b0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80018b4:	e01e      	b.n	80018f4 <roulette+0x64>
		for(uint8_t j = 0; j < 8; j++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80018bc:	e011      	b.n	80018e2 <roulette+0x52>
			chase_leds();
 80018be:	f7ff fa71 	bl	8000da4 <chase_leds>
			delay(delay_period*i);
 80018c2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80018cc:	fb12 f303 	smulbb	r3, r2, r3
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 fc8c 	bl	80021f0 <delay>
		for(uint8_t j = 0; j < 8; j++){
 80018d8:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80018dc:	3301      	adds	r3, #1
 80018de:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80018e2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80018e6:	2b07      	cmp	r3, #7
 80018e8:	d9e9      	bls.n	80018be <roulette+0x2e>
	for (uint8_t i = 1; i < 6; i++) {
 80018ea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80018ee:	3301      	adds	r3, #1
 80018f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80018f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	d9dc      	bls.n	80018b6 <roulette+0x26>
		}
	}

	uint8_t string_to_send[64] = "This is a string !\r\n";
 80018fc:	4b2d      	ldr	r3, [pc, #180]	@ (80019b4 <roulette+0x124>)
 80018fe:	f107 0408 	add.w	r4, r7, #8
 8001902:	461d      	mov	r5, r3
 8001904:	6828      	ldr	r0, [r5, #0]
 8001906:	6869      	ldr	r1, [r5, #4]
 8001908:	68aa      	ldr	r2, [r5, #8]
 800190a:	68eb      	ldr	r3, [r5, #12]
 800190c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800190e:	6928      	ldr	r0, [r5, #16]
 8001910:	6020      	str	r0, [r4, #0]
 8001912:	7d2b      	ldrb	r3, [r5, #20]
 8001914:	7123      	strb	r3, [r4, #4]
 8001916:	f107 031d 	add.w	r3, r7, #29
 800191a:	222b      	movs	r2, #43	@ 0x2b
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f005 f96d 	bl	8006bfe <memset>

	uint8_t r = rand() % 8 + 1;
 8001924:	f004 f916 	bl	8005b54 <rand>
 8001928:	4603      	mov	r3, r0
 800192a:	425a      	negs	r2, r3
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	f002 0207 	and.w	r2, r2, #7
 8001934:	bf58      	it	pl
 8001936:	4253      	negpl	r3, r2
 8001938:	b2db      	uxtb	r3, r3
 800193a:	3301      	adds	r3, #1
 800193c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	*prize = r;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8001946:	701a      	strb	r2, [r3, #0]
	sprintf(string_to_send, "Random number is %d\r\n", r);
 8001948:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 800194c:	f107 0308 	add.w	r3, r7, #8
 8001950:	4919      	ldr	r1, [pc, #100]	@ (80019b8 <roulette+0x128>)
 8001952:	4618      	mov	r0, r3
 8001954:	f005 f8f0 	bl	8006b38 <siprintf>
	SerialOutputString(string_to_send, &USART1_PORT);
 8001958:	f107 0308 	add.w	r3, r7, #8
 800195c:	4917      	ldr	r1, [pc, #92]	@ (80019bc <roulette+0x12c>)
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f8cd 	bl	8001afe <SerialOutputString>

	uint8_t mask = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	// Turn on the random number of LEDs
	for (uint8_t i = 0; i < r; i++) {
 800196a:	2300      	movs	r3, #0
 800196c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8001970:	e010      	b.n	8001994 <roulette+0x104>
		mask |= (1 << i);
 8001972:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001976:	2201      	movs	r2, #1
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	b25a      	sxtb	r2, r3
 800197e:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8001982:	4313      	orrs	r3, r2
 8001984:	b25b      	sxtb	r3, r3
 8001986:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for (uint8_t i = 0; i < r; i++) {
 800198a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800198e:	3301      	adds	r3, #1
 8001990:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8001994:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8001998:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800199c:	429a      	cmp	r2, r3
 800199e:	d3e8      	bcc.n	8001972 <roulette+0xe2>
	}

	set_leds(mask);
 80019a0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff f9b1 	bl	8000d0c <set_leds>
}
 80019aa:	bf00      	nop
 80019ac:	3750      	adds	r7, #80	@ 0x50
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bdb0      	pop	{r4, r5, r7, pc}
 80019b2:	bf00      	nop
 80019b4:	0800ace8 	.word	0x0800ace8
 80019b8:	0800acd0 	.word	0x0800acd0
 80019bc:	20000000 	.word	0x20000000

080019c0 <SerialInitialise>:
		((uint8_t*)&(GPIOC->AFR[1])) + 1,
		0x55};

// SerialInitialise - Initialise the serial port
// Input: baud rate as defined in the enum
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	63da      	str	r2, [r3, #60]	@ 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80019d2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac8 <SerialInitialise+0x108>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ac8 <SerialInitialise+0x108>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019dc:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80019de:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac8 <SerialInitialise+0x108>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	4a39      	ldr	r2, [pc, #228]	@ (8001ac8 <SerialInitialise+0x108>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d106      	bne.n	8001a00 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80019f2:	4b35      	ldr	r3, [pc, #212]	@ (8001ac8 <SerialInitialise+0x108>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	4a34      	ldr	r2, [pc, #208]	@ (8001ac8 <SerialInitialise+0x108>)
 80019f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80019fc:	6153      	str	r3, [r2, #20]
		break;
 80019fe:	e000      	b.n	8001a02 <SerialInitialise+0x42>
	default:
		break;
 8001a00:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) |= serial_port->SerialPinModeValue;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	430a      	orrs	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) |= serial_port->SerialPinSpeedValue;
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a22:	430a      	orrs	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) |= serial_port->SerialPinAlternatePinValue;
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a2c:	b2d9      	uxtb	r1, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	69d9      	ldr	r1, [r3, #28]
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d825      	bhi.n	8001aaa <SerialInitialise+0xea>
 8001a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a64 <SerialInitialise+0xa4>)
 8001a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a64:	08001a79 	.word	0x08001a79
 8001a68:	08001a83 	.word	0x08001a83
 8001a6c:	08001a8d 	.word	0x08001a8d
 8001a70:	08001a97 	.word	0x08001a97
 8001a74:	08001aa1 	.word	0x08001aa1
	case BAUD_9600:
		*baud_rate_config = 0x341 * 0x06; // 9600 at 8MHz
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f241 3286 	movw	r2, #4998	@ 0x1386
 8001a7e:	801a      	strh	r2, [r3, #0]
		break;
 8001a80:	e013      	b.n	8001aaa <SerialInitialise+0xea>
	case BAUD_19200:
		*baud_rate_config = 0x1A1 * 0x06; // 19200 at 8MHz
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f640 12c6 	movw	r2, #2502	@ 0x9c6
 8001a88:	801a      	strh	r2, [r3, #0]
		break;
 8001a8a:	e00e      	b.n	8001aaa <SerialInitialise+0xea>
	case BAUD_38400:
		*baud_rate_config = 0xD0 * 0x06;  // 38400 at 8MHz
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8001a92:	801a      	strh	r2, [r3, #0]
		break;
 8001a94:	e009      	b.n	8001aaa <SerialInitialise+0xea>
	case BAUD_57600:
		*baud_rate_config = 0x8B * 0x06;  // 57600 at 8MHz
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f240 3242 	movw	r2, #834	@ 0x342
 8001a9c:	801a      	strh	r2, [r3, #0]
		break;
 8001a9e:	e004      	b.n	8001aaa <SerialInitialise+0xea>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8001aa6:	801a      	strh	r2, [r3, #0]
		break;
 8001aa8:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f042 020d 	orr.w	r2, r2, #13
 8001ab8:	601a      	str	r2, [r3, #0]
}
 8001aba:	bf00      	nop
 8001abc:	371c      	adds	r7, #28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000

08001acc <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8001ad8:	bf00      	nop
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f8      	beq.n	8001ada <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	79fa      	ldrb	r2, [r7, #7]
 8001aee:	b292      	uxth	r2, r2
 8001af0:	801a      	strh	r2, [r3, #0]
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <SerialOutputString>:


// SerialOutputString - output a NULL TERMINATED string to the serial port
// Input: pointer to a NULL-TERMINATED string (if not null terminated, there will be problems)
void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8001b0c:	e00b      	b.n	8001b26 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	6839      	ldr	r1, [r7, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ffd9 	bl	8001acc <SerialOutputChar>
		counter++;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
		pt++;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3301      	adds	r3, #1
 8001b24:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1ef      	bne.n	8001b0e <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	4798      	blx	r3
}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <SerialInputChar>:


uint8_t SerialInputChar(SerialPort *serial_port)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b085      	sub	sp, #20
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
	while (*(serial_port->StatusRegister) & USART_ISR_ORE || *(serial_port->StatusRegister) & USART_ISR_FE)
 8001b4e:	e007      	b.n	8001b60 <SerialInputChar+0x1a>
	{
		*(serial_port->FlagClearRegister) |= USART_ICR_ORECF | USART_ICR_FECF;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f042 020a 	orr.w	r2, r2, #10
 8001b5e:	601a      	str	r2, [r3, #0]
	while (*(serial_port->StatusRegister) & USART_ISR_ORE || *(serial_port->StatusRegister) & USART_ISR_FE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <SerialInputChar+0xa>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1e9      	bne.n	8001b50 <SerialInputChar+0xa>
	}

	while((*(serial_port->StatusRegister) & USART_ISR_RXNE) == 0)	{};
 8001b7c:	bf00      	nop
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f8      	beq.n	8001b7e <SerialInputChar+0x38>

	//read in a character at a time and return it
	uint8_t character = *(serial_port->DataInputRegister);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	73fb      	strb	r3, [r7, #15]
	return character;
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <SerialInputString>:


// SerialInputString - input a string from the serial port
// Input: buffer to store string, buffer size, termination character
uint8_t* SerialInputString(uint8_t *buffer, uint32_t buffer_size, SerialPort *serial_port, uint8_t termination_char)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	70fb      	strb	r3, [r7, #3]
	//characters are only read until the buffer is full or a termination char is sent
	uint32_t counter = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < buffer_size/sizeof(uint8_t); i++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	e013      	b.n	8001be4 <SerialInputString+0x40>
	{
		uint8_t character = SerialInputChar(serial_port);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ffc2 	bl	8001b46 <SerialInputChar>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	75fb      	strb	r3, [r7, #23]
		buffer[i] = character;
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	4413      	add	r3, r2
 8001bcc:	7dfa      	ldrb	r2, [r7, #23]
 8001bce:	701a      	strb	r2, [r3, #0]
		counter++;
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	61fb      	str	r3, [r7, #28]
		if (character == termination_char)
 8001bd6:	7dfa      	ldrb	r2, [r7, #23]
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d007      	beq.n	8001bee <SerialInputString+0x4a>
	for (uint32_t i = 0; i < buffer_size/sizeof(uint8_t); i++)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	3301      	adds	r3, #1
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d3e7      	bcc.n	8001bbc <SerialInputString+0x18>
 8001bec:	e000      	b.n	8001bf0 <SerialInputString+0x4c>
		{
			break;
 8001bee:	bf00      	nop
		}
	}
	//callback is called if not equal to NULL
	if (serial_port->completion_function != 0x00)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <SerialInputString+0x5c>
	{
		serial_port->completion_function(counter);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bfc:	69f8      	ldr	r0, [r7, #28]
 8001bfe:	4798      	blx	r3
	}
	return buffer;
 8001c00:	68fb      	ldr	r3, [r7, #12]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3720      	adds	r7, #32
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	4b0f      	ldr	r3, [pc, #60]	@ (8001c50 <HAL_MspInit+0x44>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	4a0e      	ldr	r2, [pc, #56]	@ (8001c50 <HAL_MspInit+0x44>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6193      	str	r3, [r2, #24]
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <HAL_MspInit+0x44>)
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <HAL_MspInit+0x44>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a08      	ldr	r2, [pc, #32]	@ (8001c50 <HAL_MspInit+0x44>)
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c34:	61d3      	str	r3, [r2, #28]
 8001c36:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <HAL_MspInit+0x44>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c42:	2007      	movs	r0, #7
 8001c44:	f000 fc48 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40021000 	.word	0x40021000

08001c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	@ 0x28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a17      	ldr	r2, [pc, #92]	@ (8001cd0 <HAL_I2C_MspInit+0x7c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d127      	bne.n	8001cc6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c76:	4b17      	ldr	r3, [pc, #92]	@ (8001cd4 <HAL_I2C_MspInit+0x80>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	4a16      	ldr	r2, [pc, #88]	@ (8001cd4 <HAL_I2C_MspInit+0x80>)
 8001c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c80:	6153      	str	r3, [r2, #20]
 8001c82:	4b14      	ldr	r3, [pc, #80]	@ (8001cd4 <HAL_I2C_MspInit+0x80>)
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001c8e:	23c0      	movs	r3, #192	@ 0xc0
 8001c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c92:	2312      	movs	r3, #18
 8001c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c96:	2301      	movs	r3, #1
 8001c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480b      	ldr	r0, [pc, #44]	@ (8001cd8 <HAL_I2C_MspInit+0x84>)
 8001caa:	f000 fc49 	bl	8002540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cae:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <HAL_I2C_MspInit+0x80>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a08      	ldr	r2, [pc, #32]	@ (8001cd4 <HAL_I2C_MspInit+0x80>)
 8001cb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cb8:	61d3      	str	r3, [r2, #28]
 8001cba:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_I2C_MspInit+0x80>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3728      	adds	r7, #40	@ 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40005400 	.word	0x40005400
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	48000400 	.word	0x48000400

08001cdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	@ 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a17      	ldr	r2, [pc, #92]	@ (8001d58 <HAL_SPI_MspInit+0x7c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d128      	bne.n	8001d50 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cfe:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <HAL_SPI_MspInit+0x80>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	4a16      	ldr	r2, [pc, #88]	@ (8001d5c <HAL_SPI_MspInit+0x80>)
 8001d04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d08:	6193      	str	r3, [r2, #24]
 8001d0a:	4b14      	ldr	r3, [pc, #80]	@ (8001d5c <HAL_SPI_MspInit+0x80>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <HAL_SPI_MspInit+0x80>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	4a10      	ldr	r2, [pc, #64]	@ (8001d5c <HAL_SPI_MspInit+0x80>)
 8001d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d20:	6153      	str	r3, [r2, #20]
 8001d22:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <HAL_SPI_MspInit+0x80>)
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001d2e:	23e0      	movs	r3, #224	@ 0xe0
 8001d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d3e:	2305      	movs	r3, #5
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4619      	mov	r1, r3
 8001d48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d4c:	f000 fbf8 	bl	8002540 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d50:	bf00      	nop
 8001d52:	3728      	adds	r7, #40	@ 0x28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40013000 	.word	0x40013000
 8001d5c:	40021000 	.word	0x40021000

08001d60 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a08      	ldr	r2, [pc, #32]	@ (8001d90 <HAL_SPI_MspDeInit+0x30>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d10a      	bne.n	8001d88 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001d72:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <HAL_SPI_MspDeInit+0x34>)
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	4a07      	ldr	r2, [pc, #28]	@ (8001d94 <HAL_SPI_MspDeInit+0x34>)
 8001d78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d7c:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 8001d7e:	21e0      	movs	r1, #224	@ 0xe0
 8001d80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d84:	f000 fd56 	bl	8002834 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40013000 	.word	0x40013000
 8001d94:	40021000 	.word	0x40021000

08001d98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	@ 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a18      	ldr	r2, [pc, #96]	@ (8001e18 <HAL_PCD_MspInit+0x80>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d129      	bne.n	8001e0e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <HAL_PCD_MspInit+0x84>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4a17      	ldr	r2, [pc, #92]	@ (8001e1c <HAL_PCD_MspInit+0x84>)
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc4:	6153      	str	r3, [r2, #20]
 8001dc6:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <HAL_PCD_MspInit+0x84>)
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001dd2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001de4:	230e      	movs	r3, #14
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	4619      	mov	r1, r3
 8001dee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001df2:	f000 fba5 	bl	8002540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001df6:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <HAL_PCD_MspInit+0x84>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	4a08      	ldr	r2, [pc, #32]	@ (8001e1c <HAL_PCD_MspInit+0x84>)
 8001dfc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e00:	61d3      	str	r3, [r2, #28]
 8001e02:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_PCD_MspInit+0x84>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	3728      	adds	r7, #40	@ 0x28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40005c00 	.word	0x40005c00
 8001e1c:	40021000 	.word	0x40021000

08001e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <NMI_Handler+0x4>

08001e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <HardFault_Handler+0x4>

08001e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <MemManage_Handler+0x4>

08001e38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <BusFault_Handler+0x4>

08001e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <UsageFault_Handler+0x4>

08001e48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e76:	f000 fa5d 	bl	8002334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
	return 1;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <_kill>:

int _kill(int pid, int sig)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e98:	f004 ff04 	bl	8006ca4 <__errno>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2216      	movs	r2, #22
 8001ea0:	601a      	str	r2, [r3, #0]
	return -1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <_exit>:

void _exit (int status)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001eb6:	f04f 31ff 	mov.w	r1, #4294967295
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffe7 	bl	8001e8e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ec0:	bf00      	nop
 8001ec2:	e7fd      	b.n	8001ec0 <_exit+0x12>

08001ec4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e00a      	b.n	8001eec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ed6:	f3af 8000 	nop.w
 8001eda:	4601      	mov	r1, r0
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	60ba      	str	r2, [r7, #8]
 8001ee2:	b2ca      	uxtb	r2, r1
 8001ee4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbf0      	blt.n	8001ed6 <_read+0x12>
	}

return len;
 8001ef4:	687b      	ldr	r3, [r7, #4]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e009      	b.n	8001f24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	60ba      	str	r2, [r7, #8]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dbf1      	blt.n	8001f10 <_write+0x12>
	}
	return len;
 8001f2c:	687b      	ldr	r3, [r7, #4]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_close>:

int _close(int file)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f5e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <_isatty>:

int _isatty(int file)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
	return 1;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa8:	4a14      	ldr	r2, [pc, #80]	@ (8001ffc <_sbrk+0x5c>)
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <_sbrk+0x60>)
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb4:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <_sbrk+0x64>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	@ (8002008 <_sbrk+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc2:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d207      	bcs.n	8001fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd0:	f004 fe68 	bl	8006ca4 <__errno>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	e009      	b.n	8001ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a05      	ldr	r2, [pc, #20]	@ (8002004 <_sbrk+0x64>)
 8001ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	2000a000 	.word	0x2000a000
 8002000:	00000400 	.word	0x00000400
 8002004:	200009f4 	.word	0x200009f4
 8002008:	20000bb8 	.word	0x20000bb8

0800200c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002010:	4b06      	ldr	r3, [pc, #24]	@ (800202c <SystemInit+0x20>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002016:	4a05      	ldr	r2, [pc, #20]	@ (800202c <SystemInit+0x20>)
 8002018:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800201c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	db0b      	blt.n	800205a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	4907      	ldr	r1, [pc, #28]	@ (8002068 <__NVIC_EnableIRQ+0x38>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	2001      	movs	r0, #1
 8002052:	fa00 f202 	lsl.w	r2, r0, r2
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000e100 	.word	0xe000e100

0800206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	2b00      	cmp	r3, #0
 800207e:	db0a      	blt.n	8002096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	490c      	ldr	r1, [pc, #48]	@ (80020b8 <__NVIC_SetPriority+0x4c>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	0112      	lsls	r2, r2, #4
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	440b      	add	r3, r1
 8002090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002094:	e00a      	b.n	80020ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4908      	ldr	r1, [pc, #32]	@ (80020bc <__NVIC_SetPriority+0x50>)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	3b04      	subs	r3, #4
 80020a4:	0112      	lsls	r2, r2, #4
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	440b      	add	r3, r1
 80020aa:	761a      	strb	r2, [r3, #24]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <enable_interrupt>:

// pointers to callback functions
void (*TIM2_callback_function)();


void enable_interrupt(IRQn_Type IRQn, uint32_t priority) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80020cc:	b672      	cpsid	i
}
 80020ce:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Tell the NVIC module that TIM2 interrupts should be handled
	NVIC_SetPriority(IRQn, priority);  // Set Priority
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	6839      	ldr	r1, [r7, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ffc8 	bl	800206c <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQn);
 80020dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ffa5 	bl	8002030 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80020e6:	b662      	cpsie	i
}
 80020e8:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <TIM2_IRQHandler>:


void TIM2_IRQHandler(){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
// run the oneshot timer interrupt handler
	if (TIM2->SR & TIM_SR_UIF) {
 80020f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00e      	beq.n	8002124 <TIM2_IRQHandler+0x30>
		// clear oneshot timer interrupt
		TIM2->SR &= ~TIM_SR_UIF;
 8002106:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002110:	f023 0301 	bic.w	r3, r3, #1
 8002114:	6113      	str	r3, [r2, #16]

		if (TIM2_callback_function != NULL)
 8002116:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <TIM2_IRQHandler+0x34>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <TIM2_IRQHandler+0x30>
		{
			TIM2_callback_function();
 800211e:	4b02      	ldr	r3, [pc, #8]	@ (8002128 <TIM2_IRQHandler+0x34>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4798      	blx	r3
		}

	}

}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200009f8 	.word	0x200009f8

0800212c <game_timer>:


void game_timer(uint16_t time, void (*callback_function)()) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	80fb      	strh	r3, [r7, #6]

	// reset CR1
	TIM2->CR1 = 0x00;
 8002138:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

	// set the prescaler to 999, slower than the default clock 1000 times
	TIM2->PSC = PRESCALER; // 1 millisecond or 1 millisecond per count
 8002140:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002144:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8002148:	629a      	str	r2, [r3, #40]	@ 0x28

	// set the auto reload according to the prescaler
	TIM2->ARR = 0x01; // 1 - 1 millisecond
 800214a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800214e:	2201      	movs	r2, #1
 8002150:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->ARR = TIM2->ARR * time; // delay in millisecond
 8002152:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002158:	88fa      	ldrh	r2, [r7, #6]
 800215a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800215e:	fb02 f303 	mul.w	r3, r2, r3
 8002162:	62cb      	str	r3, [r1, #44]	@ 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // enable auto reload buffering
 8002164:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800216e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002172:	6013      	str	r3, [r2, #0]

	// set to only counter overflow raises interrupt flag
	TIM2->CR1 |= TIM_CR1_URS;
 8002174:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	6013      	str	r3, [r2, #0]

	// set to one-pulse mode
	TIM2->CR1 |= TIM_CR1_OPM;
 8002184:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800218e:	f043 0308 	orr.w	r3, r3, #8
 8002192:	6013      	str	r3, [r2, #0]

	// re-initialise the counter and generates an update of the registers
	TIM2->EGR |= TIM_EGR_UG;
 8002194:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6153      	str	r3, [r2, #20]

	// enable the update interrupt
	TIM2->DIER |= TIM_DIER_UIE;
 80021a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	60d3      	str	r3, [r2, #12]

	// clear the interrupt
	TIM2->SR &= ~TIM_SR_UIF;
 80021b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	6113      	str	r3, [r2, #16]

	TIM2_callback_function = callback_function;
 80021c4:	4a09      	ldr	r2, [pc, #36]	@ (80021ec <game_timer+0xc0>)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6013      	str	r3, [r2, #0]

	enable_interrupt(TIM2_IRQn, 0);
 80021ca:	2100      	movs	r1, #0
 80021cc:	201c      	movs	r0, #28
 80021ce:	f7ff ff77 	bl	80020c0 <enable_interrupt>

	// enable counter
	TIM2->CR1 |= TIM_CR1_CEN;
 80021d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6013      	str	r3, [r2, #0]

}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	200009f8 	.word	0x200009f8

080021f0 <delay>:


void delay(uint16_t delay_period){
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	80fb      	strh	r3, [r7, #6]
	// reset CR1
	TIM3->CR1 = 0x00;
 80021fa:	4b15      	ldr	r3, [pc, #84]	@ (8002250 <delay+0x60>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
	TIM3->CNT = 0;
 8002200:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <delay+0x60>)
 8002202:	2200      	movs	r2, #0
 8002204:	625a      	str	r2, [r3, #36]	@ 0x24

	// set the prescaler to 999, slower than the default clock 1000 times
	TIM3->PSC = PRESCALER; // 1 millisecond or 1 millisecond per count
 8002206:	4b12      	ldr	r3, [pc, #72]	@ (8002250 <delay+0x60>)
 8002208:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 800220c:	629a      	str	r2, [r3, #40]	@ 0x28

	// re-initialise the counter and generates an update of the registers
	TIM3->EGR |= TIM_EGR_UG;
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <delay+0x60>)
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	4a0f      	ldr	r2, [pc, #60]	@ (8002250 <delay+0x60>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6153      	str	r3, [r2, #20]

	// enable counter
	TIM3->CR1 |= TIM_CR1_CEN;
 800221a:	4b0d      	ldr	r3, [pc, #52]	@ (8002250 <delay+0x60>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a0c      	ldr	r2, [pc, #48]	@ (8002250 <delay+0x60>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6013      	str	r3, [r2, #0]

	while (TIM3->CNT < delay_period) {};
 8002226:	bf00      	nop
 8002228:	4b09      	ldr	r3, [pc, #36]	@ (8002250 <delay+0x60>)
 800222a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	429a      	cmp	r2, r3
 8002230:	d3fa      	bcc.n	8002228 <delay+0x38>

	// disable counter
	TIM3->CR1 &= ~TIM_CR1_CEN;
 8002232:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <delay+0x60>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a06      	ldr	r2, [pc, #24]	@ (8002250 <delay+0x60>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6013      	str	r3, [r2, #0]
	TIM3->CNT = 0;
 800223e:	4b04      	ldr	r3, [pc, #16]	@ (8002250 <delay+0x60>)
 8002240:	2200      	movs	r2, #0
 8002242:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	40000400 	.word	0x40000400

08002254 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002254:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800228c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002258:	f7ff fed8 	bl	800200c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800225c:	480c      	ldr	r0, [pc, #48]	@ (8002290 <LoopForever+0x6>)
  ldr r1, =_edata
 800225e:	490d      	ldr	r1, [pc, #52]	@ (8002294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002260:	4a0d      	ldr	r2, [pc, #52]	@ (8002298 <LoopForever+0xe>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002264:	e002      	b.n	800226c <LoopCopyDataInit>

08002266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226a:	3304      	adds	r3, #4

0800226c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800226c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002270:	d3f9      	bcc.n	8002266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002272:	4a0a      	ldr	r2, [pc, #40]	@ (800229c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002274:	4c0a      	ldr	r4, [pc, #40]	@ (80022a0 <LoopForever+0x16>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002278:	e001      	b.n	800227e <LoopFillZerobss>

0800227a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800227c:	3204      	adds	r2, #4

0800227e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002280:	d3fb      	bcc.n	800227a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002282:	f004 fd15 	bl	8006cb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002286:	f7ff f953 	bl	8001530 <main>

0800228a <LoopForever>:

LoopForever:
    b LoopForever
 800228a:	e7fe      	b.n	800228a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800228c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002294:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8002298:	0800b1c4 	.word	0x0800b1c4
  ldr r2, =_sbss
 800229c:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 80022a0:	20000bb4 	.word	0x20000bb4

080022a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022a4:	e7fe      	b.n	80022a4 <ADC1_2_IRQHandler>
	...

080022a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022ac:	4b08      	ldr	r3, [pc, #32]	@ (80022d0 <HAL_Init+0x28>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a07      	ldr	r2, [pc, #28]	@ (80022d0 <HAL_Init+0x28>)
 80022b2:	f043 0310 	orr.w	r3, r3, #16
 80022b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b8:	2003      	movs	r0, #3
 80022ba:	f000 f90d 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022be:	2000      	movs	r0, #0
 80022c0:	f000 f808 	bl	80022d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c4:	f7ff fca2 	bl	8001c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40022000 	.word	0x40022000

080022d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022dc:	4b12      	ldr	r3, [pc, #72]	@ (8002328 <HAL_InitTick+0x54>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b12      	ldr	r3, [pc, #72]	@ (800232c <HAL_InitTick+0x58>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4619      	mov	r1, r3
 80022e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f917 	bl	8002526 <HAL_SYSTICK_Config>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e00e      	b.n	8002320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b0f      	cmp	r3, #15
 8002306:	d80a      	bhi.n	800231e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002308:	2200      	movs	r2, #0
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	f04f 30ff 	mov.w	r0, #4294967295
 8002310:	f000 f8ed 	bl	80024ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002314:	4a06      	ldr	r2, [pc, #24]	@ (8002330 <HAL_InitTick+0x5c>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e000      	b.n	8002320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000080 	.word	0x20000080
 800232c:	20000088 	.word	0x20000088
 8002330:	20000084 	.word	0x20000084

08002334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002338:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_IncTick+0x20>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_IncTick+0x24>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4413      	add	r3, r2
 8002344:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <HAL_IncTick+0x24>)
 8002346:	6013      	str	r3, [r2, #0]
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000088 	.word	0x20000088
 8002358:	200009fc 	.word	0x200009fc

0800235c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002360:	4b03      	ldr	r3, [pc, #12]	@ (8002370 <HAL_GetTick+0x14>)
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	200009fc 	.word	0x200009fc

08002374 <__NVIC_SetPriorityGrouping>:
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002384:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002390:	4013      	ands	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800239c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	@ (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_GetPriorityGrouping>:
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__NVIC_GetPriorityGrouping+0x18>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	f003 0307 	and.w	r3, r3, #7
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_SetPriority>:
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	@ (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	@ (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	@ 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
         );
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	@ 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024a4:	d301      	bcc.n	80024aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00f      	b.n	80024ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024aa:	4a0a      	ldr	r2, [pc, #40]	@ (80024d4 <SysTick_Config+0x40>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b2:	210f      	movs	r1, #15
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f7ff ff8e 	bl	80023d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024bc:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <SysTick_Config+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c2:	4b04      	ldr	r3, [pc, #16]	@ (80024d4 <SysTick_Config+0x40>)
 80024c4:	2207      	movs	r2, #7
 80024c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	e000e010 	.word	0xe000e010

080024d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ff47 	bl	8002374 <__NVIC_SetPriorityGrouping>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002500:	f7ff ff5c 	bl	80023bc <__NVIC_GetPriorityGrouping>
 8002504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f7ff ff8e 	bl	800242c <NVIC_EncodePriority>
 8002510:	4602      	mov	r2, r0
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff5d 	bl	80023d8 <__NVIC_SetPriority>
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff ffb0 	bl	8002494 <SysTick_Config>
 8002534:	4603      	mov	r3, r0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800254e:	e154      	b.n	80027fa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	2101      	movs	r1, #1
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	fa01 f303 	lsl.w	r3, r1, r3
 800255c:	4013      	ands	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8146 	beq.w	80027f4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d005      	beq.n	8002580 <HAL_GPIO_Init+0x40>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d130      	bne.n	80025e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b6:	2201      	movs	r2, #1
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	f003 0201 	and.w	r2, r3, #1
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d017      	beq.n	800261e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	2203      	movs	r2, #3
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4013      	ands	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d123      	bne.n	8002672 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	08da      	lsrs	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3208      	adds	r2, #8
 8002632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002636:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	220f      	movs	r2, #15
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4013      	ands	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	08da      	lsrs	r2, r3, #3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3208      	adds	r2, #8
 800266c:	6939      	ldr	r1, [r7, #16]
 800266e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	2203      	movs	r2, #3
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0203 	and.w	r2, r3, #3
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80a0 	beq.w	80027f4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b4:	4b58      	ldr	r3, [pc, #352]	@ (8002818 <HAL_GPIO_Init+0x2d8>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	4a57      	ldr	r2, [pc, #348]	@ (8002818 <HAL_GPIO_Init+0x2d8>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6193      	str	r3, [r2, #24]
 80026c0:	4b55      	ldr	r3, [pc, #340]	@ (8002818 <HAL_GPIO_Init+0x2d8>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026cc:	4a53      	ldr	r2, [pc, #332]	@ (800281c <HAL_GPIO_Init+0x2dc>)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	220f      	movs	r2, #15
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80026f6:	d019      	beq.n	800272c <HAL_GPIO_Init+0x1ec>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a49      	ldr	r2, [pc, #292]	@ (8002820 <HAL_GPIO_Init+0x2e0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d013      	beq.n	8002728 <HAL_GPIO_Init+0x1e8>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a48      	ldr	r2, [pc, #288]	@ (8002824 <HAL_GPIO_Init+0x2e4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d00d      	beq.n	8002724 <HAL_GPIO_Init+0x1e4>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a47      	ldr	r2, [pc, #284]	@ (8002828 <HAL_GPIO_Init+0x2e8>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d007      	beq.n	8002720 <HAL_GPIO_Init+0x1e0>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a46      	ldr	r2, [pc, #280]	@ (800282c <HAL_GPIO_Init+0x2ec>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d101      	bne.n	800271c <HAL_GPIO_Init+0x1dc>
 8002718:	2304      	movs	r3, #4
 800271a:	e008      	b.n	800272e <HAL_GPIO_Init+0x1ee>
 800271c:	2305      	movs	r3, #5
 800271e:	e006      	b.n	800272e <HAL_GPIO_Init+0x1ee>
 8002720:	2303      	movs	r3, #3
 8002722:	e004      	b.n	800272e <HAL_GPIO_Init+0x1ee>
 8002724:	2302      	movs	r3, #2
 8002726:	e002      	b.n	800272e <HAL_GPIO_Init+0x1ee>
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <HAL_GPIO_Init+0x1ee>
 800272c:	2300      	movs	r3, #0
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	f002 0203 	and.w	r2, r2, #3
 8002734:	0092      	lsls	r2, r2, #2
 8002736:	4093      	lsls	r3, r2
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800273e:	4937      	ldr	r1, [pc, #220]	@ (800281c <HAL_GPIO_Init+0x2dc>)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	089b      	lsrs	r3, r3, #2
 8002744:	3302      	adds	r3, #2
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800274c:	4b38      	ldr	r3, [pc, #224]	@ (8002830 <HAL_GPIO_Init+0x2f0>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	43db      	mvns	r3, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002770:	4a2f      	ldr	r2, [pc, #188]	@ (8002830 <HAL_GPIO_Init+0x2f0>)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002776:	4b2e      	ldr	r3, [pc, #184]	@ (8002830 <HAL_GPIO_Init+0x2f0>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	43db      	mvns	r3, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800279a:	4a25      	ldr	r2, [pc, #148]	@ (8002830 <HAL_GPIO_Init+0x2f0>)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027a0:	4b23      	ldr	r3, [pc, #140]	@ (8002830 <HAL_GPIO_Init+0x2f0>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002830 <HAL_GPIO_Init+0x2f0>)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ca:	4b19      	ldr	r3, [pc, #100]	@ (8002830 <HAL_GPIO_Init+0x2f0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027ee:	4a10      	ldr	r2, [pc, #64]	@ (8002830 <HAL_GPIO_Init+0x2f0>)
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	3301      	adds	r3, #1
 80027f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	f47f aea3 	bne.w	8002550 <HAL_GPIO_Init+0x10>
  }
}
 800280a:	bf00      	nop
 800280c:	bf00      	nop
 800280e:	371c      	adds	r7, #28
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40021000 	.word	0x40021000
 800281c:	40010000 	.word	0x40010000
 8002820:	48000400 	.word	0x48000400
 8002824:	48000800 	.word	0x48000800
 8002828:	48000c00 	.word	0x48000c00
 800282c:	48001000 	.word	0x48001000
 8002830:	40010400 	.word	0x40010400

08002834 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002842:	e0b8      	b.n	80029b6 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002844:	2201      	movs	r2, #1
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80ab 	beq.w	80029b0 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800285a:	4a5e      	ldr	r2, [pc, #376]	@ (80029d4 <HAL_GPIO_DeInit+0x1a0>)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	089b      	lsrs	r3, r3, #2
 8002860:	3302      	adds	r3, #2
 8002862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002866:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	220f      	movs	r2, #15
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4013      	ands	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002882:	d019      	beq.n	80028b8 <HAL_GPIO_DeInit+0x84>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a54      	ldr	r2, [pc, #336]	@ (80029d8 <HAL_GPIO_DeInit+0x1a4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_GPIO_DeInit+0x80>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a53      	ldr	r2, [pc, #332]	@ (80029dc <HAL_GPIO_DeInit+0x1a8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00d      	beq.n	80028b0 <HAL_GPIO_DeInit+0x7c>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a52      	ldr	r2, [pc, #328]	@ (80029e0 <HAL_GPIO_DeInit+0x1ac>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d007      	beq.n	80028ac <HAL_GPIO_DeInit+0x78>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a51      	ldr	r2, [pc, #324]	@ (80029e4 <HAL_GPIO_DeInit+0x1b0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d101      	bne.n	80028a8 <HAL_GPIO_DeInit+0x74>
 80028a4:	2304      	movs	r3, #4
 80028a6:	e008      	b.n	80028ba <HAL_GPIO_DeInit+0x86>
 80028a8:	2305      	movs	r3, #5
 80028aa:	e006      	b.n	80028ba <HAL_GPIO_DeInit+0x86>
 80028ac:	2303      	movs	r3, #3
 80028ae:	e004      	b.n	80028ba <HAL_GPIO_DeInit+0x86>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e002      	b.n	80028ba <HAL_GPIO_DeInit+0x86>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <HAL_GPIO_DeInit+0x86>
 80028b8:	2300      	movs	r3, #0
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	f002 0203 	and.w	r2, r2, #3
 80028c0:	0092      	lsls	r2, r2, #2
 80028c2:	4093      	lsls	r3, r2
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d132      	bne.n	8002930 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80028ca:	4b47      	ldr	r3, [pc, #284]	@ (80029e8 <HAL_GPIO_DeInit+0x1b4>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	4945      	ldr	r1, [pc, #276]	@ (80029e8 <HAL_GPIO_DeInit+0x1b4>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80028d8:	4b43      	ldr	r3, [pc, #268]	@ (80029e8 <HAL_GPIO_DeInit+0x1b4>)
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	43db      	mvns	r3, r3
 80028e0:	4941      	ldr	r1, [pc, #260]	@ (80029e8 <HAL_GPIO_DeInit+0x1b4>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80028e6:	4b40      	ldr	r3, [pc, #256]	@ (80029e8 <HAL_GPIO_DeInit+0x1b4>)
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	493e      	ldr	r1, [pc, #248]	@ (80029e8 <HAL_GPIO_DeInit+0x1b4>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80028f4:	4b3c      	ldr	r3, [pc, #240]	@ (80029e8 <HAL_GPIO_DeInit+0x1b4>)
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	493a      	ldr	r1, [pc, #232]	@ (80029e8 <HAL_GPIO_DeInit+0x1b4>)
 80028fe:	4013      	ands	r3, r2
 8002900:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	220f      	movs	r2, #15
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002912:	4a30      	ldr	r2, [pc, #192]	@ (80029d4 <HAL_GPIO_DeInit+0x1a0>)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	3302      	adds	r3, #2
 800291a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	43da      	mvns	r2, r3
 8002922:	482c      	ldr	r0, [pc, #176]	@ (80029d4 <HAL_GPIO_DeInit+0x1a0>)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	089b      	lsrs	r3, r3, #2
 8002928:	400a      	ands	r2, r1
 800292a:	3302      	adds	r3, #2
 800292c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	2103      	movs	r1, #3
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	401a      	ands	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	08da      	lsrs	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3208      	adds	r2, #8
 800294e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	220f      	movs	r2, #15
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	08d2      	lsrs	r2, r2, #3
 8002966:	4019      	ands	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3208      	adds	r2, #8
 800296c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	2103      	movs	r1, #3
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	401a      	ands	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	2101      	movs	r1, #1
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	401a      	ands	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	2103      	movs	r1, #3
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	401a      	ands	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	609a      	str	r2, [r3, #8]
    }

    position++;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	3301      	adds	r3, #1
 80029b4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa22 f303 	lsr.w	r3, r2, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f47f af40 	bne.w	8002844 <HAL_GPIO_DeInit+0x10>
  }
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40010000 	.word	0x40010000
 80029d8:	48000400 	.word	0x48000400
 80029dc:	48000800 	.word	0x48000800
 80029e0:	48000c00 	.word	0x48000c00
 80029e4:	48001000 	.word	0x48001000
 80029e8:	40010400 	.word	0x40010400

080029ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
 80029f8:	4613      	mov	r3, r2
 80029fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029fc:	787b      	ldrb	r3, [r7, #1]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a02:	887a      	ldrh	r2, [r7, #2]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a08:	e002      	b.n	8002a10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e081      	b.n	8002b32 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff f906 	bl	8001c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2224      	movs	r2, #36	@ 0x24
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d107      	bne.n	8002a96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	e006      	b.n	8002aa4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002aa2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d104      	bne.n	8002ab6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ab4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ac4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ac8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ad8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69d9      	ldr	r1, [r3, #28]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1a      	ldr	r2, [r3, #32]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d138      	bne.n	8002bc2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e032      	b.n	8002bc4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2224      	movs	r2, #36	@ 0x24
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b8c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6819      	ldr	r1, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0201 	orr.w	r2, r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e000      	b.n	8002bc4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bc2:	2302      	movs	r3, #2
  }
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d139      	bne.n	8002c5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e033      	b.n	8002c5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2224      	movs	r2, #36	@ 0x24
 8002c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e000      	b.n	8002c5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c5a:	2302      	movs	r3, #2
  }
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c6a:	b08b      	sub	sp, #44	@ 0x2c
 8002c6c:	af06      	add	r7, sp, #24
 8002c6e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0c4      	b.n	8002e04 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff f882 	bl	8001d98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2203      	movs	r2, #3
 8002c98:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f002 f8ef 	bl	8004e84 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
 8002caa:	e040      	b.n	8002d2e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3303      	adds	r3, #3
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3338      	adds	r3, #56	@ 0x38
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	333c      	adds	r3, #60	@ 0x3c
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	440b      	add	r3, r1
 8002d22:	3340      	adds	r3, #64	@ 0x40
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d3b9      	bcc.n	8002cac <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d38:	2300      	movs	r3, #0
 8002d3a:	73fb      	strb	r3, [r7, #15]
 8002d3c:	e044      	b.n	8002dc8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d3e:	7bfa      	ldrb	r2, [r7, #15]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d96:	7bfa      	ldrb	r2, [r7, #15]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dac:	7bfa      	ldrb	r2, [r7, #15]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	440b      	add	r3, r1
 8002dba:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d3b5      	bcc.n	8002d3e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	687e      	ldr	r6, [r7, #4]
 8002dda:	466d      	mov	r5, sp
 8002ddc:	f106 0410 	add.w	r4, r6, #16
 8002de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	602b      	str	r3, [r5, #0]
 8002de8:	1d33      	adds	r3, r6, #4
 8002dea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dec:	6838      	ldr	r0, [r7, #0]
 8002dee:	f002 f864 	bl	8004eba <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e1c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d102      	bne.n	8002e32 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f001 b823 	b.w	8003e78 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 817d 	beq.w	8003142 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e48:	4bbc      	ldr	r3, [pc, #752]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d00c      	beq.n	8002e6e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e54:	4bb9      	ldr	r3, [pc, #740]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d15c      	bne.n	8002f1a <HAL_RCC_OscConfig+0x10e>
 8002e60:	4bb6      	ldr	r3, [pc, #728]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e6c:	d155      	bne.n	8002f1a <HAL_RCC_OscConfig+0x10e>
 8002e6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e72:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d102      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x94>
 8002e9a:	4ba8      	ldr	r3, [pc, #672]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	e015      	b.n	8002ecc <HAL_RCC_OscConfig+0xc0>
 8002ea0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ea4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002eb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002eb8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002ebc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002ec8:	4b9c      	ldr	r3, [pc, #624]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ed0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002ed4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002ed8:	fa92 f2a2 	rbit	r2, r2
 8002edc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002ee0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002ee4:	fab2 f282 	clz	r2, r2
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	f042 0220 	orr.w	r2, r2, #32
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	f002 021f 	and.w	r2, r2, #31
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 811f 	beq.w	8003140 <HAL_RCC_OscConfig+0x334>
 8002f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 8116 	bne.w	8003140 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	f000 bfaf 	b.w	8003e78 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f2a:	d106      	bne.n	8002f3a <HAL_RCC_OscConfig+0x12e>
 8002f2c:	4b83      	ldr	r3, [pc, #524]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a82      	ldr	r2, [pc, #520]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002f32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	e036      	b.n	8002fa8 <HAL_RCC_OscConfig+0x19c>
 8002f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0x158>
 8002f4a:	4b7c      	ldr	r3, [pc, #496]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a7b      	ldr	r2, [pc, #492]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002f50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b79      	ldr	r3, [pc, #484]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a78      	ldr	r2, [pc, #480]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002f5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e021      	b.n	8002fa8 <HAL_RCC_OscConfig+0x19c>
 8002f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x184>
 8002f76:	4b71      	ldr	r3, [pc, #452]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a70      	ldr	r2, [pc, #448]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b6e      	ldr	r3, [pc, #440]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a6d      	ldr	r2, [pc, #436]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCC_OscConfig+0x19c>
 8002f90:	4b6a      	ldr	r3, [pc, #424]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a69      	ldr	r2, [pc, #420]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b67      	ldr	r3, [pc, #412]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a66      	ldr	r2, [pc, #408]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002fa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fa6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fa8:	4b64      	ldr	r3, [pc, #400]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fac:	f023 020f 	bic.w	r2, r3, #15
 8002fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	495f      	ldr	r1, [pc, #380]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d059      	beq.n	8003086 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd2:	f7ff f9c3 	bl	800235c <HAL_GetTick>
 8002fd6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7ff f9be 	bl	800235c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b64      	cmp	r3, #100	@ 0x64
 8002fea:	d902      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	f000 bf43 	b.w	8003e78 <HAL_RCC_OscConfig+0x106c>
 8002ff2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ff6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003006:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d102      	bne.n	8003024 <HAL_RCC_OscConfig+0x218>
 800301e:	4b47      	ldr	r3, [pc, #284]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	e015      	b.n	8003050 <HAL_RCC_OscConfig+0x244>
 8003024:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003028:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003030:	fa93 f3a3 	rbit	r3, r3
 8003034:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003038:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800303c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003040:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800304c:	4b3b      	ldr	r3, [pc, #236]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003054:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003058:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800305c:	fa92 f2a2 	rbit	r2, r2
 8003060:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003064:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003068:	fab2 f282 	clz	r2, r2
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	f042 0220 	orr.w	r2, r2, #32
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	f002 021f 	and.w	r2, r2, #31
 8003078:	2101      	movs	r1, #1
 800307a:	fa01 f202 	lsl.w	r2, r1, r2
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0ab      	beq.n	8002fdc <HAL_RCC_OscConfig+0x1d0>
 8003084:	e05d      	b.n	8003142 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003086:	f7ff f969 	bl	800235c <HAL_GetTick>
 800308a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003090:	f7ff f964 	bl	800235c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b64      	cmp	r3, #100	@ 0x64
 800309e:	d902      	bls.n	80030a6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	f000 bee9 	b.w	8003e78 <HAL_RCC_OscConfig+0x106c>
 80030a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030aa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80030ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d102      	bne.n	80030d8 <HAL_RCC_OscConfig+0x2cc>
 80030d2:	4b1a      	ldr	r3, [pc, #104]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	e015      	b.n	8003104 <HAL_RCC_OscConfig+0x2f8>
 80030d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030dc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80030e4:	fa93 f3a3 	rbit	r3, r3
 80030e8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80030ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030f0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80030f4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80030f8:	fa93 f3a3 	rbit	r3, r3
 80030fc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003100:	4b0e      	ldr	r3, [pc, #56]	@ (800313c <HAL_RCC_OscConfig+0x330>)
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003108:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800310c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003110:	fa92 f2a2 	rbit	r2, r2
 8003114:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003118:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800311c:	fab2 f282 	clz	r2, r2
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	f042 0220 	orr.w	r2, r2, #32
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	f002 021f 	and.w	r2, r2, #31
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f202 	lsl.w	r2, r1, r2
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1ab      	bne.n	8003090 <HAL_RCC_OscConfig+0x284>
 8003138:	e003      	b.n	8003142 <HAL_RCC_OscConfig+0x336>
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003146:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 817d 	beq.w	8003452 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003158:	4ba6      	ldr	r3, [pc, #664]	@ (80033f4 <HAL_RCC_OscConfig+0x5e8>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 030c 	and.w	r3, r3, #12
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00b      	beq.n	800317c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003164:	4ba3      	ldr	r3, [pc, #652]	@ (80033f4 <HAL_RCC_OscConfig+0x5e8>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 030c 	and.w	r3, r3, #12
 800316c:	2b08      	cmp	r3, #8
 800316e:	d172      	bne.n	8003256 <HAL_RCC_OscConfig+0x44a>
 8003170:	4ba0      	ldr	r3, [pc, #640]	@ (80033f4 <HAL_RCC_OscConfig+0x5e8>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d16c      	bne.n	8003256 <HAL_RCC_OscConfig+0x44a>
 800317c:	2302      	movs	r3, #2
 800317e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800318e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d102      	bne.n	80031ac <HAL_RCC_OscConfig+0x3a0>
 80031a6:	4b93      	ldr	r3, [pc, #588]	@ (80033f4 <HAL_RCC_OscConfig+0x5e8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	e013      	b.n	80031d4 <HAL_RCC_OscConfig+0x3c8>
 80031ac:	2302      	movs	r3, #2
 80031ae:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80031be:	2302      	movs	r3, #2
 80031c0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80031c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80031d0:	4b88      	ldr	r3, [pc, #544]	@ (80033f4 <HAL_RCC_OscConfig+0x5e8>)
 80031d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d4:	2202      	movs	r2, #2
 80031d6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80031da:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80031de:	fa92 f2a2 	rbit	r2, r2
 80031e2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80031e6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80031ea:	fab2 f282 	clz	r2, r2
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	f042 0220 	orr.w	r2, r2, #32
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	f002 021f 	and.w	r2, r2, #31
 80031fa:	2101      	movs	r1, #1
 80031fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003200:	4013      	ands	r3, r2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_RCC_OscConfig+0x410>
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d002      	beq.n	800321c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	f000 be2e 	b.w	8003e78 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321c:	4b75      	ldr	r3, [pc, #468]	@ (80033f4 <HAL_RCC_OscConfig+0x5e8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003228:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	21f8      	movs	r1, #248	@ 0xf8
 8003232:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003236:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800323a:	fa91 f1a1 	rbit	r1, r1
 800323e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003242:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003246:	fab1 f181 	clz	r1, r1
 800324a:	b2c9      	uxtb	r1, r1
 800324c:	408b      	lsls	r3, r1
 800324e:	4969      	ldr	r1, [pc, #420]	@ (80033f4 <HAL_RCC_OscConfig+0x5e8>)
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003254:	e0fd      	b.n	8003452 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 8088 	beq.w	8003378 <HAL_RCC_OscConfig+0x56c>
 8003268:	2301      	movs	r3, #1
 800326a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800327a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003288:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	461a      	mov	r2, r3
 8003290:	2301      	movs	r3, #1
 8003292:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7ff f862 	bl	800235c <HAL_GetTick>
 8003298:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329c:	e00a      	b.n	80032b4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800329e:	f7ff f85d 	bl	800235c <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d902      	bls.n	80032b4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	f000 bde2 	b.w	8003e78 <HAL_RCC_OscConfig+0x106c>
 80032b4:	2302      	movs	r3, #2
 80032b6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80032c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d102      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4d8>
 80032de:	4b45      	ldr	r3, [pc, #276]	@ (80033f4 <HAL_RCC_OscConfig+0x5e8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	e013      	b.n	800330c <HAL_RCC_OscConfig+0x500>
 80032e4:	2302      	movs	r3, #2
 80032e6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80032f6:	2302      	movs	r3, #2
 80032f8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80032fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003300:	fa93 f3a3 	rbit	r3, r3
 8003304:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003308:	4b3a      	ldr	r3, [pc, #232]	@ (80033f4 <HAL_RCC_OscConfig+0x5e8>)
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	2202      	movs	r2, #2
 800330e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003312:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003316:	fa92 f2a2 	rbit	r2, r2
 800331a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800331e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003322:	fab2 f282 	clz	r2, r2
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	f042 0220 	orr.w	r2, r2, #32
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	f002 021f 	and.w	r2, r2, #31
 8003332:	2101      	movs	r1, #1
 8003334:	fa01 f202 	lsl.w	r2, r1, r2
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0af      	beq.n	800329e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333e:	4b2d      	ldr	r3, [pc, #180]	@ (80033f4 <HAL_RCC_OscConfig+0x5e8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	21f8      	movs	r1, #248	@ 0xf8
 8003354:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800335c:	fa91 f1a1 	rbit	r1, r1
 8003360:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003364:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003368:	fab1 f181 	clz	r1, r1
 800336c:	b2c9      	uxtb	r1, r1
 800336e:	408b      	lsls	r3, r1
 8003370:	4920      	ldr	r1, [pc, #128]	@ (80033f4 <HAL_RCC_OscConfig+0x5e8>)
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]
 8003376:	e06c      	b.n	8003452 <HAL_RCC_OscConfig+0x646>
 8003378:	2301      	movs	r3, #1
 800337a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800338a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003398:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	461a      	mov	r2, r3
 80033a0:	2300      	movs	r3, #0
 80033a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fe ffda 	bl	800235c <HAL_GetTick>
 80033a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ae:	f7fe ffd5 	bl	800235c <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d902      	bls.n	80033c4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	f000 bd5a 	b.w	8003e78 <HAL_RCC_OscConfig+0x106c>
 80033c4:	2302      	movs	r3, #2
 80033c6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80033d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d104      	bne.n	80033f8 <HAL_RCC_OscConfig+0x5ec>
 80033ee:	4b01      	ldr	r3, [pc, #4]	@ (80033f4 <HAL_RCC_OscConfig+0x5e8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	e015      	b.n	8003420 <HAL_RCC_OscConfig+0x614>
 80033f4:	40021000 	.word	0x40021000
 80033f8:	2302      	movs	r3, #2
 80033fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800340a:	2302      	movs	r3, #2
 800340c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003410:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003414:	fa93 f3a3 	rbit	r3, r3
 8003418:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800341c:	4bc8      	ldr	r3, [pc, #800]	@ (8003740 <HAL_RCC_OscConfig+0x934>)
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	2202      	movs	r2, #2
 8003422:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003426:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800342a:	fa92 f2a2 	rbit	r2, r2
 800342e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003432:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003436:	fab2 f282 	clz	r2, r2
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	f042 0220 	orr.w	r2, r2, #32
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	f002 021f 	and.w	r2, r2, #31
 8003446:	2101      	movs	r1, #1
 8003448:	fa01 f202 	lsl.w	r2, r1, r2
 800344c:	4013      	ands	r3, r2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1ad      	bne.n	80033ae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003456:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 8110 	beq.w	8003688 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d079      	beq.n	800356c <HAL_RCC_OscConfig+0x760>
 8003478:	2301      	movs	r3, #1
 800347a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800348a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	4bab      	ldr	r3, [pc, #684]	@ (8003744 <HAL_RCC_OscConfig+0x938>)
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	461a      	mov	r2, r3
 800349e:	2301      	movs	r3, #1
 80034a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a2:	f7fe ff5b 	bl	800235c <HAL_GetTick>
 80034a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ac:	f7fe ff56 	bl	800235c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d902      	bls.n	80034c2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	f000 bcdb 	b.w	8003e78 <HAL_RCC_OscConfig+0x106c>
 80034c2:	2302      	movs	r3, #2
 80034c4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80034d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80034dc:	2202      	movs	r2, #2
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	fa93 f2a3 	rbit	r2, r3
 80034ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003500:	2202      	movs	r2, #2
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	fa93 f2a3 	rbit	r2, r3
 8003512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003516:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800351a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351c:	4b88      	ldr	r3, [pc, #544]	@ (8003740 <HAL_RCC_OscConfig+0x934>)
 800351e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003524:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003528:	2102      	movs	r1, #2
 800352a:	6019      	str	r1, [r3, #0]
 800352c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003530:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	fa93 f1a3 	rbit	r1, r3
 800353a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003542:	6019      	str	r1, [r3, #0]
  return result;
 8003544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003548:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	fab3 f383 	clz	r3, r3
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	2101      	movs	r1, #1
 8003560:	fa01 f303 	lsl.w	r3, r1, r3
 8003564:	4013      	ands	r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0a0      	beq.n	80034ac <HAL_RCC_OscConfig+0x6a0>
 800356a:	e08d      	b.n	8003688 <HAL_RCC_OscConfig+0x87c>
 800356c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003570:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003574:	2201      	movs	r2, #1
 8003576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800357c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	fa93 f2a3 	rbit	r2, r3
 8003586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800358e:	601a      	str	r2, [r3, #0]
  return result;
 8003590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003594:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003598:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	4b68      	ldr	r3, [pc, #416]	@ (8003744 <HAL_RCC_OscConfig+0x938>)
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	461a      	mov	r2, r3
 80035aa:	2300      	movs	r3, #0
 80035ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ae:	f7fe fed5 	bl	800235c <HAL_GetTick>
 80035b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b8:	f7fe fed0 	bl	800235c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d902      	bls.n	80035ce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	f000 bc55 	b.w	8003e78 <HAL_RCC_OscConfig+0x106c>
 80035ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80035d6:	2202      	movs	r2, #2
 80035d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	fa93 f2a3 	rbit	r2, r3
 80035e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80035fa:	2202      	movs	r2, #2
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003602:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	fa93 f2a3 	rbit	r2, r3
 800360c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003610:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800361e:	2202      	movs	r2, #2
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003626:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	fa93 f2a3 	rbit	r2, r3
 8003630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003634:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003638:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800363a:	4b41      	ldr	r3, [pc, #260]	@ (8003740 <HAL_RCC_OscConfig+0x934>)
 800363c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800363e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003642:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003646:	2102      	movs	r1, #2
 8003648:	6019      	str	r1, [r3, #0]
 800364a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	fa93 f1a3 	rbit	r1, r3
 8003658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003660:	6019      	str	r1, [r3, #0]
  return result;
 8003662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003666:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	fab3 f383 	clz	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	2101      	movs	r1, #1
 800367e:	fa01 f303 	lsl.w	r3, r1, r3
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d197      	bne.n	80035b8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 81a1 	beq.w	80039e0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369e:	2300      	movs	r3, #0
 80036a0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036a4:	4b26      	ldr	r3, [pc, #152]	@ (8003740 <HAL_RCC_OscConfig+0x934>)
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d116      	bne.n	80036de <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b0:	4b23      	ldr	r3, [pc, #140]	@ (8003740 <HAL_RCC_OscConfig+0x934>)
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	4a22      	ldr	r2, [pc, #136]	@ (8003740 <HAL_RCC_OscConfig+0x934>)
 80036b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ba:	61d3      	str	r3, [r2, #28]
 80036bc:	4b20      	ldr	r3, [pc, #128]	@ (8003740 <HAL_RCC_OscConfig+0x934>)
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80036c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80036d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80036d8:	2301      	movs	r3, #1
 80036da:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036de:	4b1a      	ldr	r3, [pc, #104]	@ (8003748 <HAL_RCC_OscConfig+0x93c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d11a      	bne.n	8003720 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ea:	4b17      	ldr	r3, [pc, #92]	@ (8003748 <HAL_RCC_OscConfig+0x93c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a16      	ldr	r2, [pc, #88]	@ (8003748 <HAL_RCC_OscConfig+0x93c>)
 80036f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f6:	f7fe fe31 	bl	800235c <HAL_GetTick>
 80036fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fe:	e009      	b.n	8003714 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003700:	f7fe fe2c 	bl	800235c <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b64      	cmp	r3, #100	@ 0x64
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e3b1      	b.n	8003e78 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003714:	4b0c      	ldr	r3, [pc, #48]	@ (8003748 <HAL_RCC_OscConfig+0x93c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ef      	beq.n	8003700 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003724:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d10d      	bne.n	800374c <HAL_RCC_OscConfig+0x940>
 8003730:	4b03      	ldr	r3, [pc, #12]	@ (8003740 <HAL_RCC_OscConfig+0x934>)
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	4a02      	ldr	r2, [pc, #8]	@ (8003740 <HAL_RCC_OscConfig+0x934>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6213      	str	r3, [r2, #32]
 800373c:	e03c      	b.n	80037b8 <HAL_RCC_OscConfig+0x9ac>
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	10908120 	.word	0x10908120
 8003748:	40007000 	.word	0x40007000
 800374c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003750:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10c      	bne.n	8003776 <HAL_RCC_OscConfig+0x96a>
 800375c:	4bc1      	ldr	r3, [pc, #772]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	4ac0      	ldr	r2, [pc, #768]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	6213      	str	r3, [r2, #32]
 8003768:	4bbe      	ldr	r3, [pc, #760]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	4abd      	ldr	r2, [pc, #756]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 800376e:	f023 0304 	bic.w	r3, r3, #4
 8003772:	6213      	str	r3, [r2, #32]
 8003774:	e020      	b.n	80037b8 <HAL_RCC_OscConfig+0x9ac>
 8003776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800377a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b05      	cmp	r3, #5
 8003784:	d10c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x994>
 8003786:	4bb7      	ldr	r3, [pc, #732]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	4ab6      	ldr	r2, [pc, #728]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 800378c:	f043 0304 	orr.w	r3, r3, #4
 8003790:	6213      	str	r3, [r2, #32]
 8003792:	4bb4      	ldr	r3, [pc, #720]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	4ab3      	ldr	r2, [pc, #716]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	6213      	str	r3, [r2, #32]
 800379e:	e00b      	b.n	80037b8 <HAL_RCC_OscConfig+0x9ac>
 80037a0:	4bb0      	ldr	r3, [pc, #704]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	4aaf      	ldr	r2, [pc, #700]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	6213      	str	r3, [r2, #32]
 80037ac:	4bad      	ldr	r3, [pc, #692]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	4aac      	ldr	r2, [pc, #688]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 80037b2:	f023 0304 	bic.w	r3, r3, #4
 80037b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8081 	beq.w	80038cc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ca:	f7fe fdc7 	bl	800235c <HAL_GetTick>
 80037ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d2:	e00b      	b.n	80037ec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	f7fe fdc2 	bl	800235c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e345      	b.n	8003e78 <HAL_RCC_OscConfig+0x106c>
 80037ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80037f4:	2202      	movs	r2, #2
 80037f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	fa93 f2a3 	rbit	r2, r3
 8003806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800380a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003814:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003818:	2202      	movs	r2, #2
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003820:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	fa93 f2a3 	rbit	r2, r3
 800382a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003832:	601a      	str	r2, [r3, #0]
  return result;
 8003834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003838:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800383c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383e:	fab3 f383 	clz	r3, r3
 8003842:	b2db      	uxtb	r3, r3
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f043 0302 	orr.w	r3, r3, #2
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d102      	bne.n	8003858 <HAL_RCC_OscConfig+0xa4c>
 8003852:	4b84      	ldr	r3, [pc, #528]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	e013      	b.n	8003880 <HAL_RCC_OscConfig+0xa74>
 8003858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800385c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003860:	2202      	movs	r2, #2
 8003862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003868:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	fa93 f2a3 	rbit	r2, r3
 8003872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003876:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	4b79      	ldr	r3, [pc, #484]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003884:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003888:	2102      	movs	r1, #2
 800388a:	6011      	str	r1, [r2, #0]
 800388c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003890:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	fa92 f1a2 	rbit	r1, r2
 800389a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800389e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80038a2:	6011      	str	r1, [r2, #0]
  return result;
 80038a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038a8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	fab2 f282 	clz	r2, r2
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	f002 021f 	and.w	r2, r2, #31
 80038be:	2101      	movs	r1, #1
 80038c0:	fa01 f202 	lsl.w	r2, r1, r2
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d084      	beq.n	80037d4 <HAL_RCC_OscConfig+0x9c8>
 80038ca:	e07f      	b.n	80039cc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038cc:	f7fe fd46 	bl	800235c <HAL_GetTick>
 80038d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d4:	e00b      	b.n	80038ee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d6:	f7fe fd41 	bl	800235c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e2c4      	b.n	8003e78 <HAL_RCC_OscConfig+0x106c>
 80038ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80038f6:	2202      	movs	r2, #2
 80038f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038fe:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	fa93 f2a3 	rbit	r2, r3
 8003908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800390c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003916:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800391a:	2202      	movs	r2, #2
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003922:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	fa93 f2a3 	rbit	r2, r3
 800392c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003930:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003934:	601a      	str	r2, [r3, #0]
  return result;
 8003936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800393e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003940:	fab3 f383 	clz	r3, r3
 8003944:	b2db      	uxtb	r3, r3
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	b2db      	uxtb	r3, r3
 800394a:	f043 0302 	orr.w	r3, r3, #2
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d102      	bne.n	800395a <HAL_RCC_OscConfig+0xb4e>
 8003954:	4b43      	ldr	r3, [pc, #268]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	e013      	b.n	8003982 <HAL_RCC_OscConfig+0xb76>
 800395a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800395e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003962:	2202      	movs	r2, #2
 8003964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800396a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	fa93 f2a3 	rbit	r2, r3
 8003974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003978:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	4b39      	ldr	r3, [pc, #228]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 8003980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003982:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003986:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800398a:	2102      	movs	r1, #2
 800398c:	6011      	str	r1, [r2, #0]
 800398e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003992:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	fa92 f1a2 	rbit	r1, r2
 800399c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039a0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80039a4:	6011      	str	r1, [r2, #0]
  return result;
 80039a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039aa:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	fab2 f282 	clz	r2, r2
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	f002 021f 	and.w	r2, r2, #31
 80039c0:	2101      	movs	r1, #1
 80039c2:	fa01 f202 	lsl.w	r2, r1, r2
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d184      	bne.n	80038d6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d105      	bne.n	80039e0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d4:	4b23      	ldr	r3, [pc, #140]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	4a22      	ldr	r2, [pc, #136]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 80039da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8242 	beq.w	8003e76 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a64 <HAL_RCC_OscConfig+0xc58>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	f000 8213 	beq.w	8003e26 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	f040 8162 	bne.w	8003cd6 <HAL_RCC_OscConfig+0xeca>
 8003a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a16:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003a1a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a24:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	fa93 f2a3 	rbit	r2, r3
 8003a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a32:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003a36:	601a      	str	r2, [r3, #0]
  return result;
 8003a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a3c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003a40:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a42:	fab3 f383 	clz	r3, r3
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a4c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	461a      	mov	r2, r3
 8003a54:	2300      	movs	r3, #0
 8003a56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fe fc80 	bl	800235c <HAL_GetTick>
 8003a5c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a60:	e00c      	b.n	8003a7c <HAL_RCC_OscConfig+0xc70>
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a68:	f7fe fc78 	bl	800235c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e1fd      	b.n	8003e78 <HAL_RCC_OscConfig+0x106c>
 8003a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a80:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003a84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a8e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	fa93 f2a3 	rbit	r2, r3
 8003a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a9c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003aa0:	601a      	str	r2, [r3, #0]
  return result;
 8003aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003aaa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aac:	fab3 f383 	clz	r3, r3
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d102      	bne.n	8003ac6 <HAL_RCC_OscConfig+0xcba>
 8003ac0:	4bb0      	ldr	r3, [pc, #704]	@ (8003d84 <HAL_RCC_OscConfig+0xf78>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	e027      	b.n	8003b16 <HAL_RCC_OscConfig+0xd0a>
 8003ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003ace:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ad2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	fa93 f2a3 	rbit	r2, r3
 8003ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003af4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003afe:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	fa93 f2a3 	rbit	r2, r3
 8003b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	4b9c      	ldr	r3, [pc, #624]	@ (8003d84 <HAL_RCC_OscConfig+0xf78>)
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b1a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003b1e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b22:	6011      	str	r1, [r2, #0]
 8003b24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b28:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	fa92 f1a2 	rbit	r1, r2
 8003b32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b36:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003b3a:	6011      	str	r1, [r2, #0]
  return result;
 8003b3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b40:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	fab2 f282 	clz	r2, r2
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	f042 0220 	orr.w	r2, r2, #32
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	f002 021f 	and.w	r2, r2, #31
 8003b56:	2101      	movs	r1, #1
 8003b58:	fa01 f202 	lsl.w	r2, r1, r2
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d182      	bne.n	8003a68 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b62:	4b88      	ldr	r3, [pc, #544]	@ (8003d84 <HAL_RCC_OscConfig+0xf78>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	430b      	orrs	r3, r1
 8003b84:	497f      	ldr	r1, [pc, #508]	@ (8003d84 <HAL_RCC_OscConfig+0xf78>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	604b      	str	r3, [r1, #4]
 8003b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b8e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003b92:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b9c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	fa93 f2a3 	rbit	r2, r3
 8003ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003baa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003bae:	601a      	str	r2, [r3, #0]
  return result;
 8003bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003bb8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003bc4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	461a      	mov	r2, r3
 8003bcc:	2301      	movs	r3, #1
 8003bce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fbc4 	bl	800235c <HAL_GetTick>
 8003bd4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bd8:	e009      	b.n	8003bee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bda:	f7fe fbbf 	bl	800235c <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e144      	b.n	8003e78 <HAL_RCC_OscConfig+0x106c>
 8003bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003bf6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c00:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	fa93 f2a3 	rbit	r2, r3
 8003c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003c12:	601a      	str	r2, [r3, #0]
  return result;
 8003c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c18:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003c1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c1e:	fab3 f383 	clz	r3, r3
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d102      	bne.n	8003c38 <HAL_RCC_OscConfig+0xe2c>
 8003c32:	4b54      	ldr	r3, [pc, #336]	@ (8003d84 <HAL_RCC_OscConfig+0xf78>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	e027      	b.n	8003c88 <HAL_RCC_OscConfig+0xe7c>
 8003c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c3c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003c40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	fa93 f2a3 	rbit	r2, r3
 8003c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c58:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c62:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003c66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c70:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	fa93 f2a3 	rbit	r2, r3
 8003c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c7e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	4b3f      	ldr	r3, [pc, #252]	@ (8003d84 <HAL_RCC_OscConfig+0xf78>)
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c8c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003c90:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003c94:	6011      	str	r1, [r2, #0]
 8003c96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c9a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	fa92 f1a2 	rbit	r1, r2
 8003ca4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ca8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003cac:	6011      	str	r1, [r2, #0]
  return result;
 8003cae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cb2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	fab2 f282 	clz	r2, r2
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	f042 0220 	orr.w	r2, r2, #32
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	f002 021f 	and.w	r2, r2, #31
 8003cc8:	2101      	movs	r1, #1
 8003cca:	fa01 f202 	lsl.w	r2, r1, r2
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d082      	beq.n	8003bda <HAL_RCC_OscConfig+0xdce>
 8003cd4:	e0cf      	b.n	8003e76 <HAL_RCC_OscConfig+0x106a>
 8003cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cda:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003cde:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	fa93 f2a3 	rbit	r2, r3
 8003cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003cfa:	601a      	str	r2, [r3, #0]
  return result;
 8003cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d00:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003d04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d06:	fab3 f383 	clz	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d10:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	461a      	mov	r2, r3
 8003d18:	2300      	movs	r3, #0
 8003d1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fe fb1e 	bl	800235c <HAL_GetTick>
 8003d20:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d24:	e009      	b.n	8003d3a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d26:	f7fe fb19 	bl	800235c <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e09e      	b.n	8003e78 <HAL_RCC_OscConfig+0x106c>
 8003d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d3e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003d42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d4c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	fa93 f2a3 	rbit	r2, r3
 8003d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d5a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003d5e:	601a      	str	r2, [r3, #0]
  return result;
 8003d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d64:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003d68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d6a:	fab3 f383 	clz	r3, r3
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d104      	bne.n	8003d88 <HAL_RCC_OscConfig+0xf7c>
 8003d7e:	4b01      	ldr	r3, [pc, #4]	@ (8003d84 <HAL_RCC_OscConfig+0xf78>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	e029      	b.n	8003dd8 <HAL_RCC_OscConfig+0xfcc>
 8003d84:	40021000 	.word	0x40021000
 8003d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003d90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d9a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	fa93 f2a3 	rbit	r2, r3
 8003da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003db6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dc0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	fa93 f2a3 	rbit	r2, r3
 8003dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dce:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8003e84 <HAL_RCC_OscConfig+0x1078>)
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ddc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003de0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003de4:	6011      	str	r1, [r2, #0]
 8003de6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dea:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	fa92 f1a2 	rbit	r1, r2
 8003df4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003df8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003dfc:	6011      	str	r1, [r2, #0]
  return result;
 8003dfe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e02:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	fab2 f282 	clz	r2, r2
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	f042 0220 	orr.w	r2, r2, #32
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	f002 021f 	and.w	r2, r2, #31
 8003e18:	2101      	movs	r1, #1
 8003e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d180      	bne.n	8003d26 <HAL_RCC_OscConfig+0xf1a>
 8003e24:	e027      	b.n	8003e76 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e01e      	b.n	8003e78 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e3a:	4b12      	ldr	r3, [pc, #72]	@ (8003e84 <HAL_RCC_OscConfig+0x1078>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003e46:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d10b      	bne.n	8003e72 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003e5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003e5e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d001      	beq.n	8003e76 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000

08003e88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b09e      	sub	sp, #120	@ 0x78
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e162      	b.n	8004166 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b90      	ldr	r3, [pc, #576]	@ (80040e4 <HAL_RCC_ClockConfig+0x25c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d910      	bls.n	8003ed0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b8d      	ldr	r3, [pc, #564]	@ (80040e4 <HAL_RCC_ClockConfig+0x25c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 0207 	bic.w	r2, r3, #7
 8003eb6:	498b      	ldr	r1, [pc, #556]	@ (80040e4 <HAL_RCC_ClockConfig+0x25c>)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebe:	4b89      	ldr	r3, [pc, #548]	@ (80040e4 <HAL_RCC_ClockConfig+0x25c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e14a      	b.n	8004166 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003edc:	4b82      	ldr	r3, [pc, #520]	@ (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	497f      	ldr	r1, [pc, #508]	@ (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 80dc 	beq.w	80040b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d13c      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xf6>
 8003f04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f08:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f0c:	fa93 f3a3 	rbit	r3, r3
 8003f10:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003f12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f14:	fab3 f383 	clz	r3, r3
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d102      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xa6>
 8003f28:	4b6f      	ldr	r3, [pc, #444]	@ (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	e00f      	b.n	8003f4e <HAL_RCC_ClockConfig+0xc6>
 8003f2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f32:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f36:	fa93 f3a3 	rbit	r3, r3
 8003f3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f40:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f44:	fa93 f3a3 	rbit	r3, r3
 8003f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f4a:	4b67      	ldr	r3, [pc, #412]	@ (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f52:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f56:	fa92 f2a2 	rbit	r2, r2
 8003f5a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003f5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f5e:	fab2 f282 	clz	r2, r2
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	f042 0220 	orr.w	r2, r2, #32
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	f002 021f 	and.w	r2, r2, #31
 8003f6e:	2101      	movs	r1, #1
 8003f70:	fa01 f202 	lsl.w	r2, r1, r2
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d17b      	bne.n	8004072 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e0f3      	b.n	8004166 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d13c      	bne.n	8004000 <HAL_RCC_ClockConfig+0x178>
 8003f86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f8a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f8e:	fa93 f3a3 	rbit	r3, r3
 8003f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f96:	fab3 f383 	clz	r3, r3
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d102      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0x128>
 8003faa:	4b4f      	ldr	r3, [pc, #316]	@ (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	e00f      	b.n	8003fd0 <HAL_RCC_ClockConfig+0x148>
 8003fb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fb8:	fa93 f3a3 	rbit	r3, r3
 8003fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fc6:	fa93 f3a3 	rbit	r3, r3
 8003fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fcc:	4b46      	ldr	r3, [pc, #280]	@ (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fd4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003fd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fd8:	fa92 f2a2 	rbit	r2, r2
 8003fdc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003fde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fe0:	fab2 f282 	clz	r2, r2
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	f042 0220 	orr.w	r2, r2, #32
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	f002 021f 	and.w	r2, r2, #31
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d13a      	bne.n	8004072 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0b2      	b.n	8004166 <HAL_RCC_ClockConfig+0x2de>
 8004000:	2302      	movs	r3, #2
 8004002:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004006:	fa93 f3a3 	rbit	r3, r3
 800400a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800400c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400e:	fab3 f383 	clz	r3, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b01      	cmp	r3, #1
 8004020:	d102      	bne.n	8004028 <HAL_RCC_ClockConfig+0x1a0>
 8004022:	4b31      	ldr	r3, [pc, #196]	@ (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	e00d      	b.n	8004044 <HAL_RCC_ClockConfig+0x1bc>
 8004028:	2302      	movs	r3, #2
 800402a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402e:	fa93 f3a3 	rbit	r3, r3
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24
 8004034:	2302      	movs	r3, #2
 8004036:	623b      	str	r3, [r7, #32]
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	61fb      	str	r3, [r7, #28]
 8004040:	4b29      	ldr	r3, [pc, #164]	@ (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	2202      	movs	r2, #2
 8004046:	61ba      	str	r2, [r7, #24]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	fa92 f2a2 	rbit	r2, r2
 800404e:	617a      	str	r2, [r7, #20]
  return result;
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	fab2 f282 	clz	r2, r2
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	f042 0220 	orr.w	r2, r2, #32
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	f002 021f 	and.w	r2, r2, #31
 8004062:	2101      	movs	r1, #1
 8004064:	fa01 f202 	lsl.w	r2, r1, r2
 8004068:	4013      	ands	r3, r2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e079      	b.n	8004166 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004072:	4b1d      	ldr	r3, [pc, #116]	@ (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f023 0203 	bic.w	r2, r3, #3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	491a      	ldr	r1, [pc, #104]	@ (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8004080:	4313      	orrs	r3, r2
 8004082:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004084:	f7fe f96a 	bl	800235c <HAL_GetTick>
 8004088:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408a:	e00a      	b.n	80040a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800408c:	f7fe f966 	bl	800235c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e061      	b.n	8004166 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a2:	4b11      	ldr	r3, [pc, #68]	@ (80040e8 <HAL_RCC_ClockConfig+0x260>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f003 020c 	and.w	r2, r3, #12
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d1eb      	bne.n	800408c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040b4:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <HAL_RCC_ClockConfig+0x25c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d214      	bcs.n	80040ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b08      	ldr	r3, [pc, #32]	@ (80040e4 <HAL_RCC_ClockConfig+0x25c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 0207 	bic.w	r2, r3, #7
 80040ca:	4906      	ldr	r1, [pc, #24]	@ (80040e4 <HAL_RCC_ClockConfig+0x25c>)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d2:	4b04      	ldr	r3, [pc, #16]	@ (80040e4 <HAL_RCC_ClockConfig+0x25c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e040      	b.n	8004166 <HAL_RCC_ClockConfig+0x2de>
 80040e4:	40022000 	.word	0x40022000
 80040e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004170 <HAL_RCC_ClockConfig+0x2e8>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	491a      	ldr	r1, [pc, #104]	@ (8004170 <HAL_RCC_ClockConfig+0x2e8>)
 8004106:	4313      	orrs	r3, r2
 8004108:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004116:	4b16      	ldr	r3, [pc, #88]	@ (8004170 <HAL_RCC_ClockConfig+0x2e8>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	4912      	ldr	r1, [pc, #72]	@ (8004170 <HAL_RCC_ClockConfig+0x2e8>)
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800412a:	f000 f829 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 800412e:	4601      	mov	r1, r0
 8004130:	4b0f      	ldr	r3, [pc, #60]	@ (8004170 <HAL_RCC_ClockConfig+0x2e8>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004138:	22f0      	movs	r2, #240	@ 0xf0
 800413a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	fa92 f2a2 	rbit	r2, r2
 8004142:	60fa      	str	r2, [r7, #12]
  return result;
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	fab2 f282 	clz	r2, r2
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	40d3      	lsrs	r3, r2
 800414e:	4a09      	ldr	r2, [pc, #36]	@ (8004174 <HAL_RCC_ClockConfig+0x2ec>)
 8004150:	5cd3      	ldrb	r3, [r2, r3]
 8004152:	fa21 f303 	lsr.w	r3, r1, r3
 8004156:	4a08      	ldr	r2, [pc, #32]	@ (8004178 <HAL_RCC_ClockConfig+0x2f0>)
 8004158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800415a:	4b08      	ldr	r3, [pc, #32]	@ (800417c <HAL_RCC_ClockConfig+0x2f4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fe f8b8 	bl	80022d4 <HAL_InitTick>
  
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3778      	adds	r7, #120	@ 0x78
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40021000 	.word	0x40021000
 8004174:	0800ad00 	.word	0x0800ad00
 8004178:	20000080 	.word	0x20000080
 800417c:	20000084 	.word	0x20000084

08004180 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004180:	b480      	push	{r7}
 8004182:	b08b      	sub	sp, #44	@ 0x2c
 8004184:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	2300      	movs	r3, #0
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	2300      	movs	r3, #0
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800419a:	4b29      	ldr	r3, [pc, #164]	@ (8004240 <HAL_RCC_GetSysClockFreq+0xc0>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d002      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0x30>
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d003      	beq.n	80041b6 <HAL_RCC_GetSysClockFreq+0x36>
 80041ae:	e03c      	b.n	800422a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041b0:	4b24      	ldr	r3, [pc, #144]	@ (8004244 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041b2:	623b      	str	r3, [r7, #32]
      break;
 80041b4:	e03c      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80041bc:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80041c0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	fa92 f2a2 	rbit	r2, r2
 80041c8:	607a      	str	r2, [r7, #4]
  return result;
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	fab2 f282 	clz	r2, r2
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	40d3      	lsrs	r3, r2
 80041d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004248 <HAL_RCC_GetSysClockFreq+0xc8>)
 80041d6:	5cd3      	ldrb	r3, [r2, r3]
 80041d8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80041da:	4b19      	ldr	r3, [pc, #100]	@ (8004240 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	220f      	movs	r2, #15
 80041e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	fa92 f2a2 	rbit	r2, r2
 80041ec:	60fa      	str	r2, [r7, #12]
  return result;
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	fab2 f282 	clz	r2, r2
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	40d3      	lsrs	r3, r2
 80041f8:	4a14      	ldr	r2, [pc, #80]	@ (800424c <HAL_RCC_GetSysClockFreq+0xcc>)
 80041fa:	5cd3      	ldrb	r3, [r2, r3]
 80041fc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004208:	4a0e      	ldr	r2, [pc, #56]	@ (8004244 <HAL_RCC_GetSysClockFreq+0xc4>)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	fb02 f303 	mul.w	r3, r2, r3
 8004216:	627b      	str	r3, [r7, #36]	@ 0x24
 8004218:	e004      	b.n	8004224 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	4a0c      	ldr	r2, [pc, #48]	@ (8004250 <HAL_RCC_GetSysClockFreq+0xd0>)
 800421e:	fb02 f303 	mul.w	r3, r2, r3
 8004222:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004226:	623b      	str	r3, [r7, #32]
      break;
 8004228:	e002      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800422a:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <HAL_RCC_GetSysClockFreq+0xc4>)
 800422c:	623b      	str	r3, [r7, #32]
      break;
 800422e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004230:	6a3b      	ldr	r3, [r7, #32]
}
 8004232:	4618      	mov	r0, r3
 8004234:	372c      	adds	r7, #44	@ 0x2c
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40021000 	.word	0x40021000
 8004244:	007a1200 	.word	0x007a1200
 8004248:	0800ad10 	.word	0x0800ad10
 800424c:	0800ad20 	.word	0x0800ad20
 8004250:	003d0900 	.word	0x003d0900

08004254 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b092      	sub	sp, #72	@ 0x48
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004264:	2300      	movs	r3, #0
 8004266:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80d4 	beq.w	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004278:	4b4e      	ldr	r3, [pc, #312]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10e      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004284:	4b4b      	ldr	r3, [pc, #300]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	4a4a      	ldr	r2, [pc, #296]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800428a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800428e:	61d3      	str	r3, [r2, #28]
 8004290:	4b48      	ldr	r3, [pc, #288]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800429c:	2301      	movs	r3, #1
 800429e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a2:	4b45      	ldr	r3, [pc, #276]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d118      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ae:	4b42      	ldr	r3, [pc, #264]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a41      	ldr	r2, [pc, #260]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ba:	f7fe f84f 	bl	800235c <HAL_GetTick>
 80042be:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c0:	e008      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c2:	f7fe f84b 	bl	800235c <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b64      	cmp	r3, #100	@ 0x64
 80042ce:	d901      	bls.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e169      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d4:	4b38      	ldr	r3, [pc, #224]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f0      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042e0:	4b34      	ldr	r3, [pc, #208]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8084 	beq.w	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d07c      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004300:	4b2c      	ldr	r3, [pc, #176]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800430a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800430e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004312:	fa93 f3a3 	rbit	r3, r3
 8004316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800431a:	fab3 f383 	clz	r3, r3
 800431e:	b2db      	uxtb	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	4b26      	ldr	r3, [pc, #152]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004324:	4413      	add	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	461a      	mov	r2, r3
 800432a:	2301      	movs	r3, #1
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004332:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004336:	fa93 f3a3 	rbit	r3, r3
 800433a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800433c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800433e:	fab3 f383 	clz	r3, r3
 8004342:	b2db      	uxtb	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	4b1d      	ldr	r3, [pc, #116]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004348:	4413      	add	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	461a      	mov	r2, r3
 800434e:	2300      	movs	r3, #0
 8004350:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004352:	4a18      	ldr	r2, [pc, #96]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004356:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d04b      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004362:	f7fd fffb 	bl	800235c <HAL_GetTick>
 8004366:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004368:	e00a      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436a:	f7fd fff7 	bl	800235c <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004378:	4293      	cmp	r3, r2
 800437a:	d901      	bls.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e113      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004380:	2302      	movs	r3, #2
 8004382:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004386:	fa93 f3a3 	rbit	r3, r3
 800438a:	627b      	str	r3, [r7, #36]	@ 0x24
 800438c:	2302      	movs	r3, #2
 800438e:	623b      	str	r3, [r7, #32]
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	61fb      	str	r3, [r7, #28]
  return result;
 8004398:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f043 0302 	orr.w	r3, r3, #2
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d108      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80043ae:	4b01      	ldr	r3, [pc, #4]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	e00d      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80043b4:	40021000 	.word	0x40021000
 80043b8:	40007000 	.word	0x40007000
 80043bc:	10908100 	.word	0x10908100
 80043c0:	2302      	movs	r3, #2
 80043c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	fa93 f3a3 	rbit	r3, r3
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	4b78      	ldr	r3, [pc, #480]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d0:	2202      	movs	r2, #2
 80043d2:	613a      	str	r2, [r7, #16]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	fa92 f2a2 	rbit	r2, r2
 80043da:	60fa      	str	r2, [r7, #12]
  return result;
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	fab2 f282 	clz	r2, r2
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	f002 021f 	and.w	r2, r2, #31
 80043ee:	2101      	movs	r1, #1
 80043f0:	fa01 f202 	lsl.w	r2, r1, r2
 80043f4:	4013      	ands	r3, r2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0b7      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80043fa:	4b6d      	ldr	r3, [pc, #436]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	496a      	ldr	r1, [pc, #424]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004408:	4313      	orrs	r3, r2
 800440a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800440c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004410:	2b01      	cmp	r3, #1
 8004412:	d105      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004414:	4b66      	ldr	r3, [pc, #408]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	4a65      	ldr	r2, [pc, #404]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800441a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800441e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800442c:	4b60      	ldr	r3, [pc, #384]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800442e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004430:	f023 0203 	bic.w	r2, r3, #3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	495d      	ldr	r1, [pc, #372]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d008      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800444a:	4b59      	ldr	r3, [pc, #356]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	4956      	ldr	r1, [pc, #344]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004458:	4313      	orrs	r3, r2
 800445a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004468:	4b51      	ldr	r3, [pc, #324]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800446a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	494e      	ldr	r1, [pc, #312]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004476:	4313      	orrs	r3, r2
 8004478:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004486:	4b4a      	ldr	r3, [pc, #296]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448a:	f023 0210 	bic.w	r2, r3, #16
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	4947      	ldr	r1, [pc, #284]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004494:	4313      	orrs	r3, r2
 8004496:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80044a4:	4b42      	ldr	r3, [pc, #264]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b0:	493f      	ldr	r1, [pc, #252]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044c2:	4b3b      	ldr	r3, [pc, #236]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c6:	f023 0220 	bic.w	r2, r3, #32
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	4938      	ldr	r1, [pc, #224]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044e0:	4b33      	ldr	r3, [pc, #204]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	4930      	ldr	r1, [pc, #192]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d008      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044fe:	4b2c      	ldr	r3, [pc, #176]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004502:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	4929      	ldr	r1, [pc, #164]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800450c:	4313      	orrs	r3, r2
 800450e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800451c:	4b24      	ldr	r3, [pc, #144]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004528:	4921      	ldr	r1, [pc, #132]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800452a:	4313      	orrs	r3, r2
 800452c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004536:	2b00      	cmp	r3, #0
 8004538:	d008      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800453a:	4b1d      	ldr	r3, [pc, #116]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	491a      	ldr	r1, [pc, #104]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004548:	4313      	orrs	r3, r2
 800454a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004558:	4b15      	ldr	r3, [pc, #84]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800455a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004564:	4912      	ldr	r1, [pc, #72]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004566:	4313      	orrs	r3, r2
 8004568:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d008      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004576:	4b0e      	ldr	r3, [pc, #56]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004582:	490b      	ldr	r1, [pc, #44]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004584:	4313      	orrs	r3, r2
 8004586:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d008      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004594:	4b06      	ldr	r3, [pc, #24]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004598:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a0:	4903      	ldr	r1, [pc, #12]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3748      	adds	r7, #72	@ 0x48
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40021000 	.word	0x40021000

080045b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e09d      	b.n	8004702 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d108      	bne.n	80045e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045d6:	d009      	beq.n	80045ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	61da      	str	r2, [r3, #28]
 80045de:	e005      	b.n	80045ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fd fb68 	bl	8001cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004622:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800462c:	d902      	bls.n	8004634 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e002      	b.n	800463a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004638:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004642:	d007      	beq.n	8004654 <HAL_SPI_Init+0xa0>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800464c:	d002      	beq.n	8004654 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004696:	ea42 0103 	orr.w	r1, r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	0c1b      	lsrs	r3, r3, #16
 80046b0:	f003 0204 	and.w	r2, r3, #4
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80046d0:	ea42 0103 	orr.w	r1, r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e01a      	b.n	8004752 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004732:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7fd fb13 	bl	8001d60 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b08a      	sub	sp, #40	@ 0x28
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004768:	2301      	movs	r3, #1
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_SPI_TransmitReceive+0x26>
 800477c:	2302      	movs	r3, #2
 800477e:	e20a      	b.n	8004b96 <HAL_SPI_TransmitReceive+0x43c>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004788:	f7fd fde8 	bl	800235c <HAL_GetTick>
 800478c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004794:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800479c:	887b      	ldrh	r3, [r7, #2]
 800479e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80047a0:	887b      	ldrh	r3, [r7, #2]
 80047a2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047a4:	7efb      	ldrb	r3, [r7, #27]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d00e      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x6e>
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047b0:	d106      	bne.n	80047c0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d102      	bne.n	80047c0 <HAL_SPI_TransmitReceive+0x66>
 80047ba:	7efb      	ldrb	r3, [r7, #27]
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d003      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80047c0:	2302      	movs	r3, #2
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80047c6:	e1e0      	b.n	8004b8a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <HAL_SPI_TransmitReceive+0x80>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_SPI_TransmitReceive+0x80>
 80047d4:	887b      	ldrh	r3, [r7, #2]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80047e0:	e1d3      	b.n	8004b8a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d003      	beq.n	80047f6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2205      	movs	r2, #5
 80047f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	887a      	ldrh	r2, [r7, #2]
 8004806:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	887a      	ldrh	r2, [r7, #2]
 800480e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	887a      	ldrh	r2, [r7, #2]
 800481c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	887a      	ldrh	r2, [r7, #2]
 8004822:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004838:	d802      	bhi.n	8004840 <HAL_SPI_TransmitReceive+0xe6>
 800483a:	8a3b      	ldrh	r3, [r7, #16]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d908      	bls.n	8004852 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800484e:	605a      	str	r2, [r3, #4]
 8004850:	e007      	b.n	8004862 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004860:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800486c:	2b40      	cmp	r3, #64	@ 0x40
 800486e:	d007      	beq.n	8004880 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800487e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004888:	f240 8081 	bls.w	800498e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <HAL_SPI_TransmitReceive+0x140>
 8004894:	8a7b      	ldrh	r3, [r7, #18]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d16d      	bne.n	8004976 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489e:	881a      	ldrh	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048aa:	1c9a      	adds	r2, r3, #2
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048be:	e05a      	b.n	8004976 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d11b      	bne.n	8004906 <HAL_SPI_TransmitReceive+0x1ac>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d016      	beq.n	8004906 <HAL_SPI_TransmitReceive+0x1ac>
 80048d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d113      	bne.n	8004906 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e2:	881a      	ldrh	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ee:	1c9a      	adds	r2, r3, #2
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b01      	cmp	r3, #1
 8004912:	d11c      	bne.n	800494e <HAL_SPI_TransmitReceive+0x1f4>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d016      	beq.n	800494e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492a:	b292      	uxth	r2, r2
 800492c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004932:	1c9a      	adds	r2, r3, #2
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800494a:	2301      	movs	r3, #1
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800494e:	f7fd fd05 	bl	800235c <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800495a:	429a      	cmp	r2, r3
 800495c:	d80b      	bhi.n	8004976 <HAL_SPI_TransmitReceive+0x21c>
 800495e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004964:	d007      	beq.n	8004976 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004974:	e109      	b.n	8004b8a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d19f      	bne.n	80048c0 <HAL_SPI_TransmitReceive+0x166>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d199      	bne.n	80048c0 <HAL_SPI_TransmitReceive+0x166>
 800498c:	e0e3      	b.n	8004b56 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_SPI_TransmitReceive+0x244>
 8004996:	8a7b      	ldrh	r3, [r7, #18]
 8004998:	2b01      	cmp	r3, #1
 800499a:	f040 80cf 	bne.w	8004b3c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d912      	bls.n	80049ce <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b8:	1c9a      	adds	r2, r3, #2
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b02      	subs	r3, #2
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049cc:	e0b6      	b.n	8004b3c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	330c      	adds	r3, #12
 80049d8:	7812      	ldrb	r2, [r2, #0]
 80049da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049f4:	e0a2      	b.n	8004b3c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d134      	bne.n	8004a6e <HAL_SPI_TransmitReceive+0x314>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d02f      	beq.n	8004a6e <HAL_SPI_TransmitReceive+0x314>
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d12c      	bne.n	8004a6e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d912      	bls.n	8004a44 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a22:	881a      	ldrh	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2e:	1c9a      	adds	r2, r3, #2
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b02      	subs	r3, #2
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a42:	e012      	b.n	8004a6a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	7812      	ldrb	r2, [r2, #0]
 8004a50:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d148      	bne.n	8004b0e <HAL_SPI_TransmitReceive+0x3b4>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d042      	beq.n	8004b0e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d923      	bls.n	8004adc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9e:	b292      	uxth	r2, r2
 8004aa0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa6:	1c9a      	adds	r2, r3, #2
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b02      	subs	r3, #2
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d81f      	bhi.n	8004b0a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ad8:	605a      	str	r2, [r3, #4]
 8004ada:	e016      	b.n	8004b0a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f103 020c 	add.w	r2, r3, #12
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae8:	7812      	ldrb	r2, [r2, #0]
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b0e:	f7fd fc25 	bl	800235c <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d803      	bhi.n	8004b26 <HAL_SPI_TransmitReceive+0x3cc>
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b24:	d102      	bne.n	8004b2c <HAL_SPI_TransmitReceive+0x3d2>
 8004b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d107      	bne.n	8004b3c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004b3a:	e026      	b.n	8004b8a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f47f af57 	bne.w	80049f6 <HAL_SPI_TransmitReceive+0x29c>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f47f af50 	bne.w	80049f6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f94c 	bl	8004df8 <SPI_EndRxTxTransaction>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b80:	e003      	b.n	8004b8a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004b92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3728      	adds	r7, #40	@ 0x28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004bac:	b2db      	uxtb	r3, r3
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
	...

08004bbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	603b      	str	r3, [r7, #0]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bcc:	f7fd fbc6 	bl	800235c <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd4:	1a9b      	subs	r3, r3, r2
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	4413      	add	r3, r2
 8004bda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bdc:	f7fd fbbe 	bl	800235c <HAL_GetTick>
 8004be0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004be2:	4b39      	ldr	r3, [pc, #228]	@ (8004cc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	015b      	lsls	r3, r3, #5
 8004be8:	0d1b      	lsrs	r3, r3, #20
 8004bea:	69fa      	ldr	r2, [r7, #28]
 8004bec:	fb02 f303 	mul.w	r3, r2, r3
 8004bf0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bf2:	e054      	b.n	8004c9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfa:	d050      	beq.n	8004c9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bfc:	f7fd fbae 	bl	800235c <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d902      	bls.n	8004c12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d13d      	bne.n	8004c8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c2a:	d111      	bne.n	8004c50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c34:	d004      	beq.n	8004c40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c3e:	d107      	bne.n	8004c50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c58:	d10f      	bne.n	8004c7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e017      	b.n	8004cbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	bf0c      	ite	eq
 8004cae:	2301      	moveq	r3, #1
 8004cb0:	2300      	movne	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d19b      	bne.n	8004bf4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3720      	adds	r7, #32
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20000080 	.word	0x20000080

08004ccc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	@ 0x28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004cde:	f7fd fb3d 	bl	800235c <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	4413      	add	r3, r2
 8004cec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004cee:	f7fd fb35 	bl	800235c <HAL_GetTick>
 8004cf2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	330c      	adds	r3, #12
 8004cfa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004cfc:	4b3d      	ldr	r3, [pc, #244]	@ (8004df4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	00da      	lsls	r2, r3, #3
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	0d1b      	lsrs	r3, r3, #20
 8004d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d0e:	fb02 f303 	mul.w	r3, r2, r3
 8004d12:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d14:	e060      	b.n	8004dd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d1c:	d107      	bne.n	8004d2e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d104      	bne.n	8004d2e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d2c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d34:	d050      	beq.n	8004dd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d36:	f7fd fb11 	bl	800235c <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d902      	bls.n	8004d4c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d13d      	bne.n	8004dc8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d64:	d111      	bne.n	8004d8a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d6e:	d004      	beq.n	8004d7a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d78:	d107      	bne.n	8004d8a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d92:	d10f      	bne.n	8004db4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004db2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e010      	b.n	8004dea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	4013      	ands	r3, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d196      	bne.n	8004d16 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3728      	adds	r7, #40	@ 0x28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000080 	.word	0x20000080

08004df8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f7ff ff5b 	bl	8004ccc <SPI_WaitFifoStateUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e20:	f043 0220 	orr.w	r2, r3, #32
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e027      	b.n	8004e7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2200      	movs	r2, #0
 8004e34:	2180      	movs	r1, #128	@ 0x80
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7ff fec0 	bl	8004bbc <SPI_WaitFlagStateUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e46:	f043 0220 	orr.w	r2, r3, #32
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e014      	b.n	8004e7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f7ff ff34 	bl	8004ccc <SPI_WaitFifoStateUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e6e:	f043 0220 	orr.w	r2, r3, #32
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e000      	b.n	8004e7c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e8c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004e90:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004eba:	b084      	sub	sp, #16
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	f107 0014 	add.w	r0, r7, #20
 8004ec8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	b004      	add	sp, #16
 8004efa:	4770      	bx	lr

08004efc <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8004f06:	2300      	movs	r3, #0
 8004f08:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	703b      	strb	r3, [r7, #0]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8004f12:	4b51      	ldr	r3, [pc, #324]	@ (8005058 <BSP_GYRO_Init+0x15c>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	4798      	blx	r3
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2bd4      	cmp	r3, #212	@ 0xd4
 8004f1c:	d005      	beq.n	8004f2a <BSP_GYRO_Init+0x2e>
 8004f1e:	4b4e      	ldr	r3, [pc, #312]	@ (8005058 <BSP_GYRO_Init+0x15c>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	4798      	blx	r3
 8004f24:	4603      	mov	r3, r0
 8004f26:	2bd5      	cmp	r3, #213	@ 0xd5
 8004f28:	d145      	bne.n	8004fb6 <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8004f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800505c <BSP_GYRO_Init+0x160>)
 8004f2c:	4a4a      	ldr	r2, [pc, #296]	@ (8005058 <BSP_GYRO_Init+0x15c>)
 8004f2e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8004f30:	2308      	movs	r3, #8
 8004f32:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8004f34:	2300      	movs	r3, #0
 8004f36:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8004f38:	2307      	movs	r3, #7
 8004f3a:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8004f3c:	2330      	movs	r3, #48	@ 0x30
 8004f3e:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8004f40:	2300      	movs	r3, #0
 8004f42:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8004f44:	2300      	movs	r3, #0
 8004f46:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8004f48:	2310      	movs	r3, #16
 8004f4a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004f4c:	793a      	ldrb	r2, [r7, #4]
 8004f4e:	797b      	ldrb	r3, [r7, #5]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004f54:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004f56:	4313      	orrs	r3, r2
 8004f58:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004f62:	7a3a      	ldrb	r2, [r7, #8]
 8004f64:	7a7b      	ldrb	r3, [r7, #9]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8004f6a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	021b      	lsls	r3, r3, #8
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	89bb      	ldrh	r3, [r7, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8004f7a:	4b38      	ldr	r3, [pc, #224]	@ (800505c <BSP_GYRO_Init+0x160>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	89ba      	ldrh	r2, [r7, #12]
 8004f82:	4610      	mov	r0, r2
 8004f84:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8004f86:	2300      	movs	r3, #0
 8004f88:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8004f8e:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8004f90:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8004f92:	4313      	orrs	r3, r2
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8004f98:	4b30      	ldr	r3, [pc, #192]	@ (800505c <BSP_GYRO_Init+0x160>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9e:	89ba      	ldrh	r2, [r7, #12]
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8004fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800505c <BSP_GYRO_Init+0x160>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fac:	2010      	movs	r0, #16
 8004fae:	4798      	blx	r3

    ret = GYRO_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	73fb      	strb	r3, [r7, #15]
 8004fb4:	e04a      	b.n	800504c <BSP_GYRO_Init+0x150>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 8004fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8005060 <BSP_GYRO_Init+0x164>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	4798      	blx	r3
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2bd3      	cmp	r3, #211	@ 0xd3
 8004fc0:	d144      	bne.n	800504c <BSP_GYRO_Init+0x150>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8004fc2:	4b26      	ldr	r3, [pc, #152]	@ (800505c <BSP_GYRO_Init+0x160>)
 8004fc4:	4a26      	ldr	r2, [pc, #152]	@ (8005060 <BSP_GYRO_Init+0x164>)
 8004fc6:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 8004fc8:	2308      	movs	r3, #8
 8004fca:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 8004fd0:	2307      	movs	r3, #7
 8004fd2:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 8004fd4:	2330      	movs	r3, #48	@ 0x30
 8004fd6:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004fe4:	793a      	ldrb	r2, [r7, #4]
 8004fe6:	797b      	ldrb	r3, [r7, #5]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004fec:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004ffa:	7a3a      	ldrb	r2, [r7, #8]
 8004ffc:	7a7b      	ldrb	r3, [r7, #9]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8005002:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8005004:	4313      	orrs	r3, r2
 8005006:	b2db      	uxtb	r3, r3
 8005008:	021b      	lsls	r3, r3, #8
 800500a:	b29a      	uxth	r2, r3
 800500c:	89bb      	ldrh	r3, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8005012:	4b12      	ldr	r3, [pc, #72]	@ (800505c <BSP_GYRO_Init+0x160>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	89ba      	ldrh	r2, [r7, #12]
 800501a:	4610      	mov	r0, r2
 800501c:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 800501e:	2300      	movs	r3, #0
 8005020:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 8005022:	2300      	movs	r3, #0
 8005024:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8005026:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8005028:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800502a:	4313      	orrs	r3, r2
 800502c:	b2db      	uxtb	r3, r3
 800502e:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8005030:	4b0a      	ldr	r3, [pc, #40]	@ (800505c <BSP_GYRO_Init+0x160>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005036:	89ba      	ldrh	r2, [r7, #12]
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	4610      	mov	r0, r2
 800503c:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800503e:	4b07      	ldr	r3, [pc, #28]	@ (800505c <BSP_GYRO_Init+0x160>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005044:	2010      	movs	r0, #16
 8005046:	4798      	blx	r3

    ret = GYRO_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800504c:	7bfb      	ldrb	r3, [r7, #15]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	200000c0 	.word	0x200000c0
 800505c:	20000a00 	.word	0x20000a00
 8005060:	2000008c 	.word	0x2000008c

08005064 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 800506c:	4b06      	ldr	r3, [pc, #24]	@ (8005088 <BSP_GYRO_GetXYZ+0x24>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8005076:	4b04      	ldr	r3, [pc, #16]	@ (8005088 <BSP_GYRO_GetXYZ+0x24>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	4798      	blx	r3
  }
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20000a00 	.word	0x20000a00

0800508c <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005096:	2300      	movs	r3, #0
 8005098:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 800509a:	f000 fc77 	bl	800598c <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800509e:	88fb      	ldrh	r3, [r7, #6]
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 80050a4:	f107 030f 	add.w	r3, r7, #15
 80050a8:	2201      	movs	r2, #1
 80050aa:	2120      	movs	r1, #32
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fcb3 	bl	8005a18 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 80050b2:	88fb      	ldrh	r3, [r7, #6]
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 80050bc:	f107 030f 	add.w	r3, r7, #15
 80050c0:	2201      	movs	r2, #1
 80050c2:	2123      	movs	r1, #35	@ 0x23
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fca7 	bl	8005a18 <GYRO_IO_Write>
}
 80050ca:	bf00      	nop
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 80050d2:	b480      	push	{r7}
 80050d4:	af00      	add	r7, sp, #0
}
 80050d6:	bf00      	nop
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 80050e6:	f000 fc51 	bl	800598c <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 80050ea:	1dfb      	adds	r3, r7, #7
 80050ec:	2201      	movs	r2, #1
 80050ee:	210f      	movs	r1, #15
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 fcc3 	bl	8005a7c <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 80050f6:	79fb      	ldrb	r3, [r7, #7]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8005106:	1dfb      	adds	r3, r7, #7
 8005108:	2201      	movs	r2, #1
 800510a:	2124      	movs	r1, #36	@ 0x24
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fcb5 	bl	8005a7c <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8005112:	79fb      	ldrb	r3, [r7, #7]
 8005114:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005118:	b2db      	uxtb	r3, r3
 800511a:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800511c:	1dfb      	adds	r3, r7, #7
 800511e:	2201      	movs	r2, #1
 8005120:	2124      	movs	r1, #36	@ 0x24
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fc78 	bl	8005a18 <GYRO_IO_Write>
}
 8005128:	bf00      	nop
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8005144:	f107 030f 	add.w	r3, r7, #15
 8005148:	2201      	movs	r2, #1
 800514a:	2120      	movs	r1, #32
 800514c:	4618      	mov	r0, r3
 800514e:	f000 fc63 	bl	8005a18 <GYRO_IO_Write>
}
 8005152:	bf00      	nop
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	4603      	mov	r3, r0
 8005162:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8005164:	2300      	movs	r3, #0
 8005166:	73fb      	strb	r3, [r7, #15]
 8005168:	2300      	movs	r3, #0
 800516a:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800516c:	f107 030f 	add.w	r3, r7, #15
 8005170:	2201      	movs	r2, #1
 8005172:	2130      	movs	r1, #48	@ 0x30
 8005174:	4618      	mov	r0, r3
 8005176:	f000 fc81 	bl	8005a7c <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800517a:	f107 030e 	add.w	r3, r7, #14
 800517e:	2201      	movs	r2, #1
 8005180:	2122      	movs	r1, #34	@ 0x22
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fc7a 	bl	8005a7c <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8005188:	7bfb      	ldrb	r3, [r7, #15]
 800518a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800518e:	b2db      	uxtb	r3, r3
 8005190:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	121b      	asrs	r3, r3, #8
 8005198:	b25a      	sxtb	r2, r3
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	b25b      	sxtb	r3, r3
 800519e:	4313      	orrs	r3, r2
 80051a0:	b25b      	sxtb	r3, r3
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 80051a6:	7bbb      	ldrb	r3, [r7, #14]
 80051a8:	f023 0320 	bic.w	r3, r3, #32
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 80051b0:	88fb      	ldrh	r3, [r7, #6]
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	7bbb      	ldrb	r3, [r7, #14]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 80051bc:	f107 030f 	add.w	r3, r7, #15
 80051c0:	2201      	movs	r2, #1
 80051c2:	2130      	movs	r1, #48	@ 0x30
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fc27 	bl	8005a18 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 80051ca:	f107 030e 	add.w	r3, r7, #14
 80051ce:	2201      	movs	r2, #1
 80051d0:	2122      	movs	r1, #34	@ 0x22
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fc20 	bl	8005a18 <GYRO_IO_Write>
}
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80051ea:	f107 030f 	add.w	r3, r7, #15
 80051ee:	2201      	movs	r2, #1
 80051f0:	2122      	movs	r1, #34	@ 0x22
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fc42 	bl	8005a7c <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005204:	b2db      	uxtb	r3, r3
 8005206:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800520e:	b2db      	uxtb	r3, r3
 8005210:	73fb      	strb	r3, [r7, #15]
 8005212:	e00c      	b.n	800522e <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d109      	bne.n	800522e <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800521a:	7bfb      	ldrb	r3, [r7, #15]
 800521c:	f023 0308 	bic.w	r3, r3, #8
 8005220:	b2db      	uxtb	r3, r3
 8005222:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	f043 0308 	orr.w	r3, r3, #8
 800522a:	b2db      	uxtb	r3, r3
 800522c:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800522e:	f107 030f 	add.w	r3, r7, #15
 8005232:	2201      	movs	r2, #1
 8005234:	2122      	movs	r1, #34	@ 0x22
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fbee 	bl	8005a18 <GYRO_IO_Write>
}
 800523c:	bf00      	nop
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	4603      	mov	r3, r0
 800524c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800524e:	f107 030f 	add.w	r3, r7, #15
 8005252:	2201      	movs	r2, #1
 8005254:	2122      	movs	r1, #34	@ 0x22
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fc10 	bl	8005a7c <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d107      	bne.n	8005272 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005268:	b2db      	uxtb	r3, r3
 800526a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	73fb      	strb	r3, [r7, #15]
 8005270:	e009      	b.n	8005286 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d106      	bne.n	8005286 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8005278:	7bfb      	ldrb	r3, [r7, #15]
 800527a:	f023 0308 	bic.w	r3, r3, #8
 800527e:	b2db      	uxtb	r3, r3
 8005280:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8005286:	f107 030f 	add.w	r3, r7, #15
 800528a:	2201      	movs	r2, #1
 800528c:	2122      	movs	r1, #34	@ 0x22
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fbc2 	bl	8005a18 <GYRO_IO_Write>
}
 8005294:	bf00      	nop
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	4603      	mov	r3, r0
 80052a4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80052a6:	f107 030f 	add.w	r3, r7, #15
 80052aa:	2201      	movs	r2, #1
 80052ac:	2121      	movs	r1, #33	@ 0x21
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fbe4 	bl	8005a7c <GYRO_IO_Read>

  tmpreg &= 0xC0;
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80052be:	7bfa      	ldrb	r2, [r7, #15]
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80052c8:	f107 030f 	add.w	r3, r7, #15
 80052cc:	2201      	movs	r2, #1
 80052ce:	2121      	movs	r1, #33	@ 0x21
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fba1 	bl	8005a18 <GYRO_IO_Write>
}
 80052d6:	bf00      	nop
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	4603      	mov	r3, r0
 80052e6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80052e8:	f107 030f 	add.w	r3, r7, #15
 80052ec:	2201      	movs	r2, #1
 80052ee:	2124      	movs	r1, #36	@ 0x24
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fbc3 	bl	8005a7c <GYRO_IO_Read>

  tmpreg &= 0xEF;
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	f023 0310 	bic.w	r3, r3, #16
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8005300:	7bfa      	ldrb	r2, [r7, #15]
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	4313      	orrs	r3, r2
 8005306:	b2db      	uxtb	r3, r3
 8005308:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800530a:	f107 030f 	add.w	r3, r7, #15
 800530e:	2201      	movs	r2, #1
 8005310:	2124      	movs	r1, #36	@ 0x24
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fb80 	bl	8005a18 <GYRO_IO_Write>
}
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08a      	sub	sp, #40	@ 0x28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8005328:	2300      	movs	r3, #0
 800532a:	61bb      	str	r3, [r7, #24]
 800532c:	2300      	movs	r3, #0
 800532e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8005330:	f107 0310 	add.w	r3, r7, #16
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	627b      	str	r3, [r7, #36]	@ 0x24
  int i = 0;
 8005344:	2300      	movs	r3, #0
 8005346:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8005348:	f107 030f 	add.w	r3, r7, #15
 800534c:	2201      	movs	r2, #1
 800534e:	2123      	movs	r1, #35	@ 0x23
 8005350:	4618      	mov	r0, r3
 8005352:	f000 fb93 	bl	8005a7c <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8005356:	f107 0318 	add.w	r3, r7, #24
 800535a:	2206      	movs	r2, #6
 800535c:	2128      	movs	r1, #40	@ 0x28
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fb8c 	bl	8005a7c <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8005364:	7bfb      	ldrb	r3, [r7, #15]
 8005366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	d121      	bne.n	80053b2 <I3G4250D_ReadXYZAngRate+0x92>
  {
    for (i = 0; i < 3; i++)
 800536e:	2300      	movs	r3, #0
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	e01a      	b.n	80053aa <I3G4250D_ReadXYZAngRate+0x8a>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	3301      	adds	r3, #1
 800537a:	3328      	adds	r3, #40	@ 0x28
 800537c:	443b      	add	r3, r7
 800537e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	b29b      	uxth	r3, r3
 8005386:	6a3a      	ldr	r2, [r7, #32]
 8005388:	0052      	lsls	r2, r2, #1
 800538a:	3228      	adds	r2, #40	@ 0x28
 800538c:	443a      	add	r2, r7
 800538e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8005392:	4413      	add	r3, r2
 8005394:	b29b      	uxth	r3, r3
 8005396:	b21a      	sxth	r2, r3
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	3328      	adds	r3, #40	@ 0x28
 800539e:	443b      	add	r3, r7
 80053a0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	3301      	adds	r3, #1
 80053a8:	623b      	str	r3, [r7, #32]
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	dde1      	ble.n	8005374 <I3G4250D_ReadXYZAngRate+0x54>
 80053b0:	e020      	b.n	80053f4 <I3G4250D_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 80053b2:	2300      	movs	r3, #0
 80053b4:	623b      	str	r3, [r7, #32]
 80053b6:	e01a      	b.n	80053ee <I3G4250D_ReadXYZAngRate+0xce>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	3328      	adds	r3, #40	@ 0x28
 80053be:	443b      	add	r3, r7
 80053c0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	6a3a      	ldr	r2, [r7, #32]
 80053ca:	0052      	lsls	r2, r2, #1
 80053cc:	3201      	adds	r2, #1
 80053ce:	3228      	adds	r2, #40	@ 0x28
 80053d0:	443a      	add	r2, r7
 80053d2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80053d6:	4413      	add	r3, r2
 80053d8:	b29b      	uxth	r3, r3
 80053da:	b21a      	sxth	r2, r3
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	3328      	adds	r3, #40	@ 0x28
 80053e2:	443b      	add	r3, r7
 80053e4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	3301      	adds	r3, #1
 80053ec:	623b      	str	r3, [r7, #32]
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	dde1      	ble.n	80053b8 <I3G4250D_ReadXYZAngRate+0x98>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80053fa:	2b20      	cmp	r3, #32
 80053fc:	d00c      	beq.n	8005418 <I3G4250D_ReadXYZAngRate+0xf8>
 80053fe:	2b20      	cmp	r3, #32
 8005400:	dc0d      	bgt.n	800541e <I3G4250D_ReadXYZAngRate+0xfe>
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <I3G4250D_ReadXYZAngRate+0xec>
 8005406:	2b10      	cmp	r3, #16
 8005408:	d003      	beq.n	8005412 <I3G4250D_ReadXYZAngRate+0xf2>
 800540a:	e008      	b.n	800541e <I3G4250D_ReadXYZAngRate+0xfe>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 800540c:	4b15      	ldr	r3, [pc, #84]	@ (8005464 <I3G4250D_ReadXYZAngRate+0x144>)
 800540e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8005410:	e005      	b.n	800541e <I3G4250D_ReadXYZAngRate+0xfe>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8005412:	4b15      	ldr	r3, [pc, #84]	@ (8005468 <I3G4250D_ReadXYZAngRate+0x148>)
 8005414:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8005416:	e002      	b.n	800541e <I3G4250D_ReadXYZAngRate+0xfe>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8005418:	4b14      	ldr	r3, [pc, #80]	@ (800546c <I3G4250D_ReadXYZAngRate+0x14c>)
 800541a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800541c:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 800541e:	2300      	movs	r3, #0
 8005420:	623b      	str	r3, [r7, #32]
 8005422:	e016      	b.n	8005452 <I3G4250D_ReadXYZAngRate+0x132>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	3328      	adds	r3, #40	@ 0x28
 800542a:	443b      	add	r3, r7
 800542c:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8005430:	ee07 3a90 	vmov	s15, r3
 8005434:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	4413      	add	r3, r2
 8005440:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005448:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	3301      	adds	r3, #1
 8005450:	623b      	str	r3, [r7, #32]
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	2b02      	cmp	r3, #2
 8005456:	dde5      	ble.n	8005424 <I3G4250D_ReadXYZAngRate+0x104>
  }
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	3728      	adds	r7, #40	@ 0x28
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	410c0000 	.word	0x410c0000
 8005468:	418c0000 	.word	0x418c0000
 800546c:	428c0000 	.word	0x428c0000

08005470 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	4603      	mov	r3, r0
 8005478:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800547a:	2300      	movs	r3, #0
 800547c:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800547e:	f000 fa85 	bl	800598c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8005482:	88fb      	ldrh	r3, [r7, #6]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8005488:	f107 030f 	add.w	r3, r7, #15
 800548c:	2201      	movs	r2, #1
 800548e:	2120      	movs	r1, #32
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fac1 	bl	8005a18 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	0a1b      	lsrs	r3, r3, #8
 800549a:	b29b      	uxth	r3, r3
 800549c:	b2db      	uxtb	r3, r3
 800549e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80054a0:	f107 030f 	add.w	r3, r7, #15
 80054a4:	2201      	movs	r2, #1
 80054a6:	2123      	movs	r1, #35	@ 0x23
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fab5 	bl	8005a18 <GYRO_IO_Write>
}
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80054b6:	b480      	push	{r7}
 80054b8:	af00      	add	r7, sp, #0
}
 80054ba:	bf00      	nop
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80054ca:	f000 fa5f 	bl	800598c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80054ce:	1dfb      	adds	r3, r7, #7
 80054d0:	2201      	movs	r2, #1
 80054d2:	210f      	movs	r1, #15
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 fad1 	bl	8005a7c <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80054da:	79fb      	ldrb	r3, [r7, #7]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80054ea:	1dfb      	adds	r3, r7, #7
 80054ec:	2201      	movs	r2, #1
 80054ee:	2124      	movs	r1, #36	@ 0x24
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fac3 	bl	8005a7c <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005500:	1dfb      	adds	r3, r7, #7
 8005502:	2201      	movs	r2, #1
 8005504:	2124      	movs	r1, #36	@ 0x24
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fa86 	bl	8005a18 <GYRO_IO_Write>
}
 800550c:	bf00      	nop
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8005522:	88fb      	ldrh	r3, [r7, #6]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8005528:	f107 030f 	add.w	r3, r7, #15
 800552c:	2201      	movs	r2, #1
 800552e:	2120      	movs	r1, #32
 8005530:	4618      	mov	r0, r3
 8005532:	f000 fa71 	bl	8005a18 <GYRO_IO_Write>
}
 8005536:	bf00      	nop
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	4603      	mov	r3, r0
 8005546:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8005548:	2300      	movs	r3, #0
 800554a:	73fb      	strb	r3, [r7, #15]
 800554c:	2300      	movs	r3, #0
 800554e:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8005550:	f107 030f 	add.w	r3, r7, #15
 8005554:	2201      	movs	r2, #1
 8005556:	2130      	movs	r1, #48	@ 0x30
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fa8f 	bl	8005a7c <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800555e:	f107 030e 	add.w	r3, r7, #14
 8005562:	2201      	movs	r2, #1
 8005564:	2122      	movs	r1, #34	@ 0x22
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fa88 	bl	8005a7c <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005572:	b2db      	uxtb	r3, r3
 8005574:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8005576:	88fb      	ldrh	r3, [r7, #6]
 8005578:	b2db      	uxtb	r3, r3
 800557a:	121b      	asrs	r3, r3, #8
 800557c:	b25a      	sxtb	r2, r3
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	b25b      	sxtb	r3, r3
 8005582:	4313      	orrs	r3, r2
 8005584:	b25b      	sxtb	r3, r3
 8005586:	b2db      	uxtb	r3, r3
 8005588:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 800558a:	7bbb      	ldrb	r3, [r7, #14]
 800558c:	f023 0320 	bic.w	r3, r3, #32
 8005590:	b2db      	uxtb	r3, r3
 8005592:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8005594:	88fb      	ldrh	r3, [r7, #6]
 8005596:	b2da      	uxtb	r2, r3
 8005598:	7bbb      	ldrb	r3, [r7, #14]
 800559a:	4313      	orrs	r3, r2
 800559c:	b2db      	uxtb	r3, r3
 800559e:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80055a0:	f107 030f 	add.w	r3, r7, #15
 80055a4:	2201      	movs	r2, #1
 80055a6:	2130      	movs	r1, #48	@ 0x30
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 fa35 	bl	8005a18 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80055ae:	f107 030e 	add.w	r3, r7, #14
 80055b2:	2201      	movs	r2, #1
 80055b4:	2122      	movs	r1, #34	@ 0x22
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fa2e 	bl	8005a18 <GYRO_IO_Write>
}
 80055bc:	bf00      	nop
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	4603      	mov	r3, r0
 80055cc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80055ce:	f107 030f 	add.w	r3, r7, #15
 80055d2:	2201      	movs	r2, #1
 80055d4:	2122      	movs	r1, #34	@ 0x22
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fa50 	bl	8005a7c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
 80055e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	73fb      	strb	r3, [r7, #15]
 80055f6:	e00c      	b.n	8005612 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 80055f8:	79fb      	ldrb	r3, [r7, #7]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d109      	bne.n	8005612 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
 8005600:	f023 0308 	bic.w	r3, r3, #8
 8005604:	b2db      	uxtb	r3, r3
 8005606:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	f043 0308 	orr.w	r3, r3, #8
 800560e:	b2db      	uxtb	r3, r3
 8005610:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005612:	f107 030f 	add.w	r3, r7, #15
 8005616:	2201      	movs	r2, #1
 8005618:	2122      	movs	r1, #34	@ 0x22
 800561a:	4618      	mov	r0, r3
 800561c:	f000 f9fc 	bl	8005a18 <GYRO_IO_Write>
}
 8005620:	bf00      	nop
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	4603      	mov	r3, r0
 8005630:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005632:	f107 030f 	add.w	r3, r7, #15
 8005636:	2201      	movs	r2, #1
 8005638:	2122      	movs	r1, #34	@ 0x22
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fa1e 	bl	8005a7c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d107      	bne.n	8005656 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800564c:	b2db      	uxtb	r3, r3
 800564e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	73fb      	strb	r3, [r7, #15]
 8005654:	e009      	b.n	800566a <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d106      	bne.n	800566a <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	f023 0308 	bic.w	r3, r3, #8
 8005662:	b2db      	uxtb	r3, r3
 8005664:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800566a:	f107 030f 	add.w	r3, r7, #15
 800566e:	2201      	movs	r2, #1
 8005670:	2122      	movs	r1, #34	@ 0x22
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f9d0 	bl	8005a18 <GYRO_IO_Write>
}
 8005678:	bf00      	nop
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800568a:	f107 030f 	add.w	r3, r7, #15
 800568e:	2201      	movs	r2, #1
 8005690:	2121      	movs	r1, #33	@ 0x21
 8005692:	4618      	mov	r0, r3
 8005694:	f000 f9f2 	bl	8005a7c <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80056a2:	7bfa      	ldrb	r2, [r7, #15]
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80056ac:	f107 030f 	add.w	r3, r7, #15
 80056b0:	2201      	movs	r2, #1
 80056b2:	2121      	movs	r1, #33	@ 0x21
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 f9af 	bl	8005a18 <GYRO_IO_Write>
}
 80056ba:	bf00      	nop
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	4603      	mov	r3, r0
 80056ca:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80056cc:	f107 030f 	add.w	r3, r7, #15
 80056d0:	2201      	movs	r2, #1
 80056d2:	2124      	movs	r1, #36	@ 0x24
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 f9d1 	bl	8005a7c <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80056da:	7bfb      	ldrb	r3, [r7, #15]
 80056dc:	f023 0310 	bic.w	r3, r3, #16
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80056e4:	7bfa      	ldrb	r2, [r7, #15]
 80056e6:	79fb      	ldrb	r3, [r7, #7]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80056ee:	f107 030f 	add.w	r3, r7, #15
 80056f2:	2201      	movs	r2, #1
 80056f4:	2124      	movs	r1, #36	@ 0x24
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 f98e 	bl	8005a18 <GYRO_IO_Write>
}
 80056fc:	bf00      	nop
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b08a      	sub	sp, #40	@ 0x28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 800570c:	2300      	movs	r3, #0
 800570e:	61bb      	str	r3, [r7, #24]
 8005710:	2300      	movs	r3, #0
 8005712:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8005714:	f107 0310 	add.w	r3, r7, #16
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 8005728:	2300      	movs	r3, #0
 800572a:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800572c:	f107 030f 	add.w	r3, r7, #15
 8005730:	2201      	movs	r2, #1
 8005732:	2123      	movs	r1, #35	@ 0x23
 8005734:	4618      	mov	r0, r3
 8005736:	f000 f9a1 	bl	8005a7c <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800573a:	f107 0318 	add.w	r3, r7, #24
 800573e:	2206      	movs	r2, #6
 8005740:	2128      	movs	r1, #40	@ 0x28
 8005742:	4618      	mov	r0, r3
 8005744:	f000 f99a 	bl	8005a7c <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	d121      	bne.n	8005796 <L3GD20_ReadXYZAngRate+0x92>
  {
    for(i=0; i<3; i++)
 8005752:	2300      	movs	r3, #0
 8005754:	623b      	str	r3, [r7, #32]
 8005756:	e01a      	b.n	800578e <L3GD20_ReadXYZAngRate+0x8a>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	3301      	adds	r3, #1
 800575e:	3328      	adds	r3, #40	@ 0x28
 8005760:	443b      	add	r3, r7
 8005762:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005766:	021b      	lsls	r3, r3, #8
 8005768:	b29b      	uxth	r3, r3
 800576a:	6a3a      	ldr	r2, [r7, #32]
 800576c:	0052      	lsls	r2, r2, #1
 800576e:	3228      	adds	r2, #40	@ 0x28
 8005770:	443a      	add	r2, r7
 8005772:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8005776:	4413      	add	r3, r2
 8005778:	b29b      	uxth	r3, r3
 800577a:	b21a      	sxth	r2, r3
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	3328      	adds	r3, #40	@ 0x28
 8005782:	443b      	add	r3, r7
 8005784:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	3301      	adds	r3, #1
 800578c:	623b      	str	r3, [r7, #32]
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	2b02      	cmp	r3, #2
 8005792:	dde1      	ble.n	8005758 <L3GD20_ReadXYZAngRate+0x54>
 8005794:	e020      	b.n	80057d8 <L3GD20_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8005796:	2300      	movs	r3, #0
 8005798:	623b      	str	r3, [r7, #32]
 800579a:	e01a      	b.n	80057d2 <L3GD20_ReadXYZAngRate+0xce>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	3328      	adds	r3, #40	@ 0x28
 80057a2:	443b      	add	r3, r7
 80057a4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80057a8:	021b      	lsls	r3, r3, #8
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	6a3a      	ldr	r2, [r7, #32]
 80057ae:	0052      	lsls	r2, r2, #1
 80057b0:	3201      	adds	r2, #1
 80057b2:	3228      	adds	r2, #40	@ 0x28
 80057b4:	443a      	add	r2, r7
 80057b6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80057ba:	4413      	add	r3, r2
 80057bc:	b29b      	uxth	r3, r3
 80057be:	b21a      	sxth	r2, r3
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	3328      	adds	r3, #40	@ 0x28
 80057c6:	443b      	add	r3, r7
 80057c8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	3301      	adds	r3, #1
 80057d0:	623b      	str	r3, [r7, #32]
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	dde1      	ble.n	800579c <L3GD20_ReadXYZAngRate+0x98>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d00c      	beq.n	80057fc <L3GD20_ReadXYZAngRate+0xf8>
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	dc0d      	bgt.n	8005802 <L3GD20_ReadXYZAngRate+0xfe>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <L3GD20_ReadXYZAngRate+0xec>
 80057ea:	2b10      	cmp	r3, #16
 80057ec:	d003      	beq.n	80057f6 <L3GD20_ReadXYZAngRate+0xf2>
 80057ee:	e008      	b.n	8005802 <L3GD20_ReadXYZAngRate+0xfe>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 80057f0:	4b15      	ldr	r3, [pc, #84]	@ (8005848 <L3GD20_ReadXYZAngRate+0x144>)
 80057f2:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80057f4:	e005      	b.n	8005802 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 80057f6:	4b15      	ldr	r3, [pc, #84]	@ (800584c <L3GD20_ReadXYZAngRate+0x148>)
 80057f8:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80057fa:	e002      	b.n	8005802 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 80057fc:	4b14      	ldr	r3, [pc, #80]	@ (8005850 <L3GD20_ReadXYZAngRate+0x14c>)
 80057fe:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8005800:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8005802:	2300      	movs	r3, #0
 8005804:	623b      	str	r3, [r7, #32]
 8005806:	e016      	b.n	8005836 <L3GD20_ReadXYZAngRate+0x132>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	3328      	adds	r3, #40	@ 0x28
 800580e:	443b      	add	r3, r7
 8005810:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8005814:	ee07 3a90 	vmov	s15, r3
 8005818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	4413      	add	r3, r2
 8005824:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582c:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	3301      	adds	r3, #1
 8005834:	623b      	str	r3, [r7, #32]
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	2b02      	cmp	r3, #2
 800583a:	dde5      	ble.n	8005808 <L3GD20_ReadXYZAngRate+0x104>
  }
}
 800583c:	bf00      	nop
 800583e:	bf00      	nop
 8005840:	3728      	adds	r7, #40	@ 0x28
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	410c0000 	.word	0x410c0000
 800584c:	418c0000 	.word	0x418c0000
 8005850:	428c0000 	.word	0x428c0000

08005854 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8005858:	481a      	ldr	r0, [pc, #104]	@ (80058c4 <SPIx_Init+0x70>)
 800585a:	f7ff f9a0 	bl	8004b9e <HAL_SPI_GetState>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d12c      	bne.n	80058be <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8005864:	4b17      	ldr	r3, [pc, #92]	@ (80058c4 <SPIx_Init+0x70>)
 8005866:	4a18      	ldr	r2, [pc, #96]	@ (80058c8 <SPIx_Init+0x74>)
 8005868:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800586a:	4b16      	ldr	r3, [pc, #88]	@ (80058c4 <SPIx_Init+0x70>)
 800586c:	2218      	movs	r2, #24
 800586e:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 8005870:	4b14      	ldr	r3, [pc, #80]	@ (80058c4 <SPIx_Init+0x70>)
 8005872:	2200      	movs	r2, #0
 8005874:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005876:	4b13      	ldr	r3, [pc, #76]	@ (80058c4 <SPIx_Init+0x70>)
 8005878:	2200      	movs	r2, #0
 800587a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800587c:	4b11      	ldr	r3, [pc, #68]	@ (80058c4 <SPIx_Init+0x70>)
 800587e:	2200      	movs	r2, #0
 8005880:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005882:	4b10      	ldr	r3, [pc, #64]	@ (80058c4 <SPIx_Init+0x70>)
 8005884:	2200      	movs	r2, #0
 8005886:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8005888:	4b0e      	ldr	r3, [pc, #56]	@ (80058c4 <SPIx_Init+0x70>)
 800588a:	2207      	movs	r2, #7
 800588c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800588e:	4b0d      	ldr	r3, [pc, #52]	@ (80058c4 <SPIx_Init+0x70>)
 8005890:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005894:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005896:	4b0b      	ldr	r3, [pc, #44]	@ (80058c4 <SPIx_Init+0x70>)
 8005898:	2200      	movs	r2, #0
 800589a:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800589c:	4b09      	ldr	r3, [pc, #36]	@ (80058c4 <SPIx_Init+0x70>)
 800589e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058a2:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 80058a4:	4b07      	ldr	r3, [pc, #28]	@ (80058c4 <SPIx_Init+0x70>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80058aa:	4b06      	ldr	r3, [pc, #24]	@ (80058c4 <SPIx_Init+0x70>)
 80058ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80058b0:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 80058b2:	4804      	ldr	r0, [pc, #16]	@ (80058c4 <SPIx_Init+0x70>)
 80058b4:	f000 f836 	bl	8005924 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80058b8:	4802      	ldr	r0, [pc, #8]	@ (80058c4 <SPIx_Init+0x70>)
 80058ba:	f7fe fe7b 	bl	80045b4 <HAL_SPI_Init>
  }
}
 80058be:	bf00      	nop
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20000a04 	.word	0x20000a04
 80058c8:	40013000 	.word	0x40013000

080058cc <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af02      	add	r7, sp, #8
 80058d2:	4603      	mov	r3, r0
 80058d4:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80058da:	4b0a      	ldr	r3, [pc, #40]	@ (8005904 <SPIx_WriteRead+0x38>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f107 020f 	add.w	r2, r7, #15
 80058e2:	1df9      	adds	r1, r7, #7
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	2301      	movs	r3, #1
 80058e8:	4807      	ldr	r0, [pc, #28]	@ (8005908 <SPIx_WriteRead+0x3c>)
 80058ea:	f7fe ff36 	bl	800475a <HAL_SPI_TransmitReceive>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 80058f4:	f000 f80a 	bl	800590c <SPIx_Error>
  }
  
  return receivedbyte;
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	200000f4 	.word	0x200000f4
 8005908:	20000a04 	.word	0x20000a04

0800590c <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8005910:	4803      	ldr	r0, [pc, #12]	@ (8005920 <SPIx_Error+0x14>)
 8005912:	f7fe fefa 	bl	800470a <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8005916:	f7ff ff9d 	bl	8005854 <SPIx_Init>
}
 800591a:	bf00      	nop
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20000a04 	.word	0x20000a04

08005924 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	@ 0x28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 800592c:	4b16      	ldr	r3, [pc, #88]	@ (8005988 <SPIx_MspInit+0x64>)
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	4a15      	ldr	r2, [pc, #84]	@ (8005988 <SPIx_MspInit+0x64>)
 8005932:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005936:	6193      	str	r3, [r2, #24]
 8005938:	4b13      	ldr	r3, [pc, #76]	@ (8005988 <SPIx_MspInit+0x64>)
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8005944:	4b10      	ldr	r3, [pc, #64]	@ (8005988 <SPIx_MspInit+0x64>)
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	4a0f      	ldr	r2, [pc, #60]	@ (8005988 <SPIx_MspInit+0x64>)
 800594a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800594e:	6153      	str	r3, [r2, #20]
 8005950:	4b0d      	ldr	r3, [pc, #52]	@ (8005988 <SPIx_MspInit+0x64>)
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800595c:	23e0      	movs	r3, #224	@ 0xe0
 800595e:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8005960:	2302      	movs	r3, #2
 8005962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8005964:	2300      	movs	r3, #0
 8005966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005968:	2303      	movs	r3, #3
 800596a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800596c:	2305      	movs	r3, #5
 800596e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8005970:	f107 0314 	add.w	r3, r7, #20
 8005974:	4619      	mov	r1, r3
 8005976:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800597a:	f7fc fde1 	bl	8002540 <HAL_GPIO_Init>
}
 800597e:	bf00      	nop
 8005980:	3728      	adds	r7, #40	@ 0x28
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40021000 	.word	0x40021000

0800598c <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8005992:	4b1f      	ldr	r3, [pc, #124]	@ (8005a10 <GYRO_IO_Init+0x84>)
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	4a1e      	ldr	r2, [pc, #120]	@ (8005a10 <GYRO_IO_Init+0x84>)
 8005998:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800599c:	6153      	str	r3, [r2, #20]
 800599e:	4b1c      	ldr	r3, [pc, #112]	@ (8005a10 <GYRO_IO_Init+0x84>)
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059a6:	60bb      	str	r3, [r7, #8]
 80059a8:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80059aa:	2308      	movs	r3, #8
 80059ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80059ae:	2301      	movs	r3, #1
 80059b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80059b6:	2303      	movs	r3, #3
 80059b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80059ba:	f107 030c 	add.w	r3, r7, #12
 80059be:	4619      	mov	r1, r3
 80059c0:	4814      	ldr	r0, [pc, #80]	@ (8005a14 <GYRO_IO_Init+0x88>)
 80059c2:	f7fc fdbd 	bl	8002540 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 80059c6:	2201      	movs	r2, #1
 80059c8:	2108      	movs	r1, #8
 80059ca:	4812      	ldr	r0, [pc, #72]	@ (8005a14 <GYRO_IO_Init+0x88>)
 80059cc:	f7fd f80e 	bl	80029ec <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80059d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005a10 <GYRO_IO_Init+0x84>)
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	4a0e      	ldr	r2, [pc, #56]	@ (8005a10 <GYRO_IO_Init+0x84>)
 80059d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059da:	6153      	str	r3, [r2, #20]
 80059dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a10 <GYRO_IO_Init+0x84>)
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059e4:	607b      	str	r3, [r7, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80059e8:	2303      	movs	r3, #3
 80059ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80059ec:	2300      	movs	r3, #0
 80059ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80059f0:	2303      	movs	r3, #3
 80059f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80059f8:	f107 030c 	add.w	r3, r7, #12
 80059fc:	4619      	mov	r1, r3
 80059fe:	4805      	ldr	r0, [pc, #20]	@ (8005a14 <GYRO_IO_Init+0x88>)
 8005a00:	f7fc fd9e 	bl	8002540 <HAL_GPIO_Init>
  
  SPIx_Init();
 8005a04:	f7ff ff26 	bl	8005854 <SPIx_Init>
}
 8005a08:	bf00      	nop
 8005a0a:	3720      	adds	r7, #32
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40021000 	.word	0x40021000
 8005a14:	48001000 	.word	0x48001000

08005a18 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	70fb      	strb	r3, [r7, #3]
 8005a24:	4613      	mov	r3, r2
 8005a26:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8005a28:	883b      	ldrh	r3, [r7, #0]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d903      	bls.n	8005a36 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8005a2e:	78fb      	ldrb	r3, [r7, #3]
 8005a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a34:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8005a36:	2200      	movs	r2, #0
 8005a38:	2108      	movs	r1, #8
 8005a3a:	480f      	ldr	r0, [pc, #60]	@ (8005a78 <GYRO_IO_Write+0x60>)
 8005a3c:	f7fc ffd6 	bl	80029ec <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff ff42 	bl	80058cc <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8005a48:	e00a      	b.n	8005a60 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff ff3c 	bl	80058cc <SPIx_WriteRead>
    NumByteToWrite--;
 8005a54:	883b      	ldrh	r3, [r7, #0]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8005a60:	883b      	ldrh	r3, [r7, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f1      	bne.n	8005a4a <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8005a66:	2201      	movs	r2, #1
 8005a68:	2108      	movs	r1, #8
 8005a6a:	4803      	ldr	r0, [pc, #12]	@ (8005a78 <GYRO_IO_Write+0x60>)
 8005a6c:	f7fc ffbe 	bl	80029ec <HAL_GPIO_WritePin>
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	48001000 	.word	0x48001000

08005a7c <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8005a8c:	883b      	ldrh	r3, [r7, #0]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d904      	bls.n	8005a9c <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8005a98:	70fb      	strb	r3, [r7, #3]
 8005a9a:	e003      	b.n	8005aa4 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8005a9c:	78fb      	ldrb	r3, [r7, #3]
 8005a9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005aa2:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2108      	movs	r1, #8
 8005aa8:	4810      	ldr	r0, [pc, #64]	@ (8005aec <GYRO_IO_Read+0x70>)
 8005aaa:	f7fc ff9f 	bl	80029ec <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff ff0b 	bl	80058cc <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8005ab6:	e00c      	b.n	8005ad2 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8005ab8:	2000      	movs	r0, #0
 8005aba:	f7ff ff07 	bl	80058cc <SPIx_WriteRead>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8005ac6:	883b      	ldrh	r3, [r7, #0]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8005ad2:	883b      	ldrh	r3, [r7, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1ef      	bne.n	8005ab8 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8005ad8:	2201      	movs	r2, #1
 8005ada:	2108      	movs	r1, #8
 8005adc:	4803      	ldr	r0, [pc, #12]	@ (8005aec <GYRO_IO_Read+0x70>)
 8005ade:	f7fc ff85 	bl	80029ec <HAL_GPIO_WritePin>
}  
 8005ae2:	bf00      	nop
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	48001000 	.word	0x48001000

08005af0 <atoi>:
 8005af0:	220a      	movs	r2, #10
 8005af2:	2100      	movs	r1, #0
 8005af4:	f000 b8e8 	b.w	8005cc8 <strtol>

08005af8 <srand>:
 8005af8:	b538      	push	{r3, r4, r5, lr}
 8005afa:	4b10      	ldr	r3, [pc, #64]	@ (8005b3c <srand+0x44>)
 8005afc:	681d      	ldr	r5, [r3, #0]
 8005afe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005b00:	4604      	mov	r4, r0
 8005b02:	b9b3      	cbnz	r3, 8005b32 <srand+0x3a>
 8005b04:	2018      	movs	r0, #24
 8005b06:	f001 ffcd 	bl	8007aa4 <malloc>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	6328      	str	r0, [r5, #48]	@ 0x30
 8005b0e:	b920      	cbnz	r0, 8005b1a <srand+0x22>
 8005b10:	4b0b      	ldr	r3, [pc, #44]	@ (8005b40 <srand+0x48>)
 8005b12:	480c      	ldr	r0, [pc, #48]	@ (8005b44 <srand+0x4c>)
 8005b14:	2146      	movs	r1, #70	@ 0x46
 8005b16:	f001 f90f 	bl	8006d38 <__assert_func>
 8005b1a:	490b      	ldr	r1, [pc, #44]	@ (8005b48 <srand+0x50>)
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b4c <srand+0x54>)
 8005b1e:	e9c0 1300 	strd	r1, r3, [r0]
 8005b22:	4b0b      	ldr	r3, [pc, #44]	@ (8005b50 <srand+0x58>)
 8005b24:	6083      	str	r3, [r0, #8]
 8005b26:	230b      	movs	r3, #11
 8005b28:	8183      	strh	r3, [r0, #12]
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	2001      	movs	r0, #1
 8005b2e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005b32:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005b34:	2200      	movs	r2, #0
 8005b36:	611c      	str	r4, [r3, #16]
 8005b38:	615a      	str	r2, [r3, #20]
 8005b3a:	bd38      	pop	{r3, r4, r5, pc}
 8005b3c:	20000104 	.word	0x20000104
 8005b40:	0800ad30 	.word	0x0800ad30
 8005b44:	0800ad47 	.word	0x0800ad47
 8005b48:	abcd330e 	.word	0xabcd330e
 8005b4c:	e66d1234 	.word	0xe66d1234
 8005b50:	0005deec 	.word	0x0005deec

08005b54 <rand>:
 8005b54:	4b16      	ldr	r3, [pc, #88]	@ (8005bb0 <rand+0x5c>)
 8005b56:	b510      	push	{r4, lr}
 8005b58:	681c      	ldr	r4, [r3, #0]
 8005b5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005b5c:	b9b3      	cbnz	r3, 8005b8c <rand+0x38>
 8005b5e:	2018      	movs	r0, #24
 8005b60:	f001 ffa0 	bl	8007aa4 <malloc>
 8005b64:	4602      	mov	r2, r0
 8005b66:	6320      	str	r0, [r4, #48]	@ 0x30
 8005b68:	b920      	cbnz	r0, 8005b74 <rand+0x20>
 8005b6a:	4b12      	ldr	r3, [pc, #72]	@ (8005bb4 <rand+0x60>)
 8005b6c:	4812      	ldr	r0, [pc, #72]	@ (8005bb8 <rand+0x64>)
 8005b6e:	2152      	movs	r1, #82	@ 0x52
 8005b70:	f001 f8e2 	bl	8006d38 <__assert_func>
 8005b74:	4911      	ldr	r1, [pc, #68]	@ (8005bbc <rand+0x68>)
 8005b76:	4b12      	ldr	r3, [pc, #72]	@ (8005bc0 <rand+0x6c>)
 8005b78:	e9c0 1300 	strd	r1, r3, [r0]
 8005b7c:	4b11      	ldr	r3, [pc, #68]	@ (8005bc4 <rand+0x70>)
 8005b7e:	6083      	str	r3, [r0, #8]
 8005b80:	230b      	movs	r3, #11
 8005b82:	8183      	strh	r3, [r0, #12]
 8005b84:	2100      	movs	r1, #0
 8005b86:	2001      	movs	r0, #1
 8005b88:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005b8c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005b8e:	480e      	ldr	r0, [pc, #56]	@ (8005bc8 <rand+0x74>)
 8005b90:	690b      	ldr	r3, [r1, #16]
 8005b92:	694c      	ldr	r4, [r1, #20]
 8005b94:	4a0d      	ldr	r2, [pc, #52]	@ (8005bcc <rand+0x78>)
 8005b96:	4358      	muls	r0, r3
 8005b98:	fb02 0004 	mla	r0, r2, r4, r0
 8005b9c:	fba3 3202 	umull	r3, r2, r3, r2
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	eb40 0002 	adc.w	r0, r0, r2
 8005ba6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005baa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005bae:	bd10      	pop	{r4, pc}
 8005bb0:	20000104 	.word	0x20000104
 8005bb4:	0800ad30 	.word	0x0800ad30
 8005bb8:	0800ad47 	.word	0x0800ad47
 8005bbc:	abcd330e 	.word	0xabcd330e
 8005bc0:	e66d1234 	.word	0xe66d1234
 8005bc4:	0005deec 	.word	0x0005deec
 8005bc8:	5851f42d 	.word	0x5851f42d
 8005bcc:	4c957f2d 	.word	0x4c957f2d

08005bd0 <_strtol_l.constprop.0>:
 8005bd0:	2b24      	cmp	r3, #36	@ 0x24
 8005bd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd6:	4686      	mov	lr, r0
 8005bd8:	4690      	mov	r8, r2
 8005bda:	d801      	bhi.n	8005be0 <_strtol_l.constprop.0+0x10>
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d106      	bne.n	8005bee <_strtol_l.constprop.0+0x1e>
 8005be0:	f001 f860 	bl	8006ca4 <__errno>
 8005be4:	2316      	movs	r3, #22
 8005be6:	6003      	str	r3, [r0, #0]
 8005be8:	2000      	movs	r0, #0
 8005bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bee:	4834      	ldr	r0, [pc, #208]	@ (8005cc0 <_strtol_l.constprop.0+0xf0>)
 8005bf0:	460d      	mov	r5, r1
 8005bf2:	462a      	mov	r2, r5
 8005bf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bf8:	5d06      	ldrb	r6, [r0, r4]
 8005bfa:	f016 0608 	ands.w	r6, r6, #8
 8005bfe:	d1f8      	bne.n	8005bf2 <_strtol_l.constprop.0+0x22>
 8005c00:	2c2d      	cmp	r4, #45	@ 0x2d
 8005c02:	d12d      	bne.n	8005c60 <_strtol_l.constprop.0+0x90>
 8005c04:	782c      	ldrb	r4, [r5, #0]
 8005c06:	2601      	movs	r6, #1
 8005c08:	1c95      	adds	r5, r2, #2
 8005c0a:	f033 0210 	bics.w	r2, r3, #16
 8005c0e:	d109      	bne.n	8005c24 <_strtol_l.constprop.0+0x54>
 8005c10:	2c30      	cmp	r4, #48	@ 0x30
 8005c12:	d12a      	bne.n	8005c6a <_strtol_l.constprop.0+0x9a>
 8005c14:	782a      	ldrb	r2, [r5, #0]
 8005c16:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005c1a:	2a58      	cmp	r2, #88	@ 0x58
 8005c1c:	d125      	bne.n	8005c6a <_strtol_l.constprop.0+0x9a>
 8005c1e:	786c      	ldrb	r4, [r5, #1]
 8005c20:	2310      	movs	r3, #16
 8005c22:	3502      	adds	r5, #2
 8005c24:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005c28:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	fbbc f9f3 	udiv	r9, ip, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	fb03 ca19 	mls	sl, r3, r9, ip
 8005c38:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005c3c:	2f09      	cmp	r7, #9
 8005c3e:	d81b      	bhi.n	8005c78 <_strtol_l.constprop.0+0xa8>
 8005c40:	463c      	mov	r4, r7
 8005c42:	42a3      	cmp	r3, r4
 8005c44:	dd27      	ble.n	8005c96 <_strtol_l.constprop.0+0xc6>
 8005c46:	1c57      	adds	r7, r2, #1
 8005c48:	d007      	beq.n	8005c5a <_strtol_l.constprop.0+0x8a>
 8005c4a:	4581      	cmp	r9, r0
 8005c4c:	d320      	bcc.n	8005c90 <_strtol_l.constprop.0+0xc0>
 8005c4e:	d101      	bne.n	8005c54 <_strtol_l.constprop.0+0x84>
 8005c50:	45a2      	cmp	sl, r4
 8005c52:	db1d      	blt.n	8005c90 <_strtol_l.constprop.0+0xc0>
 8005c54:	fb00 4003 	mla	r0, r0, r3, r4
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c5e:	e7eb      	b.n	8005c38 <_strtol_l.constprop.0+0x68>
 8005c60:	2c2b      	cmp	r4, #43	@ 0x2b
 8005c62:	bf04      	itt	eq
 8005c64:	782c      	ldrbeq	r4, [r5, #0]
 8005c66:	1c95      	addeq	r5, r2, #2
 8005c68:	e7cf      	b.n	8005c0a <_strtol_l.constprop.0+0x3a>
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1da      	bne.n	8005c24 <_strtol_l.constprop.0+0x54>
 8005c6e:	2c30      	cmp	r4, #48	@ 0x30
 8005c70:	bf0c      	ite	eq
 8005c72:	2308      	moveq	r3, #8
 8005c74:	230a      	movne	r3, #10
 8005c76:	e7d5      	b.n	8005c24 <_strtol_l.constprop.0+0x54>
 8005c78:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005c7c:	2f19      	cmp	r7, #25
 8005c7e:	d801      	bhi.n	8005c84 <_strtol_l.constprop.0+0xb4>
 8005c80:	3c37      	subs	r4, #55	@ 0x37
 8005c82:	e7de      	b.n	8005c42 <_strtol_l.constprop.0+0x72>
 8005c84:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005c88:	2f19      	cmp	r7, #25
 8005c8a:	d804      	bhi.n	8005c96 <_strtol_l.constprop.0+0xc6>
 8005c8c:	3c57      	subs	r4, #87	@ 0x57
 8005c8e:	e7d8      	b.n	8005c42 <_strtol_l.constprop.0+0x72>
 8005c90:	f04f 32ff 	mov.w	r2, #4294967295
 8005c94:	e7e1      	b.n	8005c5a <_strtol_l.constprop.0+0x8a>
 8005c96:	1c53      	adds	r3, r2, #1
 8005c98:	d108      	bne.n	8005cac <_strtol_l.constprop.0+0xdc>
 8005c9a:	2322      	movs	r3, #34	@ 0x22
 8005c9c:	f8ce 3000 	str.w	r3, [lr]
 8005ca0:	4660      	mov	r0, ip
 8005ca2:	f1b8 0f00 	cmp.w	r8, #0
 8005ca6:	d0a0      	beq.n	8005bea <_strtol_l.constprop.0+0x1a>
 8005ca8:	1e69      	subs	r1, r5, #1
 8005caa:	e006      	b.n	8005cba <_strtol_l.constprop.0+0xea>
 8005cac:	b106      	cbz	r6, 8005cb0 <_strtol_l.constprop.0+0xe0>
 8005cae:	4240      	negs	r0, r0
 8005cb0:	f1b8 0f00 	cmp.w	r8, #0
 8005cb4:	d099      	beq.n	8005bea <_strtol_l.constprop.0+0x1a>
 8005cb6:	2a00      	cmp	r2, #0
 8005cb8:	d1f6      	bne.n	8005ca8 <_strtol_l.constprop.0+0xd8>
 8005cba:	f8c8 1000 	str.w	r1, [r8]
 8005cbe:	e794      	b.n	8005bea <_strtol_l.constprop.0+0x1a>
 8005cc0:	0800ada0 	.word	0x0800ada0

08005cc4 <_strtol_r>:
 8005cc4:	f7ff bf84 	b.w	8005bd0 <_strtol_l.constprop.0>

08005cc8 <strtol>:
 8005cc8:	4613      	mov	r3, r2
 8005cca:	460a      	mov	r2, r1
 8005ccc:	4601      	mov	r1, r0
 8005cce:	4802      	ldr	r0, [pc, #8]	@ (8005cd8 <strtol+0x10>)
 8005cd0:	6800      	ldr	r0, [r0, #0]
 8005cd2:	f7ff bf7d 	b.w	8005bd0 <_strtol_l.constprop.0>
 8005cd6:	bf00      	nop
 8005cd8:	20000104 	.word	0x20000104

08005cdc <__cvt>:
 8005cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce0:	ec57 6b10 	vmov	r6, r7, d0
 8005ce4:	2f00      	cmp	r7, #0
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	4619      	mov	r1, r3
 8005cea:	463b      	mov	r3, r7
 8005cec:	bfbb      	ittet	lt
 8005cee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005cf2:	461f      	movlt	r7, r3
 8005cf4:	2300      	movge	r3, #0
 8005cf6:	232d      	movlt	r3, #45	@ 0x2d
 8005cf8:	700b      	strb	r3, [r1, #0]
 8005cfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cfc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005d00:	4691      	mov	r9, r2
 8005d02:	f023 0820 	bic.w	r8, r3, #32
 8005d06:	bfbc      	itt	lt
 8005d08:	4632      	movlt	r2, r6
 8005d0a:	4616      	movlt	r6, r2
 8005d0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d10:	d005      	beq.n	8005d1e <__cvt+0x42>
 8005d12:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d16:	d100      	bne.n	8005d1a <__cvt+0x3e>
 8005d18:	3401      	adds	r4, #1
 8005d1a:	2102      	movs	r1, #2
 8005d1c:	e000      	b.n	8005d20 <__cvt+0x44>
 8005d1e:	2103      	movs	r1, #3
 8005d20:	ab03      	add	r3, sp, #12
 8005d22:	9301      	str	r3, [sp, #4]
 8005d24:	ab02      	add	r3, sp, #8
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	ec47 6b10 	vmov	d0, r6, r7
 8005d2c:	4653      	mov	r3, sl
 8005d2e:	4622      	mov	r2, r4
 8005d30:	f001 f8aa 	bl	8006e88 <_dtoa_r>
 8005d34:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005d38:	4605      	mov	r5, r0
 8005d3a:	d119      	bne.n	8005d70 <__cvt+0x94>
 8005d3c:	f019 0f01 	tst.w	r9, #1
 8005d40:	d00e      	beq.n	8005d60 <__cvt+0x84>
 8005d42:	eb00 0904 	add.w	r9, r0, r4
 8005d46:	2200      	movs	r2, #0
 8005d48:	2300      	movs	r3, #0
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	4639      	mov	r1, r7
 8005d4e:	f7fa febb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d52:	b108      	cbz	r0, 8005d58 <__cvt+0x7c>
 8005d54:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d58:	2230      	movs	r2, #48	@ 0x30
 8005d5a:	9b03      	ldr	r3, [sp, #12]
 8005d5c:	454b      	cmp	r3, r9
 8005d5e:	d31e      	bcc.n	8005d9e <__cvt+0xc2>
 8005d60:	9b03      	ldr	r3, [sp, #12]
 8005d62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d64:	1b5b      	subs	r3, r3, r5
 8005d66:	4628      	mov	r0, r5
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	b004      	add	sp, #16
 8005d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d74:	eb00 0904 	add.w	r9, r0, r4
 8005d78:	d1e5      	bne.n	8005d46 <__cvt+0x6a>
 8005d7a:	7803      	ldrb	r3, [r0, #0]
 8005d7c:	2b30      	cmp	r3, #48	@ 0x30
 8005d7e:	d10a      	bne.n	8005d96 <__cvt+0xba>
 8005d80:	2200      	movs	r2, #0
 8005d82:	2300      	movs	r3, #0
 8005d84:	4630      	mov	r0, r6
 8005d86:	4639      	mov	r1, r7
 8005d88:	f7fa fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d8c:	b918      	cbnz	r0, 8005d96 <__cvt+0xba>
 8005d8e:	f1c4 0401 	rsb	r4, r4, #1
 8005d92:	f8ca 4000 	str.w	r4, [sl]
 8005d96:	f8da 3000 	ldr.w	r3, [sl]
 8005d9a:	4499      	add	r9, r3
 8005d9c:	e7d3      	b.n	8005d46 <__cvt+0x6a>
 8005d9e:	1c59      	adds	r1, r3, #1
 8005da0:	9103      	str	r1, [sp, #12]
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	e7d9      	b.n	8005d5a <__cvt+0x7e>

08005da6 <__exponent>:
 8005da6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005da8:	2900      	cmp	r1, #0
 8005daa:	bfba      	itte	lt
 8005dac:	4249      	neglt	r1, r1
 8005dae:	232d      	movlt	r3, #45	@ 0x2d
 8005db0:	232b      	movge	r3, #43	@ 0x2b
 8005db2:	2909      	cmp	r1, #9
 8005db4:	7002      	strb	r2, [r0, #0]
 8005db6:	7043      	strb	r3, [r0, #1]
 8005db8:	dd29      	ble.n	8005e0e <__exponent+0x68>
 8005dba:	f10d 0307 	add.w	r3, sp, #7
 8005dbe:	461d      	mov	r5, r3
 8005dc0:	270a      	movs	r7, #10
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	fbb1 f6f7 	udiv	r6, r1, r7
 8005dc8:	fb07 1416 	mls	r4, r7, r6, r1
 8005dcc:	3430      	adds	r4, #48	@ 0x30
 8005dce:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	2c63      	cmp	r4, #99	@ 0x63
 8005dd6:	f103 33ff 	add.w	r3, r3, #4294967295
 8005dda:	4631      	mov	r1, r6
 8005ddc:	dcf1      	bgt.n	8005dc2 <__exponent+0x1c>
 8005dde:	3130      	adds	r1, #48	@ 0x30
 8005de0:	1e94      	subs	r4, r2, #2
 8005de2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005de6:	1c41      	adds	r1, r0, #1
 8005de8:	4623      	mov	r3, r4
 8005dea:	42ab      	cmp	r3, r5
 8005dec:	d30a      	bcc.n	8005e04 <__exponent+0x5e>
 8005dee:	f10d 0309 	add.w	r3, sp, #9
 8005df2:	1a9b      	subs	r3, r3, r2
 8005df4:	42ac      	cmp	r4, r5
 8005df6:	bf88      	it	hi
 8005df8:	2300      	movhi	r3, #0
 8005dfa:	3302      	adds	r3, #2
 8005dfc:	4403      	add	r3, r0
 8005dfe:	1a18      	subs	r0, r3, r0
 8005e00:	b003      	add	sp, #12
 8005e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e04:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e08:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e0c:	e7ed      	b.n	8005dea <__exponent+0x44>
 8005e0e:	2330      	movs	r3, #48	@ 0x30
 8005e10:	3130      	adds	r1, #48	@ 0x30
 8005e12:	7083      	strb	r3, [r0, #2]
 8005e14:	70c1      	strb	r1, [r0, #3]
 8005e16:	1d03      	adds	r3, r0, #4
 8005e18:	e7f1      	b.n	8005dfe <__exponent+0x58>
	...

08005e1c <_printf_float>:
 8005e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e20:	b08d      	sub	sp, #52	@ 0x34
 8005e22:	460c      	mov	r4, r1
 8005e24:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005e28:	4616      	mov	r6, r2
 8005e2a:	461f      	mov	r7, r3
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	f000 feef 	bl	8006c10 <_localeconv_r>
 8005e32:	6803      	ldr	r3, [r0, #0]
 8005e34:	9304      	str	r3, [sp, #16]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fa fa1a 	bl	8000270 <strlen>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e40:	f8d8 3000 	ldr.w	r3, [r8]
 8005e44:	9005      	str	r0, [sp, #20]
 8005e46:	3307      	adds	r3, #7
 8005e48:	f023 0307 	bic.w	r3, r3, #7
 8005e4c:	f103 0208 	add.w	r2, r3, #8
 8005e50:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005e54:	f8d4 b000 	ldr.w	fp, [r4]
 8005e58:	f8c8 2000 	str.w	r2, [r8]
 8005e5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e60:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005e64:	9307      	str	r3, [sp, #28]
 8005e66:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e6a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005e6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e72:	4b9c      	ldr	r3, [pc, #624]	@ (80060e4 <_printf_float+0x2c8>)
 8005e74:	f04f 32ff 	mov.w	r2, #4294967295
 8005e78:	f7fa fe58 	bl	8000b2c <__aeabi_dcmpun>
 8005e7c:	bb70      	cbnz	r0, 8005edc <_printf_float+0xc0>
 8005e7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e82:	4b98      	ldr	r3, [pc, #608]	@ (80060e4 <_printf_float+0x2c8>)
 8005e84:	f04f 32ff 	mov.w	r2, #4294967295
 8005e88:	f7fa fe32 	bl	8000af0 <__aeabi_dcmple>
 8005e8c:	bb30      	cbnz	r0, 8005edc <_printf_float+0xc0>
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2300      	movs	r3, #0
 8005e92:	4640      	mov	r0, r8
 8005e94:	4649      	mov	r1, r9
 8005e96:	f7fa fe21 	bl	8000adc <__aeabi_dcmplt>
 8005e9a:	b110      	cbz	r0, 8005ea2 <_printf_float+0x86>
 8005e9c:	232d      	movs	r3, #45	@ 0x2d
 8005e9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ea2:	4a91      	ldr	r2, [pc, #580]	@ (80060e8 <_printf_float+0x2cc>)
 8005ea4:	4b91      	ldr	r3, [pc, #580]	@ (80060ec <_printf_float+0x2d0>)
 8005ea6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005eaa:	bf94      	ite	ls
 8005eac:	4690      	movls	r8, r2
 8005eae:	4698      	movhi	r8, r3
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	6123      	str	r3, [r4, #16]
 8005eb4:	f02b 0304 	bic.w	r3, fp, #4
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	f04f 0900 	mov.w	r9, #0
 8005ebe:	9700      	str	r7, [sp, #0]
 8005ec0:	4633      	mov	r3, r6
 8005ec2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f000 f9d2 	bl	8006270 <_printf_common>
 8005ecc:	3001      	adds	r0, #1
 8005ece:	f040 808d 	bne.w	8005fec <_printf_float+0x1d0>
 8005ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed6:	b00d      	add	sp, #52	@ 0x34
 8005ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005edc:	4642      	mov	r2, r8
 8005ede:	464b      	mov	r3, r9
 8005ee0:	4640      	mov	r0, r8
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	f7fa fe22 	bl	8000b2c <__aeabi_dcmpun>
 8005ee8:	b140      	cbz	r0, 8005efc <_printf_float+0xe0>
 8005eea:	464b      	mov	r3, r9
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bfbc      	itt	lt
 8005ef0:	232d      	movlt	r3, #45	@ 0x2d
 8005ef2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005ef6:	4a7e      	ldr	r2, [pc, #504]	@ (80060f0 <_printf_float+0x2d4>)
 8005ef8:	4b7e      	ldr	r3, [pc, #504]	@ (80060f4 <_printf_float+0x2d8>)
 8005efa:	e7d4      	b.n	8005ea6 <_printf_float+0x8a>
 8005efc:	6863      	ldr	r3, [r4, #4]
 8005efe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005f02:	9206      	str	r2, [sp, #24]
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	d13b      	bne.n	8005f80 <_printf_float+0x164>
 8005f08:	2306      	movs	r3, #6
 8005f0a:	6063      	str	r3, [r4, #4]
 8005f0c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005f10:	2300      	movs	r3, #0
 8005f12:	6022      	str	r2, [r4, #0]
 8005f14:	9303      	str	r3, [sp, #12]
 8005f16:	ab0a      	add	r3, sp, #40	@ 0x28
 8005f18:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005f1c:	ab09      	add	r3, sp, #36	@ 0x24
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	6861      	ldr	r1, [r4, #4]
 8005f22:	ec49 8b10 	vmov	d0, r8, r9
 8005f26:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f7ff fed6 	bl	8005cdc <__cvt>
 8005f30:	9b06      	ldr	r3, [sp, #24]
 8005f32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f34:	2b47      	cmp	r3, #71	@ 0x47
 8005f36:	4680      	mov	r8, r0
 8005f38:	d129      	bne.n	8005f8e <_printf_float+0x172>
 8005f3a:	1cc8      	adds	r0, r1, #3
 8005f3c:	db02      	blt.n	8005f44 <_printf_float+0x128>
 8005f3e:	6863      	ldr	r3, [r4, #4]
 8005f40:	4299      	cmp	r1, r3
 8005f42:	dd41      	ble.n	8005fc8 <_printf_float+0x1ac>
 8005f44:	f1aa 0a02 	sub.w	sl, sl, #2
 8005f48:	fa5f fa8a 	uxtb.w	sl, sl
 8005f4c:	3901      	subs	r1, #1
 8005f4e:	4652      	mov	r2, sl
 8005f50:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005f54:	9109      	str	r1, [sp, #36]	@ 0x24
 8005f56:	f7ff ff26 	bl	8005da6 <__exponent>
 8005f5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f5c:	1813      	adds	r3, r2, r0
 8005f5e:	2a01      	cmp	r2, #1
 8005f60:	4681      	mov	r9, r0
 8005f62:	6123      	str	r3, [r4, #16]
 8005f64:	dc02      	bgt.n	8005f6c <_printf_float+0x150>
 8005f66:	6822      	ldr	r2, [r4, #0]
 8005f68:	07d2      	lsls	r2, r2, #31
 8005f6a:	d501      	bpl.n	8005f70 <_printf_float+0x154>
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	6123      	str	r3, [r4, #16]
 8005f70:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0a2      	beq.n	8005ebe <_printf_float+0xa2>
 8005f78:	232d      	movs	r3, #45	@ 0x2d
 8005f7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f7e:	e79e      	b.n	8005ebe <_printf_float+0xa2>
 8005f80:	9a06      	ldr	r2, [sp, #24]
 8005f82:	2a47      	cmp	r2, #71	@ 0x47
 8005f84:	d1c2      	bne.n	8005f0c <_printf_float+0xf0>
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1c0      	bne.n	8005f0c <_printf_float+0xf0>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e7bd      	b.n	8005f0a <_printf_float+0xee>
 8005f8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f92:	d9db      	bls.n	8005f4c <_printf_float+0x130>
 8005f94:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005f98:	d118      	bne.n	8005fcc <_printf_float+0x1b0>
 8005f9a:	2900      	cmp	r1, #0
 8005f9c:	6863      	ldr	r3, [r4, #4]
 8005f9e:	dd0b      	ble.n	8005fb8 <_printf_float+0x19c>
 8005fa0:	6121      	str	r1, [r4, #16]
 8005fa2:	b913      	cbnz	r3, 8005faa <_printf_float+0x18e>
 8005fa4:	6822      	ldr	r2, [r4, #0]
 8005fa6:	07d0      	lsls	r0, r2, #31
 8005fa8:	d502      	bpl.n	8005fb0 <_printf_float+0x194>
 8005faa:	3301      	adds	r3, #1
 8005fac:	440b      	add	r3, r1
 8005fae:	6123      	str	r3, [r4, #16]
 8005fb0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005fb2:	f04f 0900 	mov.w	r9, #0
 8005fb6:	e7db      	b.n	8005f70 <_printf_float+0x154>
 8005fb8:	b913      	cbnz	r3, 8005fc0 <_printf_float+0x1a4>
 8005fba:	6822      	ldr	r2, [r4, #0]
 8005fbc:	07d2      	lsls	r2, r2, #31
 8005fbe:	d501      	bpl.n	8005fc4 <_printf_float+0x1a8>
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	e7f4      	b.n	8005fae <_printf_float+0x192>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e7f2      	b.n	8005fae <_printf_float+0x192>
 8005fc8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005fcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fce:	4299      	cmp	r1, r3
 8005fd0:	db05      	blt.n	8005fde <_printf_float+0x1c2>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	6121      	str	r1, [r4, #16]
 8005fd6:	07d8      	lsls	r0, r3, #31
 8005fd8:	d5ea      	bpl.n	8005fb0 <_printf_float+0x194>
 8005fda:	1c4b      	adds	r3, r1, #1
 8005fdc:	e7e7      	b.n	8005fae <_printf_float+0x192>
 8005fde:	2900      	cmp	r1, #0
 8005fe0:	bfd4      	ite	le
 8005fe2:	f1c1 0202 	rsble	r2, r1, #2
 8005fe6:	2201      	movgt	r2, #1
 8005fe8:	4413      	add	r3, r2
 8005fea:	e7e0      	b.n	8005fae <_printf_float+0x192>
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	055a      	lsls	r2, r3, #21
 8005ff0:	d407      	bmi.n	8006002 <_printf_float+0x1e6>
 8005ff2:	6923      	ldr	r3, [r4, #16]
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	47b8      	blx	r7
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d12b      	bne.n	8006058 <_printf_float+0x23c>
 8006000:	e767      	b.n	8005ed2 <_printf_float+0xb6>
 8006002:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006006:	f240 80dd 	bls.w	80061c4 <_printf_float+0x3a8>
 800600a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800600e:	2200      	movs	r2, #0
 8006010:	2300      	movs	r3, #0
 8006012:	f7fa fd59 	bl	8000ac8 <__aeabi_dcmpeq>
 8006016:	2800      	cmp	r0, #0
 8006018:	d033      	beq.n	8006082 <_printf_float+0x266>
 800601a:	4a37      	ldr	r2, [pc, #220]	@ (80060f8 <_printf_float+0x2dc>)
 800601c:	2301      	movs	r3, #1
 800601e:	4631      	mov	r1, r6
 8006020:	4628      	mov	r0, r5
 8006022:	47b8      	blx	r7
 8006024:	3001      	adds	r0, #1
 8006026:	f43f af54 	beq.w	8005ed2 <_printf_float+0xb6>
 800602a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800602e:	4543      	cmp	r3, r8
 8006030:	db02      	blt.n	8006038 <_printf_float+0x21c>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	07d8      	lsls	r0, r3, #31
 8006036:	d50f      	bpl.n	8006058 <_printf_float+0x23c>
 8006038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800603c:	4631      	mov	r1, r6
 800603e:	4628      	mov	r0, r5
 8006040:	47b8      	blx	r7
 8006042:	3001      	adds	r0, #1
 8006044:	f43f af45 	beq.w	8005ed2 <_printf_float+0xb6>
 8006048:	f04f 0900 	mov.w	r9, #0
 800604c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006050:	f104 0a1a 	add.w	sl, r4, #26
 8006054:	45c8      	cmp	r8, r9
 8006056:	dc09      	bgt.n	800606c <_printf_float+0x250>
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	079b      	lsls	r3, r3, #30
 800605c:	f100 8103 	bmi.w	8006266 <_printf_float+0x44a>
 8006060:	68e0      	ldr	r0, [r4, #12]
 8006062:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006064:	4298      	cmp	r0, r3
 8006066:	bfb8      	it	lt
 8006068:	4618      	movlt	r0, r3
 800606a:	e734      	b.n	8005ed6 <_printf_float+0xba>
 800606c:	2301      	movs	r3, #1
 800606e:	4652      	mov	r2, sl
 8006070:	4631      	mov	r1, r6
 8006072:	4628      	mov	r0, r5
 8006074:	47b8      	blx	r7
 8006076:	3001      	adds	r0, #1
 8006078:	f43f af2b 	beq.w	8005ed2 <_printf_float+0xb6>
 800607c:	f109 0901 	add.w	r9, r9, #1
 8006080:	e7e8      	b.n	8006054 <_printf_float+0x238>
 8006082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006084:	2b00      	cmp	r3, #0
 8006086:	dc39      	bgt.n	80060fc <_printf_float+0x2e0>
 8006088:	4a1b      	ldr	r2, [pc, #108]	@ (80060f8 <_printf_float+0x2dc>)
 800608a:	2301      	movs	r3, #1
 800608c:	4631      	mov	r1, r6
 800608e:	4628      	mov	r0, r5
 8006090:	47b8      	blx	r7
 8006092:	3001      	adds	r0, #1
 8006094:	f43f af1d 	beq.w	8005ed2 <_printf_float+0xb6>
 8006098:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800609c:	ea59 0303 	orrs.w	r3, r9, r3
 80060a0:	d102      	bne.n	80060a8 <_printf_float+0x28c>
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	07d9      	lsls	r1, r3, #31
 80060a6:	d5d7      	bpl.n	8006058 <_printf_float+0x23c>
 80060a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060ac:	4631      	mov	r1, r6
 80060ae:	4628      	mov	r0, r5
 80060b0:	47b8      	blx	r7
 80060b2:	3001      	adds	r0, #1
 80060b4:	f43f af0d 	beq.w	8005ed2 <_printf_float+0xb6>
 80060b8:	f04f 0a00 	mov.w	sl, #0
 80060bc:	f104 0b1a 	add.w	fp, r4, #26
 80060c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060c2:	425b      	negs	r3, r3
 80060c4:	4553      	cmp	r3, sl
 80060c6:	dc01      	bgt.n	80060cc <_printf_float+0x2b0>
 80060c8:	464b      	mov	r3, r9
 80060ca:	e793      	b.n	8005ff4 <_printf_float+0x1d8>
 80060cc:	2301      	movs	r3, #1
 80060ce:	465a      	mov	r2, fp
 80060d0:	4631      	mov	r1, r6
 80060d2:	4628      	mov	r0, r5
 80060d4:	47b8      	blx	r7
 80060d6:	3001      	adds	r0, #1
 80060d8:	f43f aefb 	beq.w	8005ed2 <_printf_float+0xb6>
 80060dc:	f10a 0a01 	add.w	sl, sl, #1
 80060e0:	e7ee      	b.n	80060c0 <_printf_float+0x2a4>
 80060e2:	bf00      	nop
 80060e4:	7fefffff 	.word	0x7fefffff
 80060e8:	0800aea0 	.word	0x0800aea0
 80060ec:	0800aea4 	.word	0x0800aea4
 80060f0:	0800aea8 	.word	0x0800aea8
 80060f4:	0800aeac 	.word	0x0800aeac
 80060f8:	0800aeb0 	.word	0x0800aeb0
 80060fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006102:	4553      	cmp	r3, sl
 8006104:	bfa8      	it	ge
 8006106:	4653      	movge	r3, sl
 8006108:	2b00      	cmp	r3, #0
 800610a:	4699      	mov	r9, r3
 800610c:	dc36      	bgt.n	800617c <_printf_float+0x360>
 800610e:	f04f 0b00 	mov.w	fp, #0
 8006112:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006116:	f104 021a 	add.w	r2, r4, #26
 800611a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800611c:	9306      	str	r3, [sp, #24]
 800611e:	eba3 0309 	sub.w	r3, r3, r9
 8006122:	455b      	cmp	r3, fp
 8006124:	dc31      	bgt.n	800618a <_printf_float+0x36e>
 8006126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006128:	459a      	cmp	sl, r3
 800612a:	dc3a      	bgt.n	80061a2 <_printf_float+0x386>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	07da      	lsls	r2, r3, #31
 8006130:	d437      	bmi.n	80061a2 <_printf_float+0x386>
 8006132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006134:	ebaa 0903 	sub.w	r9, sl, r3
 8006138:	9b06      	ldr	r3, [sp, #24]
 800613a:	ebaa 0303 	sub.w	r3, sl, r3
 800613e:	4599      	cmp	r9, r3
 8006140:	bfa8      	it	ge
 8006142:	4699      	movge	r9, r3
 8006144:	f1b9 0f00 	cmp.w	r9, #0
 8006148:	dc33      	bgt.n	80061b2 <_printf_float+0x396>
 800614a:	f04f 0800 	mov.w	r8, #0
 800614e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006152:	f104 0b1a 	add.w	fp, r4, #26
 8006156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006158:	ebaa 0303 	sub.w	r3, sl, r3
 800615c:	eba3 0309 	sub.w	r3, r3, r9
 8006160:	4543      	cmp	r3, r8
 8006162:	f77f af79 	ble.w	8006058 <_printf_float+0x23c>
 8006166:	2301      	movs	r3, #1
 8006168:	465a      	mov	r2, fp
 800616a:	4631      	mov	r1, r6
 800616c:	4628      	mov	r0, r5
 800616e:	47b8      	blx	r7
 8006170:	3001      	adds	r0, #1
 8006172:	f43f aeae 	beq.w	8005ed2 <_printf_float+0xb6>
 8006176:	f108 0801 	add.w	r8, r8, #1
 800617a:	e7ec      	b.n	8006156 <_printf_float+0x33a>
 800617c:	4642      	mov	r2, r8
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	d1c2      	bne.n	800610e <_printf_float+0x2f2>
 8006188:	e6a3      	b.n	8005ed2 <_printf_float+0xb6>
 800618a:	2301      	movs	r3, #1
 800618c:	4631      	mov	r1, r6
 800618e:	4628      	mov	r0, r5
 8006190:	9206      	str	r2, [sp, #24]
 8006192:	47b8      	blx	r7
 8006194:	3001      	adds	r0, #1
 8006196:	f43f ae9c 	beq.w	8005ed2 <_printf_float+0xb6>
 800619a:	9a06      	ldr	r2, [sp, #24]
 800619c:	f10b 0b01 	add.w	fp, fp, #1
 80061a0:	e7bb      	b.n	800611a <_printf_float+0x2fe>
 80061a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061a6:	4631      	mov	r1, r6
 80061a8:	4628      	mov	r0, r5
 80061aa:	47b8      	blx	r7
 80061ac:	3001      	adds	r0, #1
 80061ae:	d1c0      	bne.n	8006132 <_printf_float+0x316>
 80061b0:	e68f      	b.n	8005ed2 <_printf_float+0xb6>
 80061b2:	9a06      	ldr	r2, [sp, #24]
 80061b4:	464b      	mov	r3, r9
 80061b6:	4442      	add	r2, r8
 80061b8:	4631      	mov	r1, r6
 80061ba:	4628      	mov	r0, r5
 80061bc:	47b8      	blx	r7
 80061be:	3001      	adds	r0, #1
 80061c0:	d1c3      	bne.n	800614a <_printf_float+0x32e>
 80061c2:	e686      	b.n	8005ed2 <_printf_float+0xb6>
 80061c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80061c8:	f1ba 0f01 	cmp.w	sl, #1
 80061cc:	dc01      	bgt.n	80061d2 <_printf_float+0x3b6>
 80061ce:	07db      	lsls	r3, r3, #31
 80061d0:	d536      	bpl.n	8006240 <_printf_float+0x424>
 80061d2:	2301      	movs	r3, #1
 80061d4:	4642      	mov	r2, r8
 80061d6:	4631      	mov	r1, r6
 80061d8:	4628      	mov	r0, r5
 80061da:	47b8      	blx	r7
 80061dc:	3001      	adds	r0, #1
 80061de:	f43f ae78 	beq.w	8005ed2 <_printf_float+0xb6>
 80061e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061e6:	4631      	mov	r1, r6
 80061e8:	4628      	mov	r0, r5
 80061ea:	47b8      	blx	r7
 80061ec:	3001      	adds	r0, #1
 80061ee:	f43f ae70 	beq.w	8005ed2 <_printf_float+0xb6>
 80061f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80061f6:	2200      	movs	r2, #0
 80061f8:	2300      	movs	r3, #0
 80061fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061fe:	f7fa fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 8006202:	b9c0      	cbnz	r0, 8006236 <_printf_float+0x41a>
 8006204:	4653      	mov	r3, sl
 8006206:	f108 0201 	add.w	r2, r8, #1
 800620a:	4631      	mov	r1, r6
 800620c:	4628      	mov	r0, r5
 800620e:	47b8      	blx	r7
 8006210:	3001      	adds	r0, #1
 8006212:	d10c      	bne.n	800622e <_printf_float+0x412>
 8006214:	e65d      	b.n	8005ed2 <_printf_float+0xb6>
 8006216:	2301      	movs	r3, #1
 8006218:	465a      	mov	r2, fp
 800621a:	4631      	mov	r1, r6
 800621c:	4628      	mov	r0, r5
 800621e:	47b8      	blx	r7
 8006220:	3001      	adds	r0, #1
 8006222:	f43f ae56 	beq.w	8005ed2 <_printf_float+0xb6>
 8006226:	f108 0801 	add.w	r8, r8, #1
 800622a:	45d0      	cmp	r8, sl
 800622c:	dbf3      	blt.n	8006216 <_printf_float+0x3fa>
 800622e:	464b      	mov	r3, r9
 8006230:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006234:	e6df      	b.n	8005ff6 <_printf_float+0x1da>
 8006236:	f04f 0800 	mov.w	r8, #0
 800623a:	f104 0b1a 	add.w	fp, r4, #26
 800623e:	e7f4      	b.n	800622a <_printf_float+0x40e>
 8006240:	2301      	movs	r3, #1
 8006242:	4642      	mov	r2, r8
 8006244:	e7e1      	b.n	800620a <_printf_float+0x3ee>
 8006246:	2301      	movs	r3, #1
 8006248:	464a      	mov	r2, r9
 800624a:	4631      	mov	r1, r6
 800624c:	4628      	mov	r0, r5
 800624e:	47b8      	blx	r7
 8006250:	3001      	adds	r0, #1
 8006252:	f43f ae3e 	beq.w	8005ed2 <_printf_float+0xb6>
 8006256:	f108 0801 	add.w	r8, r8, #1
 800625a:	68e3      	ldr	r3, [r4, #12]
 800625c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800625e:	1a5b      	subs	r3, r3, r1
 8006260:	4543      	cmp	r3, r8
 8006262:	dcf0      	bgt.n	8006246 <_printf_float+0x42a>
 8006264:	e6fc      	b.n	8006060 <_printf_float+0x244>
 8006266:	f04f 0800 	mov.w	r8, #0
 800626a:	f104 0919 	add.w	r9, r4, #25
 800626e:	e7f4      	b.n	800625a <_printf_float+0x43e>

08006270 <_printf_common>:
 8006270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006274:	4616      	mov	r6, r2
 8006276:	4698      	mov	r8, r3
 8006278:	688a      	ldr	r2, [r1, #8]
 800627a:	690b      	ldr	r3, [r1, #16]
 800627c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006280:	4293      	cmp	r3, r2
 8006282:	bfb8      	it	lt
 8006284:	4613      	movlt	r3, r2
 8006286:	6033      	str	r3, [r6, #0]
 8006288:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800628c:	4607      	mov	r7, r0
 800628e:	460c      	mov	r4, r1
 8006290:	b10a      	cbz	r2, 8006296 <_printf_common+0x26>
 8006292:	3301      	adds	r3, #1
 8006294:	6033      	str	r3, [r6, #0]
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	0699      	lsls	r1, r3, #26
 800629a:	bf42      	ittt	mi
 800629c:	6833      	ldrmi	r3, [r6, #0]
 800629e:	3302      	addmi	r3, #2
 80062a0:	6033      	strmi	r3, [r6, #0]
 80062a2:	6825      	ldr	r5, [r4, #0]
 80062a4:	f015 0506 	ands.w	r5, r5, #6
 80062a8:	d106      	bne.n	80062b8 <_printf_common+0x48>
 80062aa:	f104 0a19 	add.w	sl, r4, #25
 80062ae:	68e3      	ldr	r3, [r4, #12]
 80062b0:	6832      	ldr	r2, [r6, #0]
 80062b2:	1a9b      	subs	r3, r3, r2
 80062b4:	42ab      	cmp	r3, r5
 80062b6:	dc26      	bgt.n	8006306 <_printf_common+0x96>
 80062b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062bc:	6822      	ldr	r2, [r4, #0]
 80062be:	3b00      	subs	r3, #0
 80062c0:	bf18      	it	ne
 80062c2:	2301      	movne	r3, #1
 80062c4:	0692      	lsls	r2, r2, #26
 80062c6:	d42b      	bmi.n	8006320 <_printf_common+0xb0>
 80062c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062cc:	4641      	mov	r1, r8
 80062ce:	4638      	mov	r0, r7
 80062d0:	47c8      	blx	r9
 80062d2:	3001      	adds	r0, #1
 80062d4:	d01e      	beq.n	8006314 <_printf_common+0xa4>
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	6922      	ldr	r2, [r4, #16]
 80062da:	f003 0306 	and.w	r3, r3, #6
 80062de:	2b04      	cmp	r3, #4
 80062e0:	bf02      	ittt	eq
 80062e2:	68e5      	ldreq	r5, [r4, #12]
 80062e4:	6833      	ldreq	r3, [r6, #0]
 80062e6:	1aed      	subeq	r5, r5, r3
 80062e8:	68a3      	ldr	r3, [r4, #8]
 80062ea:	bf0c      	ite	eq
 80062ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062f0:	2500      	movne	r5, #0
 80062f2:	4293      	cmp	r3, r2
 80062f4:	bfc4      	itt	gt
 80062f6:	1a9b      	subgt	r3, r3, r2
 80062f8:	18ed      	addgt	r5, r5, r3
 80062fa:	2600      	movs	r6, #0
 80062fc:	341a      	adds	r4, #26
 80062fe:	42b5      	cmp	r5, r6
 8006300:	d11a      	bne.n	8006338 <_printf_common+0xc8>
 8006302:	2000      	movs	r0, #0
 8006304:	e008      	b.n	8006318 <_printf_common+0xa8>
 8006306:	2301      	movs	r3, #1
 8006308:	4652      	mov	r2, sl
 800630a:	4641      	mov	r1, r8
 800630c:	4638      	mov	r0, r7
 800630e:	47c8      	blx	r9
 8006310:	3001      	adds	r0, #1
 8006312:	d103      	bne.n	800631c <_printf_common+0xac>
 8006314:	f04f 30ff 	mov.w	r0, #4294967295
 8006318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800631c:	3501      	adds	r5, #1
 800631e:	e7c6      	b.n	80062ae <_printf_common+0x3e>
 8006320:	18e1      	adds	r1, r4, r3
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	2030      	movs	r0, #48	@ 0x30
 8006326:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800632a:	4422      	add	r2, r4
 800632c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006330:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006334:	3302      	adds	r3, #2
 8006336:	e7c7      	b.n	80062c8 <_printf_common+0x58>
 8006338:	2301      	movs	r3, #1
 800633a:	4622      	mov	r2, r4
 800633c:	4641      	mov	r1, r8
 800633e:	4638      	mov	r0, r7
 8006340:	47c8      	blx	r9
 8006342:	3001      	adds	r0, #1
 8006344:	d0e6      	beq.n	8006314 <_printf_common+0xa4>
 8006346:	3601      	adds	r6, #1
 8006348:	e7d9      	b.n	80062fe <_printf_common+0x8e>
	...

0800634c <_printf_i>:
 800634c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006350:	7e0f      	ldrb	r7, [r1, #24]
 8006352:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006354:	2f78      	cmp	r7, #120	@ 0x78
 8006356:	4691      	mov	r9, r2
 8006358:	4680      	mov	r8, r0
 800635a:	460c      	mov	r4, r1
 800635c:	469a      	mov	sl, r3
 800635e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006362:	d807      	bhi.n	8006374 <_printf_i+0x28>
 8006364:	2f62      	cmp	r7, #98	@ 0x62
 8006366:	d80a      	bhi.n	800637e <_printf_i+0x32>
 8006368:	2f00      	cmp	r7, #0
 800636a:	f000 80d2 	beq.w	8006512 <_printf_i+0x1c6>
 800636e:	2f58      	cmp	r7, #88	@ 0x58
 8006370:	f000 80b9 	beq.w	80064e6 <_printf_i+0x19a>
 8006374:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006378:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800637c:	e03a      	b.n	80063f4 <_printf_i+0xa8>
 800637e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006382:	2b15      	cmp	r3, #21
 8006384:	d8f6      	bhi.n	8006374 <_printf_i+0x28>
 8006386:	a101      	add	r1, pc, #4	@ (adr r1, 800638c <_printf_i+0x40>)
 8006388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800638c:	080063e5 	.word	0x080063e5
 8006390:	080063f9 	.word	0x080063f9
 8006394:	08006375 	.word	0x08006375
 8006398:	08006375 	.word	0x08006375
 800639c:	08006375 	.word	0x08006375
 80063a0:	08006375 	.word	0x08006375
 80063a4:	080063f9 	.word	0x080063f9
 80063a8:	08006375 	.word	0x08006375
 80063ac:	08006375 	.word	0x08006375
 80063b0:	08006375 	.word	0x08006375
 80063b4:	08006375 	.word	0x08006375
 80063b8:	080064f9 	.word	0x080064f9
 80063bc:	08006423 	.word	0x08006423
 80063c0:	080064b3 	.word	0x080064b3
 80063c4:	08006375 	.word	0x08006375
 80063c8:	08006375 	.word	0x08006375
 80063cc:	0800651b 	.word	0x0800651b
 80063d0:	08006375 	.word	0x08006375
 80063d4:	08006423 	.word	0x08006423
 80063d8:	08006375 	.word	0x08006375
 80063dc:	08006375 	.word	0x08006375
 80063e0:	080064bb 	.word	0x080064bb
 80063e4:	6833      	ldr	r3, [r6, #0]
 80063e6:	1d1a      	adds	r2, r3, #4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6032      	str	r2, [r6, #0]
 80063ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063f4:	2301      	movs	r3, #1
 80063f6:	e09d      	b.n	8006534 <_printf_i+0x1e8>
 80063f8:	6833      	ldr	r3, [r6, #0]
 80063fa:	6820      	ldr	r0, [r4, #0]
 80063fc:	1d19      	adds	r1, r3, #4
 80063fe:	6031      	str	r1, [r6, #0]
 8006400:	0606      	lsls	r6, r0, #24
 8006402:	d501      	bpl.n	8006408 <_printf_i+0xbc>
 8006404:	681d      	ldr	r5, [r3, #0]
 8006406:	e003      	b.n	8006410 <_printf_i+0xc4>
 8006408:	0645      	lsls	r5, r0, #25
 800640a:	d5fb      	bpl.n	8006404 <_printf_i+0xb8>
 800640c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006410:	2d00      	cmp	r5, #0
 8006412:	da03      	bge.n	800641c <_printf_i+0xd0>
 8006414:	232d      	movs	r3, #45	@ 0x2d
 8006416:	426d      	negs	r5, r5
 8006418:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800641c:	4859      	ldr	r0, [pc, #356]	@ (8006584 <_printf_i+0x238>)
 800641e:	230a      	movs	r3, #10
 8006420:	e011      	b.n	8006446 <_printf_i+0xfa>
 8006422:	6821      	ldr	r1, [r4, #0]
 8006424:	6833      	ldr	r3, [r6, #0]
 8006426:	0608      	lsls	r0, r1, #24
 8006428:	f853 5b04 	ldr.w	r5, [r3], #4
 800642c:	d402      	bmi.n	8006434 <_printf_i+0xe8>
 800642e:	0649      	lsls	r1, r1, #25
 8006430:	bf48      	it	mi
 8006432:	b2ad      	uxthmi	r5, r5
 8006434:	2f6f      	cmp	r7, #111	@ 0x6f
 8006436:	4853      	ldr	r0, [pc, #332]	@ (8006584 <_printf_i+0x238>)
 8006438:	6033      	str	r3, [r6, #0]
 800643a:	bf14      	ite	ne
 800643c:	230a      	movne	r3, #10
 800643e:	2308      	moveq	r3, #8
 8006440:	2100      	movs	r1, #0
 8006442:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006446:	6866      	ldr	r6, [r4, #4]
 8006448:	60a6      	str	r6, [r4, #8]
 800644a:	2e00      	cmp	r6, #0
 800644c:	bfa2      	ittt	ge
 800644e:	6821      	ldrge	r1, [r4, #0]
 8006450:	f021 0104 	bicge.w	r1, r1, #4
 8006454:	6021      	strge	r1, [r4, #0]
 8006456:	b90d      	cbnz	r5, 800645c <_printf_i+0x110>
 8006458:	2e00      	cmp	r6, #0
 800645a:	d04b      	beq.n	80064f4 <_printf_i+0x1a8>
 800645c:	4616      	mov	r6, r2
 800645e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006462:	fb03 5711 	mls	r7, r3, r1, r5
 8006466:	5dc7      	ldrb	r7, [r0, r7]
 8006468:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800646c:	462f      	mov	r7, r5
 800646e:	42bb      	cmp	r3, r7
 8006470:	460d      	mov	r5, r1
 8006472:	d9f4      	bls.n	800645e <_printf_i+0x112>
 8006474:	2b08      	cmp	r3, #8
 8006476:	d10b      	bne.n	8006490 <_printf_i+0x144>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	07df      	lsls	r7, r3, #31
 800647c:	d508      	bpl.n	8006490 <_printf_i+0x144>
 800647e:	6923      	ldr	r3, [r4, #16]
 8006480:	6861      	ldr	r1, [r4, #4]
 8006482:	4299      	cmp	r1, r3
 8006484:	bfde      	ittt	le
 8006486:	2330      	movle	r3, #48	@ 0x30
 8006488:	f806 3c01 	strble.w	r3, [r6, #-1]
 800648c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006490:	1b92      	subs	r2, r2, r6
 8006492:	6122      	str	r2, [r4, #16]
 8006494:	f8cd a000 	str.w	sl, [sp]
 8006498:	464b      	mov	r3, r9
 800649a:	aa03      	add	r2, sp, #12
 800649c:	4621      	mov	r1, r4
 800649e:	4640      	mov	r0, r8
 80064a0:	f7ff fee6 	bl	8006270 <_printf_common>
 80064a4:	3001      	adds	r0, #1
 80064a6:	d14a      	bne.n	800653e <_printf_i+0x1f2>
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	b004      	add	sp, #16
 80064ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	f043 0320 	orr.w	r3, r3, #32
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	4833      	ldr	r0, [pc, #204]	@ (8006588 <_printf_i+0x23c>)
 80064bc:	2778      	movs	r7, #120	@ 0x78
 80064be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	6831      	ldr	r1, [r6, #0]
 80064c6:	061f      	lsls	r7, r3, #24
 80064c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80064cc:	d402      	bmi.n	80064d4 <_printf_i+0x188>
 80064ce:	065f      	lsls	r7, r3, #25
 80064d0:	bf48      	it	mi
 80064d2:	b2ad      	uxthmi	r5, r5
 80064d4:	6031      	str	r1, [r6, #0]
 80064d6:	07d9      	lsls	r1, r3, #31
 80064d8:	bf44      	itt	mi
 80064da:	f043 0320 	orrmi.w	r3, r3, #32
 80064de:	6023      	strmi	r3, [r4, #0]
 80064e0:	b11d      	cbz	r5, 80064ea <_printf_i+0x19e>
 80064e2:	2310      	movs	r3, #16
 80064e4:	e7ac      	b.n	8006440 <_printf_i+0xf4>
 80064e6:	4827      	ldr	r0, [pc, #156]	@ (8006584 <_printf_i+0x238>)
 80064e8:	e7e9      	b.n	80064be <_printf_i+0x172>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	f023 0320 	bic.w	r3, r3, #32
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	e7f6      	b.n	80064e2 <_printf_i+0x196>
 80064f4:	4616      	mov	r6, r2
 80064f6:	e7bd      	b.n	8006474 <_printf_i+0x128>
 80064f8:	6833      	ldr	r3, [r6, #0]
 80064fa:	6825      	ldr	r5, [r4, #0]
 80064fc:	6961      	ldr	r1, [r4, #20]
 80064fe:	1d18      	adds	r0, r3, #4
 8006500:	6030      	str	r0, [r6, #0]
 8006502:	062e      	lsls	r6, r5, #24
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	d501      	bpl.n	800650c <_printf_i+0x1c0>
 8006508:	6019      	str	r1, [r3, #0]
 800650a:	e002      	b.n	8006512 <_printf_i+0x1c6>
 800650c:	0668      	lsls	r0, r5, #25
 800650e:	d5fb      	bpl.n	8006508 <_printf_i+0x1bc>
 8006510:	8019      	strh	r1, [r3, #0]
 8006512:	2300      	movs	r3, #0
 8006514:	6123      	str	r3, [r4, #16]
 8006516:	4616      	mov	r6, r2
 8006518:	e7bc      	b.n	8006494 <_printf_i+0x148>
 800651a:	6833      	ldr	r3, [r6, #0]
 800651c:	1d1a      	adds	r2, r3, #4
 800651e:	6032      	str	r2, [r6, #0]
 8006520:	681e      	ldr	r6, [r3, #0]
 8006522:	6862      	ldr	r2, [r4, #4]
 8006524:	2100      	movs	r1, #0
 8006526:	4630      	mov	r0, r6
 8006528:	f7f9 fe52 	bl	80001d0 <memchr>
 800652c:	b108      	cbz	r0, 8006532 <_printf_i+0x1e6>
 800652e:	1b80      	subs	r0, r0, r6
 8006530:	6060      	str	r0, [r4, #4]
 8006532:	6863      	ldr	r3, [r4, #4]
 8006534:	6123      	str	r3, [r4, #16]
 8006536:	2300      	movs	r3, #0
 8006538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800653c:	e7aa      	b.n	8006494 <_printf_i+0x148>
 800653e:	6923      	ldr	r3, [r4, #16]
 8006540:	4632      	mov	r2, r6
 8006542:	4649      	mov	r1, r9
 8006544:	4640      	mov	r0, r8
 8006546:	47d0      	blx	sl
 8006548:	3001      	adds	r0, #1
 800654a:	d0ad      	beq.n	80064a8 <_printf_i+0x15c>
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	079b      	lsls	r3, r3, #30
 8006550:	d413      	bmi.n	800657a <_printf_i+0x22e>
 8006552:	68e0      	ldr	r0, [r4, #12]
 8006554:	9b03      	ldr	r3, [sp, #12]
 8006556:	4298      	cmp	r0, r3
 8006558:	bfb8      	it	lt
 800655a:	4618      	movlt	r0, r3
 800655c:	e7a6      	b.n	80064ac <_printf_i+0x160>
 800655e:	2301      	movs	r3, #1
 8006560:	4632      	mov	r2, r6
 8006562:	4649      	mov	r1, r9
 8006564:	4640      	mov	r0, r8
 8006566:	47d0      	blx	sl
 8006568:	3001      	adds	r0, #1
 800656a:	d09d      	beq.n	80064a8 <_printf_i+0x15c>
 800656c:	3501      	adds	r5, #1
 800656e:	68e3      	ldr	r3, [r4, #12]
 8006570:	9903      	ldr	r1, [sp, #12]
 8006572:	1a5b      	subs	r3, r3, r1
 8006574:	42ab      	cmp	r3, r5
 8006576:	dcf2      	bgt.n	800655e <_printf_i+0x212>
 8006578:	e7eb      	b.n	8006552 <_printf_i+0x206>
 800657a:	2500      	movs	r5, #0
 800657c:	f104 0619 	add.w	r6, r4, #25
 8006580:	e7f5      	b.n	800656e <_printf_i+0x222>
 8006582:	bf00      	nop
 8006584:	0800aeb2 	.word	0x0800aeb2
 8006588:	0800aec3 	.word	0x0800aec3

0800658c <_scanf_float>:
 800658c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006590:	b087      	sub	sp, #28
 8006592:	4617      	mov	r7, r2
 8006594:	9303      	str	r3, [sp, #12]
 8006596:	688b      	ldr	r3, [r1, #8]
 8006598:	1e5a      	subs	r2, r3, #1
 800659a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800659e:	bf81      	itttt	hi
 80065a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80065a4:	eb03 0b05 	addhi.w	fp, r3, r5
 80065a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80065ac:	608b      	strhi	r3, [r1, #8]
 80065ae:	680b      	ldr	r3, [r1, #0]
 80065b0:	460a      	mov	r2, r1
 80065b2:	f04f 0500 	mov.w	r5, #0
 80065b6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80065ba:	f842 3b1c 	str.w	r3, [r2], #28
 80065be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80065c2:	4680      	mov	r8, r0
 80065c4:	460c      	mov	r4, r1
 80065c6:	bf98      	it	ls
 80065c8:	f04f 0b00 	movls.w	fp, #0
 80065cc:	9201      	str	r2, [sp, #4]
 80065ce:	4616      	mov	r6, r2
 80065d0:	46aa      	mov	sl, r5
 80065d2:	46a9      	mov	r9, r5
 80065d4:	9502      	str	r5, [sp, #8]
 80065d6:	68a2      	ldr	r2, [r4, #8]
 80065d8:	b152      	cbz	r2, 80065f0 <_scanf_float+0x64>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b4e      	cmp	r3, #78	@ 0x4e
 80065e0:	d864      	bhi.n	80066ac <_scanf_float+0x120>
 80065e2:	2b40      	cmp	r3, #64	@ 0x40
 80065e4:	d83c      	bhi.n	8006660 <_scanf_float+0xd4>
 80065e6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80065ea:	b2c8      	uxtb	r0, r1
 80065ec:	280e      	cmp	r0, #14
 80065ee:	d93a      	bls.n	8006666 <_scanf_float+0xda>
 80065f0:	f1b9 0f00 	cmp.w	r9, #0
 80065f4:	d003      	beq.n	80065fe <_scanf_float+0x72>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006602:	f1ba 0f01 	cmp.w	sl, #1
 8006606:	f200 8117 	bhi.w	8006838 <_scanf_float+0x2ac>
 800660a:	9b01      	ldr	r3, [sp, #4]
 800660c:	429e      	cmp	r6, r3
 800660e:	f200 8108 	bhi.w	8006822 <_scanf_float+0x296>
 8006612:	2001      	movs	r0, #1
 8006614:	b007      	add	sp, #28
 8006616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800661e:	2a0d      	cmp	r2, #13
 8006620:	d8e6      	bhi.n	80065f0 <_scanf_float+0x64>
 8006622:	a101      	add	r1, pc, #4	@ (adr r1, 8006628 <_scanf_float+0x9c>)
 8006624:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006628:	0800676f 	.word	0x0800676f
 800662c:	080065f1 	.word	0x080065f1
 8006630:	080065f1 	.word	0x080065f1
 8006634:	080065f1 	.word	0x080065f1
 8006638:	080067cf 	.word	0x080067cf
 800663c:	080067a7 	.word	0x080067a7
 8006640:	080065f1 	.word	0x080065f1
 8006644:	080065f1 	.word	0x080065f1
 8006648:	0800677d 	.word	0x0800677d
 800664c:	080065f1 	.word	0x080065f1
 8006650:	080065f1 	.word	0x080065f1
 8006654:	080065f1 	.word	0x080065f1
 8006658:	080065f1 	.word	0x080065f1
 800665c:	08006735 	.word	0x08006735
 8006660:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006664:	e7db      	b.n	800661e <_scanf_float+0x92>
 8006666:	290e      	cmp	r1, #14
 8006668:	d8c2      	bhi.n	80065f0 <_scanf_float+0x64>
 800666a:	a001      	add	r0, pc, #4	@ (adr r0, 8006670 <_scanf_float+0xe4>)
 800666c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006670:	08006725 	.word	0x08006725
 8006674:	080065f1 	.word	0x080065f1
 8006678:	08006725 	.word	0x08006725
 800667c:	080067bb 	.word	0x080067bb
 8006680:	080065f1 	.word	0x080065f1
 8006684:	080066cd 	.word	0x080066cd
 8006688:	0800670b 	.word	0x0800670b
 800668c:	0800670b 	.word	0x0800670b
 8006690:	0800670b 	.word	0x0800670b
 8006694:	0800670b 	.word	0x0800670b
 8006698:	0800670b 	.word	0x0800670b
 800669c:	0800670b 	.word	0x0800670b
 80066a0:	0800670b 	.word	0x0800670b
 80066a4:	0800670b 	.word	0x0800670b
 80066a8:	0800670b 	.word	0x0800670b
 80066ac:	2b6e      	cmp	r3, #110	@ 0x6e
 80066ae:	d809      	bhi.n	80066c4 <_scanf_float+0x138>
 80066b0:	2b60      	cmp	r3, #96	@ 0x60
 80066b2:	d8b2      	bhi.n	800661a <_scanf_float+0x8e>
 80066b4:	2b54      	cmp	r3, #84	@ 0x54
 80066b6:	d07b      	beq.n	80067b0 <_scanf_float+0x224>
 80066b8:	2b59      	cmp	r3, #89	@ 0x59
 80066ba:	d199      	bne.n	80065f0 <_scanf_float+0x64>
 80066bc:	2d07      	cmp	r5, #7
 80066be:	d197      	bne.n	80065f0 <_scanf_float+0x64>
 80066c0:	2508      	movs	r5, #8
 80066c2:	e02c      	b.n	800671e <_scanf_float+0x192>
 80066c4:	2b74      	cmp	r3, #116	@ 0x74
 80066c6:	d073      	beq.n	80067b0 <_scanf_float+0x224>
 80066c8:	2b79      	cmp	r3, #121	@ 0x79
 80066ca:	e7f6      	b.n	80066ba <_scanf_float+0x12e>
 80066cc:	6821      	ldr	r1, [r4, #0]
 80066ce:	05c8      	lsls	r0, r1, #23
 80066d0:	d51b      	bpl.n	800670a <_scanf_float+0x17e>
 80066d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80066d6:	6021      	str	r1, [r4, #0]
 80066d8:	f109 0901 	add.w	r9, r9, #1
 80066dc:	f1bb 0f00 	cmp.w	fp, #0
 80066e0:	d003      	beq.n	80066ea <_scanf_float+0x15e>
 80066e2:	3201      	adds	r2, #1
 80066e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066e8:	60a2      	str	r2, [r4, #8]
 80066ea:	68a3      	ldr	r3, [r4, #8]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	60a3      	str	r3, [r4, #8]
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	3301      	adds	r3, #1
 80066f4:	6123      	str	r3, [r4, #16]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	3b01      	subs	r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	607b      	str	r3, [r7, #4]
 80066fe:	f340 8087 	ble.w	8006810 <_scanf_float+0x284>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	3301      	adds	r3, #1
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	e765      	b.n	80065d6 <_scanf_float+0x4a>
 800670a:	eb1a 0105 	adds.w	r1, sl, r5
 800670e:	f47f af6f 	bne.w	80065f0 <_scanf_float+0x64>
 8006712:	6822      	ldr	r2, [r4, #0]
 8006714:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006718:	6022      	str	r2, [r4, #0]
 800671a:	460d      	mov	r5, r1
 800671c:	468a      	mov	sl, r1
 800671e:	f806 3b01 	strb.w	r3, [r6], #1
 8006722:	e7e2      	b.n	80066ea <_scanf_float+0x15e>
 8006724:	6822      	ldr	r2, [r4, #0]
 8006726:	0610      	lsls	r0, r2, #24
 8006728:	f57f af62 	bpl.w	80065f0 <_scanf_float+0x64>
 800672c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006730:	6022      	str	r2, [r4, #0]
 8006732:	e7f4      	b.n	800671e <_scanf_float+0x192>
 8006734:	f1ba 0f00 	cmp.w	sl, #0
 8006738:	d10e      	bne.n	8006758 <_scanf_float+0x1cc>
 800673a:	f1b9 0f00 	cmp.w	r9, #0
 800673e:	d10e      	bne.n	800675e <_scanf_float+0x1d2>
 8006740:	6822      	ldr	r2, [r4, #0]
 8006742:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006746:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800674a:	d108      	bne.n	800675e <_scanf_float+0x1d2>
 800674c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006750:	6022      	str	r2, [r4, #0]
 8006752:	f04f 0a01 	mov.w	sl, #1
 8006756:	e7e2      	b.n	800671e <_scanf_float+0x192>
 8006758:	f1ba 0f02 	cmp.w	sl, #2
 800675c:	d055      	beq.n	800680a <_scanf_float+0x27e>
 800675e:	2d01      	cmp	r5, #1
 8006760:	d002      	beq.n	8006768 <_scanf_float+0x1dc>
 8006762:	2d04      	cmp	r5, #4
 8006764:	f47f af44 	bne.w	80065f0 <_scanf_float+0x64>
 8006768:	3501      	adds	r5, #1
 800676a:	b2ed      	uxtb	r5, r5
 800676c:	e7d7      	b.n	800671e <_scanf_float+0x192>
 800676e:	f1ba 0f01 	cmp.w	sl, #1
 8006772:	f47f af3d 	bne.w	80065f0 <_scanf_float+0x64>
 8006776:	f04f 0a02 	mov.w	sl, #2
 800677a:	e7d0      	b.n	800671e <_scanf_float+0x192>
 800677c:	b97d      	cbnz	r5, 800679e <_scanf_float+0x212>
 800677e:	f1b9 0f00 	cmp.w	r9, #0
 8006782:	f47f af38 	bne.w	80065f6 <_scanf_float+0x6a>
 8006786:	6822      	ldr	r2, [r4, #0]
 8006788:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800678c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006790:	f040 8108 	bne.w	80069a4 <_scanf_float+0x418>
 8006794:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006798:	6022      	str	r2, [r4, #0]
 800679a:	2501      	movs	r5, #1
 800679c:	e7bf      	b.n	800671e <_scanf_float+0x192>
 800679e:	2d03      	cmp	r5, #3
 80067a0:	d0e2      	beq.n	8006768 <_scanf_float+0x1dc>
 80067a2:	2d05      	cmp	r5, #5
 80067a4:	e7de      	b.n	8006764 <_scanf_float+0x1d8>
 80067a6:	2d02      	cmp	r5, #2
 80067a8:	f47f af22 	bne.w	80065f0 <_scanf_float+0x64>
 80067ac:	2503      	movs	r5, #3
 80067ae:	e7b6      	b.n	800671e <_scanf_float+0x192>
 80067b0:	2d06      	cmp	r5, #6
 80067b2:	f47f af1d 	bne.w	80065f0 <_scanf_float+0x64>
 80067b6:	2507      	movs	r5, #7
 80067b8:	e7b1      	b.n	800671e <_scanf_float+0x192>
 80067ba:	6822      	ldr	r2, [r4, #0]
 80067bc:	0591      	lsls	r1, r2, #22
 80067be:	f57f af17 	bpl.w	80065f0 <_scanf_float+0x64>
 80067c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80067c6:	6022      	str	r2, [r4, #0]
 80067c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80067cc:	e7a7      	b.n	800671e <_scanf_float+0x192>
 80067ce:	6822      	ldr	r2, [r4, #0]
 80067d0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80067d4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80067d8:	d006      	beq.n	80067e8 <_scanf_float+0x25c>
 80067da:	0550      	lsls	r0, r2, #21
 80067dc:	f57f af08 	bpl.w	80065f0 <_scanf_float+0x64>
 80067e0:	f1b9 0f00 	cmp.w	r9, #0
 80067e4:	f000 80de 	beq.w	80069a4 <_scanf_float+0x418>
 80067e8:	0591      	lsls	r1, r2, #22
 80067ea:	bf58      	it	pl
 80067ec:	9902      	ldrpl	r1, [sp, #8]
 80067ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80067f2:	bf58      	it	pl
 80067f4:	eba9 0101 	subpl.w	r1, r9, r1
 80067f8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80067fc:	bf58      	it	pl
 80067fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006802:	6022      	str	r2, [r4, #0]
 8006804:	f04f 0900 	mov.w	r9, #0
 8006808:	e789      	b.n	800671e <_scanf_float+0x192>
 800680a:	f04f 0a03 	mov.w	sl, #3
 800680e:	e786      	b.n	800671e <_scanf_float+0x192>
 8006810:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006814:	4639      	mov	r1, r7
 8006816:	4640      	mov	r0, r8
 8006818:	4798      	blx	r3
 800681a:	2800      	cmp	r0, #0
 800681c:	f43f aedb 	beq.w	80065d6 <_scanf_float+0x4a>
 8006820:	e6e6      	b.n	80065f0 <_scanf_float+0x64>
 8006822:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006826:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800682a:	463a      	mov	r2, r7
 800682c:	4640      	mov	r0, r8
 800682e:	4798      	blx	r3
 8006830:	6923      	ldr	r3, [r4, #16]
 8006832:	3b01      	subs	r3, #1
 8006834:	6123      	str	r3, [r4, #16]
 8006836:	e6e8      	b.n	800660a <_scanf_float+0x7e>
 8006838:	1e6b      	subs	r3, r5, #1
 800683a:	2b06      	cmp	r3, #6
 800683c:	d824      	bhi.n	8006888 <_scanf_float+0x2fc>
 800683e:	2d02      	cmp	r5, #2
 8006840:	d836      	bhi.n	80068b0 <_scanf_float+0x324>
 8006842:	9b01      	ldr	r3, [sp, #4]
 8006844:	429e      	cmp	r6, r3
 8006846:	f67f aee4 	bls.w	8006612 <_scanf_float+0x86>
 800684a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800684e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006852:	463a      	mov	r2, r7
 8006854:	4640      	mov	r0, r8
 8006856:	4798      	blx	r3
 8006858:	6923      	ldr	r3, [r4, #16]
 800685a:	3b01      	subs	r3, #1
 800685c:	6123      	str	r3, [r4, #16]
 800685e:	e7f0      	b.n	8006842 <_scanf_float+0x2b6>
 8006860:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006864:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006868:	463a      	mov	r2, r7
 800686a:	4640      	mov	r0, r8
 800686c:	4798      	blx	r3
 800686e:	6923      	ldr	r3, [r4, #16]
 8006870:	3b01      	subs	r3, #1
 8006872:	6123      	str	r3, [r4, #16]
 8006874:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006878:	fa5f fa8a 	uxtb.w	sl, sl
 800687c:	f1ba 0f02 	cmp.w	sl, #2
 8006880:	d1ee      	bne.n	8006860 <_scanf_float+0x2d4>
 8006882:	3d03      	subs	r5, #3
 8006884:	b2ed      	uxtb	r5, r5
 8006886:	1b76      	subs	r6, r6, r5
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	05da      	lsls	r2, r3, #23
 800688c:	d530      	bpl.n	80068f0 <_scanf_float+0x364>
 800688e:	055b      	lsls	r3, r3, #21
 8006890:	d511      	bpl.n	80068b6 <_scanf_float+0x32a>
 8006892:	9b01      	ldr	r3, [sp, #4]
 8006894:	429e      	cmp	r6, r3
 8006896:	f67f aebc 	bls.w	8006612 <_scanf_float+0x86>
 800689a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800689e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068a2:	463a      	mov	r2, r7
 80068a4:	4640      	mov	r0, r8
 80068a6:	4798      	blx	r3
 80068a8:	6923      	ldr	r3, [r4, #16]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	6123      	str	r3, [r4, #16]
 80068ae:	e7f0      	b.n	8006892 <_scanf_float+0x306>
 80068b0:	46aa      	mov	sl, r5
 80068b2:	46b3      	mov	fp, r6
 80068b4:	e7de      	b.n	8006874 <_scanf_float+0x2e8>
 80068b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80068ba:	6923      	ldr	r3, [r4, #16]
 80068bc:	2965      	cmp	r1, #101	@ 0x65
 80068be:	f103 33ff 	add.w	r3, r3, #4294967295
 80068c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80068c6:	6123      	str	r3, [r4, #16]
 80068c8:	d00c      	beq.n	80068e4 <_scanf_float+0x358>
 80068ca:	2945      	cmp	r1, #69	@ 0x45
 80068cc:	d00a      	beq.n	80068e4 <_scanf_float+0x358>
 80068ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068d2:	463a      	mov	r2, r7
 80068d4:	4640      	mov	r0, r8
 80068d6:	4798      	blx	r3
 80068d8:	6923      	ldr	r3, [r4, #16]
 80068da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80068de:	3b01      	subs	r3, #1
 80068e0:	1eb5      	subs	r5, r6, #2
 80068e2:	6123      	str	r3, [r4, #16]
 80068e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068e8:	463a      	mov	r2, r7
 80068ea:	4640      	mov	r0, r8
 80068ec:	4798      	blx	r3
 80068ee:	462e      	mov	r6, r5
 80068f0:	6822      	ldr	r2, [r4, #0]
 80068f2:	f012 0210 	ands.w	r2, r2, #16
 80068f6:	d001      	beq.n	80068fc <_scanf_float+0x370>
 80068f8:	2000      	movs	r0, #0
 80068fa:	e68b      	b.n	8006614 <_scanf_float+0x88>
 80068fc:	7032      	strb	r2, [r6, #0]
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006908:	d11c      	bne.n	8006944 <_scanf_float+0x3b8>
 800690a:	9b02      	ldr	r3, [sp, #8]
 800690c:	454b      	cmp	r3, r9
 800690e:	eba3 0209 	sub.w	r2, r3, r9
 8006912:	d123      	bne.n	800695c <_scanf_float+0x3d0>
 8006914:	9901      	ldr	r1, [sp, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	4640      	mov	r0, r8
 800691a:	f002 fc2d 	bl	8009178 <_strtod_r>
 800691e:	9b03      	ldr	r3, [sp, #12]
 8006920:	6821      	ldr	r1, [r4, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f011 0f02 	tst.w	r1, #2
 8006928:	ec57 6b10 	vmov	r6, r7, d0
 800692c:	f103 0204 	add.w	r2, r3, #4
 8006930:	d01f      	beq.n	8006972 <_scanf_float+0x3e6>
 8006932:	9903      	ldr	r1, [sp, #12]
 8006934:	600a      	str	r2, [r1, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	e9c3 6700 	strd	r6, r7, [r3]
 800693c:	68e3      	ldr	r3, [r4, #12]
 800693e:	3301      	adds	r3, #1
 8006940:	60e3      	str	r3, [r4, #12]
 8006942:	e7d9      	b.n	80068f8 <_scanf_float+0x36c>
 8006944:	9b04      	ldr	r3, [sp, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0e4      	beq.n	8006914 <_scanf_float+0x388>
 800694a:	9905      	ldr	r1, [sp, #20]
 800694c:	230a      	movs	r3, #10
 800694e:	3101      	adds	r1, #1
 8006950:	4640      	mov	r0, r8
 8006952:	f7ff f9b7 	bl	8005cc4 <_strtol_r>
 8006956:	9b04      	ldr	r3, [sp, #16]
 8006958:	9e05      	ldr	r6, [sp, #20]
 800695a:	1ac2      	subs	r2, r0, r3
 800695c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006960:	429e      	cmp	r6, r3
 8006962:	bf28      	it	cs
 8006964:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006968:	4910      	ldr	r1, [pc, #64]	@ (80069ac <_scanf_float+0x420>)
 800696a:	4630      	mov	r0, r6
 800696c:	f000 f8e4 	bl	8006b38 <siprintf>
 8006970:	e7d0      	b.n	8006914 <_scanf_float+0x388>
 8006972:	f011 0f04 	tst.w	r1, #4
 8006976:	9903      	ldr	r1, [sp, #12]
 8006978:	600a      	str	r2, [r1, #0]
 800697a:	d1dc      	bne.n	8006936 <_scanf_float+0x3aa>
 800697c:	681d      	ldr	r5, [r3, #0]
 800697e:	4632      	mov	r2, r6
 8006980:	463b      	mov	r3, r7
 8006982:	4630      	mov	r0, r6
 8006984:	4639      	mov	r1, r7
 8006986:	f7fa f8d1 	bl	8000b2c <__aeabi_dcmpun>
 800698a:	b128      	cbz	r0, 8006998 <_scanf_float+0x40c>
 800698c:	4808      	ldr	r0, [pc, #32]	@ (80069b0 <_scanf_float+0x424>)
 800698e:	f000 f9cd 	bl	8006d2c <nanf>
 8006992:	ed85 0a00 	vstr	s0, [r5]
 8006996:	e7d1      	b.n	800693c <_scanf_float+0x3b0>
 8006998:	4630      	mov	r0, r6
 800699a:	4639      	mov	r1, r7
 800699c:	f7fa f924 	bl	8000be8 <__aeabi_d2f>
 80069a0:	6028      	str	r0, [r5, #0]
 80069a2:	e7cb      	b.n	800693c <_scanf_float+0x3b0>
 80069a4:	f04f 0900 	mov.w	r9, #0
 80069a8:	e629      	b.n	80065fe <_scanf_float+0x72>
 80069aa:	bf00      	nop
 80069ac:	0800aed4 	.word	0x0800aed4
 80069b0:	0800af14 	.word	0x0800af14

080069b4 <std>:
 80069b4:	2300      	movs	r3, #0
 80069b6:	b510      	push	{r4, lr}
 80069b8:	4604      	mov	r4, r0
 80069ba:	e9c0 3300 	strd	r3, r3, [r0]
 80069be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069c2:	6083      	str	r3, [r0, #8]
 80069c4:	8181      	strh	r1, [r0, #12]
 80069c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80069c8:	81c2      	strh	r2, [r0, #14]
 80069ca:	6183      	str	r3, [r0, #24]
 80069cc:	4619      	mov	r1, r3
 80069ce:	2208      	movs	r2, #8
 80069d0:	305c      	adds	r0, #92	@ 0x5c
 80069d2:	f000 f914 	bl	8006bfe <memset>
 80069d6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a0c <std+0x58>)
 80069d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80069da:	4b0d      	ldr	r3, [pc, #52]	@ (8006a10 <std+0x5c>)
 80069dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80069de:	4b0d      	ldr	r3, [pc, #52]	@ (8006a14 <std+0x60>)
 80069e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80069e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a18 <std+0x64>)
 80069e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80069e6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a1c <std+0x68>)
 80069e8:	6224      	str	r4, [r4, #32]
 80069ea:	429c      	cmp	r4, r3
 80069ec:	d006      	beq.n	80069fc <std+0x48>
 80069ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80069f2:	4294      	cmp	r4, r2
 80069f4:	d002      	beq.n	80069fc <std+0x48>
 80069f6:	33d0      	adds	r3, #208	@ 0xd0
 80069f8:	429c      	cmp	r4, r3
 80069fa:	d105      	bne.n	8006a08 <std+0x54>
 80069fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a04:	f000 b978 	b.w	8006cf8 <__retarget_lock_init_recursive>
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	bf00      	nop
 8006a0c:	08006b79 	.word	0x08006b79
 8006a10:	08006b9b 	.word	0x08006b9b
 8006a14:	08006bd3 	.word	0x08006bd3
 8006a18:	08006bf7 	.word	0x08006bf7
 8006a1c:	20000a68 	.word	0x20000a68

08006a20 <stdio_exit_handler>:
 8006a20:	4a02      	ldr	r2, [pc, #8]	@ (8006a2c <stdio_exit_handler+0xc>)
 8006a22:	4903      	ldr	r1, [pc, #12]	@ (8006a30 <stdio_exit_handler+0x10>)
 8006a24:	4803      	ldr	r0, [pc, #12]	@ (8006a34 <stdio_exit_handler+0x14>)
 8006a26:	f000 b869 	b.w	8006afc <_fwalk_sglue>
 8006a2a:	bf00      	nop
 8006a2c:	200000f8 	.word	0x200000f8
 8006a30:	0800953d 	.word	0x0800953d
 8006a34:	20000108 	.word	0x20000108

08006a38 <cleanup_stdio>:
 8006a38:	6841      	ldr	r1, [r0, #4]
 8006a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a6c <cleanup_stdio+0x34>)
 8006a3c:	4299      	cmp	r1, r3
 8006a3e:	b510      	push	{r4, lr}
 8006a40:	4604      	mov	r4, r0
 8006a42:	d001      	beq.n	8006a48 <cleanup_stdio+0x10>
 8006a44:	f002 fd7a 	bl	800953c <_fflush_r>
 8006a48:	68a1      	ldr	r1, [r4, #8]
 8006a4a:	4b09      	ldr	r3, [pc, #36]	@ (8006a70 <cleanup_stdio+0x38>)
 8006a4c:	4299      	cmp	r1, r3
 8006a4e:	d002      	beq.n	8006a56 <cleanup_stdio+0x1e>
 8006a50:	4620      	mov	r0, r4
 8006a52:	f002 fd73 	bl	800953c <_fflush_r>
 8006a56:	68e1      	ldr	r1, [r4, #12]
 8006a58:	4b06      	ldr	r3, [pc, #24]	@ (8006a74 <cleanup_stdio+0x3c>)
 8006a5a:	4299      	cmp	r1, r3
 8006a5c:	d004      	beq.n	8006a68 <cleanup_stdio+0x30>
 8006a5e:	4620      	mov	r0, r4
 8006a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a64:	f002 bd6a 	b.w	800953c <_fflush_r>
 8006a68:	bd10      	pop	{r4, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000a68 	.word	0x20000a68
 8006a70:	20000ad0 	.word	0x20000ad0
 8006a74:	20000b38 	.word	0x20000b38

08006a78 <global_stdio_init.part.0>:
 8006a78:	b510      	push	{r4, lr}
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <global_stdio_init.part.0+0x30>)
 8006a7c:	4c0b      	ldr	r4, [pc, #44]	@ (8006aac <global_stdio_init.part.0+0x34>)
 8006a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ab0 <global_stdio_init.part.0+0x38>)
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	4620      	mov	r0, r4
 8006a84:	2200      	movs	r2, #0
 8006a86:	2104      	movs	r1, #4
 8006a88:	f7ff ff94 	bl	80069b4 <std>
 8006a8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a90:	2201      	movs	r2, #1
 8006a92:	2109      	movs	r1, #9
 8006a94:	f7ff ff8e 	bl	80069b4 <std>
 8006a98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa2:	2112      	movs	r1, #18
 8006aa4:	f7ff bf86 	b.w	80069b4 <std>
 8006aa8:	20000ba0 	.word	0x20000ba0
 8006aac:	20000a68 	.word	0x20000a68
 8006ab0:	08006a21 	.word	0x08006a21

08006ab4 <__sfp_lock_acquire>:
 8006ab4:	4801      	ldr	r0, [pc, #4]	@ (8006abc <__sfp_lock_acquire+0x8>)
 8006ab6:	f000 b920 	b.w	8006cfa <__retarget_lock_acquire_recursive>
 8006aba:	bf00      	nop
 8006abc:	20000ba9 	.word	0x20000ba9

08006ac0 <__sfp_lock_release>:
 8006ac0:	4801      	ldr	r0, [pc, #4]	@ (8006ac8 <__sfp_lock_release+0x8>)
 8006ac2:	f000 b91b 	b.w	8006cfc <__retarget_lock_release_recursive>
 8006ac6:	bf00      	nop
 8006ac8:	20000ba9 	.word	0x20000ba9

08006acc <__sinit>:
 8006acc:	b510      	push	{r4, lr}
 8006ace:	4604      	mov	r4, r0
 8006ad0:	f7ff fff0 	bl	8006ab4 <__sfp_lock_acquire>
 8006ad4:	6a23      	ldr	r3, [r4, #32]
 8006ad6:	b11b      	cbz	r3, 8006ae0 <__sinit+0x14>
 8006ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006adc:	f7ff bff0 	b.w	8006ac0 <__sfp_lock_release>
 8006ae0:	4b04      	ldr	r3, [pc, #16]	@ (8006af4 <__sinit+0x28>)
 8006ae2:	6223      	str	r3, [r4, #32]
 8006ae4:	4b04      	ldr	r3, [pc, #16]	@ (8006af8 <__sinit+0x2c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f5      	bne.n	8006ad8 <__sinit+0xc>
 8006aec:	f7ff ffc4 	bl	8006a78 <global_stdio_init.part.0>
 8006af0:	e7f2      	b.n	8006ad8 <__sinit+0xc>
 8006af2:	bf00      	nop
 8006af4:	08006a39 	.word	0x08006a39
 8006af8:	20000ba0 	.word	0x20000ba0

08006afc <_fwalk_sglue>:
 8006afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b00:	4607      	mov	r7, r0
 8006b02:	4688      	mov	r8, r1
 8006b04:	4614      	mov	r4, r2
 8006b06:	2600      	movs	r6, #0
 8006b08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b0c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b10:	d505      	bpl.n	8006b1e <_fwalk_sglue+0x22>
 8006b12:	6824      	ldr	r4, [r4, #0]
 8006b14:	2c00      	cmp	r4, #0
 8006b16:	d1f7      	bne.n	8006b08 <_fwalk_sglue+0xc>
 8006b18:	4630      	mov	r0, r6
 8006b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b1e:	89ab      	ldrh	r3, [r5, #12]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d907      	bls.n	8006b34 <_fwalk_sglue+0x38>
 8006b24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	d003      	beq.n	8006b34 <_fwalk_sglue+0x38>
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	4638      	mov	r0, r7
 8006b30:	47c0      	blx	r8
 8006b32:	4306      	orrs	r6, r0
 8006b34:	3568      	adds	r5, #104	@ 0x68
 8006b36:	e7e9      	b.n	8006b0c <_fwalk_sglue+0x10>

08006b38 <siprintf>:
 8006b38:	b40e      	push	{r1, r2, r3}
 8006b3a:	b500      	push	{lr}
 8006b3c:	b09c      	sub	sp, #112	@ 0x70
 8006b3e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b40:	9002      	str	r0, [sp, #8]
 8006b42:	9006      	str	r0, [sp, #24]
 8006b44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b48:	4809      	ldr	r0, [pc, #36]	@ (8006b70 <siprintf+0x38>)
 8006b4a:	9107      	str	r1, [sp, #28]
 8006b4c:	9104      	str	r1, [sp, #16]
 8006b4e:	4909      	ldr	r1, [pc, #36]	@ (8006b74 <siprintf+0x3c>)
 8006b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b54:	9105      	str	r1, [sp, #20]
 8006b56:	6800      	ldr	r0, [r0, #0]
 8006b58:	9301      	str	r3, [sp, #4]
 8006b5a:	a902      	add	r1, sp, #8
 8006b5c:	f002 fb6e 	bl	800923c <_svfiprintf_r>
 8006b60:	9b02      	ldr	r3, [sp, #8]
 8006b62:	2200      	movs	r2, #0
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	b01c      	add	sp, #112	@ 0x70
 8006b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b6c:	b003      	add	sp, #12
 8006b6e:	4770      	bx	lr
 8006b70:	20000104 	.word	0x20000104
 8006b74:	ffff0208 	.word	0xffff0208

08006b78 <__sread>:
 8006b78:	b510      	push	{r4, lr}
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b80:	f000 f86c 	bl	8006c5c <_read_r>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	bfab      	itete	ge
 8006b88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b8a:	89a3      	ldrhlt	r3, [r4, #12]
 8006b8c:	181b      	addge	r3, r3, r0
 8006b8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b92:	bfac      	ite	ge
 8006b94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b96:	81a3      	strhlt	r3, [r4, #12]
 8006b98:	bd10      	pop	{r4, pc}

08006b9a <__swrite>:
 8006b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b9e:	461f      	mov	r7, r3
 8006ba0:	898b      	ldrh	r3, [r1, #12]
 8006ba2:	05db      	lsls	r3, r3, #23
 8006ba4:	4605      	mov	r5, r0
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	4616      	mov	r6, r2
 8006baa:	d505      	bpl.n	8006bb8 <__swrite+0x1e>
 8006bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f000 f840 	bl	8006c38 <_lseek_r>
 8006bb8:	89a3      	ldrh	r3, [r4, #12]
 8006bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bc2:	81a3      	strh	r3, [r4, #12]
 8006bc4:	4632      	mov	r2, r6
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	4628      	mov	r0, r5
 8006bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bce:	f000 b857 	b.w	8006c80 <_write_r>

08006bd2 <__sseek>:
 8006bd2:	b510      	push	{r4, lr}
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bda:	f000 f82d 	bl	8006c38 <_lseek_r>
 8006bde:	1c43      	adds	r3, r0, #1
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	bf15      	itete	ne
 8006be4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006be6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006bea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006bee:	81a3      	strheq	r3, [r4, #12]
 8006bf0:	bf18      	it	ne
 8006bf2:	81a3      	strhne	r3, [r4, #12]
 8006bf4:	bd10      	pop	{r4, pc}

08006bf6 <__sclose>:
 8006bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfa:	f000 b80d 	b.w	8006c18 <_close_r>

08006bfe <memset>:
 8006bfe:	4402      	add	r2, r0
 8006c00:	4603      	mov	r3, r0
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d100      	bne.n	8006c08 <memset+0xa>
 8006c06:	4770      	bx	lr
 8006c08:	f803 1b01 	strb.w	r1, [r3], #1
 8006c0c:	e7f9      	b.n	8006c02 <memset+0x4>
	...

08006c10 <_localeconv_r>:
 8006c10:	4800      	ldr	r0, [pc, #0]	@ (8006c14 <_localeconv_r+0x4>)
 8006c12:	4770      	bx	lr
 8006c14:	20000244 	.word	0x20000244

08006c18 <_close_r>:
 8006c18:	b538      	push	{r3, r4, r5, lr}
 8006c1a:	4d06      	ldr	r5, [pc, #24]	@ (8006c34 <_close_r+0x1c>)
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	4604      	mov	r4, r0
 8006c20:	4608      	mov	r0, r1
 8006c22:	602b      	str	r3, [r5, #0]
 8006c24:	f7fb f987 	bl	8001f36 <_close>
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	d102      	bne.n	8006c32 <_close_r+0x1a>
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	b103      	cbz	r3, 8006c32 <_close_r+0x1a>
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	20000ba4 	.word	0x20000ba4

08006c38 <_lseek_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	4d07      	ldr	r5, [pc, #28]	@ (8006c58 <_lseek_r+0x20>)
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	4608      	mov	r0, r1
 8006c40:	4611      	mov	r1, r2
 8006c42:	2200      	movs	r2, #0
 8006c44:	602a      	str	r2, [r5, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	f7fb f99c 	bl	8001f84 <_lseek>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d102      	bne.n	8006c56 <_lseek_r+0x1e>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	b103      	cbz	r3, 8006c56 <_lseek_r+0x1e>
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	20000ba4 	.word	0x20000ba4

08006c5c <_read_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	4d07      	ldr	r5, [pc, #28]	@ (8006c7c <_read_r+0x20>)
 8006c60:	4604      	mov	r4, r0
 8006c62:	4608      	mov	r0, r1
 8006c64:	4611      	mov	r1, r2
 8006c66:	2200      	movs	r2, #0
 8006c68:	602a      	str	r2, [r5, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f7fb f92a 	bl	8001ec4 <_read>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d102      	bne.n	8006c7a <_read_r+0x1e>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	b103      	cbz	r3, 8006c7a <_read_r+0x1e>
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	20000ba4 	.word	0x20000ba4

08006c80 <_write_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d07      	ldr	r5, [pc, #28]	@ (8006ca0 <_write_r+0x20>)
 8006c84:	4604      	mov	r4, r0
 8006c86:	4608      	mov	r0, r1
 8006c88:	4611      	mov	r1, r2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	602a      	str	r2, [r5, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f7fb f935 	bl	8001efe <_write>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	d102      	bne.n	8006c9e <_write_r+0x1e>
 8006c98:	682b      	ldr	r3, [r5, #0]
 8006c9a:	b103      	cbz	r3, 8006c9e <_write_r+0x1e>
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	20000ba4 	.word	0x20000ba4

08006ca4 <__errno>:
 8006ca4:	4b01      	ldr	r3, [pc, #4]	@ (8006cac <__errno+0x8>)
 8006ca6:	6818      	ldr	r0, [r3, #0]
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	20000104 	.word	0x20000104

08006cb0 <__libc_init_array>:
 8006cb0:	b570      	push	{r4, r5, r6, lr}
 8006cb2:	4d0d      	ldr	r5, [pc, #52]	@ (8006ce8 <__libc_init_array+0x38>)
 8006cb4:	4c0d      	ldr	r4, [pc, #52]	@ (8006cec <__libc_init_array+0x3c>)
 8006cb6:	1b64      	subs	r4, r4, r5
 8006cb8:	10a4      	asrs	r4, r4, #2
 8006cba:	2600      	movs	r6, #0
 8006cbc:	42a6      	cmp	r6, r4
 8006cbe:	d109      	bne.n	8006cd4 <__libc_init_array+0x24>
 8006cc0:	4d0b      	ldr	r5, [pc, #44]	@ (8006cf0 <__libc_init_array+0x40>)
 8006cc2:	4c0c      	ldr	r4, [pc, #48]	@ (8006cf4 <__libc_init_array+0x44>)
 8006cc4:	f003 fafe 	bl	800a2c4 <_init>
 8006cc8:	1b64      	subs	r4, r4, r5
 8006cca:	10a4      	asrs	r4, r4, #2
 8006ccc:	2600      	movs	r6, #0
 8006cce:	42a6      	cmp	r6, r4
 8006cd0:	d105      	bne.n	8006cde <__libc_init_array+0x2e>
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd8:	4798      	blx	r3
 8006cda:	3601      	adds	r6, #1
 8006cdc:	e7ee      	b.n	8006cbc <__libc_init_array+0xc>
 8006cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce2:	4798      	blx	r3
 8006ce4:	3601      	adds	r6, #1
 8006ce6:	e7f2      	b.n	8006cce <__libc_init_array+0x1e>
 8006ce8:	0800b1bc 	.word	0x0800b1bc
 8006cec:	0800b1bc 	.word	0x0800b1bc
 8006cf0:	0800b1bc 	.word	0x0800b1bc
 8006cf4:	0800b1c0 	.word	0x0800b1c0

08006cf8 <__retarget_lock_init_recursive>:
 8006cf8:	4770      	bx	lr

08006cfa <__retarget_lock_acquire_recursive>:
 8006cfa:	4770      	bx	lr

08006cfc <__retarget_lock_release_recursive>:
 8006cfc:	4770      	bx	lr

08006cfe <strcpy>:
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d04:	f803 2b01 	strb.w	r2, [r3], #1
 8006d08:	2a00      	cmp	r2, #0
 8006d0a:	d1f9      	bne.n	8006d00 <strcpy+0x2>
 8006d0c:	4770      	bx	lr

08006d0e <memcpy>:
 8006d0e:	440a      	add	r2, r1
 8006d10:	4291      	cmp	r1, r2
 8006d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d16:	d100      	bne.n	8006d1a <memcpy+0xc>
 8006d18:	4770      	bx	lr
 8006d1a:	b510      	push	{r4, lr}
 8006d1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d24:	4291      	cmp	r1, r2
 8006d26:	d1f9      	bne.n	8006d1c <memcpy+0xe>
 8006d28:	bd10      	pop	{r4, pc}
	...

08006d2c <nanf>:
 8006d2c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006d34 <nanf+0x8>
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	7fc00000 	.word	0x7fc00000

08006d38 <__assert_func>:
 8006d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d3a:	4614      	mov	r4, r2
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4b09      	ldr	r3, [pc, #36]	@ (8006d64 <__assert_func+0x2c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4605      	mov	r5, r0
 8006d44:	68d8      	ldr	r0, [r3, #12]
 8006d46:	b954      	cbnz	r4, 8006d5e <__assert_func+0x26>
 8006d48:	4b07      	ldr	r3, [pc, #28]	@ (8006d68 <__assert_func+0x30>)
 8006d4a:	461c      	mov	r4, r3
 8006d4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d50:	9100      	str	r1, [sp, #0]
 8006d52:	462b      	mov	r3, r5
 8006d54:	4905      	ldr	r1, [pc, #20]	@ (8006d6c <__assert_func+0x34>)
 8006d56:	f002 fc19 	bl	800958c <fiprintf>
 8006d5a:	f002 fc6d 	bl	8009638 <abort>
 8006d5e:	4b04      	ldr	r3, [pc, #16]	@ (8006d70 <__assert_func+0x38>)
 8006d60:	e7f4      	b.n	8006d4c <__assert_func+0x14>
 8006d62:	bf00      	nop
 8006d64:	20000104 	.word	0x20000104
 8006d68:	0800af14 	.word	0x0800af14
 8006d6c:	0800aee6 	.word	0x0800aee6
 8006d70:	0800aed9 	.word	0x0800aed9

08006d74 <quorem>:
 8006d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d78:	6903      	ldr	r3, [r0, #16]
 8006d7a:	690c      	ldr	r4, [r1, #16]
 8006d7c:	42a3      	cmp	r3, r4
 8006d7e:	4607      	mov	r7, r0
 8006d80:	db7e      	blt.n	8006e80 <quorem+0x10c>
 8006d82:	3c01      	subs	r4, #1
 8006d84:	f101 0814 	add.w	r8, r1, #20
 8006d88:	00a3      	lsls	r3, r4, #2
 8006d8a:	f100 0514 	add.w	r5, r0, #20
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d94:	9301      	str	r3, [sp, #4]
 8006d96:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	429a      	cmp	r2, r3
 8006da2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006da6:	fbb2 f6f3 	udiv	r6, r2, r3
 8006daa:	d32e      	bcc.n	8006e0a <quorem+0x96>
 8006dac:	f04f 0a00 	mov.w	sl, #0
 8006db0:	46c4      	mov	ip, r8
 8006db2:	46ae      	mov	lr, r5
 8006db4:	46d3      	mov	fp, sl
 8006db6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006dba:	b298      	uxth	r0, r3
 8006dbc:	fb06 a000 	mla	r0, r6, r0, sl
 8006dc0:	0c02      	lsrs	r2, r0, #16
 8006dc2:	0c1b      	lsrs	r3, r3, #16
 8006dc4:	fb06 2303 	mla	r3, r6, r3, r2
 8006dc8:	f8de 2000 	ldr.w	r2, [lr]
 8006dcc:	b280      	uxth	r0, r0
 8006dce:	b292      	uxth	r2, r2
 8006dd0:	1a12      	subs	r2, r2, r0
 8006dd2:	445a      	add	r2, fp
 8006dd4:	f8de 0000 	ldr.w	r0, [lr]
 8006dd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006de2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006de6:	b292      	uxth	r2, r2
 8006de8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006dec:	45e1      	cmp	r9, ip
 8006dee:	f84e 2b04 	str.w	r2, [lr], #4
 8006df2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006df6:	d2de      	bcs.n	8006db6 <quorem+0x42>
 8006df8:	9b00      	ldr	r3, [sp, #0]
 8006dfa:	58eb      	ldr	r3, [r5, r3]
 8006dfc:	b92b      	cbnz	r3, 8006e0a <quorem+0x96>
 8006dfe:	9b01      	ldr	r3, [sp, #4]
 8006e00:	3b04      	subs	r3, #4
 8006e02:	429d      	cmp	r5, r3
 8006e04:	461a      	mov	r2, r3
 8006e06:	d32f      	bcc.n	8006e68 <quorem+0xf4>
 8006e08:	613c      	str	r4, [r7, #16]
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	f001 f9c4 	bl	8008198 <__mcmp>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	db25      	blt.n	8006e60 <quorem+0xec>
 8006e14:	4629      	mov	r1, r5
 8006e16:	2000      	movs	r0, #0
 8006e18:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e1c:	f8d1 c000 	ldr.w	ip, [r1]
 8006e20:	fa1f fe82 	uxth.w	lr, r2
 8006e24:	fa1f f38c 	uxth.w	r3, ip
 8006e28:	eba3 030e 	sub.w	r3, r3, lr
 8006e2c:	4403      	add	r3, r0
 8006e2e:	0c12      	lsrs	r2, r2, #16
 8006e30:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006e34:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e3e:	45c1      	cmp	r9, r8
 8006e40:	f841 3b04 	str.w	r3, [r1], #4
 8006e44:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e48:	d2e6      	bcs.n	8006e18 <quorem+0xa4>
 8006e4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e52:	b922      	cbnz	r2, 8006e5e <quorem+0xea>
 8006e54:	3b04      	subs	r3, #4
 8006e56:	429d      	cmp	r5, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	d30b      	bcc.n	8006e74 <quorem+0x100>
 8006e5c:	613c      	str	r4, [r7, #16]
 8006e5e:	3601      	adds	r6, #1
 8006e60:	4630      	mov	r0, r6
 8006e62:	b003      	add	sp, #12
 8006e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e68:	6812      	ldr	r2, [r2, #0]
 8006e6a:	3b04      	subs	r3, #4
 8006e6c:	2a00      	cmp	r2, #0
 8006e6e:	d1cb      	bne.n	8006e08 <quorem+0x94>
 8006e70:	3c01      	subs	r4, #1
 8006e72:	e7c6      	b.n	8006e02 <quorem+0x8e>
 8006e74:	6812      	ldr	r2, [r2, #0]
 8006e76:	3b04      	subs	r3, #4
 8006e78:	2a00      	cmp	r2, #0
 8006e7a:	d1ef      	bne.n	8006e5c <quorem+0xe8>
 8006e7c:	3c01      	subs	r4, #1
 8006e7e:	e7ea      	b.n	8006e56 <quorem+0xe2>
 8006e80:	2000      	movs	r0, #0
 8006e82:	e7ee      	b.n	8006e62 <quorem+0xee>
 8006e84:	0000      	movs	r0, r0
	...

08006e88 <_dtoa_r>:
 8006e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8c:	69c7      	ldr	r7, [r0, #28]
 8006e8e:	b099      	sub	sp, #100	@ 0x64
 8006e90:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e94:	ec55 4b10 	vmov	r4, r5, d0
 8006e98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006e9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e9c:	4683      	mov	fp, r0
 8006e9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ea0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ea2:	b97f      	cbnz	r7, 8006ec4 <_dtoa_r+0x3c>
 8006ea4:	2010      	movs	r0, #16
 8006ea6:	f000 fdfd 	bl	8007aa4 <malloc>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	f8cb 001c 	str.w	r0, [fp, #28]
 8006eb0:	b920      	cbnz	r0, 8006ebc <_dtoa_r+0x34>
 8006eb2:	4ba7      	ldr	r3, [pc, #668]	@ (8007150 <_dtoa_r+0x2c8>)
 8006eb4:	21ef      	movs	r1, #239	@ 0xef
 8006eb6:	48a7      	ldr	r0, [pc, #668]	@ (8007154 <_dtoa_r+0x2cc>)
 8006eb8:	f7ff ff3e 	bl	8006d38 <__assert_func>
 8006ebc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006ec0:	6007      	str	r7, [r0, #0]
 8006ec2:	60c7      	str	r7, [r0, #12]
 8006ec4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ec8:	6819      	ldr	r1, [r3, #0]
 8006eca:	b159      	cbz	r1, 8006ee4 <_dtoa_r+0x5c>
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	604a      	str	r2, [r1, #4]
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	4093      	lsls	r3, r2
 8006ed4:	608b      	str	r3, [r1, #8]
 8006ed6:	4658      	mov	r0, fp
 8006ed8:	f000 feda 	bl	8007c90 <_Bfree>
 8006edc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	1e2b      	subs	r3, r5, #0
 8006ee6:	bfb9      	ittee	lt
 8006ee8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006eec:	9303      	strlt	r3, [sp, #12]
 8006eee:	2300      	movge	r3, #0
 8006ef0:	6033      	strge	r3, [r6, #0]
 8006ef2:	9f03      	ldr	r7, [sp, #12]
 8006ef4:	4b98      	ldr	r3, [pc, #608]	@ (8007158 <_dtoa_r+0x2d0>)
 8006ef6:	bfbc      	itt	lt
 8006ef8:	2201      	movlt	r2, #1
 8006efa:	6032      	strlt	r2, [r6, #0]
 8006efc:	43bb      	bics	r3, r7
 8006efe:	d112      	bne.n	8006f26 <_dtoa_r+0x9e>
 8006f00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f0c:	4323      	orrs	r3, r4
 8006f0e:	f000 854d 	beq.w	80079ac <_dtoa_r+0xb24>
 8006f12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800716c <_dtoa_r+0x2e4>
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 854f 	beq.w	80079bc <_dtoa_r+0xb34>
 8006f1e:	f10a 0303 	add.w	r3, sl, #3
 8006f22:	f000 bd49 	b.w	80079b8 <_dtoa_r+0xb30>
 8006f26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	ec51 0b17 	vmov	r0, r1, d7
 8006f30:	2300      	movs	r3, #0
 8006f32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006f36:	f7f9 fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f3a:	4680      	mov	r8, r0
 8006f3c:	b158      	cbz	r0, 8006f56 <_dtoa_r+0xce>
 8006f3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f40:	2301      	movs	r3, #1
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f46:	b113      	cbz	r3, 8006f4e <_dtoa_r+0xc6>
 8006f48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f4a:	4b84      	ldr	r3, [pc, #528]	@ (800715c <_dtoa_r+0x2d4>)
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007170 <_dtoa_r+0x2e8>
 8006f52:	f000 bd33 	b.w	80079bc <_dtoa_r+0xb34>
 8006f56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006f5a:	aa16      	add	r2, sp, #88	@ 0x58
 8006f5c:	a917      	add	r1, sp, #92	@ 0x5c
 8006f5e:	4658      	mov	r0, fp
 8006f60:	f001 fa3a 	bl	80083d8 <__d2b>
 8006f64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f68:	4681      	mov	r9, r0
 8006f6a:	2e00      	cmp	r6, #0
 8006f6c:	d077      	beq.n	800705e <_dtoa_r+0x1d6>
 8006f6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f88:	4619      	mov	r1, r3
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	4b74      	ldr	r3, [pc, #464]	@ (8007160 <_dtoa_r+0x2d8>)
 8006f8e:	f7f9 f97b 	bl	8000288 <__aeabi_dsub>
 8006f92:	a369      	add	r3, pc, #420	@ (adr r3, 8007138 <_dtoa_r+0x2b0>)
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	f7f9 fb2e 	bl	80005f8 <__aeabi_dmul>
 8006f9c:	a368      	add	r3, pc, #416	@ (adr r3, 8007140 <_dtoa_r+0x2b8>)
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	f7f9 f973 	bl	800028c <__adddf3>
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	4630      	mov	r0, r6
 8006faa:	460d      	mov	r5, r1
 8006fac:	f7f9 faba 	bl	8000524 <__aeabi_i2d>
 8006fb0:	a365      	add	r3, pc, #404	@ (adr r3, 8007148 <_dtoa_r+0x2c0>)
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	f7f9 fb1f 	bl	80005f8 <__aeabi_dmul>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	f7f9 f963 	bl	800028c <__adddf3>
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	460d      	mov	r5, r1
 8006fca:	f7f9 fdc5 	bl	8000b58 <__aeabi_d2iz>
 8006fce:	2200      	movs	r2, #0
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	f7f9 fd80 	bl	8000adc <__aeabi_dcmplt>
 8006fdc:	b140      	cbz	r0, 8006ff0 <_dtoa_r+0x168>
 8006fde:	4638      	mov	r0, r7
 8006fe0:	f7f9 faa0 	bl	8000524 <__aeabi_i2d>
 8006fe4:	4622      	mov	r2, r4
 8006fe6:	462b      	mov	r3, r5
 8006fe8:	f7f9 fd6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fec:	b900      	cbnz	r0, 8006ff0 <_dtoa_r+0x168>
 8006fee:	3f01      	subs	r7, #1
 8006ff0:	2f16      	cmp	r7, #22
 8006ff2:	d851      	bhi.n	8007098 <_dtoa_r+0x210>
 8006ff4:	4b5b      	ldr	r3, [pc, #364]	@ (8007164 <_dtoa_r+0x2dc>)
 8006ff6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007002:	f7f9 fd6b 	bl	8000adc <__aeabi_dcmplt>
 8007006:	2800      	cmp	r0, #0
 8007008:	d048      	beq.n	800709c <_dtoa_r+0x214>
 800700a:	3f01      	subs	r7, #1
 800700c:	2300      	movs	r3, #0
 800700e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007010:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007012:	1b9b      	subs	r3, r3, r6
 8007014:	1e5a      	subs	r2, r3, #1
 8007016:	bf44      	itt	mi
 8007018:	f1c3 0801 	rsbmi	r8, r3, #1
 800701c:	2300      	movmi	r3, #0
 800701e:	9208      	str	r2, [sp, #32]
 8007020:	bf54      	ite	pl
 8007022:	f04f 0800 	movpl.w	r8, #0
 8007026:	9308      	strmi	r3, [sp, #32]
 8007028:	2f00      	cmp	r7, #0
 800702a:	db39      	blt.n	80070a0 <_dtoa_r+0x218>
 800702c:	9b08      	ldr	r3, [sp, #32]
 800702e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007030:	443b      	add	r3, r7
 8007032:	9308      	str	r3, [sp, #32]
 8007034:	2300      	movs	r3, #0
 8007036:	930a      	str	r3, [sp, #40]	@ 0x28
 8007038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800703a:	2b09      	cmp	r3, #9
 800703c:	d864      	bhi.n	8007108 <_dtoa_r+0x280>
 800703e:	2b05      	cmp	r3, #5
 8007040:	bfc4      	itt	gt
 8007042:	3b04      	subgt	r3, #4
 8007044:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007048:	f1a3 0302 	sub.w	r3, r3, #2
 800704c:	bfcc      	ite	gt
 800704e:	2400      	movgt	r4, #0
 8007050:	2401      	movle	r4, #1
 8007052:	2b03      	cmp	r3, #3
 8007054:	d863      	bhi.n	800711e <_dtoa_r+0x296>
 8007056:	e8df f003 	tbb	[pc, r3]
 800705a:	372a      	.short	0x372a
 800705c:	5535      	.short	0x5535
 800705e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007062:	441e      	add	r6, r3
 8007064:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007068:	2b20      	cmp	r3, #32
 800706a:	bfc1      	itttt	gt
 800706c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007070:	409f      	lslgt	r7, r3
 8007072:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007076:	fa24 f303 	lsrgt.w	r3, r4, r3
 800707a:	bfd6      	itet	le
 800707c:	f1c3 0320 	rsble	r3, r3, #32
 8007080:	ea47 0003 	orrgt.w	r0, r7, r3
 8007084:	fa04 f003 	lslle.w	r0, r4, r3
 8007088:	f7f9 fa3c 	bl	8000504 <__aeabi_ui2d>
 800708c:	2201      	movs	r2, #1
 800708e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007092:	3e01      	subs	r6, #1
 8007094:	9214      	str	r2, [sp, #80]	@ 0x50
 8007096:	e777      	b.n	8006f88 <_dtoa_r+0x100>
 8007098:	2301      	movs	r3, #1
 800709a:	e7b8      	b.n	800700e <_dtoa_r+0x186>
 800709c:	9012      	str	r0, [sp, #72]	@ 0x48
 800709e:	e7b7      	b.n	8007010 <_dtoa_r+0x188>
 80070a0:	427b      	negs	r3, r7
 80070a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80070a4:	2300      	movs	r3, #0
 80070a6:	eba8 0807 	sub.w	r8, r8, r7
 80070aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80070ac:	e7c4      	b.n	8007038 <_dtoa_r+0x1b0>
 80070ae:	2300      	movs	r3, #0
 80070b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	dc35      	bgt.n	8007124 <_dtoa_r+0x29c>
 80070b8:	2301      	movs	r3, #1
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	9307      	str	r3, [sp, #28]
 80070be:	461a      	mov	r2, r3
 80070c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80070c2:	e00b      	b.n	80070dc <_dtoa_r+0x254>
 80070c4:	2301      	movs	r3, #1
 80070c6:	e7f3      	b.n	80070b0 <_dtoa_r+0x228>
 80070c8:	2300      	movs	r3, #0
 80070ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ce:	18fb      	adds	r3, r7, r3
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	3301      	adds	r3, #1
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	9307      	str	r3, [sp, #28]
 80070d8:	bfb8      	it	lt
 80070da:	2301      	movlt	r3, #1
 80070dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80070e0:	2100      	movs	r1, #0
 80070e2:	2204      	movs	r2, #4
 80070e4:	f102 0514 	add.w	r5, r2, #20
 80070e8:	429d      	cmp	r5, r3
 80070ea:	d91f      	bls.n	800712c <_dtoa_r+0x2a4>
 80070ec:	6041      	str	r1, [r0, #4]
 80070ee:	4658      	mov	r0, fp
 80070f0:	f000 fd8e 	bl	8007c10 <_Balloc>
 80070f4:	4682      	mov	sl, r0
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d13c      	bne.n	8007174 <_dtoa_r+0x2ec>
 80070fa:	4b1b      	ldr	r3, [pc, #108]	@ (8007168 <_dtoa_r+0x2e0>)
 80070fc:	4602      	mov	r2, r0
 80070fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8007102:	e6d8      	b.n	8006eb6 <_dtoa_r+0x2e>
 8007104:	2301      	movs	r3, #1
 8007106:	e7e0      	b.n	80070ca <_dtoa_r+0x242>
 8007108:	2401      	movs	r4, #1
 800710a:	2300      	movs	r3, #0
 800710c:	9309      	str	r3, [sp, #36]	@ 0x24
 800710e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007110:	f04f 33ff 	mov.w	r3, #4294967295
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	9307      	str	r3, [sp, #28]
 8007118:	2200      	movs	r2, #0
 800711a:	2312      	movs	r3, #18
 800711c:	e7d0      	b.n	80070c0 <_dtoa_r+0x238>
 800711e:	2301      	movs	r3, #1
 8007120:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007122:	e7f5      	b.n	8007110 <_dtoa_r+0x288>
 8007124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	9307      	str	r3, [sp, #28]
 800712a:	e7d7      	b.n	80070dc <_dtoa_r+0x254>
 800712c:	3101      	adds	r1, #1
 800712e:	0052      	lsls	r2, r2, #1
 8007130:	e7d8      	b.n	80070e4 <_dtoa_r+0x25c>
 8007132:	bf00      	nop
 8007134:	f3af 8000 	nop.w
 8007138:	636f4361 	.word	0x636f4361
 800713c:	3fd287a7 	.word	0x3fd287a7
 8007140:	8b60c8b3 	.word	0x8b60c8b3
 8007144:	3fc68a28 	.word	0x3fc68a28
 8007148:	509f79fb 	.word	0x509f79fb
 800714c:	3fd34413 	.word	0x3fd34413
 8007150:	0800ad30 	.word	0x0800ad30
 8007154:	0800af22 	.word	0x0800af22
 8007158:	7ff00000 	.word	0x7ff00000
 800715c:	0800aeb1 	.word	0x0800aeb1
 8007160:	3ff80000 	.word	0x3ff80000
 8007164:	0800b018 	.word	0x0800b018
 8007168:	0800af7a 	.word	0x0800af7a
 800716c:	0800af1e 	.word	0x0800af1e
 8007170:	0800aeb0 	.word	0x0800aeb0
 8007174:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007178:	6018      	str	r0, [r3, #0]
 800717a:	9b07      	ldr	r3, [sp, #28]
 800717c:	2b0e      	cmp	r3, #14
 800717e:	f200 80a4 	bhi.w	80072ca <_dtoa_r+0x442>
 8007182:	2c00      	cmp	r4, #0
 8007184:	f000 80a1 	beq.w	80072ca <_dtoa_r+0x442>
 8007188:	2f00      	cmp	r7, #0
 800718a:	dd33      	ble.n	80071f4 <_dtoa_r+0x36c>
 800718c:	4bad      	ldr	r3, [pc, #692]	@ (8007444 <_dtoa_r+0x5bc>)
 800718e:	f007 020f 	and.w	r2, r7, #15
 8007192:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007196:	ed93 7b00 	vldr	d7, [r3]
 800719a:	05f8      	lsls	r0, r7, #23
 800719c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80071a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80071a4:	d516      	bpl.n	80071d4 <_dtoa_r+0x34c>
 80071a6:	4ba8      	ldr	r3, [pc, #672]	@ (8007448 <_dtoa_r+0x5c0>)
 80071a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071b0:	f7f9 fb4c 	bl	800084c <__aeabi_ddiv>
 80071b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071b8:	f004 040f 	and.w	r4, r4, #15
 80071bc:	2603      	movs	r6, #3
 80071be:	4da2      	ldr	r5, [pc, #648]	@ (8007448 <_dtoa_r+0x5c0>)
 80071c0:	b954      	cbnz	r4, 80071d8 <_dtoa_r+0x350>
 80071c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ca:	f7f9 fb3f 	bl	800084c <__aeabi_ddiv>
 80071ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071d2:	e028      	b.n	8007226 <_dtoa_r+0x39e>
 80071d4:	2602      	movs	r6, #2
 80071d6:	e7f2      	b.n	80071be <_dtoa_r+0x336>
 80071d8:	07e1      	lsls	r1, r4, #31
 80071da:	d508      	bpl.n	80071ee <_dtoa_r+0x366>
 80071dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071e4:	f7f9 fa08 	bl	80005f8 <__aeabi_dmul>
 80071e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071ec:	3601      	adds	r6, #1
 80071ee:	1064      	asrs	r4, r4, #1
 80071f0:	3508      	adds	r5, #8
 80071f2:	e7e5      	b.n	80071c0 <_dtoa_r+0x338>
 80071f4:	f000 80d2 	beq.w	800739c <_dtoa_r+0x514>
 80071f8:	427c      	negs	r4, r7
 80071fa:	4b92      	ldr	r3, [pc, #584]	@ (8007444 <_dtoa_r+0x5bc>)
 80071fc:	4d92      	ldr	r5, [pc, #584]	@ (8007448 <_dtoa_r+0x5c0>)
 80071fe:	f004 020f 	and.w	r2, r4, #15
 8007202:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800720e:	f7f9 f9f3 	bl	80005f8 <__aeabi_dmul>
 8007212:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007216:	1124      	asrs	r4, r4, #4
 8007218:	2300      	movs	r3, #0
 800721a:	2602      	movs	r6, #2
 800721c:	2c00      	cmp	r4, #0
 800721e:	f040 80b2 	bne.w	8007386 <_dtoa_r+0x4fe>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1d3      	bne.n	80071ce <_dtoa_r+0x346>
 8007226:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007228:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 80b7 	beq.w	80073a0 <_dtoa_r+0x518>
 8007232:	4b86      	ldr	r3, [pc, #536]	@ (800744c <_dtoa_r+0x5c4>)
 8007234:	2200      	movs	r2, #0
 8007236:	4620      	mov	r0, r4
 8007238:	4629      	mov	r1, r5
 800723a:	f7f9 fc4f 	bl	8000adc <__aeabi_dcmplt>
 800723e:	2800      	cmp	r0, #0
 8007240:	f000 80ae 	beq.w	80073a0 <_dtoa_r+0x518>
 8007244:	9b07      	ldr	r3, [sp, #28]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 80aa 	beq.w	80073a0 <_dtoa_r+0x518>
 800724c:	9b00      	ldr	r3, [sp, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	dd37      	ble.n	80072c2 <_dtoa_r+0x43a>
 8007252:	1e7b      	subs	r3, r7, #1
 8007254:	9304      	str	r3, [sp, #16]
 8007256:	4620      	mov	r0, r4
 8007258:	4b7d      	ldr	r3, [pc, #500]	@ (8007450 <_dtoa_r+0x5c8>)
 800725a:	2200      	movs	r2, #0
 800725c:	4629      	mov	r1, r5
 800725e:	f7f9 f9cb 	bl	80005f8 <__aeabi_dmul>
 8007262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007266:	9c00      	ldr	r4, [sp, #0]
 8007268:	3601      	adds	r6, #1
 800726a:	4630      	mov	r0, r6
 800726c:	f7f9 f95a 	bl	8000524 <__aeabi_i2d>
 8007270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007274:	f7f9 f9c0 	bl	80005f8 <__aeabi_dmul>
 8007278:	4b76      	ldr	r3, [pc, #472]	@ (8007454 <_dtoa_r+0x5cc>)
 800727a:	2200      	movs	r2, #0
 800727c:	f7f9 f806 	bl	800028c <__adddf3>
 8007280:	4605      	mov	r5, r0
 8007282:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007286:	2c00      	cmp	r4, #0
 8007288:	f040 808d 	bne.w	80073a6 <_dtoa_r+0x51e>
 800728c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007290:	4b71      	ldr	r3, [pc, #452]	@ (8007458 <_dtoa_r+0x5d0>)
 8007292:	2200      	movs	r2, #0
 8007294:	f7f8 fff8 	bl	8000288 <__aeabi_dsub>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072a0:	462a      	mov	r2, r5
 80072a2:	4633      	mov	r3, r6
 80072a4:	f7f9 fc38 	bl	8000b18 <__aeabi_dcmpgt>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	f040 828b 	bne.w	80077c4 <_dtoa_r+0x93c>
 80072ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072b2:	462a      	mov	r2, r5
 80072b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80072b8:	f7f9 fc10 	bl	8000adc <__aeabi_dcmplt>
 80072bc:	2800      	cmp	r0, #0
 80072be:	f040 8128 	bne.w	8007512 <_dtoa_r+0x68a>
 80072c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80072c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80072ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f2c0 815a 	blt.w	8007586 <_dtoa_r+0x6fe>
 80072d2:	2f0e      	cmp	r7, #14
 80072d4:	f300 8157 	bgt.w	8007586 <_dtoa_r+0x6fe>
 80072d8:	4b5a      	ldr	r3, [pc, #360]	@ (8007444 <_dtoa_r+0x5bc>)
 80072da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072de:	ed93 7b00 	vldr	d7, [r3]
 80072e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	ed8d 7b00 	vstr	d7, [sp]
 80072ea:	da03      	bge.n	80072f4 <_dtoa_r+0x46c>
 80072ec:	9b07      	ldr	r3, [sp, #28]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f340 8101 	ble.w	80074f6 <_dtoa_r+0x66e>
 80072f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80072f8:	4656      	mov	r6, sl
 80072fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072fe:	4620      	mov	r0, r4
 8007300:	4629      	mov	r1, r5
 8007302:	f7f9 faa3 	bl	800084c <__aeabi_ddiv>
 8007306:	f7f9 fc27 	bl	8000b58 <__aeabi_d2iz>
 800730a:	4680      	mov	r8, r0
 800730c:	f7f9 f90a 	bl	8000524 <__aeabi_i2d>
 8007310:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007314:	f7f9 f970 	bl	80005f8 <__aeabi_dmul>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	4620      	mov	r0, r4
 800731e:	4629      	mov	r1, r5
 8007320:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007324:	f7f8 ffb0 	bl	8000288 <__aeabi_dsub>
 8007328:	f806 4b01 	strb.w	r4, [r6], #1
 800732c:	9d07      	ldr	r5, [sp, #28]
 800732e:	eba6 040a 	sub.w	r4, r6, sl
 8007332:	42a5      	cmp	r5, r4
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	f040 8117 	bne.w	800756a <_dtoa_r+0x6e2>
 800733c:	f7f8 ffa6 	bl	800028c <__adddf3>
 8007340:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007344:	4604      	mov	r4, r0
 8007346:	460d      	mov	r5, r1
 8007348:	f7f9 fbe6 	bl	8000b18 <__aeabi_dcmpgt>
 800734c:	2800      	cmp	r0, #0
 800734e:	f040 80f9 	bne.w	8007544 <_dtoa_r+0x6bc>
 8007352:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007356:	4620      	mov	r0, r4
 8007358:	4629      	mov	r1, r5
 800735a:	f7f9 fbb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800735e:	b118      	cbz	r0, 8007368 <_dtoa_r+0x4e0>
 8007360:	f018 0f01 	tst.w	r8, #1
 8007364:	f040 80ee 	bne.w	8007544 <_dtoa_r+0x6bc>
 8007368:	4649      	mov	r1, r9
 800736a:	4658      	mov	r0, fp
 800736c:	f000 fc90 	bl	8007c90 <_Bfree>
 8007370:	2300      	movs	r3, #0
 8007372:	7033      	strb	r3, [r6, #0]
 8007374:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007376:	3701      	adds	r7, #1
 8007378:	601f      	str	r7, [r3, #0]
 800737a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 831d 	beq.w	80079bc <_dtoa_r+0xb34>
 8007382:	601e      	str	r6, [r3, #0]
 8007384:	e31a      	b.n	80079bc <_dtoa_r+0xb34>
 8007386:	07e2      	lsls	r2, r4, #31
 8007388:	d505      	bpl.n	8007396 <_dtoa_r+0x50e>
 800738a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800738e:	f7f9 f933 	bl	80005f8 <__aeabi_dmul>
 8007392:	3601      	adds	r6, #1
 8007394:	2301      	movs	r3, #1
 8007396:	1064      	asrs	r4, r4, #1
 8007398:	3508      	adds	r5, #8
 800739a:	e73f      	b.n	800721c <_dtoa_r+0x394>
 800739c:	2602      	movs	r6, #2
 800739e:	e742      	b.n	8007226 <_dtoa_r+0x39e>
 80073a0:	9c07      	ldr	r4, [sp, #28]
 80073a2:	9704      	str	r7, [sp, #16]
 80073a4:	e761      	b.n	800726a <_dtoa_r+0x3e2>
 80073a6:	4b27      	ldr	r3, [pc, #156]	@ (8007444 <_dtoa_r+0x5bc>)
 80073a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80073aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073b2:	4454      	add	r4, sl
 80073b4:	2900      	cmp	r1, #0
 80073b6:	d053      	beq.n	8007460 <_dtoa_r+0x5d8>
 80073b8:	4928      	ldr	r1, [pc, #160]	@ (800745c <_dtoa_r+0x5d4>)
 80073ba:	2000      	movs	r0, #0
 80073bc:	f7f9 fa46 	bl	800084c <__aeabi_ddiv>
 80073c0:	4633      	mov	r3, r6
 80073c2:	462a      	mov	r2, r5
 80073c4:	f7f8 ff60 	bl	8000288 <__aeabi_dsub>
 80073c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073cc:	4656      	mov	r6, sl
 80073ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073d2:	f7f9 fbc1 	bl	8000b58 <__aeabi_d2iz>
 80073d6:	4605      	mov	r5, r0
 80073d8:	f7f9 f8a4 	bl	8000524 <__aeabi_i2d>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073e4:	f7f8 ff50 	bl	8000288 <__aeabi_dsub>
 80073e8:	3530      	adds	r5, #48	@ 0x30
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073f2:	f806 5b01 	strb.w	r5, [r6], #1
 80073f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073fa:	f7f9 fb6f 	bl	8000adc <__aeabi_dcmplt>
 80073fe:	2800      	cmp	r0, #0
 8007400:	d171      	bne.n	80074e6 <_dtoa_r+0x65e>
 8007402:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007406:	4911      	ldr	r1, [pc, #68]	@ (800744c <_dtoa_r+0x5c4>)
 8007408:	2000      	movs	r0, #0
 800740a:	f7f8 ff3d 	bl	8000288 <__aeabi_dsub>
 800740e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007412:	f7f9 fb63 	bl	8000adc <__aeabi_dcmplt>
 8007416:	2800      	cmp	r0, #0
 8007418:	f040 8095 	bne.w	8007546 <_dtoa_r+0x6be>
 800741c:	42a6      	cmp	r6, r4
 800741e:	f43f af50 	beq.w	80072c2 <_dtoa_r+0x43a>
 8007422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007426:	4b0a      	ldr	r3, [pc, #40]	@ (8007450 <_dtoa_r+0x5c8>)
 8007428:	2200      	movs	r2, #0
 800742a:	f7f9 f8e5 	bl	80005f8 <__aeabi_dmul>
 800742e:	4b08      	ldr	r3, [pc, #32]	@ (8007450 <_dtoa_r+0x5c8>)
 8007430:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007434:	2200      	movs	r2, #0
 8007436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800743a:	f7f9 f8dd 	bl	80005f8 <__aeabi_dmul>
 800743e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007442:	e7c4      	b.n	80073ce <_dtoa_r+0x546>
 8007444:	0800b018 	.word	0x0800b018
 8007448:	0800aff0 	.word	0x0800aff0
 800744c:	3ff00000 	.word	0x3ff00000
 8007450:	40240000 	.word	0x40240000
 8007454:	401c0000 	.word	0x401c0000
 8007458:	40140000 	.word	0x40140000
 800745c:	3fe00000 	.word	0x3fe00000
 8007460:	4631      	mov	r1, r6
 8007462:	4628      	mov	r0, r5
 8007464:	f7f9 f8c8 	bl	80005f8 <__aeabi_dmul>
 8007468:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800746c:	9415      	str	r4, [sp, #84]	@ 0x54
 800746e:	4656      	mov	r6, sl
 8007470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007474:	f7f9 fb70 	bl	8000b58 <__aeabi_d2iz>
 8007478:	4605      	mov	r5, r0
 800747a:	f7f9 f853 	bl	8000524 <__aeabi_i2d>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007486:	f7f8 feff 	bl	8000288 <__aeabi_dsub>
 800748a:	3530      	adds	r5, #48	@ 0x30
 800748c:	f806 5b01 	strb.w	r5, [r6], #1
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	42a6      	cmp	r6, r4
 8007496:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800749a:	f04f 0200 	mov.w	r2, #0
 800749e:	d124      	bne.n	80074ea <_dtoa_r+0x662>
 80074a0:	4bac      	ldr	r3, [pc, #688]	@ (8007754 <_dtoa_r+0x8cc>)
 80074a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80074a6:	f7f8 fef1 	bl	800028c <__adddf3>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074b2:	f7f9 fb31 	bl	8000b18 <__aeabi_dcmpgt>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d145      	bne.n	8007546 <_dtoa_r+0x6be>
 80074ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074be:	49a5      	ldr	r1, [pc, #660]	@ (8007754 <_dtoa_r+0x8cc>)
 80074c0:	2000      	movs	r0, #0
 80074c2:	f7f8 fee1 	bl	8000288 <__aeabi_dsub>
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ce:	f7f9 fb05 	bl	8000adc <__aeabi_dcmplt>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	f43f aef5 	beq.w	80072c2 <_dtoa_r+0x43a>
 80074d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80074da:	1e73      	subs	r3, r6, #1
 80074dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80074de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074e2:	2b30      	cmp	r3, #48	@ 0x30
 80074e4:	d0f8      	beq.n	80074d8 <_dtoa_r+0x650>
 80074e6:	9f04      	ldr	r7, [sp, #16]
 80074e8:	e73e      	b.n	8007368 <_dtoa_r+0x4e0>
 80074ea:	4b9b      	ldr	r3, [pc, #620]	@ (8007758 <_dtoa_r+0x8d0>)
 80074ec:	f7f9 f884 	bl	80005f8 <__aeabi_dmul>
 80074f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074f4:	e7bc      	b.n	8007470 <_dtoa_r+0x5e8>
 80074f6:	d10c      	bne.n	8007512 <_dtoa_r+0x68a>
 80074f8:	4b98      	ldr	r3, [pc, #608]	@ (800775c <_dtoa_r+0x8d4>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007500:	f7f9 f87a 	bl	80005f8 <__aeabi_dmul>
 8007504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007508:	f7f9 fafc 	bl	8000b04 <__aeabi_dcmpge>
 800750c:	2800      	cmp	r0, #0
 800750e:	f000 8157 	beq.w	80077c0 <_dtoa_r+0x938>
 8007512:	2400      	movs	r4, #0
 8007514:	4625      	mov	r5, r4
 8007516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007518:	43db      	mvns	r3, r3
 800751a:	9304      	str	r3, [sp, #16]
 800751c:	4656      	mov	r6, sl
 800751e:	2700      	movs	r7, #0
 8007520:	4621      	mov	r1, r4
 8007522:	4658      	mov	r0, fp
 8007524:	f000 fbb4 	bl	8007c90 <_Bfree>
 8007528:	2d00      	cmp	r5, #0
 800752a:	d0dc      	beq.n	80074e6 <_dtoa_r+0x65e>
 800752c:	b12f      	cbz	r7, 800753a <_dtoa_r+0x6b2>
 800752e:	42af      	cmp	r7, r5
 8007530:	d003      	beq.n	800753a <_dtoa_r+0x6b2>
 8007532:	4639      	mov	r1, r7
 8007534:	4658      	mov	r0, fp
 8007536:	f000 fbab 	bl	8007c90 <_Bfree>
 800753a:	4629      	mov	r1, r5
 800753c:	4658      	mov	r0, fp
 800753e:	f000 fba7 	bl	8007c90 <_Bfree>
 8007542:	e7d0      	b.n	80074e6 <_dtoa_r+0x65e>
 8007544:	9704      	str	r7, [sp, #16]
 8007546:	4633      	mov	r3, r6
 8007548:	461e      	mov	r6, r3
 800754a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800754e:	2a39      	cmp	r2, #57	@ 0x39
 8007550:	d107      	bne.n	8007562 <_dtoa_r+0x6da>
 8007552:	459a      	cmp	sl, r3
 8007554:	d1f8      	bne.n	8007548 <_dtoa_r+0x6c0>
 8007556:	9a04      	ldr	r2, [sp, #16]
 8007558:	3201      	adds	r2, #1
 800755a:	9204      	str	r2, [sp, #16]
 800755c:	2230      	movs	r2, #48	@ 0x30
 800755e:	f88a 2000 	strb.w	r2, [sl]
 8007562:	781a      	ldrb	r2, [r3, #0]
 8007564:	3201      	adds	r2, #1
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	e7bd      	b.n	80074e6 <_dtoa_r+0x65e>
 800756a:	4b7b      	ldr	r3, [pc, #492]	@ (8007758 <_dtoa_r+0x8d0>)
 800756c:	2200      	movs	r2, #0
 800756e:	f7f9 f843 	bl	80005f8 <__aeabi_dmul>
 8007572:	2200      	movs	r2, #0
 8007574:	2300      	movs	r3, #0
 8007576:	4604      	mov	r4, r0
 8007578:	460d      	mov	r5, r1
 800757a:	f7f9 faa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800757e:	2800      	cmp	r0, #0
 8007580:	f43f aebb 	beq.w	80072fa <_dtoa_r+0x472>
 8007584:	e6f0      	b.n	8007368 <_dtoa_r+0x4e0>
 8007586:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007588:	2a00      	cmp	r2, #0
 800758a:	f000 80db 	beq.w	8007744 <_dtoa_r+0x8bc>
 800758e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007590:	2a01      	cmp	r2, #1
 8007592:	f300 80bf 	bgt.w	8007714 <_dtoa_r+0x88c>
 8007596:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007598:	2a00      	cmp	r2, #0
 800759a:	f000 80b7 	beq.w	800770c <_dtoa_r+0x884>
 800759e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80075a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80075a4:	4646      	mov	r6, r8
 80075a6:	9a08      	ldr	r2, [sp, #32]
 80075a8:	2101      	movs	r1, #1
 80075aa:	441a      	add	r2, r3
 80075ac:	4658      	mov	r0, fp
 80075ae:	4498      	add	r8, r3
 80075b0:	9208      	str	r2, [sp, #32]
 80075b2:	f000 fc6b 	bl	8007e8c <__i2b>
 80075b6:	4605      	mov	r5, r0
 80075b8:	b15e      	cbz	r6, 80075d2 <_dtoa_r+0x74a>
 80075ba:	9b08      	ldr	r3, [sp, #32]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	dd08      	ble.n	80075d2 <_dtoa_r+0x74a>
 80075c0:	42b3      	cmp	r3, r6
 80075c2:	9a08      	ldr	r2, [sp, #32]
 80075c4:	bfa8      	it	ge
 80075c6:	4633      	movge	r3, r6
 80075c8:	eba8 0803 	sub.w	r8, r8, r3
 80075cc:	1af6      	subs	r6, r6, r3
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	9308      	str	r3, [sp, #32]
 80075d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075d4:	b1f3      	cbz	r3, 8007614 <_dtoa_r+0x78c>
 80075d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 80b7 	beq.w	800774c <_dtoa_r+0x8c4>
 80075de:	b18c      	cbz	r4, 8007604 <_dtoa_r+0x77c>
 80075e0:	4629      	mov	r1, r5
 80075e2:	4622      	mov	r2, r4
 80075e4:	4658      	mov	r0, fp
 80075e6:	f000 fd11 	bl	800800c <__pow5mult>
 80075ea:	464a      	mov	r2, r9
 80075ec:	4601      	mov	r1, r0
 80075ee:	4605      	mov	r5, r0
 80075f0:	4658      	mov	r0, fp
 80075f2:	f000 fc61 	bl	8007eb8 <__multiply>
 80075f6:	4649      	mov	r1, r9
 80075f8:	9004      	str	r0, [sp, #16]
 80075fa:	4658      	mov	r0, fp
 80075fc:	f000 fb48 	bl	8007c90 <_Bfree>
 8007600:	9b04      	ldr	r3, [sp, #16]
 8007602:	4699      	mov	r9, r3
 8007604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007606:	1b1a      	subs	r2, r3, r4
 8007608:	d004      	beq.n	8007614 <_dtoa_r+0x78c>
 800760a:	4649      	mov	r1, r9
 800760c:	4658      	mov	r0, fp
 800760e:	f000 fcfd 	bl	800800c <__pow5mult>
 8007612:	4681      	mov	r9, r0
 8007614:	2101      	movs	r1, #1
 8007616:	4658      	mov	r0, fp
 8007618:	f000 fc38 	bl	8007e8c <__i2b>
 800761c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800761e:	4604      	mov	r4, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 81cf 	beq.w	80079c4 <_dtoa_r+0xb3c>
 8007626:	461a      	mov	r2, r3
 8007628:	4601      	mov	r1, r0
 800762a:	4658      	mov	r0, fp
 800762c:	f000 fcee 	bl	800800c <__pow5mult>
 8007630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007632:	2b01      	cmp	r3, #1
 8007634:	4604      	mov	r4, r0
 8007636:	f300 8095 	bgt.w	8007764 <_dtoa_r+0x8dc>
 800763a:	9b02      	ldr	r3, [sp, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	f040 8087 	bne.w	8007750 <_dtoa_r+0x8c8>
 8007642:	9b03      	ldr	r3, [sp, #12]
 8007644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007648:	2b00      	cmp	r3, #0
 800764a:	f040 8089 	bne.w	8007760 <_dtoa_r+0x8d8>
 800764e:	9b03      	ldr	r3, [sp, #12]
 8007650:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007654:	0d1b      	lsrs	r3, r3, #20
 8007656:	051b      	lsls	r3, r3, #20
 8007658:	b12b      	cbz	r3, 8007666 <_dtoa_r+0x7de>
 800765a:	9b08      	ldr	r3, [sp, #32]
 800765c:	3301      	adds	r3, #1
 800765e:	9308      	str	r3, [sp, #32]
 8007660:	f108 0801 	add.w	r8, r8, #1
 8007664:	2301      	movs	r3, #1
 8007666:	930a      	str	r3, [sp, #40]	@ 0x28
 8007668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 81b0 	beq.w	80079d0 <_dtoa_r+0xb48>
 8007670:	6923      	ldr	r3, [r4, #16]
 8007672:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007676:	6918      	ldr	r0, [r3, #16]
 8007678:	f000 fbbc 	bl	8007df4 <__hi0bits>
 800767c:	f1c0 0020 	rsb	r0, r0, #32
 8007680:	9b08      	ldr	r3, [sp, #32]
 8007682:	4418      	add	r0, r3
 8007684:	f010 001f 	ands.w	r0, r0, #31
 8007688:	d077      	beq.n	800777a <_dtoa_r+0x8f2>
 800768a:	f1c0 0320 	rsb	r3, r0, #32
 800768e:	2b04      	cmp	r3, #4
 8007690:	dd6b      	ble.n	800776a <_dtoa_r+0x8e2>
 8007692:	9b08      	ldr	r3, [sp, #32]
 8007694:	f1c0 001c 	rsb	r0, r0, #28
 8007698:	4403      	add	r3, r0
 800769a:	4480      	add	r8, r0
 800769c:	4406      	add	r6, r0
 800769e:	9308      	str	r3, [sp, #32]
 80076a0:	f1b8 0f00 	cmp.w	r8, #0
 80076a4:	dd05      	ble.n	80076b2 <_dtoa_r+0x82a>
 80076a6:	4649      	mov	r1, r9
 80076a8:	4642      	mov	r2, r8
 80076aa:	4658      	mov	r0, fp
 80076ac:	f000 fd08 	bl	80080c0 <__lshift>
 80076b0:	4681      	mov	r9, r0
 80076b2:	9b08      	ldr	r3, [sp, #32]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	dd05      	ble.n	80076c4 <_dtoa_r+0x83c>
 80076b8:	4621      	mov	r1, r4
 80076ba:	461a      	mov	r2, r3
 80076bc:	4658      	mov	r0, fp
 80076be:	f000 fcff 	bl	80080c0 <__lshift>
 80076c2:	4604      	mov	r4, r0
 80076c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d059      	beq.n	800777e <_dtoa_r+0x8f6>
 80076ca:	4621      	mov	r1, r4
 80076cc:	4648      	mov	r0, r9
 80076ce:	f000 fd63 	bl	8008198 <__mcmp>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	da53      	bge.n	800777e <_dtoa_r+0x8f6>
 80076d6:	1e7b      	subs	r3, r7, #1
 80076d8:	9304      	str	r3, [sp, #16]
 80076da:	4649      	mov	r1, r9
 80076dc:	2300      	movs	r3, #0
 80076de:	220a      	movs	r2, #10
 80076e0:	4658      	mov	r0, fp
 80076e2:	f000 faf7 	bl	8007cd4 <__multadd>
 80076e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076e8:	4681      	mov	r9, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 8172 	beq.w	80079d4 <_dtoa_r+0xb4c>
 80076f0:	2300      	movs	r3, #0
 80076f2:	4629      	mov	r1, r5
 80076f4:	220a      	movs	r2, #10
 80076f6:	4658      	mov	r0, fp
 80076f8:	f000 faec 	bl	8007cd4 <__multadd>
 80076fc:	9b00      	ldr	r3, [sp, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	4605      	mov	r5, r0
 8007702:	dc67      	bgt.n	80077d4 <_dtoa_r+0x94c>
 8007704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007706:	2b02      	cmp	r3, #2
 8007708:	dc41      	bgt.n	800778e <_dtoa_r+0x906>
 800770a:	e063      	b.n	80077d4 <_dtoa_r+0x94c>
 800770c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800770e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007712:	e746      	b.n	80075a2 <_dtoa_r+0x71a>
 8007714:	9b07      	ldr	r3, [sp, #28]
 8007716:	1e5c      	subs	r4, r3, #1
 8007718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800771a:	42a3      	cmp	r3, r4
 800771c:	bfbf      	itttt	lt
 800771e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007720:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007722:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007724:	1ae3      	sublt	r3, r4, r3
 8007726:	bfb4      	ite	lt
 8007728:	18d2      	addlt	r2, r2, r3
 800772a:	1b1c      	subge	r4, r3, r4
 800772c:	9b07      	ldr	r3, [sp, #28]
 800772e:	bfbc      	itt	lt
 8007730:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007732:	2400      	movlt	r4, #0
 8007734:	2b00      	cmp	r3, #0
 8007736:	bfb5      	itete	lt
 8007738:	eba8 0603 	sublt.w	r6, r8, r3
 800773c:	9b07      	ldrge	r3, [sp, #28]
 800773e:	2300      	movlt	r3, #0
 8007740:	4646      	movge	r6, r8
 8007742:	e730      	b.n	80075a6 <_dtoa_r+0x71e>
 8007744:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007746:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007748:	4646      	mov	r6, r8
 800774a:	e735      	b.n	80075b8 <_dtoa_r+0x730>
 800774c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800774e:	e75c      	b.n	800760a <_dtoa_r+0x782>
 8007750:	2300      	movs	r3, #0
 8007752:	e788      	b.n	8007666 <_dtoa_r+0x7de>
 8007754:	3fe00000 	.word	0x3fe00000
 8007758:	40240000 	.word	0x40240000
 800775c:	40140000 	.word	0x40140000
 8007760:	9b02      	ldr	r3, [sp, #8]
 8007762:	e780      	b.n	8007666 <_dtoa_r+0x7de>
 8007764:	2300      	movs	r3, #0
 8007766:	930a      	str	r3, [sp, #40]	@ 0x28
 8007768:	e782      	b.n	8007670 <_dtoa_r+0x7e8>
 800776a:	d099      	beq.n	80076a0 <_dtoa_r+0x818>
 800776c:	9a08      	ldr	r2, [sp, #32]
 800776e:	331c      	adds	r3, #28
 8007770:	441a      	add	r2, r3
 8007772:	4498      	add	r8, r3
 8007774:	441e      	add	r6, r3
 8007776:	9208      	str	r2, [sp, #32]
 8007778:	e792      	b.n	80076a0 <_dtoa_r+0x818>
 800777a:	4603      	mov	r3, r0
 800777c:	e7f6      	b.n	800776c <_dtoa_r+0x8e4>
 800777e:	9b07      	ldr	r3, [sp, #28]
 8007780:	9704      	str	r7, [sp, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	dc20      	bgt.n	80077c8 <_dtoa_r+0x940>
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800778a:	2b02      	cmp	r3, #2
 800778c:	dd1e      	ble.n	80077cc <_dtoa_r+0x944>
 800778e:	9b00      	ldr	r3, [sp, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	f47f aec0 	bne.w	8007516 <_dtoa_r+0x68e>
 8007796:	4621      	mov	r1, r4
 8007798:	2205      	movs	r2, #5
 800779a:	4658      	mov	r0, fp
 800779c:	f000 fa9a 	bl	8007cd4 <__multadd>
 80077a0:	4601      	mov	r1, r0
 80077a2:	4604      	mov	r4, r0
 80077a4:	4648      	mov	r0, r9
 80077a6:	f000 fcf7 	bl	8008198 <__mcmp>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	f77f aeb3 	ble.w	8007516 <_dtoa_r+0x68e>
 80077b0:	4656      	mov	r6, sl
 80077b2:	2331      	movs	r3, #49	@ 0x31
 80077b4:	f806 3b01 	strb.w	r3, [r6], #1
 80077b8:	9b04      	ldr	r3, [sp, #16]
 80077ba:	3301      	adds	r3, #1
 80077bc:	9304      	str	r3, [sp, #16]
 80077be:	e6ae      	b.n	800751e <_dtoa_r+0x696>
 80077c0:	9c07      	ldr	r4, [sp, #28]
 80077c2:	9704      	str	r7, [sp, #16]
 80077c4:	4625      	mov	r5, r4
 80077c6:	e7f3      	b.n	80077b0 <_dtoa_r+0x928>
 80077c8:	9b07      	ldr	r3, [sp, #28]
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 8104 	beq.w	80079dc <_dtoa_r+0xb54>
 80077d4:	2e00      	cmp	r6, #0
 80077d6:	dd05      	ble.n	80077e4 <_dtoa_r+0x95c>
 80077d8:	4629      	mov	r1, r5
 80077da:	4632      	mov	r2, r6
 80077dc:	4658      	mov	r0, fp
 80077de:	f000 fc6f 	bl	80080c0 <__lshift>
 80077e2:	4605      	mov	r5, r0
 80077e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d05a      	beq.n	80078a0 <_dtoa_r+0xa18>
 80077ea:	6869      	ldr	r1, [r5, #4]
 80077ec:	4658      	mov	r0, fp
 80077ee:	f000 fa0f 	bl	8007c10 <_Balloc>
 80077f2:	4606      	mov	r6, r0
 80077f4:	b928      	cbnz	r0, 8007802 <_dtoa_r+0x97a>
 80077f6:	4b84      	ldr	r3, [pc, #528]	@ (8007a08 <_dtoa_r+0xb80>)
 80077f8:	4602      	mov	r2, r0
 80077fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80077fe:	f7ff bb5a 	b.w	8006eb6 <_dtoa_r+0x2e>
 8007802:	692a      	ldr	r2, [r5, #16]
 8007804:	3202      	adds	r2, #2
 8007806:	0092      	lsls	r2, r2, #2
 8007808:	f105 010c 	add.w	r1, r5, #12
 800780c:	300c      	adds	r0, #12
 800780e:	f7ff fa7e 	bl	8006d0e <memcpy>
 8007812:	2201      	movs	r2, #1
 8007814:	4631      	mov	r1, r6
 8007816:	4658      	mov	r0, fp
 8007818:	f000 fc52 	bl	80080c0 <__lshift>
 800781c:	f10a 0301 	add.w	r3, sl, #1
 8007820:	9307      	str	r3, [sp, #28]
 8007822:	9b00      	ldr	r3, [sp, #0]
 8007824:	4453      	add	r3, sl
 8007826:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007828:	9b02      	ldr	r3, [sp, #8]
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	462f      	mov	r7, r5
 8007830:	930a      	str	r3, [sp, #40]	@ 0x28
 8007832:	4605      	mov	r5, r0
 8007834:	9b07      	ldr	r3, [sp, #28]
 8007836:	4621      	mov	r1, r4
 8007838:	3b01      	subs	r3, #1
 800783a:	4648      	mov	r0, r9
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	f7ff fa99 	bl	8006d74 <quorem>
 8007842:	4639      	mov	r1, r7
 8007844:	9002      	str	r0, [sp, #8]
 8007846:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800784a:	4648      	mov	r0, r9
 800784c:	f000 fca4 	bl	8008198 <__mcmp>
 8007850:	462a      	mov	r2, r5
 8007852:	9008      	str	r0, [sp, #32]
 8007854:	4621      	mov	r1, r4
 8007856:	4658      	mov	r0, fp
 8007858:	f000 fcba 	bl	80081d0 <__mdiff>
 800785c:	68c2      	ldr	r2, [r0, #12]
 800785e:	4606      	mov	r6, r0
 8007860:	bb02      	cbnz	r2, 80078a4 <_dtoa_r+0xa1c>
 8007862:	4601      	mov	r1, r0
 8007864:	4648      	mov	r0, r9
 8007866:	f000 fc97 	bl	8008198 <__mcmp>
 800786a:	4602      	mov	r2, r0
 800786c:	4631      	mov	r1, r6
 800786e:	4658      	mov	r0, fp
 8007870:	920e      	str	r2, [sp, #56]	@ 0x38
 8007872:	f000 fa0d 	bl	8007c90 <_Bfree>
 8007876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007878:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800787a:	9e07      	ldr	r6, [sp, #28]
 800787c:	ea43 0102 	orr.w	r1, r3, r2
 8007880:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007882:	4319      	orrs	r1, r3
 8007884:	d110      	bne.n	80078a8 <_dtoa_r+0xa20>
 8007886:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800788a:	d029      	beq.n	80078e0 <_dtoa_r+0xa58>
 800788c:	9b08      	ldr	r3, [sp, #32]
 800788e:	2b00      	cmp	r3, #0
 8007890:	dd02      	ble.n	8007898 <_dtoa_r+0xa10>
 8007892:	9b02      	ldr	r3, [sp, #8]
 8007894:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007898:	9b00      	ldr	r3, [sp, #0]
 800789a:	f883 8000 	strb.w	r8, [r3]
 800789e:	e63f      	b.n	8007520 <_dtoa_r+0x698>
 80078a0:	4628      	mov	r0, r5
 80078a2:	e7bb      	b.n	800781c <_dtoa_r+0x994>
 80078a4:	2201      	movs	r2, #1
 80078a6:	e7e1      	b.n	800786c <_dtoa_r+0x9e4>
 80078a8:	9b08      	ldr	r3, [sp, #32]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	db04      	blt.n	80078b8 <_dtoa_r+0xa30>
 80078ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078b0:	430b      	orrs	r3, r1
 80078b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078b4:	430b      	orrs	r3, r1
 80078b6:	d120      	bne.n	80078fa <_dtoa_r+0xa72>
 80078b8:	2a00      	cmp	r2, #0
 80078ba:	dded      	ble.n	8007898 <_dtoa_r+0xa10>
 80078bc:	4649      	mov	r1, r9
 80078be:	2201      	movs	r2, #1
 80078c0:	4658      	mov	r0, fp
 80078c2:	f000 fbfd 	bl	80080c0 <__lshift>
 80078c6:	4621      	mov	r1, r4
 80078c8:	4681      	mov	r9, r0
 80078ca:	f000 fc65 	bl	8008198 <__mcmp>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	dc03      	bgt.n	80078da <_dtoa_r+0xa52>
 80078d2:	d1e1      	bne.n	8007898 <_dtoa_r+0xa10>
 80078d4:	f018 0f01 	tst.w	r8, #1
 80078d8:	d0de      	beq.n	8007898 <_dtoa_r+0xa10>
 80078da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80078de:	d1d8      	bne.n	8007892 <_dtoa_r+0xa0a>
 80078e0:	9a00      	ldr	r2, [sp, #0]
 80078e2:	2339      	movs	r3, #57	@ 0x39
 80078e4:	7013      	strb	r3, [r2, #0]
 80078e6:	4633      	mov	r3, r6
 80078e8:	461e      	mov	r6, r3
 80078ea:	3b01      	subs	r3, #1
 80078ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80078f0:	2a39      	cmp	r2, #57	@ 0x39
 80078f2:	d052      	beq.n	800799a <_dtoa_r+0xb12>
 80078f4:	3201      	adds	r2, #1
 80078f6:	701a      	strb	r2, [r3, #0]
 80078f8:	e612      	b.n	8007520 <_dtoa_r+0x698>
 80078fa:	2a00      	cmp	r2, #0
 80078fc:	dd07      	ble.n	800790e <_dtoa_r+0xa86>
 80078fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007902:	d0ed      	beq.n	80078e0 <_dtoa_r+0xa58>
 8007904:	9a00      	ldr	r2, [sp, #0]
 8007906:	f108 0301 	add.w	r3, r8, #1
 800790a:	7013      	strb	r3, [r2, #0]
 800790c:	e608      	b.n	8007520 <_dtoa_r+0x698>
 800790e:	9b07      	ldr	r3, [sp, #28]
 8007910:	9a07      	ldr	r2, [sp, #28]
 8007912:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007918:	4293      	cmp	r3, r2
 800791a:	d028      	beq.n	800796e <_dtoa_r+0xae6>
 800791c:	4649      	mov	r1, r9
 800791e:	2300      	movs	r3, #0
 8007920:	220a      	movs	r2, #10
 8007922:	4658      	mov	r0, fp
 8007924:	f000 f9d6 	bl	8007cd4 <__multadd>
 8007928:	42af      	cmp	r7, r5
 800792a:	4681      	mov	r9, r0
 800792c:	f04f 0300 	mov.w	r3, #0
 8007930:	f04f 020a 	mov.w	r2, #10
 8007934:	4639      	mov	r1, r7
 8007936:	4658      	mov	r0, fp
 8007938:	d107      	bne.n	800794a <_dtoa_r+0xac2>
 800793a:	f000 f9cb 	bl	8007cd4 <__multadd>
 800793e:	4607      	mov	r7, r0
 8007940:	4605      	mov	r5, r0
 8007942:	9b07      	ldr	r3, [sp, #28]
 8007944:	3301      	adds	r3, #1
 8007946:	9307      	str	r3, [sp, #28]
 8007948:	e774      	b.n	8007834 <_dtoa_r+0x9ac>
 800794a:	f000 f9c3 	bl	8007cd4 <__multadd>
 800794e:	4629      	mov	r1, r5
 8007950:	4607      	mov	r7, r0
 8007952:	2300      	movs	r3, #0
 8007954:	220a      	movs	r2, #10
 8007956:	4658      	mov	r0, fp
 8007958:	f000 f9bc 	bl	8007cd4 <__multadd>
 800795c:	4605      	mov	r5, r0
 800795e:	e7f0      	b.n	8007942 <_dtoa_r+0xaba>
 8007960:	9b00      	ldr	r3, [sp, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	bfcc      	ite	gt
 8007966:	461e      	movgt	r6, r3
 8007968:	2601      	movle	r6, #1
 800796a:	4456      	add	r6, sl
 800796c:	2700      	movs	r7, #0
 800796e:	4649      	mov	r1, r9
 8007970:	2201      	movs	r2, #1
 8007972:	4658      	mov	r0, fp
 8007974:	f000 fba4 	bl	80080c0 <__lshift>
 8007978:	4621      	mov	r1, r4
 800797a:	4681      	mov	r9, r0
 800797c:	f000 fc0c 	bl	8008198 <__mcmp>
 8007980:	2800      	cmp	r0, #0
 8007982:	dcb0      	bgt.n	80078e6 <_dtoa_r+0xa5e>
 8007984:	d102      	bne.n	800798c <_dtoa_r+0xb04>
 8007986:	f018 0f01 	tst.w	r8, #1
 800798a:	d1ac      	bne.n	80078e6 <_dtoa_r+0xa5e>
 800798c:	4633      	mov	r3, r6
 800798e:	461e      	mov	r6, r3
 8007990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007994:	2a30      	cmp	r2, #48	@ 0x30
 8007996:	d0fa      	beq.n	800798e <_dtoa_r+0xb06>
 8007998:	e5c2      	b.n	8007520 <_dtoa_r+0x698>
 800799a:	459a      	cmp	sl, r3
 800799c:	d1a4      	bne.n	80078e8 <_dtoa_r+0xa60>
 800799e:	9b04      	ldr	r3, [sp, #16]
 80079a0:	3301      	adds	r3, #1
 80079a2:	9304      	str	r3, [sp, #16]
 80079a4:	2331      	movs	r3, #49	@ 0x31
 80079a6:	f88a 3000 	strb.w	r3, [sl]
 80079aa:	e5b9      	b.n	8007520 <_dtoa_r+0x698>
 80079ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007a0c <_dtoa_r+0xb84>
 80079b2:	b11b      	cbz	r3, 80079bc <_dtoa_r+0xb34>
 80079b4:	f10a 0308 	add.w	r3, sl, #8
 80079b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80079ba:	6013      	str	r3, [r2, #0]
 80079bc:	4650      	mov	r0, sl
 80079be:	b019      	add	sp, #100	@ 0x64
 80079c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	f77f ae37 	ble.w	800763a <_dtoa_r+0x7b2>
 80079cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80079d0:	2001      	movs	r0, #1
 80079d2:	e655      	b.n	8007680 <_dtoa_r+0x7f8>
 80079d4:	9b00      	ldr	r3, [sp, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f77f aed6 	ble.w	8007788 <_dtoa_r+0x900>
 80079dc:	4656      	mov	r6, sl
 80079de:	4621      	mov	r1, r4
 80079e0:	4648      	mov	r0, r9
 80079e2:	f7ff f9c7 	bl	8006d74 <quorem>
 80079e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80079ea:	f806 8b01 	strb.w	r8, [r6], #1
 80079ee:	9b00      	ldr	r3, [sp, #0]
 80079f0:	eba6 020a 	sub.w	r2, r6, sl
 80079f4:	4293      	cmp	r3, r2
 80079f6:	ddb3      	ble.n	8007960 <_dtoa_r+0xad8>
 80079f8:	4649      	mov	r1, r9
 80079fa:	2300      	movs	r3, #0
 80079fc:	220a      	movs	r2, #10
 80079fe:	4658      	mov	r0, fp
 8007a00:	f000 f968 	bl	8007cd4 <__multadd>
 8007a04:	4681      	mov	r9, r0
 8007a06:	e7ea      	b.n	80079de <_dtoa_r+0xb56>
 8007a08:	0800af7a 	.word	0x0800af7a
 8007a0c:	0800af15 	.word	0x0800af15

08007a10 <_free_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4605      	mov	r5, r0
 8007a14:	2900      	cmp	r1, #0
 8007a16:	d041      	beq.n	8007a9c <_free_r+0x8c>
 8007a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a1c:	1f0c      	subs	r4, r1, #4
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bfb8      	it	lt
 8007a22:	18e4      	addlt	r4, r4, r3
 8007a24:	f000 f8e8 	bl	8007bf8 <__malloc_lock>
 8007a28:	4a1d      	ldr	r2, [pc, #116]	@ (8007aa0 <_free_r+0x90>)
 8007a2a:	6813      	ldr	r3, [r2, #0]
 8007a2c:	b933      	cbnz	r3, 8007a3c <_free_r+0x2c>
 8007a2e:	6063      	str	r3, [r4, #4]
 8007a30:	6014      	str	r4, [r2, #0]
 8007a32:	4628      	mov	r0, r5
 8007a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a38:	f000 b8e4 	b.w	8007c04 <__malloc_unlock>
 8007a3c:	42a3      	cmp	r3, r4
 8007a3e:	d908      	bls.n	8007a52 <_free_r+0x42>
 8007a40:	6820      	ldr	r0, [r4, #0]
 8007a42:	1821      	adds	r1, r4, r0
 8007a44:	428b      	cmp	r3, r1
 8007a46:	bf01      	itttt	eq
 8007a48:	6819      	ldreq	r1, [r3, #0]
 8007a4a:	685b      	ldreq	r3, [r3, #4]
 8007a4c:	1809      	addeq	r1, r1, r0
 8007a4e:	6021      	streq	r1, [r4, #0]
 8007a50:	e7ed      	b.n	8007a2e <_free_r+0x1e>
 8007a52:	461a      	mov	r2, r3
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	b10b      	cbz	r3, 8007a5c <_free_r+0x4c>
 8007a58:	42a3      	cmp	r3, r4
 8007a5a:	d9fa      	bls.n	8007a52 <_free_r+0x42>
 8007a5c:	6811      	ldr	r1, [r2, #0]
 8007a5e:	1850      	adds	r0, r2, r1
 8007a60:	42a0      	cmp	r0, r4
 8007a62:	d10b      	bne.n	8007a7c <_free_r+0x6c>
 8007a64:	6820      	ldr	r0, [r4, #0]
 8007a66:	4401      	add	r1, r0
 8007a68:	1850      	adds	r0, r2, r1
 8007a6a:	4283      	cmp	r3, r0
 8007a6c:	6011      	str	r1, [r2, #0]
 8007a6e:	d1e0      	bne.n	8007a32 <_free_r+0x22>
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	6053      	str	r3, [r2, #4]
 8007a76:	4408      	add	r0, r1
 8007a78:	6010      	str	r0, [r2, #0]
 8007a7a:	e7da      	b.n	8007a32 <_free_r+0x22>
 8007a7c:	d902      	bls.n	8007a84 <_free_r+0x74>
 8007a7e:	230c      	movs	r3, #12
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	e7d6      	b.n	8007a32 <_free_r+0x22>
 8007a84:	6820      	ldr	r0, [r4, #0]
 8007a86:	1821      	adds	r1, r4, r0
 8007a88:	428b      	cmp	r3, r1
 8007a8a:	bf04      	itt	eq
 8007a8c:	6819      	ldreq	r1, [r3, #0]
 8007a8e:	685b      	ldreq	r3, [r3, #4]
 8007a90:	6063      	str	r3, [r4, #4]
 8007a92:	bf04      	itt	eq
 8007a94:	1809      	addeq	r1, r1, r0
 8007a96:	6021      	streq	r1, [r4, #0]
 8007a98:	6054      	str	r4, [r2, #4]
 8007a9a:	e7ca      	b.n	8007a32 <_free_r+0x22>
 8007a9c:	bd38      	pop	{r3, r4, r5, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000bb0 	.word	0x20000bb0

08007aa4 <malloc>:
 8007aa4:	4b02      	ldr	r3, [pc, #8]	@ (8007ab0 <malloc+0xc>)
 8007aa6:	4601      	mov	r1, r0
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	f000 b825 	b.w	8007af8 <_malloc_r>
 8007aae:	bf00      	nop
 8007ab0:	20000104 	.word	0x20000104

08007ab4 <sbrk_aligned>:
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	4e0f      	ldr	r6, [pc, #60]	@ (8007af4 <sbrk_aligned+0x40>)
 8007ab8:	460c      	mov	r4, r1
 8007aba:	6831      	ldr	r1, [r6, #0]
 8007abc:	4605      	mov	r5, r0
 8007abe:	b911      	cbnz	r1, 8007ac6 <sbrk_aligned+0x12>
 8007ac0:	f001 fda2 	bl	8009608 <_sbrk_r>
 8007ac4:	6030      	str	r0, [r6, #0]
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	4628      	mov	r0, r5
 8007aca:	f001 fd9d 	bl	8009608 <_sbrk_r>
 8007ace:	1c43      	adds	r3, r0, #1
 8007ad0:	d103      	bne.n	8007ada <sbrk_aligned+0x26>
 8007ad2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	bd70      	pop	{r4, r5, r6, pc}
 8007ada:	1cc4      	adds	r4, r0, #3
 8007adc:	f024 0403 	bic.w	r4, r4, #3
 8007ae0:	42a0      	cmp	r0, r4
 8007ae2:	d0f8      	beq.n	8007ad6 <sbrk_aligned+0x22>
 8007ae4:	1a21      	subs	r1, r4, r0
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f001 fd8e 	bl	8009608 <_sbrk_r>
 8007aec:	3001      	adds	r0, #1
 8007aee:	d1f2      	bne.n	8007ad6 <sbrk_aligned+0x22>
 8007af0:	e7ef      	b.n	8007ad2 <sbrk_aligned+0x1e>
 8007af2:	bf00      	nop
 8007af4:	20000bac 	.word	0x20000bac

08007af8 <_malloc_r>:
 8007af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007afc:	1ccd      	adds	r5, r1, #3
 8007afe:	f025 0503 	bic.w	r5, r5, #3
 8007b02:	3508      	adds	r5, #8
 8007b04:	2d0c      	cmp	r5, #12
 8007b06:	bf38      	it	cc
 8007b08:	250c      	movcc	r5, #12
 8007b0a:	2d00      	cmp	r5, #0
 8007b0c:	4606      	mov	r6, r0
 8007b0e:	db01      	blt.n	8007b14 <_malloc_r+0x1c>
 8007b10:	42a9      	cmp	r1, r5
 8007b12:	d904      	bls.n	8007b1e <_malloc_r+0x26>
 8007b14:	230c      	movs	r3, #12
 8007b16:	6033      	str	r3, [r6, #0]
 8007b18:	2000      	movs	r0, #0
 8007b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bf4 <_malloc_r+0xfc>
 8007b22:	f000 f869 	bl	8007bf8 <__malloc_lock>
 8007b26:	f8d8 3000 	ldr.w	r3, [r8]
 8007b2a:	461c      	mov	r4, r3
 8007b2c:	bb44      	cbnz	r4, 8007b80 <_malloc_r+0x88>
 8007b2e:	4629      	mov	r1, r5
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7ff ffbf 	bl	8007ab4 <sbrk_aligned>
 8007b36:	1c43      	adds	r3, r0, #1
 8007b38:	4604      	mov	r4, r0
 8007b3a:	d158      	bne.n	8007bee <_malloc_r+0xf6>
 8007b3c:	f8d8 4000 	ldr.w	r4, [r8]
 8007b40:	4627      	mov	r7, r4
 8007b42:	2f00      	cmp	r7, #0
 8007b44:	d143      	bne.n	8007bce <_malloc_r+0xd6>
 8007b46:	2c00      	cmp	r4, #0
 8007b48:	d04b      	beq.n	8007be2 <_malloc_r+0xea>
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	4639      	mov	r1, r7
 8007b4e:	4630      	mov	r0, r6
 8007b50:	eb04 0903 	add.w	r9, r4, r3
 8007b54:	f001 fd58 	bl	8009608 <_sbrk_r>
 8007b58:	4581      	cmp	r9, r0
 8007b5a:	d142      	bne.n	8007be2 <_malloc_r+0xea>
 8007b5c:	6821      	ldr	r1, [r4, #0]
 8007b5e:	1a6d      	subs	r5, r5, r1
 8007b60:	4629      	mov	r1, r5
 8007b62:	4630      	mov	r0, r6
 8007b64:	f7ff ffa6 	bl	8007ab4 <sbrk_aligned>
 8007b68:	3001      	adds	r0, #1
 8007b6a:	d03a      	beq.n	8007be2 <_malloc_r+0xea>
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	442b      	add	r3, r5
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	f8d8 3000 	ldr.w	r3, [r8]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	bb62      	cbnz	r2, 8007bd4 <_malloc_r+0xdc>
 8007b7a:	f8c8 7000 	str.w	r7, [r8]
 8007b7e:	e00f      	b.n	8007ba0 <_malloc_r+0xa8>
 8007b80:	6822      	ldr	r2, [r4, #0]
 8007b82:	1b52      	subs	r2, r2, r5
 8007b84:	d420      	bmi.n	8007bc8 <_malloc_r+0xd0>
 8007b86:	2a0b      	cmp	r2, #11
 8007b88:	d917      	bls.n	8007bba <_malloc_r+0xc2>
 8007b8a:	1961      	adds	r1, r4, r5
 8007b8c:	42a3      	cmp	r3, r4
 8007b8e:	6025      	str	r5, [r4, #0]
 8007b90:	bf18      	it	ne
 8007b92:	6059      	strne	r1, [r3, #4]
 8007b94:	6863      	ldr	r3, [r4, #4]
 8007b96:	bf08      	it	eq
 8007b98:	f8c8 1000 	streq.w	r1, [r8]
 8007b9c:	5162      	str	r2, [r4, r5]
 8007b9e:	604b      	str	r3, [r1, #4]
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f000 f82f 	bl	8007c04 <__malloc_unlock>
 8007ba6:	f104 000b 	add.w	r0, r4, #11
 8007baa:	1d23      	adds	r3, r4, #4
 8007bac:	f020 0007 	bic.w	r0, r0, #7
 8007bb0:	1ac2      	subs	r2, r0, r3
 8007bb2:	bf1c      	itt	ne
 8007bb4:	1a1b      	subne	r3, r3, r0
 8007bb6:	50a3      	strne	r3, [r4, r2]
 8007bb8:	e7af      	b.n	8007b1a <_malloc_r+0x22>
 8007bba:	6862      	ldr	r2, [r4, #4]
 8007bbc:	42a3      	cmp	r3, r4
 8007bbe:	bf0c      	ite	eq
 8007bc0:	f8c8 2000 	streq.w	r2, [r8]
 8007bc4:	605a      	strne	r2, [r3, #4]
 8007bc6:	e7eb      	b.n	8007ba0 <_malloc_r+0xa8>
 8007bc8:	4623      	mov	r3, r4
 8007bca:	6864      	ldr	r4, [r4, #4]
 8007bcc:	e7ae      	b.n	8007b2c <_malloc_r+0x34>
 8007bce:	463c      	mov	r4, r7
 8007bd0:	687f      	ldr	r7, [r7, #4]
 8007bd2:	e7b6      	b.n	8007b42 <_malloc_r+0x4a>
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	42a3      	cmp	r3, r4
 8007bda:	d1fb      	bne.n	8007bd4 <_malloc_r+0xdc>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	6053      	str	r3, [r2, #4]
 8007be0:	e7de      	b.n	8007ba0 <_malloc_r+0xa8>
 8007be2:	230c      	movs	r3, #12
 8007be4:	6033      	str	r3, [r6, #0]
 8007be6:	4630      	mov	r0, r6
 8007be8:	f000 f80c 	bl	8007c04 <__malloc_unlock>
 8007bec:	e794      	b.n	8007b18 <_malloc_r+0x20>
 8007bee:	6005      	str	r5, [r0, #0]
 8007bf0:	e7d6      	b.n	8007ba0 <_malloc_r+0xa8>
 8007bf2:	bf00      	nop
 8007bf4:	20000bb0 	.word	0x20000bb0

08007bf8 <__malloc_lock>:
 8007bf8:	4801      	ldr	r0, [pc, #4]	@ (8007c00 <__malloc_lock+0x8>)
 8007bfa:	f7ff b87e 	b.w	8006cfa <__retarget_lock_acquire_recursive>
 8007bfe:	bf00      	nop
 8007c00:	20000ba8 	.word	0x20000ba8

08007c04 <__malloc_unlock>:
 8007c04:	4801      	ldr	r0, [pc, #4]	@ (8007c0c <__malloc_unlock+0x8>)
 8007c06:	f7ff b879 	b.w	8006cfc <__retarget_lock_release_recursive>
 8007c0a:	bf00      	nop
 8007c0c:	20000ba8 	.word	0x20000ba8

08007c10 <_Balloc>:
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	69c6      	ldr	r6, [r0, #28]
 8007c14:	4604      	mov	r4, r0
 8007c16:	460d      	mov	r5, r1
 8007c18:	b976      	cbnz	r6, 8007c38 <_Balloc+0x28>
 8007c1a:	2010      	movs	r0, #16
 8007c1c:	f7ff ff42 	bl	8007aa4 <malloc>
 8007c20:	4602      	mov	r2, r0
 8007c22:	61e0      	str	r0, [r4, #28]
 8007c24:	b920      	cbnz	r0, 8007c30 <_Balloc+0x20>
 8007c26:	4b18      	ldr	r3, [pc, #96]	@ (8007c88 <_Balloc+0x78>)
 8007c28:	4818      	ldr	r0, [pc, #96]	@ (8007c8c <_Balloc+0x7c>)
 8007c2a:	216b      	movs	r1, #107	@ 0x6b
 8007c2c:	f7ff f884 	bl	8006d38 <__assert_func>
 8007c30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c34:	6006      	str	r6, [r0, #0]
 8007c36:	60c6      	str	r6, [r0, #12]
 8007c38:	69e6      	ldr	r6, [r4, #28]
 8007c3a:	68f3      	ldr	r3, [r6, #12]
 8007c3c:	b183      	cbz	r3, 8007c60 <_Balloc+0x50>
 8007c3e:	69e3      	ldr	r3, [r4, #28]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c46:	b9b8      	cbnz	r0, 8007c78 <_Balloc+0x68>
 8007c48:	2101      	movs	r1, #1
 8007c4a:	fa01 f605 	lsl.w	r6, r1, r5
 8007c4e:	1d72      	adds	r2, r6, #5
 8007c50:	0092      	lsls	r2, r2, #2
 8007c52:	4620      	mov	r0, r4
 8007c54:	f001 fcf7 	bl	8009646 <_calloc_r>
 8007c58:	b160      	cbz	r0, 8007c74 <_Balloc+0x64>
 8007c5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c5e:	e00e      	b.n	8007c7e <_Balloc+0x6e>
 8007c60:	2221      	movs	r2, #33	@ 0x21
 8007c62:	2104      	movs	r1, #4
 8007c64:	4620      	mov	r0, r4
 8007c66:	f001 fcee 	bl	8009646 <_calloc_r>
 8007c6a:	69e3      	ldr	r3, [r4, #28]
 8007c6c:	60f0      	str	r0, [r6, #12]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e4      	bne.n	8007c3e <_Balloc+0x2e>
 8007c74:	2000      	movs	r0, #0
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	6802      	ldr	r2, [r0, #0]
 8007c7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c84:	e7f7      	b.n	8007c76 <_Balloc+0x66>
 8007c86:	bf00      	nop
 8007c88:	0800ad30 	.word	0x0800ad30
 8007c8c:	0800af8b 	.word	0x0800af8b

08007c90 <_Bfree>:
 8007c90:	b570      	push	{r4, r5, r6, lr}
 8007c92:	69c6      	ldr	r6, [r0, #28]
 8007c94:	4605      	mov	r5, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	b976      	cbnz	r6, 8007cb8 <_Bfree+0x28>
 8007c9a:	2010      	movs	r0, #16
 8007c9c:	f7ff ff02 	bl	8007aa4 <malloc>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	61e8      	str	r0, [r5, #28]
 8007ca4:	b920      	cbnz	r0, 8007cb0 <_Bfree+0x20>
 8007ca6:	4b09      	ldr	r3, [pc, #36]	@ (8007ccc <_Bfree+0x3c>)
 8007ca8:	4809      	ldr	r0, [pc, #36]	@ (8007cd0 <_Bfree+0x40>)
 8007caa:	218f      	movs	r1, #143	@ 0x8f
 8007cac:	f7ff f844 	bl	8006d38 <__assert_func>
 8007cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cb4:	6006      	str	r6, [r0, #0]
 8007cb6:	60c6      	str	r6, [r0, #12]
 8007cb8:	b13c      	cbz	r4, 8007cca <_Bfree+0x3a>
 8007cba:	69eb      	ldr	r3, [r5, #28]
 8007cbc:	6862      	ldr	r2, [r4, #4]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cc4:	6021      	str	r1, [r4, #0]
 8007cc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cca:	bd70      	pop	{r4, r5, r6, pc}
 8007ccc:	0800ad30 	.word	0x0800ad30
 8007cd0:	0800af8b 	.word	0x0800af8b

08007cd4 <__multadd>:
 8007cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd8:	690d      	ldr	r5, [r1, #16]
 8007cda:	4607      	mov	r7, r0
 8007cdc:	460c      	mov	r4, r1
 8007cde:	461e      	mov	r6, r3
 8007ce0:	f101 0c14 	add.w	ip, r1, #20
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	f8dc 3000 	ldr.w	r3, [ip]
 8007cea:	b299      	uxth	r1, r3
 8007cec:	fb02 6101 	mla	r1, r2, r1, r6
 8007cf0:	0c1e      	lsrs	r6, r3, #16
 8007cf2:	0c0b      	lsrs	r3, r1, #16
 8007cf4:	fb02 3306 	mla	r3, r2, r6, r3
 8007cf8:	b289      	uxth	r1, r1
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d00:	4285      	cmp	r5, r0
 8007d02:	f84c 1b04 	str.w	r1, [ip], #4
 8007d06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d0a:	dcec      	bgt.n	8007ce6 <__multadd+0x12>
 8007d0c:	b30e      	cbz	r6, 8007d52 <__multadd+0x7e>
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	42ab      	cmp	r3, r5
 8007d12:	dc19      	bgt.n	8007d48 <__multadd+0x74>
 8007d14:	6861      	ldr	r1, [r4, #4]
 8007d16:	4638      	mov	r0, r7
 8007d18:	3101      	adds	r1, #1
 8007d1a:	f7ff ff79 	bl	8007c10 <_Balloc>
 8007d1e:	4680      	mov	r8, r0
 8007d20:	b928      	cbnz	r0, 8007d2e <__multadd+0x5a>
 8007d22:	4602      	mov	r2, r0
 8007d24:	4b0c      	ldr	r3, [pc, #48]	@ (8007d58 <__multadd+0x84>)
 8007d26:	480d      	ldr	r0, [pc, #52]	@ (8007d5c <__multadd+0x88>)
 8007d28:	21ba      	movs	r1, #186	@ 0xba
 8007d2a:	f7ff f805 	bl	8006d38 <__assert_func>
 8007d2e:	6922      	ldr	r2, [r4, #16]
 8007d30:	3202      	adds	r2, #2
 8007d32:	f104 010c 	add.w	r1, r4, #12
 8007d36:	0092      	lsls	r2, r2, #2
 8007d38:	300c      	adds	r0, #12
 8007d3a:	f7fe ffe8 	bl	8006d0e <memcpy>
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4638      	mov	r0, r7
 8007d42:	f7ff ffa5 	bl	8007c90 <_Bfree>
 8007d46:	4644      	mov	r4, r8
 8007d48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d4c:	3501      	adds	r5, #1
 8007d4e:	615e      	str	r6, [r3, #20]
 8007d50:	6125      	str	r5, [r4, #16]
 8007d52:	4620      	mov	r0, r4
 8007d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d58:	0800af7a 	.word	0x0800af7a
 8007d5c:	0800af8b 	.word	0x0800af8b

08007d60 <__s2b>:
 8007d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d64:	460c      	mov	r4, r1
 8007d66:	4615      	mov	r5, r2
 8007d68:	461f      	mov	r7, r3
 8007d6a:	2209      	movs	r2, #9
 8007d6c:	3308      	adds	r3, #8
 8007d6e:	4606      	mov	r6, r0
 8007d70:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d74:	2100      	movs	r1, #0
 8007d76:	2201      	movs	r2, #1
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	db09      	blt.n	8007d90 <__s2b+0x30>
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	f7ff ff47 	bl	8007c10 <_Balloc>
 8007d82:	b940      	cbnz	r0, 8007d96 <__s2b+0x36>
 8007d84:	4602      	mov	r2, r0
 8007d86:	4b19      	ldr	r3, [pc, #100]	@ (8007dec <__s2b+0x8c>)
 8007d88:	4819      	ldr	r0, [pc, #100]	@ (8007df0 <__s2b+0x90>)
 8007d8a:	21d3      	movs	r1, #211	@ 0xd3
 8007d8c:	f7fe ffd4 	bl	8006d38 <__assert_func>
 8007d90:	0052      	lsls	r2, r2, #1
 8007d92:	3101      	adds	r1, #1
 8007d94:	e7f0      	b.n	8007d78 <__s2b+0x18>
 8007d96:	9b08      	ldr	r3, [sp, #32]
 8007d98:	6143      	str	r3, [r0, #20]
 8007d9a:	2d09      	cmp	r5, #9
 8007d9c:	f04f 0301 	mov.w	r3, #1
 8007da0:	6103      	str	r3, [r0, #16]
 8007da2:	dd16      	ble.n	8007dd2 <__s2b+0x72>
 8007da4:	f104 0909 	add.w	r9, r4, #9
 8007da8:	46c8      	mov	r8, r9
 8007daa:	442c      	add	r4, r5
 8007dac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007db0:	4601      	mov	r1, r0
 8007db2:	3b30      	subs	r3, #48	@ 0x30
 8007db4:	220a      	movs	r2, #10
 8007db6:	4630      	mov	r0, r6
 8007db8:	f7ff ff8c 	bl	8007cd4 <__multadd>
 8007dbc:	45a0      	cmp	r8, r4
 8007dbe:	d1f5      	bne.n	8007dac <__s2b+0x4c>
 8007dc0:	f1a5 0408 	sub.w	r4, r5, #8
 8007dc4:	444c      	add	r4, r9
 8007dc6:	1b2d      	subs	r5, r5, r4
 8007dc8:	1963      	adds	r3, r4, r5
 8007dca:	42bb      	cmp	r3, r7
 8007dcc:	db04      	blt.n	8007dd8 <__s2b+0x78>
 8007dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dd2:	340a      	adds	r4, #10
 8007dd4:	2509      	movs	r5, #9
 8007dd6:	e7f6      	b.n	8007dc6 <__s2b+0x66>
 8007dd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007ddc:	4601      	mov	r1, r0
 8007dde:	3b30      	subs	r3, #48	@ 0x30
 8007de0:	220a      	movs	r2, #10
 8007de2:	4630      	mov	r0, r6
 8007de4:	f7ff ff76 	bl	8007cd4 <__multadd>
 8007de8:	e7ee      	b.n	8007dc8 <__s2b+0x68>
 8007dea:	bf00      	nop
 8007dec:	0800af7a 	.word	0x0800af7a
 8007df0:	0800af8b 	.word	0x0800af8b

08007df4 <__hi0bits>:
 8007df4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007df8:	4603      	mov	r3, r0
 8007dfa:	bf36      	itet	cc
 8007dfc:	0403      	lslcc	r3, r0, #16
 8007dfe:	2000      	movcs	r0, #0
 8007e00:	2010      	movcc	r0, #16
 8007e02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e06:	bf3c      	itt	cc
 8007e08:	021b      	lslcc	r3, r3, #8
 8007e0a:	3008      	addcc	r0, #8
 8007e0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e10:	bf3c      	itt	cc
 8007e12:	011b      	lslcc	r3, r3, #4
 8007e14:	3004      	addcc	r0, #4
 8007e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e1a:	bf3c      	itt	cc
 8007e1c:	009b      	lslcc	r3, r3, #2
 8007e1e:	3002      	addcc	r0, #2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	db05      	blt.n	8007e30 <__hi0bits+0x3c>
 8007e24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e28:	f100 0001 	add.w	r0, r0, #1
 8007e2c:	bf08      	it	eq
 8007e2e:	2020      	moveq	r0, #32
 8007e30:	4770      	bx	lr

08007e32 <__lo0bits>:
 8007e32:	6803      	ldr	r3, [r0, #0]
 8007e34:	4602      	mov	r2, r0
 8007e36:	f013 0007 	ands.w	r0, r3, #7
 8007e3a:	d00b      	beq.n	8007e54 <__lo0bits+0x22>
 8007e3c:	07d9      	lsls	r1, r3, #31
 8007e3e:	d421      	bmi.n	8007e84 <__lo0bits+0x52>
 8007e40:	0798      	lsls	r0, r3, #30
 8007e42:	bf49      	itett	mi
 8007e44:	085b      	lsrmi	r3, r3, #1
 8007e46:	089b      	lsrpl	r3, r3, #2
 8007e48:	2001      	movmi	r0, #1
 8007e4a:	6013      	strmi	r3, [r2, #0]
 8007e4c:	bf5c      	itt	pl
 8007e4e:	6013      	strpl	r3, [r2, #0]
 8007e50:	2002      	movpl	r0, #2
 8007e52:	4770      	bx	lr
 8007e54:	b299      	uxth	r1, r3
 8007e56:	b909      	cbnz	r1, 8007e5c <__lo0bits+0x2a>
 8007e58:	0c1b      	lsrs	r3, r3, #16
 8007e5a:	2010      	movs	r0, #16
 8007e5c:	b2d9      	uxtb	r1, r3
 8007e5e:	b909      	cbnz	r1, 8007e64 <__lo0bits+0x32>
 8007e60:	3008      	adds	r0, #8
 8007e62:	0a1b      	lsrs	r3, r3, #8
 8007e64:	0719      	lsls	r1, r3, #28
 8007e66:	bf04      	itt	eq
 8007e68:	091b      	lsreq	r3, r3, #4
 8007e6a:	3004      	addeq	r0, #4
 8007e6c:	0799      	lsls	r1, r3, #30
 8007e6e:	bf04      	itt	eq
 8007e70:	089b      	lsreq	r3, r3, #2
 8007e72:	3002      	addeq	r0, #2
 8007e74:	07d9      	lsls	r1, r3, #31
 8007e76:	d403      	bmi.n	8007e80 <__lo0bits+0x4e>
 8007e78:	085b      	lsrs	r3, r3, #1
 8007e7a:	f100 0001 	add.w	r0, r0, #1
 8007e7e:	d003      	beq.n	8007e88 <__lo0bits+0x56>
 8007e80:	6013      	str	r3, [r2, #0]
 8007e82:	4770      	bx	lr
 8007e84:	2000      	movs	r0, #0
 8007e86:	4770      	bx	lr
 8007e88:	2020      	movs	r0, #32
 8007e8a:	4770      	bx	lr

08007e8c <__i2b>:
 8007e8c:	b510      	push	{r4, lr}
 8007e8e:	460c      	mov	r4, r1
 8007e90:	2101      	movs	r1, #1
 8007e92:	f7ff febd 	bl	8007c10 <_Balloc>
 8007e96:	4602      	mov	r2, r0
 8007e98:	b928      	cbnz	r0, 8007ea6 <__i2b+0x1a>
 8007e9a:	4b05      	ldr	r3, [pc, #20]	@ (8007eb0 <__i2b+0x24>)
 8007e9c:	4805      	ldr	r0, [pc, #20]	@ (8007eb4 <__i2b+0x28>)
 8007e9e:	f240 1145 	movw	r1, #325	@ 0x145
 8007ea2:	f7fe ff49 	bl	8006d38 <__assert_func>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	6144      	str	r4, [r0, #20]
 8007eaa:	6103      	str	r3, [r0, #16]
 8007eac:	bd10      	pop	{r4, pc}
 8007eae:	bf00      	nop
 8007eb0:	0800af7a 	.word	0x0800af7a
 8007eb4:	0800af8b 	.word	0x0800af8b

08007eb8 <__multiply>:
 8007eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ebc:	4614      	mov	r4, r2
 8007ebe:	690a      	ldr	r2, [r1, #16]
 8007ec0:	6923      	ldr	r3, [r4, #16]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	bfa8      	it	ge
 8007ec6:	4623      	movge	r3, r4
 8007ec8:	460f      	mov	r7, r1
 8007eca:	bfa4      	itt	ge
 8007ecc:	460c      	movge	r4, r1
 8007ece:	461f      	movge	r7, r3
 8007ed0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ed4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007ed8:	68a3      	ldr	r3, [r4, #8]
 8007eda:	6861      	ldr	r1, [r4, #4]
 8007edc:	eb0a 0609 	add.w	r6, sl, r9
 8007ee0:	42b3      	cmp	r3, r6
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	bfb8      	it	lt
 8007ee6:	3101      	addlt	r1, #1
 8007ee8:	f7ff fe92 	bl	8007c10 <_Balloc>
 8007eec:	b930      	cbnz	r0, 8007efc <__multiply+0x44>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	4b44      	ldr	r3, [pc, #272]	@ (8008004 <__multiply+0x14c>)
 8007ef2:	4845      	ldr	r0, [pc, #276]	@ (8008008 <__multiply+0x150>)
 8007ef4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ef8:	f7fe ff1e 	bl	8006d38 <__assert_func>
 8007efc:	f100 0514 	add.w	r5, r0, #20
 8007f00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f04:	462b      	mov	r3, r5
 8007f06:	2200      	movs	r2, #0
 8007f08:	4543      	cmp	r3, r8
 8007f0a:	d321      	bcc.n	8007f50 <__multiply+0x98>
 8007f0c:	f107 0114 	add.w	r1, r7, #20
 8007f10:	f104 0214 	add.w	r2, r4, #20
 8007f14:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007f18:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007f1c:	9302      	str	r3, [sp, #8]
 8007f1e:	1b13      	subs	r3, r2, r4
 8007f20:	3b15      	subs	r3, #21
 8007f22:	f023 0303 	bic.w	r3, r3, #3
 8007f26:	3304      	adds	r3, #4
 8007f28:	f104 0715 	add.w	r7, r4, #21
 8007f2c:	42ba      	cmp	r2, r7
 8007f2e:	bf38      	it	cc
 8007f30:	2304      	movcc	r3, #4
 8007f32:	9301      	str	r3, [sp, #4]
 8007f34:	9b02      	ldr	r3, [sp, #8]
 8007f36:	9103      	str	r1, [sp, #12]
 8007f38:	428b      	cmp	r3, r1
 8007f3a:	d80c      	bhi.n	8007f56 <__multiply+0x9e>
 8007f3c:	2e00      	cmp	r6, #0
 8007f3e:	dd03      	ble.n	8007f48 <__multiply+0x90>
 8007f40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d05b      	beq.n	8008000 <__multiply+0x148>
 8007f48:	6106      	str	r6, [r0, #16]
 8007f4a:	b005      	add	sp, #20
 8007f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f50:	f843 2b04 	str.w	r2, [r3], #4
 8007f54:	e7d8      	b.n	8007f08 <__multiply+0x50>
 8007f56:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f5a:	f1ba 0f00 	cmp.w	sl, #0
 8007f5e:	d024      	beq.n	8007faa <__multiply+0xf2>
 8007f60:	f104 0e14 	add.w	lr, r4, #20
 8007f64:	46a9      	mov	r9, r5
 8007f66:	f04f 0c00 	mov.w	ip, #0
 8007f6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f6e:	f8d9 3000 	ldr.w	r3, [r9]
 8007f72:	fa1f fb87 	uxth.w	fp, r7
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f7c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007f80:	f8d9 7000 	ldr.w	r7, [r9]
 8007f84:	4463      	add	r3, ip
 8007f86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f8a:	fb0a c70b 	mla	r7, sl, fp, ip
 8007f8e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f98:	4572      	cmp	r2, lr
 8007f9a:	f849 3b04 	str.w	r3, [r9], #4
 8007f9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007fa2:	d8e2      	bhi.n	8007f6a <__multiply+0xb2>
 8007fa4:	9b01      	ldr	r3, [sp, #4]
 8007fa6:	f845 c003 	str.w	ip, [r5, r3]
 8007faa:	9b03      	ldr	r3, [sp, #12]
 8007fac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007fb0:	3104      	adds	r1, #4
 8007fb2:	f1b9 0f00 	cmp.w	r9, #0
 8007fb6:	d021      	beq.n	8007ffc <__multiply+0x144>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	f104 0c14 	add.w	ip, r4, #20
 8007fbe:	46ae      	mov	lr, r5
 8007fc0:	f04f 0a00 	mov.w	sl, #0
 8007fc4:	f8bc b000 	ldrh.w	fp, [ip]
 8007fc8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007fcc:	fb09 770b 	mla	r7, r9, fp, r7
 8007fd0:	4457      	add	r7, sl
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007fd8:	f84e 3b04 	str.w	r3, [lr], #4
 8007fdc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007fe0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fe4:	f8be 3000 	ldrh.w	r3, [lr]
 8007fe8:	fb09 330a 	mla	r3, r9, sl, r3
 8007fec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007ff0:	4562      	cmp	r2, ip
 8007ff2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ff6:	d8e5      	bhi.n	8007fc4 <__multiply+0x10c>
 8007ff8:	9f01      	ldr	r7, [sp, #4]
 8007ffa:	51eb      	str	r3, [r5, r7]
 8007ffc:	3504      	adds	r5, #4
 8007ffe:	e799      	b.n	8007f34 <__multiply+0x7c>
 8008000:	3e01      	subs	r6, #1
 8008002:	e79b      	b.n	8007f3c <__multiply+0x84>
 8008004:	0800af7a 	.word	0x0800af7a
 8008008:	0800af8b 	.word	0x0800af8b

0800800c <__pow5mult>:
 800800c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008010:	4615      	mov	r5, r2
 8008012:	f012 0203 	ands.w	r2, r2, #3
 8008016:	4607      	mov	r7, r0
 8008018:	460e      	mov	r6, r1
 800801a:	d007      	beq.n	800802c <__pow5mult+0x20>
 800801c:	4c25      	ldr	r4, [pc, #148]	@ (80080b4 <__pow5mult+0xa8>)
 800801e:	3a01      	subs	r2, #1
 8008020:	2300      	movs	r3, #0
 8008022:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008026:	f7ff fe55 	bl	8007cd4 <__multadd>
 800802a:	4606      	mov	r6, r0
 800802c:	10ad      	asrs	r5, r5, #2
 800802e:	d03d      	beq.n	80080ac <__pow5mult+0xa0>
 8008030:	69fc      	ldr	r4, [r7, #28]
 8008032:	b97c      	cbnz	r4, 8008054 <__pow5mult+0x48>
 8008034:	2010      	movs	r0, #16
 8008036:	f7ff fd35 	bl	8007aa4 <malloc>
 800803a:	4602      	mov	r2, r0
 800803c:	61f8      	str	r0, [r7, #28]
 800803e:	b928      	cbnz	r0, 800804c <__pow5mult+0x40>
 8008040:	4b1d      	ldr	r3, [pc, #116]	@ (80080b8 <__pow5mult+0xac>)
 8008042:	481e      	ldr	r0, [pc, #120]	@ (80080bc <__pow5mult+0xb0>)
 8008044:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008048:	f7fe fe76 	bl	8006d38 <__assert_func>
 800804c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008050:	6004      	str	r4, [r0, #0]
 8008052:	60c4      	str	r4, [r0, #12]
 8008054:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008058:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800805c:	b94c      	cbnz	r4, 8008072 <__pow5mult+0x66>
 800805e:	f240 2171 	movw	r1, #625	@ 0x271
 8008062:	4638      	mov	r0, r7
 8008064:	f7ff ff12 	bl	8007e8c <__i2b>
 8008068:	2300      	movs	r3, #0
 800806a:	f8c8 0008 	str.w	r0, [r8, #8]
 800806e:	4604      	mov	r4, r0
 8008070:	6003      	str	r3, [r0, #0]
 8008072:	f04f 0900 	mov.w	r9, #0
 8008076:	07eb      	lsls	r3, r5, #31
 8008078:	d50a      	bpl.n	8008090 <__pow5mult+0x84>
 800807a:	4631      	mov	r1, r6
 800807c:	4622      	mov	r2, r4
 800807e:	4638      	mov	r0, r7
 8008080:	f7ff ff1a 	bl	8007eb8 <__multiply>
 8008084:	4631      	mov	r1, r6
 8008086:	4680      	mov	r8, r0
 8008088:	4638      	mov	r0, r7
 800808a:	f7ff fe01 	bl	8007c90 <_Bfree>
 800808e:	4646      	mov	r6, r8
 8008090:	106d      	asrs	r5, r5, #1
 8008092:	d00b      	beq.n	80080ac <__pow5mult+0xa0>
 8008094:	6820      	ldr	r0, [r4, #0]
 8008096:	b938      	cbnz	r0, 80080a8 <__pow5mult+0x9c>
 8008098:	4622      	mov	r2, r4
 800809a:	4621      	mov	r1, r4
 800809c:	4638      	mov	r0, r7
 800809e:	f7ff ff0b 	bl	8007eb8 <__multiply>
 80080a2:	6020      	str	r0, [r4, #0]
 80080a4:	f8c0 9000 	str.w	r9, [r0]
 80080a8:	4604      	mov	r4, r0
 80080aa:	e7e4      	b.n	8008076 <__pow5mult+0x6a>
 80080ac:	4630      	mov	r0, r6
 80080ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080b2:	bf00      	nop
 80080b4:	0800afe4 	.word	0x0800afe4
 80080b8:	0800ad30 	.word	0x0800ad30
 80080bc:	0800af8b 	.word	0x0800af8b

080080c0 <__lshift>:
 80080c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c4:	460c      	mov	r4, r1
 80080c6:	6849      	ldr	r1, [r1, #4]
 80080c8:	6923      	ldr	r3, [r4, #16]
 80080ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080ce:	68a3      	ldr	r3, [r4, #8]
 80080d0:	4607      	mov	r7, r0
 80080d2:	4691      	mov	r9, r2
 80080d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080d8:	f108 0601 	add.w	r6, r8, #1
 80080dc:	42b3      	cmp	r3, r6
 80080de:	db0b      	blt.n	80080f8 <__lshift+0x38>
 80080e0:	4638      	mov	r0, r7
 80080e2:	f7ff fd95 	bl	8007c10 <_Balloc>
 80080e6:	4605      	mov	r5, r0
 80080e8:	b948      	cbnz	r0, 80080fe <__lshift+0x3e>
 80080ea:	4602      	mov	r2, r0
 80080ec:	4b28      	ldr	r3, [pc, #160]	@ (8008190 <__lshift+0xd0>)
 80080ee:	4829      	ldr	r0, [pc, #164]	@ (8008194 <__lshift+0xd4>)
 80080f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80080f4:	f7fe fe20 	bl	8006d38 <__assert_func>
 80080f8:	3101      	adds	r1, #1
 80080fa:	005b      	lsls	r3, r3, #1
 80080fc:	e7ee      	b.n	80080dc <__lshift+0x1c>
 80080fe:	2300      	movs	r3, #0
 8008100:	f100 0114 	add.w	r1, r0, #20
 8008104:	f100 0210 	add.w	r2, r0, #16
 8008108:	4618      	mov	r0, r3
 800810a:	4553      	cmp	r3, sl
 800810c:	db33      	blt.n	8008176 <__lshift+0xb6>
 800810e:	6920      	ldr	r0, [r4, #16]
 8008110:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008114:	f104 0314 	add.w	r3, r4, #20
 8008118:	f019 091f 	ands.w	r9, r9, #31
 800811c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008120:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008124:	d02b      	beq.n	800817e <__lshift+0xbe>
 8008126:	f1c9 0e20 	rsb	lr, r9, #32
 800812a:	468a      	mov	sl, r1
 800812c:	2200      	movs	r2, #0
 800812e:	6818      	ldr	r0, [r3, #0]
 8008130:	fa00 f009 	lsl.w	r0, r0, r9
 8008134:	4310      	orrs	r0, r2
 8008136:	f84a 0b04 	str.w	r0, [sl], #4
 800813a:	f853 2b04 	ldr.w	r2, [r3], #4
 800813e:	459c      	cmp	ip, r3
 8008140:	fa22 f20e 	lsr.w	r2, r2, lr
 8008144:	d8f3      	bhi.n	800812e <__lshift+0x6e>
 8008146:	ebac 0304 	sub.w	r3, ip, r4
 800814a:	3b15      	subs	r3, #21
 800814c:	f023 0303 	bic.w	r3, r3, #3
 8008150:	3304      	adds	r3, #4
 8008152:	f104 0015 	add.w	r0, r4, #21
 8008156:	4584      	cmp	ip, r0
 8008158:	bf38      	it	cc
 800815a:	2304      	movcc	r3, #4
 800815c:	50ca      	str	r2, [r1, r3]
 800815e:	b10a      	cbz	r2, 8008164 <__lshift+0xa4>
 8008160:	f108 0602 	add.w	r6, r8, #2
 8008164:	3e01      	subs	r6, #1
 8008166:	4638      	mov	r0, r7
 8008168:	612e      	str	r6, [r5, #16]
 800816a:	4621      	mov	r1, r4
 800816c:	f7ff fd90 	bl	8007c90 <_Bfree>
 8008170:	4628      	mov	r0, r5
 8008172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008176:	f842 0f04 	str.w	r0, [r2, #4]!
 800817a:	3301      	adds	r3, #1
 800817c:	e7c5      	b.n	800810a <__lshift+0x4a>
 800817e:	3904      	subs	r1, #4
 8008180:	f853 2b04 	ldr.w	r2, [r3], #4
 8008184:	f841 2f04 	str.w	r2, [r1, #4]!
 8008188:	459c      	cmp	ip, r3
 800818a:	d8f9      	bhi.n	8008180 <__lshift+0xc0>
 800818c:	e7ea      	b.n	8008164 <__lshift+0xa4>
 800818e:	bf00      	nop
 8008190:	0800af7a 	.word	0x0800af7a
 8008194:	0800af8b 	.word	0x0800af8b

08008198 <__mcmp>:
 8008198:	690a      	ldr	r2, [r1, #16]
 800819a:	4603      	mov	r3, r0
 800819c:	6900      	ldr	r0, [r0, #16]
 800819e:	1a80      	subs	r0, r0, r2
 80081a0:	b530      	push	{r4, r5, lr}
 80081a2:	d10e      	bne.n	80081c2 <__mcmp+0x2a>
 80081a4:	3314      	adds	r3, #20
 80081a6:	3114      	adds	r1, #20
 80081a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80081ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80081b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80081b8:	4295      	cmp	r5, r2
 80081ba:	d003      	beq.n	80081c4 <__mcmp+0x2c>
 80081bc:	d205      	bcs.n	80081ca <__mcmp+0x32>
 80081be:	f04f 30ff 	mov.w	r0, #4294967295
 80081c2:	bd30      	pop	{r4, r5, pc}
 80081c4:	42a3      	cmp	r3, r4
 80081c6:	d3f3      	bcc.n	80081b0 <__mcmp+0x18>
 80081c8:	e7fb      	b.n	80081c2 <__mcmp+0x2a>
 80081ca:	2001      	movs	r0, #1
 80081cc:	e7f9      	b.n	80081c2 <__mcmp+0x2a>
	...

080081d0 <__mdiff>:
 80081d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d4:	4689      	mov	r9, r1
 80081d6:	4606      	mov	r6, r0
 80081d8:	4611      	mov	r1, r2
 80081da:	4648      	mov	r0, r9
 80081dc:	4614      	mov	r4, r2
 80081de:	f7ff ffdb 	bl	8008198 <__mcmp>
 80081e2:	1e05      	subs	r5, r0, #0
 80081e4:	d112      	bne.n	800820c <__mdiff+0x3c>
 80081e6:	4629      	mov	r1, r5
 80081e8:	4630      	mov	r0, r6
 80081ea:	f7ff fd11 	bl	8007c10 <_Balloc>
 80081ee:	4602      	mov	r2, r0
 80081f0:	b928      	cbnz	r0, 80081fe <__mdiff+0x2e>
 80081f2:	4b3f      	ldr	r3, [pc, #252]	@ (80082f0 <__mdiff+0x120>)
 80081f4:	f240 2137 	movw	r1, #567	@ 0x237
 80081f8:	483e      	ldr	r0, [pc, #248]	@ (80082f4 <__mdiff+0x124>)
 80081fa:	f7fe fd9d 	bl	8006d38 <__assert_func>
 80081fe:	2301      	movs	r3, #1
 8008200:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008204:	4610      	mov	r0, r2
 8008206:	b003      	add	sp, #12
 8008208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820c:	bfbc      	itt	lt
 800820e:	464b      	movlt	r3, r9
 8008210:	46a1      	movlt	r9, r4
 8008212:	4630      	mov	r0, r6
 8008214:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008218:	bfba      	itte	lt
 800821a:	461c      	movlt	r4, r3
 800821c:	2501      	movlt	r5, #1
 800821e:	2500      	movge	r5, #0
 8008220:	f7ff fcf6 	bl	8007c10 <_Balloc>
 8008224:	4602      	mov	r2, r0
 8008226:	b918      	cbnz	r0, 8008230 <__mdiff+0x60>
 8008228:	4b31      	ldr	r3, [pc, #196]	@ (80082f0 <__mdiff+0x120>)
 800822a:	f240 2145 	movw	r1, #581	@ 0x245
 800822e:	e7e3      	b.n	80081f8 <__mdiff+0x28>
 8008230:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008234:	6926      	ldr	r6, [r4, #16]
 8008236:	60c5      	str	r5, [r0, #12]
 8008238:	f109 0310 	add.w	r3, r9, #16
 800823c:	f109 0514 	add.w	r5, r9, #20
 8008240:	f104 0e14 	add.w	lr, r4, #20
 8008244:	f100 0b14 	add.w	fp, r0, #20
 8008248:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800824c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	46d9      	mov	r9, fp
 8008254:	f04f 0c00 	mov.w	ip, #0
 8008258:	9b01      	ldr	r3, [sp, #4]
 800825a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800825e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008262:	9301      	str	r3, [sp, #4]
 8008264:	fa1f f38a 	uxth.w	r3, sl
 8008268:	4619      	mov	r1, r3
 800826a:	b283      	uxth	r3, r0
 800826c:	1acb      	subs	r3, r1, r3
 800826e:	0c00      	lsrs	r0, r0, #16
 8008270:	4463      	add	r3, ip
 8008272:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008276:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800827a:	b29b      	uxth	r3, r3
 800827c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008280:	4576      	cmp	r6, lr
 8008282:	f849 3b04 	str.w	r3, [r9], #4
 8008286:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800828a:	d8e5      	bhi.n	8008258 <__mdiff+0x88>
 800828c:	1b33      	subs	r3, r6, r4
 800828e:	3b15      	subs	r3, #21
 8008290:	f023 0303 	bic.w	r3, r3, #3
 8008294:	3415      	adds	r4, #21
 8008296:	3304      	adds	r3, #4
 8008298:	42a6      	cmp	r6, r4
 800829a:	bf38      	it	cc
 800829c:	2304      	movcc	r3, #4
 800829e:	441d      	add	r5, r3
 80082a0:	445b      	add	r3, fp
 80082a2:	461e      	mov	r6, r3
 80082a4:	462c      	mov	r4, r5
 80082a6:	4544      	cmp	r4, r8
 80082a8:	d30e      	bcc.n	80082c8 <__mdiff+0xf8>
 80082aa:	f108 0103 	add.w	r1, r8, #3
 80082ae:	1b49      	subs	r1, r1, r5
 80082b0:	f021 0103 	bic.w	r1, r1, #3
 80082b4:	3d03      	subs	r5, #3
 80082b6:	45a8      	cmp	r8, r5
 80082b8:	bf38      	it	cc
 80082ba:	2100      	movcc	r1, #0
 80082bc:	440b      	add	r3, r1
 80082be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082c2:	b191      	cbz	r1, 80082ea <__mdiff+0x11a>
 80082c4:	6117      	str	r7, [r2, #16]
 80082c6:	e79d      	b.n	8008204 <__mdiff+0x34>
 80082c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80082cc:	46e6      	mov	lr, ip
 80082ce:	0c08      	lsrs	r0, r1, #16
 80082d0:	fa1c fc81 	uxtah	ip, ip, r1
 80082d4:	4471      	add	r1, lr
 80082d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80082da:	b289      	uxth	r1, r1
 80082dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80082e0:	f846 1b04 	str.w	r1, [r6], #4
 80082e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082e8:	e7dd      	b.n	80082a6 <__mdiff+0xd6>
 80082ea:	3f01      	subs	r7, #1
 80082ec:	e7e7      	b.n	80082be <__mdiff+0xee>
 80082ee:	bf00      	nop
 80082f0:	0800af7a 	.word	0x0800af7a
 80082f4:	0800af8b 	.word	0x0800af8b

080082f8 <__ulp>:
 80082f8:	b082      	sub	sp, #8
 80082fa:	ed8d 0b00 	vstr	d0, [sp]
 80082fe:	9a01      	ldr	r2, [sp, #4]
 8008300:	4b0f      	ldr	r3, [pc, #60]	@ (8008340 <__ulp+0x48>)
 8008302:	4013      	ands	r3, r2
 8008304:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008308:	2b00      	cmp	r3, #0
 800830a:	dc08      	bgt.n	800831e <__ulp+0x26>
 800830c:	425b      	negs	r3, r3
 800830e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008312:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008316:	da04      	bge.n	8008322 <__ulp+0x2a>
 8008318:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800831c:	4113      	asrs	r3, r2
 800831e:	2200      	movs	r2, #0
 8008320:	e008      	b.n	8008334 <__ulp+0x3c>
 8008322:	f1a2 0314 	sub.w	r3, r2, #20
 8008326:	2b1e      	cmp	r3, #30
 8008328:	bfda      	itte	le
 800832a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800832e:	40da      	lsrle	r2, r3
 8008330:	2201      	movgt	r2, #1
 8008332:	2300      	movs	r3, #0
 8008334:	4619      	mov	r1, r3
 8008336:	4610      	mov	r0, r2
 8008338:	ec41 0b10 	vmov	d0, r0, r1
 800833c:	b002      	add	sp, #8
 800833e:	4770      	bx	lr
 8008340:	7ff00000 	.word	0x7ff00000

08008344 <__b2d>:
 8008344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008348:	6906      	ldr	r6, [r0, #16]
 800834a:	f100 0814 	add.w	r8, r0, #20
 800834e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008352:	1f37      	subs	r7, r6, #4
 8008354:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008358:	4610      	mov	r0, r2
 800835a:	f7ff fd4b 	bl	8007df4 <__hi0bits>
 800835e:	f1c0 0320 	rsb	r3, r0, #32
 8008362:	280a      	cmp	r0, #10
 8008364:	600b      	str	r3, [r1, #0]
 8008366:	491b      	ldr	r1, [pc, #108]	@ (80083d4 <__b2d+0x90>)
 8008368:	dc15      	bgt.n	8008396 <__b2d+0x52>
 800836a:	f1c0 0c0b 	rsb	ip, r0, #11
 800836e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008372:	45b8      	cmp	r8, r7
 8008374:	ea43 0501 	orr.w	r5, r3, r1
 8008378:	bf34      	ite	cc
 800837a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800837e:	2300      	movcs	r3, #0
 8008380:	3015      	adds	r0, #21
 8008382:	fa02 f000 	lsl.w	r0, r2, r0
 8008386:	fa23 f30c 	lsr.w	r3, r3, ip
 800838a:	4303      	orrs	r3, r0
 800838c:	461c      	mov	r4, r3
 800838e:	ec45 4b10 	vmov	d0, r4, r5
 8008392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008396:	45b8      	cmp	r8, r7
 8008398:	bf3a      	itte	cc
 800839a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800839e:	f1a6 0708 	subcc.w	r7, r6, #8
 80083a2:	2300      	movcs	r3, #0
 80083a4:	380b      	subs	r0, #11
 80083a6:	d012      	beq.n	80083ce <__b2d+0x8a>
 80083a8:	f1c0 0120 	rsb	r1, r0, #32
 80083ac:	fa23 f401 	lsr.w	r4, r3, r1
 80083b0:	4082      	lsls	r2, r0
 80083b2:	4322      	orrs	r2, r4
 80083b4:	4547      	cmp	r7, r8
 80083b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80083ba:	bf8c      	ite	hi
 80083bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80083c0:	2200      	movls	r2, #0
 80083c2:	4083      	lsls	r3, r0
 80083c4:	40ca      	lsrs	r2, r1
 80083c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80083ca:	4313      	orrs	r3, r2
 80083cc:	e7de      	b.n	800838c <__b2d+0x48>
 80083ce:	ea42 0501 	orr.w	r5, r2, r1
 80083d2:	e7db      	b.n	800838c <__b2d+0x48>
 80083d4:	3ff00000 	.word	0x3ff00000

080083d8 <__d2b>:
 80083d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083dc:	460f      	mov	r7, r1
 80083de:	2101      	movs	r1, #1
 80083e0:	ec59 8b10 	vmov	r8, r9, d0
 80083e4:	4616      	mov	r6, r2
 80083e6:	f7ff fc13 	bl	8007c10 <_Balloc>
 80083ea:	4604      	mov	r4, r0
 80083ec:	b930      	cbnz	r0, 80083fc <__d2b+0x24>
 80083ee:	4602      	mov	r2, r0
 80083f0:	4b23      	ldr	r3, [pc, #140]	@ (8008480 <__d2b+0xa8>)
 80083f2:	4824      	ldr	r0, [pc, #144]	@ (8008484 <__d2b+0xac>)
 80083f4:	f240 310f 	movw	r1, #783	@ 0x30f
 80083f8:	f7fe fc9e 	bl	8006d38 <__assert_func>
 80083fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008400:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008404:	b10d      	cbz	r5, 800840a <__d2b+0x32>
 8008406:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800840a:	9301      	str	r3, [sp, #4]
 800840c:	f1b8 0300 	subs.w	r3, r8, #0
 8008410:	d023      	beq.n	800845a <__d2b+0x82>
 8008412:	4668      	mov	r0, sp
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	f7ff fd0c 	bl	8007e32 <__lo0bits>
 800841a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800841e:	b1d0      	cbz	r0, 8008456 <__d2b+0x7e>
 8008420:	f1c0 0320 	rsb	r3, r0, #32
 8008424:	fa02 f303 	lsl.w	r3, r2, r3
 8008428:	430b      	orrs	r3, r1
 800842a:	40c2      	lsrs	r2, r0
 800842c:	6163      	str	r3, [r4, #20]
 800842e:	9201      	str	r2, [sp, #4]
 8008430:	9b01      	ldr	r3, [sp, #4]
 8008432:	61a3      	str	r3, [r4, #24]
 8008434:	2b00      	cmp	r3, #0
 8008436:	bf0c      	ite	eq
 8008438:	2201      	moveq	r2, #1
 800843a:	2202      	movne	r2, #2
 800843c:	6122      	str	r2, [r4, #16]
 800843e:	b1a5      	cbz	r5, 800846a <__d2b+0x92>
 8008440:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008444:	4405      	add	r5, r0
 8008446:	603d      	str	r5, [r7, #0]
 8008448:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800844c:	6030      	str	r0, [r6, #0]
 800844e:	4620      	mov	r0, r4
 8008450:	b003      	add	sp, #12
 8008452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008456:	6161      	str	r1, [r4, #20]
 8008458:	e7ea      	b.n	8008430 <__d2b+0x58>
 800845a:	a801      	add	r0, sp, #4
 800845c:	f7ff fce9 	bl	8007e32 <__lo0bits>
 8008460:	9b01      	ldr	r3, [sp, #4]
 8008462:	6163      	str	r3, [r4, #20]
 8008464:	3020      	adds	r0, #32
 8008466:	2201      	movs	r2, #1
 8008468:	e7e8      	b.n	800843c <__d2b+0x64>
 800846a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800846e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008472:	6038      	str	r0, [r7, #0]
 8008474:	6918      	ldr	r0, [r3, #16]
 8008476:	f7ff fcbd 	bl	8007df4 <__hi0bits>
 800847a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800847e:	e7e5      	b.n	800844c <__d2b+0x74>
 8008480:	0800af7a 	.word	0x0800af7a
 8008484:	0800af8b 	.word	0x0800af8b

08008488 <__ratio>:
 8008488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848c:	b085      	sub	sp, #20
 800848e:	e9cd 1000 	strd	r1, r0, [sp]
 8008492:	a902      	add	r1, sp, #8
 8008494:	f7ff ff56 	bl	8008344 <__b2d>
 8008498:	9800      	ldr	r0, [sp, #0]
 800849a:	a903      	add	r1, sp, #12
 800849c:	ec55 4b10 	vmov	r4, r5, d0
 80084a0:	f7ff ff50 	bl	8008344 <__b2d>
 80084a4:	9b01      	ldr	r3, [sp, #4]
 80084a6:	6919      	ldr	r1, [r3, #16]
 80084a8:	9b00      	ldr	r3, [sp, #0]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	1ac9      	subs	r1, r1, r3
 80084ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80084b2:	1a9b      	subs	r3, r3, r2
 80084b4:	ec5b ab10 	vmov	sl, fp, d0
 80084b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80084bc:	2b00      	cmp	r3, #0
 80084be:	bfce      	itee	gt
 80084c0:	462a      	movgt	r2, r5
 80084c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80084c6:	465a      	movle	r2, fp
 80084c8:	462f      	mov	r7, r5
 80084ca:	46d9      	mov	r9, fp
 80084cc:	bfcc      	ite	gt
 80084ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80084d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80084d6:	464b      	mov	r3, r9
 80084d8:	4652      	mov	r2, sl
 80084da:	4620      	mov	r0, r4
 80084dc:	4639      	mov	r1, r7
 80084de:	f7f8 f9b5 	bl	800084c <__aeabi_ddiv>
 80084e2:	ec41 0b10 	vmov	d0, r0, r1
 80084e6:	b005      	add	sp, #20
 80084e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084ec <__copybits>:
 80084ec:	3901      	subs	r1, #1
 80084ee:	b570      	push	{r4, r5, r6, lr}
 80084f0:	1149      	asrs	r1, r1, #5
 80084f2:	6914      	ldr	r4, [r2, #16]
 80084f4:	3101      	adds	r1, #1
 80084f6:	f102 0314 	add.w	r3, r2, #20
 80084fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80084fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008502:	1f05      	subs	r5, r0, #4
 8008504:	42a3      	cmp	r3, r4
 8008506:	d30c      	bcc.n	8008522 <__copybits+0x36>
 8008508:	1aa3      	subs	r3, r4, r2
 800850a:	3b11      	subs	r3, #17
 800850c:	f023 0303 	bic.w	r3, r3, #3
 8008510:	3211      	adds	r2, #17
 8008512:	42a2      	cmp	r2, r4
 8008514:	bf88      	it	hi
 8008516:	2300      	movhi	r3, #0
 8008518:	4418      	add	r0, r3
 800851a:	2300      	movs	r3, #0
 800851c:	4288      	cmp	r0, r1
 800851e:	d305      	bcc.n	800852c <__copybits+0x40>
 8008520:	bd70      	pop	{r4, r5, r6, pc}
 8008522:	f853 6b04 	ldr.w	r6, [r3], #4
 8008526:	f845 6f04 	str.w	r6, [r5, #4]!
 800852a:	e7eb      	b.n	8008504 <__copybits+0x18>
 800852c:	f840 3b04 	str.w	r3, [r0], #4
 8008530:	e7f4      	b.n	800851c <__copybits+0x30>

08008532 <__any_on>:
 8008532:	f100 0214 	add.w	r2, r0, #20
 8008536:	6900      	ldr	r0, [r0, #16]
 8008538:	114b      	asrs	r3, r1, #5
 800853a:	4298      	cmp	r0, r3
 800853c:	b510      	push	{r4, lr}
 800853e:	db11      	blt.n	8008564 <__any_on+0x32>
 8008540:	dd0a      	ble.n	8008558 <__any_on+0x26>
 8008542:	f011 011f 	ands.w	r1, r1, #31
 8008546:	d007      	beq.n	8008558 <__any_on+0x26>
 8008548:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800854c:	fa24 f001 	lsr.w	r0, r4, r1
 8008550:	fa00 f101 	lsl.w	r1, r0, r1
 8008554:	428c      	cmp	r4, r1
 8008556:	d10b      	bne.n	8008570 <__any_on+0x3e>
 8008558:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800855c:	4293      	cmp	r3, r2
 800855e:	d803      	bhi.n	8008568 <__any_on+0x36>
 8008560:	2000      	movs	r0, #0
 8008562:	bd10      	pop	{r4, pc}
 8008564:	4603      	mov	r3, r0
 8008566:	e7f7      	b.n	8008558 <__any_on+0x26>
 8008568:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800856c:	2900      	cmp	r1, #0
 800856e:	d0f5      	beq.n	800855c <__any_on+0x2a>
 8008570:	2001      	movs	r0, #1
 8008572:	e7f6      	b.n	8008562 <__any_on+0x30>

08008574 <sulp>:
 8008574:	b570      	push	{r4, r5, r6, lr}
 8008576:	4604      	mov	r4, r0
 8008578:	460d      	mov	r5, r1
 800857a:	ec45 4b10 	vmov	d0, r4, r5
 800857e:	4616      	mov	r6, r2
 8008580:	f7ff feba 	bl	80082f8 <__ulp>
 8008584:	ec51 0b10 	vmov	r0, r1, d0
 8008588:	b17e      	cbz	r6, 80085aa <sulp+0x36>
 800858a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800858e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008592:	2b00      	cmp	r3, #0
 8008594:	dd09      	ble.n	80085aa <sulp+0x36>
 8008596:	051b      	lsls	r3, r3, #20
 8008598:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800859c:	2400      	movs	r4, #0
 800859e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80085a2:	4622      	mov	r2, r4
 80085a4:	462b      	mov	r3, r5
 80085a6:	f7f8 f827 	bl	80005f8 <__aeabi_dmul>
 80085aa:	ec41 0b10 	vmov	d0, r0, r1
 80085ae:	bd70      	pop	{r4, r5, r6, pc}

080085b0 <_strtod_l>:
 80085b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	b09f      	sub	sp, #124	@ 0x7c
 80085b6:	460c      	mov	r4, r1
 80085b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80085ba:	2200      	movs	r2, #0
 80085bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80085be:	9005      	str	r0, [sp, #20]
 80085c0:	f04f 0a00 	mov.w	sl, #0
 80085c4:	f04f 0b00 	mov.w	fp, #0
 80085c8:	460a      	mov	r2, r1
 80085ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80085cc:	7811      	ldrb	r1, [r2, #0]
 80085ce:	292b      	cmp	r1, #43	@ 0x2b
 80085d0:	d04a      	beq.n	8008668 <_strtod_l+0xb8>
 80085d2:	d838      	bhi.n	8008646 <_strtod_l+0x96>
 80085d4:	290d      	cmp	r1, #13
 80085d6:	d832      	bhi.n	800863e <_strtod_l+0x8e>
 80085d8:	2908      	cmp	r1, #8
 80085da:	d832      	bhi.n	8008642 <_strtod_l+0x92>
 80085dc:	2900      	cmp	r1, #0
 80085de:	d03b      	beq.n	8008658 <_strtod_l+0xa8>
 80085e0:	2200      	movs	r2, #0
 80085e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80085e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80085e6:	782a      	ldrb	r2, [r5, #0]
 80085e8:	2a30      	cmp	r2, #48	@ 0x30
 80085ea:	f040 80b3 	bne.w	8008754 <_strtod_l+0x1a4>
 80085ee:	786a      	ldrb	r2, [r5, #1]
 80085f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80085f4:	2a58      	cmp	r2, #88	@ 0x58
 80085f6:	d16e      	bne.n	80086d6 <_strtod_l+0x126>
 80085f8:	9302      	str	r3, [sp, #8]
 80085fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085fc:	9301      	str	r3, [sp, #4]
 80085fe:	ab1a      	add	r3, sp, #104	@ 0x68
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	4a8e      	ldr	r2, [pc, #568]	@ (800883c <_strtod_l+0x28c>)
 8008604:	9805      	ldr	r0, [sp, #20]
 8008606:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008608:	a919      	add	r1, sp, #100	@ 0x64
 800860a:	f001 f897 	bl	800973c <__gethex>
 800860e:	f010 060f 	ands.w	r6, r0, #15
 8008612:	4604      	mov	r4, r0
 8008614:	d005      	beq.n	8008622 <_strtod_l+0x72>
 8008616:	2e06      	cmp	r6, #6
 8008618:	d128      	bne.n	800866c <_strtod_l+0xbc>
 800861a:	3501      	adds	r5, #1
 800861c:	2300      	movs	r3, #0
 800861e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008622:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008624:	2b00      	cmp	r3, #0
 8008626:	f040 858e 	bne.w	8009146 <_strtod_l+0xb96>
 800862a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800862c:	b1cb      	cbz	r3, 8008662 <_strtod_l+0xb2>
 800862e:	4652      	mov	r2, sl
 8008630:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008634:	ec43 2b10 	vmov	d0, r2, r3
 8008638:	b01f      	add	sp, #124	@ 0x7c
 800863a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863e:	2920      	cmp	r1, #32
 8008640:	d1ce      	bne.n	80085e0 <_strtod_l+0x30>
 8008642:	3201      	adds	r2, #1
 8008644:	e7c1      	b.n	80085ca <_strtod_l+0x1a>
 8008646:	292d      	cmp	r1, #45	@ 0x2d
 8008648:	d1ca      	bne.n	80085e0 <_strtod_l+0x30>
 800864a:	2101      	movs	r1, #1
 800864c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800864e:	1c51      	adds	r1, r2, #1
 8008650:	9119      	str	r1, [sp, #100]	@ 0x64
 8008652:	7852      	ldrb	r2, [r2, #1]
 8008654:	2a00      	cmp	r2, #0
 8008656:	d1c5      	bne.n	80085e4 <_strtod_l+0x34>
 8008658:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800865a:	9419      	str	r4, [sp, #100]	@ 0x64
 800865c:	2b00      	cmp	r3, #0
 800865e:	f040 8570 	bne.w	8009142 <_strtod_l+0xb92>
 8008662:	4652      	mov	r2, sl
 8008664:	465b      	mov	r3, fp
 8008666:	e7e5      	b.n	8008634 <_strtod_l+0x84>
 8008668:	2100      	movs	r1, #0
 800866a:	e7ef      	b.n	800864c <_strtod_l+0x9c>
 800866c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800866e:	b13a      	cbz	r2, 8008680 <_strtod_l+0xd0>
 8008670:	2135      	movs	r1, #53	@ 0x35
 8008672:	a81c      	add	r0, sp, #112	@ 0x70
 8008674:	f7ff ff3a 	bl	80084ec <__copybits>
 8008678:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800867a:	9805      	ldr	r0, [sp, #20]
 800867c:	f7ff fb08 	bl	8007c90 <_Bfree>
 8008680:	3e01      	subs	r6, #1
 8008682:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008684:	2e04      	cmp	r6, #4
 8008686:	d806      	bhi.n	8008696 <_strtod_l+0xe6>
 8008688:	e8df f006 	tbb	[pc, r6]
 800868c:	201d0314 	.word	0x201d0314
 8008690:	14          	.byte	0x14
 8008691:	00          	.byte	0x00
 8008692:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008696:	05e1      	lsls	r1, r4, #23
 8008698:	bf48      	it	mi
 800869a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800869e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80086a2:	0d1b      	lsrs	r3, r3, #20
 80086a4:	051b      	lsls	r3, r3, #20
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1bb      	bne.n	8008622 <_strtod_l+0x72>
 80086aa:	f7fe fafb 	bl	8006ca4 <__errno>
 80086ae:	2322      	movs	r3, #34	@ 0x22
 80086b0:	6003      	str	r3, [r0, #0]
 80086b2:	e7b6      	b.n	8008622 <_strtod_l+0x72>
 80086b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80086b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80086bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80086c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80086c4:	e7e7      	b.n	8008696 <_strtod_l+0xe6>
 80086c6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008844 <_strtod_l+0x294>
 80086ca:	e7e4      	b.n	8008696 <_strtod_l+0xe6>
 80086cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80086d0:	f04f 3aff 	mov.w	sl, #4294967295
 80086d4:	e7df      	b.n	8008696 <_strtod_l+0xe6>
 80086d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086d8:	1c5a      	adds	r2, r3, #1
 80086da:	9219      	str	r2, [sp, #100]	@ 0x64
 80086dc:	785b      	ldrb	r3, [r3, #1]
 80086de:	2b30      	cmp	r3, #48	@ 0x30
 80086e0:	d0f9      	beq.n	80086d6 <_strtod_l+0x126>
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d09d      	beq.n	8008622 <_strtod_l+0x72>
 80086e6:	2301      	movs	r3, #1
 80086e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80086ee:	2300      	movs	r3, #0
 80086f0:	9308      	str	r3, [sp, #32]
 80086f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80086f4:	461f      	mov	r7, r3
 80086f6:	220a      	movs	r2, #10
 80086f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80086fa:	7805      	ldrb	r5, [r0, #0]
 80086fc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008700:	b2d9      	uxtb	r1, r3
 8008702:	2909      	cmp	r1, #9
 8008704:	d928      	bls.n	8008758 <_strtod_l+0x1a8>
 8008706:	494e      	ldr	r1, [pc, #312]	@ (8008840 <_strtod_l+0x290>)
 8008708:	2201      	movs	r2, #1
 800870a:	f000 ff6b 	bl	80095e4 <strncmp>
 800870e:	2800      	cmp	r0, #0
 8008710:	d032      	beq.n	8008778 <_strtod_l+0x1c8>
 8008712:	2000      	movs	r0, #0
 8008714:	462a      	mov	r2, r5
 8008716:	4681      	mov	r9, r0
 8008718:	463d      	mov	r5, r7
 800871a:	4603      	mov	r3, r0
 800871c:	2a65      	cmp	r2, #101	@ 0x65
 800871e:	d001      	beq.n	8008724 <_strtod_l+0x174>
 8008720:	2a45      	cmp	r2, #69	@ 0x45
 8008722:	d114      	bne.n	800874e <_strtod_l+0x19e>
 8008724:	b91d      	cbnz	r5, 800872e <_strtod_l+0x17e>
 8008726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008728:	4302      	orrs	r2, r0
 800872a:	d095      	beq.n	8008658 <_strtod_l+0xa8>
 800872c:	2500      	movs	r5, #0
 800872e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008730:	1c62      	adds	r2, r4, #1
 8008732:	9219      	str	r2, [sp, #100]	@ 0x64
 8008734:	7862      	ldrb	r2, [r4, #1]
 8008736:	2a2b      	cmp	r2, #43	@ 0x2b
 8008738:	d077      	beq.n	800882a <_strtod_l+0x27a>
 800873a:	2a2d      	cmp	r2, #45	@ 0x2d
 800873c:	d07b      	beq.n	8008836 <_strtod_l+0x286>
 800873e:	f04f 0c00 	mov.w	ip, #0
 8008742:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008746:	2909      	cmp	r1, #9
 8008748:	f240 8082 	bls.w	8008850 <_strtod_l+0x2a0>
 800874c:	9419      	str	r4, [sp, #100]	@ 0x64
 800874e:	f04f 0800 	mov.w	r8, #0
 8008752:	e0a2      	b.n	800889a <_strtod_l+0x2ea>
 8008754:	2300      	movs	r3, #0
 8008756:	e7c7      	b.n	80086e8 <_strtod_l+0x138>
 8008758:	2f08      	cmp	r7, #8
 800875a:	bfd5      	itete	le
 800875c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800875e:	9908      	ldrgt	r1, [sp, #32]
 8008760:	fb02 3301 	mlale	r3, r2, r1, r3
 8008764:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008768:	f100 0001 	add.w	r0, r0, #1
 800876c:	bfd4      	ite	le
 800876e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008770:	9308      	strgt	r3, [sp, #32]
 8008772:	3701      	adds	r7, #1
 8008774:	9019      	str	r0, [sp, #100]	@ 0x64
 8008776:	e7bf      	b.n	80086f8 <_strtod_l+0x148>
 8008778:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800877a:	1c5a      	adds	r2, r3, #1
 800877c:	9219      	str	r2, [sp, #100]	@ 0x64
 800877e:	785a      	ldrb	r2, [r3, #1]
 8008780:	b37f      	cbz	r7, 80087e2 <_strtod_l+0x232>
 8008782:	4681      	mov	r9, r0
 8008784:	463d      	mov	r5, r7
 8008786:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800878a:	2b09      	cmp	r3, #9
 800878c:	d912      	bls.n	80087b4 <_strtod_l+0x204>
 800878e:	2301      	movs	r3, #1
 8008790:	e7c4      	b.n	800871c <_strtod_l+0x16c>
 8008792:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008794:	1c5a      	adds	r2, r3, #1
 8008796:	9219      	str	r2, [sp, #100]	@ 0x64
 8008798:	785a      	ldrb	r2, [r3, #1]
 800879a:	3001      	adds	r0, #1
 800879c:	2a30      	cmp	r2, #48	@ 0x30
 800879e:	d0f8      	beq.n	8008792 <_strtod_l+0x1e2>
 80087a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80087a4:	2b08      	cmp	r3, #8
 80087a6:	f200 84d3 	bhi.w	8009150 <_strtod_l+0xba0>
 80087aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80087ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80087ae:	4681      	mov	r9, r0
 80087b0:	2000      	movs	r0, #0
 80087b2:	4605      	mov	r5, r0
 80087b4:	3a30      	subs	r2, #48	@ 0x30
 80087b6:	f100 0301 	add.w	r3, r0, #1
 80087ba:	d02a      	beq.n	8008812 <_strtod_l+0x262>
 80087bc:	4499      	add	r9, r3
 80087be:	eb00 0c05 	add.w	ip, r0, r5
 80087c2:	462b      	mov	r3, r5
 80087c4:	210a      	movs	r1, #10
 80087c6:	4563      	cmp	r3, ip
 80087c8:	d10d      	bne.n	80087e6 <_strtod_l+0x236>
 80087ca:	1c69      	adds	r1, r5, #1
 80087cc:	4401      	add	r1, r0
 80087ce:	4428      	add	r0, r5
 80087d0:	2808      	cmp	r0, #8
 80087d2:	dc16      	bgt.n	8008802 <_strtod_l+0x252>
 80087d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80087d6:	230a      	movs	r3, #10
 80087d8:	fb03 2300 	mla	r3, r3, r0, r2
 80087dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80087de:	2300      	movs	r3, #0
 80087e0:	e018      	b.n	8008814 <_strtod_l+0x264>
 80087e2:	4638      	mov	r0, r7
 80087e4:	e7da      	b.n	800879c <_strtod_l+0x1ec>
 80087e6:	2b08      	cmp	r3, #8
 80087e8:	f103 0301 	add.w	r3, r3, #1
 80087ec:	dc03      	bgt.n	80087f6 <_strtod_l+0x246>
 80087ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80087f0:	434e      	muls	r6, r1
 80087f2:	960a      	str	r6, [sp, #40]	@ 0x28
 80087f4:	e7e7      	b.n	80087c6 <_strtod_l+0x216>
 80087f6:	2b10      	cmp	r3, #16
 80087f8:	bfde      	ittt	le
 80087fa:	9e08      	ldrle	r6, [sp, #32]
 80087fc:	434e      	mulle	r6, r1
 80087fe:	9608      	strle	r6, [sp, #32]
 8008800:	e7e1      	b.n	80087c6 <_strtod_l+0x216>
 8008802:	280f      	cmp	r0, #15
 8008804:	dceb      	bgt.n	80087de <_strtod_l+0x22e>
 8008806:	9808      	ldr	r0, [sp, #32]
 8008808:	230a      	movs	r3, #10
 800880a:	fb03 2300 	mla	r3, r3, r0, r2
 800880e:	9308      	str	r3, [sp, #32]
 8008810:	e7e5      	b.n	80087de <_strtod_l+0x22e>
 8008812:	4629      	mov	r1, r5
 8008814:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008816:	1c50      	adds	r0, r2, #1
 8008818:	9019      	str	r0, [sp, #100]	@ 0x64
 800881a:	7852      	ldrb	r2, [r2, #1]
 800881c:	4618      	mov	r0, r3
 800881e:	460d      	mov	r5, r1
 8008820:	e7b1      	b.n	8008786 <_strtod_l+0x1d6>
 8008822:	f04f 0900 	mov.w	r9, #0
 8008826:	2301      	movs	r3, #1
 8008828:	e77d      	b.n	8008726 <_strtod_l+0x176>
 800882a:	f04f 0c00 	mov.w	ip, #0
 800882e:	1ca2      	adds	r2, r4, #2
 8008830:	9219      	str	r2, [sp, #100]	@ 0x64
 8008832:	78a2      	ldrb	r2, [r4, #2]
 8008834:	e785      	b.n	8008742 <_strtod_l+0x192>
 8008836:	f04f 0c01 	mov.w	ip, #1
 800883a:	e7f8      	b.n	800882e <_strtod_l+0x27e>
 800883c:	0800b0f8 	.word	0x0800b0f8
 8008840:	0800b0e0 	.word	0x0800b0e0
 8008844:	7ff00000 	.word	0x7ff00000
 8008848:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800884a:	1c51      	adds	r1, r2, #1
 800884c:	9119      	str	r1, [sp, #100]	@ 0x64
 800884e:	7852      	ldrb	r2, [r2, #1]
 8008850:	2a30      	cmp	r2, #48	@ 0x30
 8008852:	d0f9      	beq.n	8008848 <_strtod_l+0x298>
 8008854:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008858:	2908      	cmp	r1, #8
 800885a:	f63f af78 	bhi.w	800874e <_strtod_l+0x19e>
 800885e:	3a30      	subs	r2, #48	@ 0x30
 8008860:	920e      	str	r2, [sp, #56]	@ 0x38
 8008862:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008864:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008866:	f04f 080a 	mov.w	r8, #10
 800886a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800886c:	1c56      	adds	r6, r2, #1
 800886e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008870:	7852      	ldrb	r2, [r2, #1]
 8008872:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008876:	f1be 0f09 	cmp.w	lr, #9
 800887a:	d939      	bls.n	80088f0 <_strtod_l+0x340>
 800887c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800887e:	1a76      	subs	r6, r6, r1
 8008880:	2e08      	cmp	r6, #8
 8008882:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008886:	dc03      	bgt.n	8008890 <_strtod_l+0x2e0>
 8008888:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800888a:	4588      	cmp	r8, r1
 800888c:	bfa8      	it	ge
 800888e:	4688      	movge	r8, r1
 8008890:	f1bc 0f00 	cmp.w	ip, #0
 8008894:	d001      	beq.n	800889a <_strtod_l+0x2ea>
 8008896:	f1c8 0800 	rsb	r8, r8, #0
 800889a:	2d00      	cmp	r5, #0
 800889c:	d14e      	bne.n	800893c <_strtod_l+0x38c>
 800889e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80088a0:	4308      	orrs	r0, r1
 80088a2:	f47f aebe 	bne.w	8008622 <_strtod_l+0x72>
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f47f aed6 	bne.w	8008658 <_strtod_l+0xa8>
 80088ac:	2a69      	cmp	r2, #105	@ 0x69
 80088ae:	d028      	beq.n	8008902 <_strtod_l+0x352>
 80088b0:	dc25      	bgt.n	80088fe <_strtod_l+0x34e>
 80088b2:	2a49      	cmp	r2, #73	@ 0x49
 80088b4:	d025      	beq.n	8008902 <_strtod_l+0x352>
 80088b6:	2a4e      	cmp	r2, #78	@ 0x4e
 80088b8:	f47f aece 	bne.w	8008658 <_strtod_l+0xa8>
 80088bc:	499b      	ldr	r1, [pc, #620]	@ (8008b2c <_strtod_l+0x57c>)
 80088be:	a819      	add	r0, sp, #100	@ 0x64
 80088c0:	f001 f95e 	bl	8009b80 <__match>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	f43f aec7 	beq.w	8008658 <_strtod_l+0xa8>
 80088ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	2b28      	cmp	r3, #40	@ 0x28
 80088d0:	d12e      	bne.n	8008930 <_strtod_l+0x380>
 80088d2:	4997      	ldr	r1, [pc, #604]	@ (8008b30 <_strtod_l+0x580>)
 80088d4:	aa1c      	add	r2, sp, #112	@ 0x70
 80088d6:	a819      	add	r0, sp, #100	@ 0x64
 80088d8:	f001 f966 	bl	8009ba8 <__hexnan>
 80088dc:	2805      	cmp	r0, #5
 80088de:	d127      	bne.n	8008930 <_strtod_l+0x380>
 80088e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80088e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80088e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80088ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80088ee:	e698      	b.n	8008622 <_strtod_l+0x72>
 80088f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80088f2:	fb08 2101 	mla	r1, r8, r1, r2
 80088f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80088fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80088fc:	e7b5      	b.n	800886a <_strtod_l+0x2ba>
 80088fe:	2a6e      	cmp	r2, #110	@ 0x6e
 8008900:	e7da      	b.n	80088b8 <_strtod_l+0x308>
 8008902:	498c      	ldr	r1, [pc, #560]	@ (8008b34 <_strtod_l+0x584>)
 8008904:	a819      	add	r0, sp, #100	@ 0x64
 8008906:	f001 f93b 	bl	8009b80 <__match>
 800890a:	2800      	cmp	r0, #0
 800890c:	f43f aea4 	beq.w	8008658 <_strtod_l+0xa8>
 8008910:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008912:	4989      	ldr	r1, [pc, #548]	@ (8008b38 <_strtod_l+0x588>)
 8008914:	3b01      	subs	r3, #1
 8008916:	a819      	add	r0, sp, #100	@ 0x64
 8008918:	9319      	str	r3, [sp, #100]	@ 0x64
 800891a:	f001 f931 	bl	8009b80 <__match>
 800891e:	b910      	cbnz	r0, 8008926 <_strtod_l+0x376>
 8008920:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008922:	3301      	adds	r3, #1
 8008924:	9319      	str	r3, [sp, #100]	@ 0x64
 8008926:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008b48 <_strtod_l+0x598>
 800892a:	f04f 0a00 	mov.w	sl, #0
 800892e:	e678      	b.n	8008622 <_strtod_l+0x72>
 8008930:	4882      	ldr	r0, [pc, #520]	@ (8008b3c <_strtod_l+0x58c>)
 8008932:	f000 fe79 	bl	8009628 <nan>
 8008936:	ec5b ab10 	vmov	sl, fp, d0
 800893a:	e672      	b.n	8008622 <_strtod_l+0x72>
 800893c:	eba8 0309 	sub.w	r3, r8, r9
 8008940:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008942:	9309      	str	r3, [sp, #36]	@ 0x24
 8008944:	2f00      	cmp	r7, #0
 8008946:	bf08      	it	eq
 8008948:	462f      	moveq	r7, r5
 800894a:	2d10      	cmp	r5, #16
 800894c:	462c      	mov	r4, r5
 800894e:	bfa8      	it	ge
 8008950:	2410      	movge	r4, #16
 8008952:	f7f7 fdd7 	bl	8000504 <__aeabi_ui2d>
 8008956:	2d09      	cmp	r5, #9
 8008958:	4682      	mov	sl, r0
 800895a:	468b      	mov	fp, r1
 800895c:	dc13      	bgt.n	8008986 <_strtod_l+0x3d6>
 800895e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008960:	2b00      	cmp	r3, #0
 8008962:	f43f ae5e 	beq.w	8008622 <_strtod_l+0x72>
 8008966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008968:	dd78      	ble.n	8008a5c <_strtod_l+0x4ac>
 800896a:	2b16      	cmp	r3, #22
 800896c:	dc5f      	bgt.n	8008a2e <_strtod_l+0x47e>
 800896e:	4974      	ldr	r1, [pc, #464]	@ (8008b40 <_strtod_l+0x590>)
 8008970:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008978:	4652      	mov	r2, sl
 800897a:	465b      	mov	r3, fp
 800897c:	f7f7 fe3c 	bl	80005f8 <__aeabi_dmul>
 8008980:	4682      	mov	sl, r0
 8008982:	468b      	mov	fp, r1
 8008984:	e64d      	b.n	8008622 <_strtod_l+0x72>
 8008986:	4b6e      	ldr	r3, [pc, #440]	@ (8008b40 <_strtod_l+0x590>)
 8008988:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800898c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008990:	f7f7 fe32 	bl	80005f8 <__aeabi_dmul>
 8008994:	4682      	mov	sl, r0
 8008996:	9808      	ldr	r0, [sp, #32]
 8008998:	468b      	mov	fp, r1
 800899a:	f7f7 fdb3 	bl	8000504 <__aeabi_ui2d>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4650      	mov	r0, sl
 80089a4:	4659      	mov	r1, fp
 80089a6:	f7f7 fc71 	bl	800028c <__adddf3>
 80089aa:	2d0f      	cmp	r5, #15
 80089ac:	4682      	mov	sl, r0
 80089ae:	468b      	mov	fp, r1
 80089b0:	ddd5      	ble.n	800895e <_strtod_l+0x3ae>
 80089b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089b4:	1b2c      	subs	r4, r5, r4
 80089b6:	441c      	add	r4, r3
 80089b8:	2c00      	cmp	r4, #0
 80089ba:	f340 8096 	ble.w	8008aea <_strtod_l+0x53a>
 80089be:	f014 030f 	ands.w	r3, r4, #15
 80089c2:	d00a      	beq.n	80089da <_strtod_l+0x42a>
 80089c4:	495e      	ldr	r1, [pc, #376]	@ (8008b40 <_strtod_l+0x590>)
 80089c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80089ca:	4652      	mov	r2, sl
 80089cc:	465b      	mov	r3, fp
 80089ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089d2:	f7f7 fe11 	bl	80005f8 <__aeabi_dmul>
 80089d6:	4682      	mov	sl, r0
 80089d8:	468b      	mov	fp, r1
 80089da:	f034 040f 	bics.w	r4, r4, #15
 80089de:	d073      	beq.n	8008ac8 <_strtod_l+0x518>
 80089e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80089e4:	dd48      	ble.n	8008a78 <_strtod_l+0x4c8>
 80089e6:	2400      	movs	r4, #0
 80089e8:	46a0      	mov	r8, r4
 80089ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80089ec:	46a1      	mov	r9, r4
 80089ee:	9a05      	ldr	r2, [sp, #20]
 80089f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008b48 <_strtod_l+0x598>
 80089f4:	2322      	movs	r3, #34	@ 0x22
 80089f6:	6013      	str	r3, [r2, #0]
 80089f8:	f04f 0a00 	mov.w	sl, #0
 80089fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f43f ae0f 	beq.w	8008622 <_strtod_l+0x72>
 8008a04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a06:	9805      	ldr	r0, [sp, #20]
 8008a08:	f7ff f942 	bl	8007c90 <_Bfree>
 8008a0c:	9805      	ldr	r0, [sp, #20]
 8008a0e:	4649      	mov	r1, r9
 8008a10:	f7ff f93e 	bl	8007c90 <_Bfree>
 8008a14:	9805      	ldr	r0, [sp, #20]
 8008a16:	4641      	mov	r1, r8
 8008a18:	f7ff f93a 	bl	8007c90 <_Bfree>
 8008a1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a1e:	9805      	ldr	r0, [sp, #20]
 8008a20:	f7ff f936 	bl	8007c90 <_Bfree>
 8008a24:	9805      	ldr	r0, [sp, #20]
 8008a26:	4621      	mov	r1, r4
 8008a28:	f7ff f932 	bl	8007c90 <_Bfree>
 8008a2c:	e5f9      	b.n	8008622 <_strtod_l+0x72>
 8008a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a30:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008a34:	4293      	cmp	r3, r2
 8008a36:	dbbc      	blt.n	80089b2 <_strtod_l+0x402>
 8008a38:	4c41      	ldr	r4, [pc, #260]	@ (8008b40 <_strtod_l+0x590>)
 8008a3a:	f1c5 050f 	rsb	r5, r5, #15
 8008a3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008a42:	4652      	mov	r2, sl
 8008a44:	465b      	mov	r3, fp
 8008a46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a4a:	f7f7 fdd5 	bl	80005f8 <__aeabi_dmul>
 8008a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a50:	1b5d      	subs	r5, r3, r5
 8008a52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008a56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008a5a:	e78f      	b.n	800897c <_strtod_l+0x3cc>
 8008a5c:	3316      	adds	r3, #22
 8008a5e:	dba8      	blt.n	80089b2 <_strtod_l+0x402>
 8008a60:	4b37      	ldr	r3, [pc, #220]	@ (8008b40 <_strtod_l+0x590>)
 8008a62:	eba9 0808 	sub.w	r8, r9, r8
 8008a66:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008a6a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008a6e:	4650      	mov	r0, sl
 8008a70:	4659      	mov	r1, fp
 8008a72:	f7f7 feeb 	bl	800084c <__aeabi_ddiv>
 8008a76:	e783      	b.n	8008980 <_strtod_l+0x3d0>
 8008a78:	4b32      	ldr	r3, [pc, #200]	@ (8008b44 <_strtod_l+0x594>)
 8008a7a:	9308      	str	r3, [sp, #32]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	1124      	asrs	r4, r4, #4
 8008a80:	4650      	mov	r0, sl
 8008a82:	4659      	mov	r1, fp
 8008a84:	461e      	mov	r6, r3
 8008a86:	2c01      	cmp	r4, #1
 8008a88:	dc21      	bgt.n	8008ace <_strtod_l+0x51e>
 8008a8a:	b10b      	cbz	r3, 8008a90 <_strtod_l+0x4e0>
 8008a8c:	4682      	mov	sl, r0
 8008a8e:	468b      	mov	fp, r1
 8008a90:	492c      	ldr	r1, [pc, #176]	@ (8008b44 <_strtod_l+0x594>)
 8008a92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008a96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008a9a:	4652      	mov	r2, sl
 8008a9c:	465b      	mov	r3, fp
 8008a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008aa2:	f7f7 fda9 	bl	80005f8 <__aeabi_dmul>
 8008aa6:	4b28      	ldr	r3, [pc, #160]	@ (8008b48 <_strtod_l+0x598>)
 8008aa8:	460a      	mov	r2, r1
 8008aaa:	400b      	ands	r3, r1
 8008aac:	4927      	ldr	r1, [pc, #156]	@ (8008b4c <_strtod_l+0x59c>)
 8008aae:	428b      	cmp	r3, r1
 8008ab0:	4682      	mov	sl, r0
 8008ab2:	d898      	bhi.n	80089e6 <_strtod_l+0x436>
 8008ab4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008ab8:	428b      	cmp	r3, r1
 8008aba:	bf86      	itte	hi
 8008abc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008b50 <_strtod_l+0x5a0>
 8008ac0:	f04f 3aff 	movhi.w	sl, #4294967295
 8008ac4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008ac8:	2300      	movs	r3, #0
 8008aca:	9308      	str	r3, [sp, #32]
 8008acc:	e07a      	b.n	8008bc4 <_strtod_l+0x614>
 8008ace:	07e2      	lsls	r2, r4, #31
 8008ad0:	d505      	bpl.n	8008ade <_strtod_l+0x52e>
 8008ad2:	9b08      	ldr	r3, [sp, #32]
 8008ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad8:	f7f7 fd8e 	bl	80005f8 <__aeabi_dmul>
 8008adc:	2301      	movs	r3, #1
 8008ade:	9a08      	ldr	r2, [sp, #32]
 8008ae0:	3208      	adds	r2, #8
 8008ae2:	3601      	adds	r6, #1
 8008ae4:	1064      	asrs	r4, r4, #1
 8008ae6:	9208      	str	r2, [sp, #32]
 8008ae8:	e7cd      	b.n	8008a86 <_strtod_l+0x4d6>
 8008aea:	d0ed      	beq.n	8008ac8 <_strtod_l+0x518>
 8008aec:	4264      	negs	r4, r4
 8008aee:	f014 020f 	ands.w	r2, r4, #15
 8008af2:	d00a      	beq.n	8008b0a <_strtod_l+0x55a>
 8008af4:	4b12      	ldr	r3, [pc, #72]	@ (8008b40 <_strtod_l+0x590>)
 8008af6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008afa:	4650      	mov	r0, sl
 8008afc:	4659      	mov	r1, fp
 8008afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b02:	f7f7 fea3 	bl	800084c <__aeabi_ddiv>
 8008b06:	4682      	mov	sl, r0
 8008b08:	468b      	mov	fp, r1
 8008b0a:	1124      	asrs	r4, r4, #4
 8008b0c:	d0dc      	beq.n	8008ac8 <_strtod_l+0x518>
 8008b0e:	2c1f      	cmp	r4, #31
 8008b10:	dd20      	ble.n	8008b54 <_strtod_l+0x5a4>
 8008b12:	2400      	movs	r4, #0
 8008b14:	46a0      	mov	r8, r4
 8008b16:	940a      	str	r4, [sp, #40]	@ 0x28
 8008b18:	46a1      	mov	r9, r4
 8008b1a:	9a05      	ldr	r2, [sp, #20]
 8008b1c:	2322      	movs	r3, #34	@ 0x22
 8008b1e:	f04f 0a00 	mov.w	sl, #0
 8008b22:	f04f 0b00 	mov.w	fp, #0
 8008b26:	6013      	str	r3, [r2, #0]
 8008b28:	e768      	b.n	80089fc <_strtod_l+0x44c>
 8008b2a:	bf00      	nop
 8008b2c:	0800aead 	.word	0x0800aead
 8008b30:	0800b0e4 	.word	0x0800b0e4
 8008b34:	0800aea5 	.word	0x0800aea5
 8008b38:	0800af18 	.word	0x0800af18
 8008b3c:	0800af14 	.word	0x0800af14
 8008b40:	0800b018 	.word	0x0800b018
 8008b44:	0800aff0 	.word	0x0800aff0
 8008b48:	7ff00000 	.word	0x7ff00000
 8008b4c:	7ca00000 	.word	0x7ca00000
 8008b50:	7fefffff 	.word	0x7fefffff
 8008b54:	f014 0310 	ands.w	r3, r4, #16
 8008b58:	bf18      	it	ne
 8008b5a:	236a      	movne	r3, #106	@ 0x6a
 8008b5c:	4ea9      	ldr	r6, [pc, #676]	@ (8008e04 <_strtod_l+0x854>)
 8008b5e:	9308      	str	r3, [sp, #32]
 8008b60:	4650      	mov	r0, sl
 8008b62:	4659      	mov	r1, fp
 8008b64:	2300      	movs	r3, #0
 8008b66:	07e2      	lsls	r2, r4, #31
 8008b68:	d504      	bpl.n	8008b74 <_strtod_l+0x5c4>
 8008b6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b6e:	f7f7 fd43 	bl	80005f8 <__aeabi_dmul>
 8008b72:	2301      	movs	r3, #1
 8008b74:	1064      	asrs	r4, r4, #1
 8008b76:	f106 0608 	add.w	r6, r6, #8
 8008b7a:	d1f4      	bne.n	8008b66 <_strtod_l+0x5b6>
 8008b7c:	b10b      	cbz	r3, 8008b82 <_strtod_l+0x5d2>
 8008b7e:	4682      	mov	sl, r0
 8008b80:	468b      	mov	fp, r1
 8008b82:	9b08      	ldr	r3, [sp, #32]
 8008b84:	b1b3      	cbz	r3, 8008bb4 <_strtod_l+0x604>
 8008b86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008b8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	4659      	mov	r1, fp
 8008b92:	dd0f      	ble.n	8008bb4 <_strtod_l+0x604>
 8008b94:	2b1f      	cmp	r3, #31
 8008b96:	dd55      	ble.n	8008c44 <_strtod_l+0x694>
 8008b98:	2b34      	cmp	r3, #52	@ 0x34
 8008b9a:	bfde      	ittt	le
 8008b9c:	f04f 33ff 	movle.w	r3, #4294967295
 8008ba0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008ba4:	4093      	lslle	r3, r2
 8008ba6:	f04f 0a00 	mov.w	sl, #0
 8008baa:	bfcc      	ite	gt
 8008bac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008bb0:	ea03 0b01 	andle.w	fp, r3, r1
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	4650      	mov	r0, sl
 8008bba:	4659      	mov	r1, fp
 8008bbc:	f7f7 ff84 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d1a6      	bne.n	8008b12 <_strtod_l+0x562>
 8008bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008bca:	9805      	ldr	r0, [sp, #20]
 8008bcc:	462b      	mov	r3, r5
 8008bce:	463a      	mov	r2, r7
 8008bd0:	f7ff f8c6 	bl	8007d60 <__s2b>
 8008bd4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f43f af05 	beq.w	80089e6 <_strtod_l+0x436>
 8008bdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bde:	2a00      	cmp	r2, #0
 8008be0:	eba9 0308 	sub.w	r3, r9, r8
 8008be4:	bfa8      	it	ge
 8008be6:	2300      	movge	r3, #0
 8008be8:	9312      	str	r3, [sp, #72]	@ 0x48
 8008bea:	2400      	movs	r4, #0
 8008bec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008bf0:	9316      	str	r3, [sp, #88]	@ 0x58
 8008bf2:	46a0      	mov	r8, r4
 8008bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bf6:	9805      	ldr	r0, [sp, #20]
 8008bf8:	6859      	ldr	r1, [r3, #4]
 8008bfa:	f7ff f809 	bl	8007c10 <_Balloc>
 8008bfe:	4681      	mov	r9, r0
 8008c00:	2800      	cmp	r0, #0
 8008c02:	f43f aef4 	beq.w	80089ee <_strtod_l+0x43e>
 8008c06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c08:	691a      	ldr	r2, [r3, #16]
 8008c0a:	3202      	adds	r2, #2
 8008c0c:	f103 010c 	add.w	r1, r3, #12
 8008c10:	0092      	lsls	r2, r2, #2
 8008c12:	300c      	adds	r0, #12
 8008c14:	f7fe f87b 	bl	8006d0e <memcpy>
 8008c18:	ec4b ab10 	vmov	d0, sl, fp
 8008c1c:	9805      	ldr	r0, [sp, #20]
 8008c1e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008c20:	a91b      	add	r1, sp, #108	@ 0x6c
 8008c22:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008c26:	f7ff fbd7 	bl	80083d8 <__d2b>
 8008c2a:	901a      	str	r0, [sp, #104]	@ 0x68
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	f43f aede 	beq.w	80089ee <_strtod_l+0x43e>
 8008c32:	9805      	ldr	r0, [sp, #20]
 8008c34:	2101      	movs	r1, #1
 8008c36:	f7ff f929 	bl	8007e8c <__i2b>
 8008c3a:	4680      	mov	r8, r0
 8008c3c:	b948      	cbnz	r0, 8008c52 <_strtod_l+0x6a2>
 8008c3e:	f04f 0800 	mov.w	r8, #0
 8008c42:	e6d4      	b.n	80089ee <_strtod_l+0x43e>
 8008c44:	f04f 32ff 	mov.w	r2, #4294967295
 8008c48:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4c:	ea03 0a0a 	and.w	sl, r3, sl
 8008c50:	e7b0      	b.n	8008bb4 <_strtod_l+0x604>
 8008c52:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008c54:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008c56:	2d00      	cmp	r5, #0
 8008c58:	bfab      	itete	ge
 8008c5a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008c5c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008c5e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008c60:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008c62:	bfac      	ite	ge
 8008c64:	18ef      	addge	r7, r5, r3
 8008c66:	1b5e      	sublt	r6, r3, r5
 8008c68:	9b08      	ldr	r3, [sp, #32]
 8008c6a:	1aed      	subs	r5, r5, r3
 8008c6c:	4415      	add	r5, r2
 8008c6e:	4b66      	ldr	r3, [pc, #408]	@ (8008e08 <_strtod_l+0x858>)
 8008c70:	3d01      	subs	r5, #1
 8008c72:	429d      	cmp	r5, r3
 8008c74:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008c78:	da50      	bge.n	8008d1c <_strtod_l+0x76c>
 8008c7a:	1b5b      	subs	r3, r3, r5
 8008c7c:	2b1f      	cmp	r3, #31
 8008c7e:	eba2 0203 	sub.w	r2, r2, r3
 8008c82:	f04f 0101 	mov.w	r1, #1
 8008c86:	dc3d      	bgt.n	8008d04 <_strtod_l+0x754>
 8008c88:	fa01 f303 	lsl.w	r3, r1, r3
 8008c8c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c8e:	2300      	movs	r3, #0
 8008c90:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c92:	18bd      	adds	r5, r7, r2
 8008c94:	9b08      	ldr	r3, [sp, #32]
 8008c96:	42af      	cmp	r7, r5
 8008c98:	4416      	add	r6, r2
 8008c9a:	441e      	add	r6, r3
 8008c9c:	463b      	mov	r3, r7
 8008c9e:	bfa8      	it	ge
 8008ca0:	462b      	movge	r3, r5
 8008ca2:	42b3      	cmp	r3, r6
 8008ca4:	bfa8      	it	ge
 8008ca6:	4633      	movge	r3, r6
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	bfc2      	ittt	gt
 8008cac:	1aed      	subgt	r5, r5, r3
 8008cae:	1af6      	subgt	r6, r6, r3
 8008cb0:	1aff      	subgt	r7, r7, r3
 8008cb2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	dd16      	ble.n	8008ce6 <_strtod_l+0x736>
 8008cb8:	4641      	mov	r1, r8
 8008cba:	9805      	ldr	r0, [sp, #20]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	f7ff f9a5 	bl	800800c <__pow5mult>
 8008cc2:	4680      	mov	r8, r0
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	d0ba      	beq.n	8008c3e <_strtod_l+0x68e>
 8008cc8:	4601      	mov	r1, r0
 8008cca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008ccc:	9805      	ldr	r0, [sp, #20]
 8008cce:	f7ff f8f3 	bl	8007eb8 <__multiply>
 8008cd2:	900e      	str	r0, [sp, #56]	@ 0x38
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	f43f ae8a 	beq.w	80089ee <_strtod_l+0x43e>
 8008cda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cdc:	9805      	ldr	r0, [sp, #20]
 8008cde:	f7fe ffd7 	bl	8007c90 <_Bfree>
 8008ce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ce4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ce6:	2d00      	cmp	r5, #0
 8008ce8:	dc1d      	bgt.n	8008d26 <_strtod_l+0x776>
 8008cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dd23      	ble.n	8008d38 <_strtod_l+0x788>
 8008cf0:	4649      	mov	r1, r9
 8008cf2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008cf4:	9805      	ldr	r0, [sp, #20]
 8008cf6:	f7ff f989 	bl	800800c <__pow5mult>
 8008cfa:	4681      	mov	r9, r0
 8008cfc:	b9e0      	cbnz	r0, 8008d38 <_strtod_l+0x788>
 8008cfe:	f04f 0900 	mov.w	r9, #0
 8008d02:	e674      	b.n	80089ee <_strtod_l+0x43e>
 8008d04:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008d08:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008d0c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008d10:	35e2      	adds	r5, #226	@ 0xe2
 8008d12:	fa01 f305 	lsl.w	r3, r1, r5
 8008d16:	9310      	str	r3, [sp, #64]	@ 0x40
 8008d18:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008d1a:	e7ba      	b.n	8008c92 <_strtod_l+0x6e2>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008d20:	2301      	movs	r3, #1
 8008d22:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d24:	e7b5      	b.n	8008c92 <_strtod_l+0x6e2>
 8008d26:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d28:	9805      	ldr	r0, [sp, #20]
 8008d2a:	462a      	mov	r2, r5
 8008d2c:	f7ff f9c8 	bl	80080c0 <__lshift>
 8008d30:	901a      	str	r0, [sp, #104]	@ 0x68
 8008d32:	2800      	cmp	r0, #0
 8008d34:	d1d9      	bne.n	8008cea <_strtod_l+0x73a>
 8008d36:	e65a      	b.n	80089ee <_strtod_l+0x43e>
 8008d38:	2e00      	cmp	r6, #0
 8008d3a:	dd07      	ble.n	8008d4c <_strtod_l+0x79c>
 8008d3c:	4649      	mov	r1, r9
 8008d3e:	9805      	ldr	r0, [sp, #20]
 8008d40:	4632      	mov	r2, r6
 8008d42:	f7ff f9bd 	bl	80080c0 <__lshift>
 8008d46:	4681      	mov	r9, r0
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d0d8      	beq.n	8008cfe <_strtod_l+0x74e>
 8008d4c:	2f00      	cmp	r7, #0
 8008d4e:	dd08      	ble.n	8008d62 <_strtod_l+0x7b2>
 8008d50:	4641      	mov	r1, r8
 8008d52:	9805      	ldr	r0, [sp, #20]
 8008d54:	463a      	mov	r2, r7
 8008d56:	f7ff f9b3 	bl	80080c0 <__lshift>
 8008d5a:	4680      	mov	r8, r0
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	f43f ae46 	beq.w	80089ee <_strtod_l+0x43e>
 8008d62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d64:	9805      	ldr	r0, [sp, #20]
 8008d66:	464a      	mov	r2, r9
 8008d68:	f7ff fa32 	bl	80081d0 <__mdiff>
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	f43f ae3d 	beq.w	80089ee <_strtod_l+0x43e>
 8008d74:	68c3      	ldr	r3, [r0, #12]
 8008d76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d78:	2300      	movs	r3, #0
 8008d7a:	60c3      	str	r3, [r0, #12]
 8008d7c:	4641      	mov	r1, r8
 8008d7e:	f7ff fa0b 	bl	8008198 <__mcmp>
 8008d82:	2800      	cmp	r0, #0
 8008d84:	da46      	bge.n	8008e14 <_strtod_l+0x864>
 8008d86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d88:	ea53 030a 	orrs.w	r3, r3, sl
 8008d8c:	d16c      	bne.n	8008e68 <_strtod_l+0x8b8>
 8008d8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d168      	bne.n	8008e68 <_strtod_l+0x8b8>
 8008d96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d9a:	0d1b      	lsrs	r3, r3, #20
 8008d9c:	051b      	lsls	r3, r3, #20
 8008d9e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008da2:	d961      	bls.n	8008e68 <_strtod_l+0x8b8>
 8008da4:	6963      	ldr	r3, [r4, #20]
 8008da6:	b913      	cbnz	r3, 8008dae <_strtod_l+0x7fe>
 8008da8:	6923      	ldr	r3, [r4, #16]
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	dd5c      	ble.n	8008e68 <_strtod_l+0x8b8>
 8008dae:	4621      	mov	r1, r4
 8008db0:	2201      	movs	r2, #1
 8008db2:	9805      	ldr	r0, [sp, #20]
 8008db4:	f7ff f984 	bl	80080c0 <__lshift>
 8008db8:	4641      	mov	r1, r8
 8008dba:	4604      	mov	r4, r0
 8008dbc:	f7ff f9ec 	bl	8008198 <__mcmp>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	dd51      	ble.n	8008e68 <_strtod_l+0x8b8>
 8008dc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008dc8:	9a08      	ldr	r2, [sp, #32]
 8008dca:	0d1b      	lsrs	r3, r3, #20
 8008dcc:	051b      	lsls	r3, r3, #20
 8008dce:	2a00      	cmp	r2, #0
 8008dd0:	d06b      	beq.n	8008eaa <_strtod_l+0x8fa>
 8008dd2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008dd6:	d868      	bhi.n	8008eaa <_strtod_l+0x8fa>
 8008dd8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008ddc:	f67f ae9d 	bls.w	8008b1a <_strtod_l+0x56a>
 8008de0:	4b0a      	ldr	r3, [pc, #40]	@ (8008e0c <_strtod_l+0x85c>)
 8008de2:	4650      	mov	r0, sl
 8008de4:	4659      	mov	r1, fp
 8008de6:	2200      	movs	r2, #0
 8008de8:	f7f7 fc06 	bl	80005f8 <__aeabi_dmul>
 8008dec:	4b08      	ldr	r3, [pc, #32]	@ (8008e10 <_strtod_l+0x860>)
 8008dee:	400b      	ands	r3, r1
 8008df0:	4682      	mov	sl, r0
 8008df2:	468b      	mov	fp, r1
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f47f ae05 	bne.w	8008a04 <_strtod_l+0x454>
 8008dfa:	9a05      	ldr	r2, [sp, #20]
 8008dfc:	2322      	movs	r3, #34	@ 0x22
 8008dfe:	6013      	str	r3, [r2, #0]
 8008e00:	e600      	b.n	8008a04 <_strtod_l+0x454>
 8008e02:	bf00      	nop
 8008e04:	0800b110 	.word	0x0800b110
 8008e08:	fffffc02 	.word	0xfffffc02
 8008e0c:	39500000 	.word	0x39500000
 8008e10:	7ff00000 	.word	0x7ff00000
 8008e14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008e18:	d165      	bne.n	8008ee6 <_strtod_l+0x936>
 8008e1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008e1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e20:	b35a      	cbz	r2, 8008e7a <_strtod_l+0x8ca>
 8008e22:	4a9f      	ldr	r2, [pc, #636]	@ (80090a0 <_strtod_l+0xaf0>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d12b      	bne.n	8008e80 <_strtod_l+0x8d0>
 8008e28:	9b08      	ldr	r3, [sp, #32]
 8008e2a:	4651      	mov	r1, sl
 8008e2c:	b303      	cbz	r3, 8008e70 <_strtod_l+0x8c0>
 8008e2e:	4b9d      	ldr	r3, [pc, #628]	@ (80090a4 <_strtod_l+0xaf4>)
 8008e30:	465a      	mov	r2, fp
 8008e32:	4013      	ands	r3, r2
 8008e34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008e38:	f04f 32ff 	mov.w	r2, #4294967295
 8008e3c:	d81b      	bhi.n	8008e76 <_strtod_l+0x8c6>
 8008e3e:	0d1b      	lsrs	r3, r3, #20
 8008e40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e44:	fa02 f303 	lsl.w	r3, r2, r3
 8008e48:	4299      	cmp	r1, r3
 8008e4a:	d119      	bne.n	8008e80 <_strtod_l+0x8d0>
 8008e4c:	4b96      	ldr	r3, [pc, #600]	@ (80090a8 <_strtod_l+0xaf8>)
 8008e4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d102      	bne.n	8008e5a <_strtod_l+0x8aa>
 8008e54:	3101      	adds	r1, #1
 8008e56:	f43f adca 	beq.w	80089ee <_strtod_l+0x43e>
 8008e5a:	4b92      	ldr	r3, [pc, #584]	@ (80090a4 <_strtod_l+0xaf4>)
 8008e5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e5e:	401a      	ands	r2, r3
 8008e60:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008e64:	f04f 0a00 	mov.w	sl, #0
 8008e68:	9b08      	ldr	r3, [sp, #32]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1b8      	bne.n	8008de0 <_strtod_l+0x830>
 8008e6e:	e5c9      	b.n	8008a04 <_strtod_l+0x454>
 8008e70:	f04f 33ff 	mov.w	r3, #4294967295
 8008e74:	e7e8      	b.n	8008e48 <_strtod_l+0x898>
 8008e76:	4613      	mov	r3, r2
 8008e78:	e7e6      	b.n	8008e48 <_strtod_l+0x898>
 8008e7a:	ea53 030a 	orrs.w	r3, r3, sl
 8008e7e:	d0a1      	beq.n	8008dc4 <_strtod_l+0x814>
 8008e80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e82:	b1db      	cbz	r3, 8008ebc <_strtod_l+0x90c>
 8008e84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e86:	4213      	tst	r3, r2
 8008e88:	d0ee      	beq.n	8008e68 <_strtod_l+0x8b8>
 8008e8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e8c:	9a08      	ldr	r2, [sp, #32]
 8008e8e:	4650      	mov	r0, sl
 8008e90:	4659      	mov	r1, fp
 8008e92:	b1bb      	cbz	r3, 8008ec4 <_strtod_l+0x914>
 8008e94:	f7ff fb6e 	bl	8008574 <sulp>
 8008e98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e9c:	ec53 2b10 	vmov	r2, r3, d0
 8008ea0:	f7f7 f9f4 	bl	800028c <__adddf3>
 8008ea4:	4682      	mov	sl, r0
 8008ea6:	468b      	mov	fp, r1
 8008ea8:	e7de      	b.n	8008e68 <_strtod_l+0x8b8>
 8008eaa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008eae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008eb2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008eb6:	f04f 3aff 	mov.w	sl, #4294967295
 8008eba:	e7d5      	b.n	8008e68 <_strtod_l+0x8b8>
 8008ebc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ebe:	ea13 0f0a 	tst.w	r3, sl
 8008ec2:	e7e1      	b.n	8008e88 <_strtod_l+0x8d8>
 8008ec4:	f7ff fb56 	bl	8008574 <sulp>
 8008ec8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ecc:	ec53 2b10 	vmov	r2, r3, d0
 8008ed0:	f7f7 f9da 	bl	8000288 <__aeabi_dsub>
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	4682      	mov	sl, r0
 8008eda:	468b      	mov	fp, r1
 8008edc:	f7f7 fdf4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d0c1      	beq.n	8008e68 <_strtod_l+0x8b8>
 8008ee4:	e619      	b.n	8008b1a <_strtod_l+0x56a>
 8008ee6:	4641      	mov	r1, r8
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f7ff facd 	bl	8008488 <__ratio>
 8008eee:	ec57 6b10 	vmov	r6, r7, d0
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008ef8:	4630      	mov	r0, r6
 8008efa:	4639      	mov	r1, r7
 8008efc:	f7f7 fdf8 	bl	8000af0 <__aeabi_dcmple>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d06f      	beq.n	8008fe4 <_strtod_l+0xa34>
 8008f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d17a      	bne.n	8009000 <_strtod_l+0xa50>
 8008f0a:	f1ba 0f00 	cmp.w	sl, #0
 8008f0e:	d158      	bne.n	8008fc2 <_strtod_l+0xa12>
 8008f10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d15a      	bne.n	8008fd0 <_strtod_l+0xa20>
 8008f1a:	4b64      	ldr	r3, [pc, #400]	@ (80090ac <_strtod_l+0xafc>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	4630      	mov	r0, r6
 8008f20:	4639      	mov	r1, r7
 8008f22:	f7f7 fddb 	bl	8000adc <__aeabi_dcmplt>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d159      	bne.n	8008fde <_strtod_l+0xa2e>
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	4639      	mov	r1, r7
 8008f2e:	4b60      	ldr	r3, [pc, #384]	@ (80090b0 <_strtod_l+0xb00>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	f7f7 fb61 	bl	80005f8 <__aeabi_dmul>
 8008f36:	4606      	mov	r6, r0
 8008f38:	460f      	mov	r7, r1
 8008f3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008f3e:	9606      	str	r6, [sp, #24]
 8008f40:	9307      	str	r3, [sp, #28]
 8008f42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f46:	4d57      	ldr	r5, [pc, #348]	@ (80090a4 <_strtod_l+0xaf4>)
 8008f48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008f4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f4e:	401d      	ands	r5, r3
 8008f50:	4b58      	ldr	r3, [pc, #352]	@ (80090b4 <_strtod_l+0xb04>)
 8008f52:	429d      	cmp	r5, r3
 8008f54:	f040 80b2 	bne.w	80090bc <_strtod_l+0xb0c>
 8008f58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008f5e:	ec4b ab10 	vmov	d0, sl, fp
 8008f62:	f7ff f9c9 	bl	80082f8 <__ulp>
 8008f66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f6a:	ec51 0b10 	vmov	r0, r1, d0
 8008f6e:	f7f7 fb43 	bl	80005f8 <__aeabi_dmul>
 8008f72:	4652      	mov	r2, sl
 8008f74:	465b      	mov	r3, fp
 8008f76:	f7f7 f989 	bl	800028c <__adddf3>
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	4949      	ldr	r1, [pc, #292]	@ (80090a4 <_strtod_l+0xaf4>)
 8008f7e:	4a4e      	ldr	r2, [pc, #312]	@ (80090b8 <_strtod_l+0xb08>)
 8008f80:	4019      	ands	r1, r3
 8008f82:	4291      	cmp	r1, r2
 8008f84:	4682      	mov	sl, r0
 8008f86:	d942      	bls.n	800900e <_strtod_l+0xa5e>
 8008f88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008f8a:	4b47      	ldr	r3, [pc, #284]	@ (80090a8 <_strtod_l+0xaf8>)
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d103      	bne.n	8008f98 <_strtod_l+0x9e8>
 8008f90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f92:	3301      	adds	r3, #1
 8008f94:	f43f ad2b 	beq.w	80089ee <_strtod_l+0x43e>
 8008f98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80090a8 <_strtod_l+0xaf8>
 8008f9c:	f04f 3aff 	mov.w	sl, #4294967295
 8008fa0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fa2:	9805      	ldr	r0, [sp, #20]
 8008fa4:	f7fe fe74 	bl	8007c90 <_Bfree>
 8008fa8:	9805      	ldr	r0, [sp, #20]
 8008faa:	4649      	mov	r1, r9
 8008fac:	f7fe fe70 	bl	8007c90 <_Bfree>
 8008fb0:	9805      	ldr	r0, [sp, #20]
 8008fb2:	4641      	mov	r1, r8
 8008fb4:	f7fe fe6c 	bl	8007c90 <_Bfree>
 8008fb8:	9805      	ldr	r0, [sp, #20]
 8008fba:	4621      	mov	r1, r4
 8008fbc:	f7fe fe68 	bl	8007c90 <_Bfree>
 8008fc0:	e618      	b.n	8008bf4 <_strtod_l+0x644>
 8008fc2:	f1ba 0f01 	cmp.w	sl, #1
 8008fc6:	d103      	bne.n	8008fd0 <_strtod_l+0xa20>
 8008fc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f43f ada5 	beq.w	8008b1a <_strtod_l+0x56a>
 8008fd0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009080 <_strtod_l+0xad0>
 8008fd4:	4f35      	ldr	r7, [pc, #212]	@ (80090ac <_strtod_l+0xafc>)
 8008fd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008fda:	2600      	movs	r6, #0
 8008fdc:	e7b1      	b.n	8008f42 <_strtod_l+0x992>
 8008fde:	4f34      	ldr	r7, [pc, #208]	@ (80090b0 <_strtod_l+0xb00>)
 8008fe0:	2600      	movs	r6, #0
 8008fe2:	e7aa      	b.n	8008f3a <_strtod_l+0x98a>
 8008fe4:	4b32      	ldr	r3, [pc, #200]	@ (80090b0 <_strtod_l+0xb00>)
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	4639      	mov	r1, r7
 8008fea:	2200      	movs	r2, #0
 8008fec:	f7f7 fb04 	bl	80005f8 <__aeabi_dmul>
 8008ff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	460f      	mov	r7, r1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d09f      	beq.n	8008f3a <_strtod_l+0x98a>
 8008ffa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008ffe:	e7a0      	b.n	8008f42 <_strtod_l+0x992>
 8009000:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009088 <_strtod_l+0xad8>
 8009004:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009008:	ec57 6b17 	vmov	r6, r7, d7
 800900c:	e799      	b.n	8008f42 <_strtod_l+0x992>
 800900e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009012:	9b08      	ldr	r3, [sp, #32]
 8009014:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1c1      	bne.n	8008fa0 <_strtod_l+0x9f0>
 800901c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009020:	0d1b      	lsrs	r3, r3, #20
 8009022:	051b      	lsls	r3, r3, #20
 8009024:	429d      	cmp	r5, r3
 8009026:	d1bb      	bne.n	8008fa0 <_strtod_l+0x9f0>
 8009028:	4630      	mov	r0, r6
 800902a:	4639      	mov	r1, r7
 800902c:	f7f7 fe2c 	bl	8000c88 <__aeabi_d2lz>
 8009030:	f7f7 fab4 	bl	800059c <__aeabi_l2d>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	4630      	mov	r0, r6
 800903a:	4639      	mov	r1, r7
 800903c:	f7f7 f924 	bl	8000288 <__aeabi_dsub>
 8009040:	460b      	mov	r3, r1
 8009042:	4602      	mov	r2, r0
 8009044:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009048:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800904c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800904e:	ea46 060a 	orr.w	r6, r6, sl
 8009052:	431e      	orrs	r6, r3
 8009054:	d06f      	beq.n	8009136 <_strtod_l+0xb86>
 8009056:	a30e      	add	r3, pc, #56	@ (adr r3, 8009090 <_strtod_l+0xae0>)
 8009058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905c:	f7f7 fd3e 	bl	8000adc <__aeabi_dcmplt>
 8009060:	2800      	cmp	r0, #0
 8009062:	f47f accf 	bne.w	8008a04 <_strtod_l+0x454>
 8009066:	a30c      	add	r3, pc, #48	@ (adr r3, 8009098 <_strtod_l+0xae8>)
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009070:	f7f7 fd52 	bl	8000b18 <__aeabi_dcmpgt>
 8009074:	2800      	cmp	r0, #0
 8009076:	d093      	beq.n	8008fa0 <_strtod_l+0x9f0>
 8009078:	e4c4      	b.n	8008a04 <_strtod_l+0x454>
 800907a:	bf00      	nop
 800907c:	f3af 8000 	nop.w
 8009080:	00000000 	.word	0x00000000
 8009084:	bff00000 	.word	0xbff00000
 8009088:	00000000 	.word	0x00000000
 800908c:	3ff00000 	.word	0x3ff00000
 8009090:	94a03595 	.word	0x94a03595
 8009094:	3fdfffff 	.word	0x3fdfffff
 8009098:	35afe535 	.word	0x35afe535
 800909c:	3fe00000 	.word	0x3fe00000
 80090a0:	000fffff 	.word	0x000fffff
 80090a4:	7ff00000 	.word	0x7ff00000
 80090a8:	7fefffff 	.word	0x7fefffff
 80090ac:	3ff00000 	.word	0x3ff00000
 80090b0:	3fe00000 	.word	0x3fe00000
 80090b4:	7fe00000 	.word	0x7fe00000
 80090b8:	7c9fffff 	.word	0x7c9fffff
 80090bc:	9b08      	ldr	r3, [sp, #32]
 80090be:	b323      	cbz	r3, 800910a <_strtod_l+0xb5a>
 80090c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80090c4:	d821      	bhi.n	800910a <_strtod_l+0xb5a>
 80090c6:	a328      	add	r3, pc, #160	@ (adr r3, 8009168 <_strtod_l+0xbb8>)
 80090c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090cc:	4630      	mov	r0, r6
 80090ce:	4639      	mov	r1, r7
 80090d0:	f7f7 fd0e 	bl	8000af0 <__aeabi_dcmple>
 80090d4:	b1a0      	cbz	r0, 8009100 <_strtod_l+0xb50>
 80090d6:	4639      	mov	r1, r7
 80090d8:	4630      	mov	r0, r6
 80090da:	f7f7 fd65 	bl	8000ba8 <__aeabi_d2uiz>
 80090de:	2801      	cmp	r0, #1
 80090e0:	bf38      	it	cc
 80090e2:	2001      	movcc	r0, #1
 80090e4:	f7f7 fa0e 	bl	8000504 <__aeabi_ui2d>
 80090e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090ea:	4606      	mov	r6, r0
 80090ec:	460f      	mov	r7, r1
 80090ee:	b9fb      	cbnz	r3, 8009130 <_strtod_l+0xb80>
 80090f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80090f4:	9014      	str	r0, [sp, #80]	@ 0x50
 80090f6:	9315      	str	r3, [sp, #84]	@ 0x54
 80090f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80090fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009100:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009102:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009106:	1b5b      	subs	r3, r3, r5
 8009108:	9311      	str	r3, [sp, #68]	@ 0x44
 800910a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800910e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009112:	f7ff f8f1 	bl	80082f8 <__ulp>
 8009116:	4650      	mov	r0, sl
 8009118:	ec53 2b10 	vmov	r2, r3, d0
 800911c:	4659      	mov	r1, fp
 800911e:	f7f7 fa6b 	bl	80005f8 <__aeabi_dmul>
 8009122:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009126:	f7f7 f8b1 	bl	800028c <__adddf3>
 800912a:	4682      	mov	sl, r0
 800912c:	468b      	mov	fp, r1
 800912e:	e770      	b.n	8009012 <_strtod_l+0xa62>
 8009130:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009134:	e7e0      	b.n	80090f8 <_strtod_l+0xb48>
 8009136:	a30e      	add	r3, pc, #56	@ (adr r3, 8009170 <_strtod_l+0xbc0>)
 8009138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913c:	f7f7 fcce 	bl	8000adc <__aeabi_dcmplt>
 8009140:	e798      	b.n	8009074 <_strtod_l+0xac4>
 8009142:	2300      	movs	r3, #0
 8009144:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009146:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009148:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800914a:	6013      	str	r3, [r2, #0]
 800914c:	f7ff ba6d 	b.w	800862a <_strtod_l+0x7a>
 8009150:	2a65      	cmp	r2, #101	@ 0x65
 8009152:	f43f ab66 	beq.w	8008822 <_strtod_l+0x272>
 8009156:	2a45      	cmp	r2, #69	@ 0x45
 8009158:	f43f ab63 	beq.w	8008822 <_strtod_l+0x272>
 800915c:	2301      	movs	r3, #1
 800915e:	f7ff bb9e 	b.w	800889e <_strtod_l+0x2ee>
 8009162:	bf00      	nop
 8009164:	f3af 8000 	nop.w
 8009168:	ffc00000 	.word	0xffc00000
 800916c:	41dfffff 	.word	0x41dfffff
 8009170:	94a03595 	.word	0x94a03595
 8009174:	3fcfffff 	.word	0x3fcfffff

08009178 <_strtod_r>:
 8009178:	4b01      	ldr	r3, [pc, #4]	@ (8009180 <_strtod_r+0x8>)
 800917a:	f7ff ba19 	b.w	80085b0 <_strtod_l>
 800917e:	bf00      	nop
 8009180:	20000154 	.word	0x20000154

08009184 <__ssputs_r>:
 8009184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009188:	688e      	ldr	r6, [r1, #8]
 800918a:	461f      	mov	r7, r3
 800918c:	42be      	cmp	r6, r7
 800918e:	680b      	ldr	r3, [r1, #0]
 8009190:	4682      	mov	sl, r0
 8009192:	460c      	mov	r4, r1
 8009194:	4690      	mov	r8, r2
 8009196:	d82d      	bhi.n	80091f4 <__ssputs_r+0x70>
 8009198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800919c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091a0:	d026      	beq.n	80091f0 <__ssputs_r+0x6c>
 80091a2:	6965      	ldr	r5, [r4, #20]
 80091a4:	6909      	ldr	r1, [r1, #16]
 80091a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091aa:	eba3 0901 	sub.w	r9, r3, r1
 80091ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091b2:	1c7b      	adds	r3, r7, #1
 80091b4:	444b      	add	r3, r9
 80091b6:	106d      	asrs	r5, r5, #1
 80091b8:	429d      	cmp	r5, r3
 80091ba:	bf38      	it	cc
 80091bc:	461d      	movcc	r5, r3
 80091be:	0553      	lsls	r3, r2, #21
 80091c0:	d527      	bpl.n	8009212 <__ssputs_r+0x8e>
 80091c2:	4629      	mov	r1, r5
 80091c4:	f7fe fc98 	bl	8007af8 <_malloc_r>
 80091c8:	4606      	mov	r6, r0
 80091ca:	b360      	cbz	r0, 8009226 <__ssputs_r+0xa2>
 80091cc:	6921      	ldr	r1, [r4, #16]
 80091ce:	464a      	mov	r2, r9
 80091d0:	f7fd fd9d 	bl	8006d0e <memcpy>
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80091da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091de:	81a3      	strh	r3, [r4, #12]
 80091e0:	6126      	str	r6, [r4, #16]
 80091e2:	6165      	str	r5, [r4, #20]
 80091e4:	444e      	add	r6, r9
 80091e6:	eba5 0509 	sub.w	r5, r5, r9
 80091ea:	6026      	str	r6, [r4, #0]
 80091ec:	60a5      	str	r5, [r4, #8]
 80091ee:	463e      	mov	r6, r7
 80091f0:	42be      	cmp	r6, r7
 80091f2:	d900      	bls.n	80091f6 <__ssputs_r+0x72>
 80091f4:	463e      	mov	r6, r7
 80091f6:	6820      	ldr	r0, [r4, #0]
 80091f8:	4632      	mov	r2, r6
 80091fa:	4641      	mov	r1, r8
 80091fc:	f000 f9d8 	bl	80095b0 <memmove>
 8009200:	68a3      	ldr	r3, [r4, #8]
 8009202:	1b9b      	subs	r3, r3, r6
 8009204:	60a3      	str	r3, [r4, #8]
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	4433      	add	r3, r6
 800920a:	6023      	str	r3, [r4, #0]
 800920c:	2000      	movs	r0, #0
 800920e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009212:	462a      	mov	r2, r5
 8009214:	f000 fd75 	bl	8009d02 <_realloc_r>
 8009218:	4606      	mov	r6, r0
 800921a:	2800      	cmp	r0, #0
 800921c:	d1e0      	bne.n	80091e0 <__ssputs_r+0x5c>
 800921e:	6921      	ldr	r1, [r4, #16]
 8009220:	4650      	mov	r0, sl
 8009222:	f7fe fbf5 	bl	8007a10 <_free_r>
 8009226:	230c      	movs	r3, #12
 8009228:	f8ca 3000 	str.w	r3, [sl]
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009232:	81a3      	strh	r3, [r4, #12]
 8009234:	f04f 30ff 	mov.w	r0, #4294967295
 8009238:	e7e9      	b.n	800920e <__ssputs_r+0x8a>
	...

0800923c <_svfiprintf_r>:
 800923c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009240:	4698      	mov	r8, r3
 8009242:	898b      	ldrh	r3, [r1, #12]
 8009244:	061b      	lsls	r3, r3, #24
 8009246:	b09d      	sub	sp, #116	@ 0x74
 8009248:	4607      	mov	r7, r0
 800924a:	460d      	mov	r5, r1
 800924c:	4614      	mov	r4, r2
 800924e:	d510      	bpl.n	8009272 <_svfiprintf_r+0x36>
 8009250:	690b      	ldr	r3, [r1, #16]
 8009252:	b973      	cbnz	r3, 8009272 <_svfiprintf_r+0x36>
 8009254:	2140      	movs	r1, #64	@ 0x40
 8009256:	f7fe fc4f 	bl	8007af8 <_malloc_r>
 800925a:	6028      	str	r0, [r5, #0]
 800925c:	6128      	str	r0, [r5, #16]
 800925e:	b930      	cbnz	r0, 800926e <_svfiprintf_r+0x32>
 8009260:	230c      	movs	r3, #12
 8009262:	603b      	str	r3, [r7, #0]
 8009264:	f04f 30ff 	mov.w	r0, #4294967295
 8009268:	b01d      	add	sp, #116	@ 0x74
 800926a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926e:	2340      	movs	r3, #64	@ 0x40
 8009270:	616b      	str	r3, [r5, #20]
 8009272:	2300      	movs	r3, #0
 8009274:	9309      	str	r3, [sp, #36]	@ 0x24
 8009276:	2320      	movs	r3, #32
 8009278:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800927c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009280:	2330      	movs	r3, #48	@ 0x30
 8009282:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009420 <_svfiprintf_r+0x1e4>
 8009286:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800928a:	f04f 0901 	mov.w	r9, #1
 800928e:	4623      	mov	r3, r4
 8009290:	469a      	mov	sl, r3
 8009292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009296:	b10a      	cbz	r2, 800929c <_svfiprintf_r+0x60>
 8009298:	2a25      	cmp	r2, #37	@ 0x25
 800929a:	d1f9      	bne.n	8009290 <_svfiprintf_r+0x54>
 800929c:	ebba 0b04 	subs.w	fp, sl, r4
 80092a0:	d00b      	beq.n	80092ba <_svfiprintf_r+0x7e>
 80092a2:	465b      	mov	r3, fp
 80092a4:	4622      	mov	r2, r4
 80092a6:	4629      	mov	r1, r5
 80092a8:	4638      	mov	r0, r7
 80092aa:	f7ff ff6b 	bl	8009184 <__ssputs_r>
 80092ae:	3001      	adds	r0, #1
 80092b0:	f000 80a7 	beq.w	8009402 <_svfiprintf_r+0x1c6>
 80092b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092b6:	445a      	add	r2, fp
 80092b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80092ba:	f89a 3000 	ldrb.w	r3, [sl]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f000 809f 	beq.w	8009402 <_svfiprintf_r+0x1c6>
 80092c4:	2300      	movs	r3, #0
 80092c6:	f04f 32ff 	mov.w	r2, #4294967295
 80092ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092ce:	f10a 0a01 	add.w	sl, sl, #1
 80092d2:	9304      	str	r3, [sp, #16]
 80092d4:	9307      	str	r3, [sp, #28]
 80092d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092da:	931a      	str	r3, [sp, #104]	@ 0x68
 80092dc:	4654      	mov	r4, sl
 80092de:	2205      	movs	r2, #5
 80092e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e4:	484e      	ldr	r0, [pc, #312]	@ (8009420 <_svfiprintf_r+0x1e4>)
 80092e6:	f7f6 ff73 	bl	80001d0 <memchr>
 80092ea:	9a04      	ldr	r2, [sp, #16]
 80092ec:	b9d8      	cbnz	r0, 8009326 <_svfiprintf_r+0xea>
 80092ee:	06d0      	lsls	r0, r2, #27
 80092f0:	bf44      	itt	mi
 80092f2:	2320      	movmi	r3, #32
 80092f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092f8:	0711      	lsls	r1, r2, #28
 80092fa:	bf44      	itt	mi
 80092fc:	232b      	movmi	r3, #43	@ 0x2b
 80092fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009302:	f89a 3000 	ldrb.w	r3, [sl]
 8009306:	2b2a      	cmp	r3, #42	@ 0x2a
 8009308:	d015      	beq.n	8009336 <_svfiprintf_r+0xfa>
 800930a:	9a07      	ldr	r2, [sp, #28]
 800930c:	4654      	mov	r4, sl
 800930e:	2000      	movs	r0, #0
 8009310:	f04f 0c0a 	mov.w	ip, #10
 8009314:	4621      	mov	r1, r4
 8009316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800931a:	3b30      	subs	r3, #48	@ 0x30
 800931c:	2b09      	cmp	r3, #9
 800931e:	d94b      	bls.n	80093b8 <_svfiprintf_r+0x17c>
 8009320:	b1b0      	cbz	r0, 8009350 <_svfiprintf_r+0x114>
 8009322:	9207      	str	r2, [sp, #28]
 8009324:	e014      	b.n	8009350 <_svfiprintf_r+0x114>
 8009326:	eba0 0308 	sub.w	r3, r0, r8
 800932a:	fa09 f303 	lsl.w	r3, r9, r3
 800932e:	4313      	orrs	r3, r2
 8009330:	9304      	str	r3, [sp, #16]
 8009332:	46a2      	mov	sl, r4
 8009334:	e7d2      	b.n	80092dc <_svfiprintf_r+0xa0>
 8009336:	9b03      	ldr	r3, [sp, #12]
 8009338:	1d19      	adds	r1, r3, #4
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	9103      	str	r1, [sp, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	bfbb      	ittet	lt
 8009342:	425b      	neglt	r3, r3
 8009344:	f042 0202 	orrlt.w	r2, r2, #2
 8009348:	9307      	strge	r3, [sp, #28]
 800934a:	9307      	strlt	r3, [sp, #28]
 800934c:	bfb8      	it	lt
 800934e:	9204      	strlt	r2, [sp, #16]
 8009350:	7823      	ldrb	r3, [r4, #0]
 8009352:	2b2e      	cmp	r3, #46	@ 0x2e
 8009354:	d10a      	bne.n	800936c <_svfiprintf_r+0x130>
 8009356:	7863      	ldrb	r3, [r4, #1]
 8009358:	2b2a      	cmp	r3, #42	@ 0x2a
 800935a:	d132      	bne.n	80093c2 <_svfiprintf_r+0x186>
 800935c:	9b03      	ldr	r3, [sp, #12]
 800935e:	1d1a      	adds	r2, r3, #4
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	9203      	str	r2, [sp, #12]
 8009364:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009368:	3402      	adds	r4, #2
 800936a:	9305      	str	r3, [sp, #20]
 800936c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009430 <_svfiprintf_r+0x1f4>
 8009370:	7821      	ldrb	r1, [r4, #0]
 8009372:	2203      	movs	r2, #3
 8009374:	4650      	mov	r0, sl
 8009376:	f7f6 ff2b 	bl	80001d0 <memchr>
 800937a:	b138      	cbz	r0, 800938c <_svfiprintf_r+0x150>
 800937c:	9b04      	ldr	r3, [sp, #16]
 800937e:	eba0 000a 	sub.w	r0, r0, sl
 8009382:	2240      	movs	r2, #64	@ 0x40
 8009384:	4082      	lsls	r2, r0
 8009386:	4313      	orrs	r3, r2
 8009388:	3401      	adds	r4, #1
 800938a:	9304      	str	r3, [sp, #16]
 800938c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009390:	4824      	ldr	r0, [pc, #144]	@ (8009424 <_svfiprintf_r+0x1e8>)
 8009392:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009396:	2206      	movs	r2, #6
 8009398:	f7f6 ff1a 	bl	80001d0 <memchr>
 800939c:	2800      	cmp	r0, #0
 800939e:	d036      	beq.n	800940e <_svfiprintf_r+0x1d2>
 80093a0:	4b21      	ldr	r3, [pc, #132]	@ (8009428 <_svfiprintf_r+0x1ec>)
 80093a2:	bb1b      	cbnz	r3, 80093ec <_svfiprintf_r+0x1b0>
 80093a4:	9b03      	ldr	r3, [sp, #12]
 80093a6:	3307      	adds	r3, #7
 80093a8:	f023 0307 	bic.w	r3, r3, #7
 80093ac:	3308      	adds	r3, #8
 80093ae:	9303      	str	r3, [sp, #12]
 80093b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b2:	4433      	add	r3, r6
 80093b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093b6:	e76a      	b.n	800928e <_svfiprintf_r+0x52>
 80093b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80093bc:	460c      	mov	r4, r1
 80093be:	2001      	movs	r0, #1
 80093c0:	e7a8      	b.n	8009314 <_svfiprintf_r+0xd8>
 80093c2:	2300      	movs	r3, #0
 80093c4:	3401      	adds	r4, #1
 80093c6:	9305      	str	r3, [sp, #20]
 80093c8:	4619      	mov	r1, r3
 80093ca:	f04f 0c0a 	mov.w	ip, #10
 80093ce:	4620      	mov	r0, r4
 80093d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093d4:	3a30      	subs	r2, #48	@ 0x30
 80093d6:	2a09      	cmp	r2, #9
 80093d8:	d903      	bls.n	80093e2 <_svfiprintf_r+0x1a6>
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0c6      	beq.n	800936c <_svfiprintf_r+0x130>
 80093de:	9105      	str	r1, [sp, #20]
 80093e0:	e7c4      	b.n	800936c <_svfiprintf_r+0x130>
 80093e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80093e6:	4604      	mov	r4, r0
 80093e8:	2301      	movs	r3, #1
 80093ea:	e7f0      	b.n	80093ce <_svfiprintf_r+0x192>
 80093ec:	ab03      	add	r3, sp, #12
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	462a      	mov	r2, r5
 80093f2:	4b0e      	ldr	r3, [pc, #56]	@ (800942c <_svfiprintf_r+0x1f0>)
 80093f4:	a904      	add	r1, sp, #16
 80093f6:	4638      	mov	r0, r7
 80093f8:	f7fc fd10 	bl	8005e1c <_printf_float>
 80093fc:	1c42      	adds	r2, r0, #1
 80093fe:	4606      	mov	r6, r0
 8009400:	d1d6      	bne.n	80093b0 <_svfiprintf_r+0x174>
 8009402:	89ab      	ldrh	r3, [r5, #12]
 8009404:	065b      	lsls	r3, r3, #25
 8009406:	f53f af2d 	bmi.w	8009264 <_svfiprintf_r+0x28>
 800940a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800940c:	e72c      	b.n	8009268 <_svfiprintf_r+0x2c>
 800940e:	ab03      	add	r3, sp, #12
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	462a      	mov	r2, r5
 8009414:	4b05      	ldr	r3, [pc, #20]	@ (800942c <_svfiprintf_r+0x1f0>)
 8009416:	a904      	add	r1, sp, #16
 8009418:	4638      	mov	r0, r7
 800941a:	f7fc ff97 	bl	800634c <_printf_i>
 800941e:	e7ed      	b.n	80093fc <_svfiprintf_r+0x1c0>
 8009420:	0800b138 	.word	0x0800b138
 8009424:	0800b142 	.word	0x0800b142
 8009428:	08005e1d 	.word	0x08005e1d
 800942c:	08009185 	.word	0x08009185
 8009430:	0800b13e 	.word	0x0800b13e

08009434 <__sflush_r>:
 8009434:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800943c:	0716      	lsls	r6, r2, #28
 800943e:	4605      	mov	r5, r0
 8009440:	460c      	mov	r4, r1
 8009442:	d454      	bmi.n	80094ee <__sflush_r+0xba>
 8009444:	684b      	ldr	r3, [r1, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	dc02      	bgt.n	8009450 <__sflush_r+0x1c>
 800944a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800944c:	2b00      	cmp	r3, #0
 800944e:	dd48      	ble.n	80094e2 <__sflush_r+0xae>
 8009450:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009452:	2e00      	cmp	r6, #0
 8009454:	d045      	beq.n	80094e2 <__sflush_r+0xae>
 8009456:	2300      	movs	r3, #0
 8009458:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800945c:	682f      	ldr	r7, [r5, #0]
 800945e:	6a21      	ldr	r1, [r4, #32]
 8009460:	602b      	str	r3, [r5, #0]
 8009462:	d030      	beq.n	80094c6 <__sflush_r+0x92>
 8009464:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009466:	89a3      	ldrh	r3, [r4, #12]
 8009468:	0759      	lsls	r1, r3, #29
 800946a:	d505      	bpl.n	8009478 <__sflush_r+0x44>
 800946c:	6863      	ldr	r3, [r4, #4]
 800946e:	1ad2      	subs	r2, r2, r3
 8009470:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009472:	b10b      	cbz	r3, 8009478 <__sflush_r+0x44>
 8009474:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009476:	1ad2      	subs	r2, r2, r3
 8009478:	2300      	movs	r3, #0
 800947a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800947c:	6a21      	ldr	r1, [r4, #32]
 800947e:	4628      	mov	r0, r5
 8009480:	47b0      	blx	r6
 8009482:	1c43      	adds	r3, r0, #1
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	d106      	bne.n	8009496 <__sflush_r+0x62>
 8009488:	6829      	ldr	r1, [r5, #0]
 800948a:	291d      	cmp	r1, #29
 800948c:	d82b      	bhi.n	80094e6 <__sflush_r+0xb2>
 800948e:	4a2a      	ldr	r2, [pc, #168]	@ (8009538 <__sflush_r+0x104>)
 8009490:	410a      	asrs	r2, r1
 8009492:	07d6      	lsls	r6, r2, #31
 8009494:	d427      	bmi.n	80094e6 <__sflush_r+0xb2>
 8009496:	2200      	movs	r2, #0
 8009498:	6062      	str	r2, [r4, #4]
 800949a:	04d9      	lsls	r1, r3, #19
 800949c:	6922      	ldr	r2, [r4, #16]
 800949e:	6022      	str	r2, [r4, #0]
 80094a0:	d504      	bpl.n	80094ac <__sflush_r+0x78>
 80094a2:	1c42      	adds	r2, r0, #1
 80094a4:	d101      	bne.n	80094aa <__sflush_r+0x76>
 80094a6:	682b      	ldr	r3, [r5, #0]
 80094a8:	b903      	cbnz	r3, 80094ac <__sflush_r+0x78>
 80094aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80094ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094ae:	602f      	str	r7, [r5, #0]
 80094b0:	b1b9      	cbz	r1, 80094e2 <__sflush_r+0xae>
 80094b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094b6:	4299      	cmp	r1, r3
 80094b8:	d002      	beq.n	80094c0 <__sflush_r+0x8c>
 80094ba:	4628      	mov	r0, r5
 80094bc:	f7fe faa8 	bl	8007a10 <_free_r>
 80094c0:	2300      	movs	r3, #0
 80094c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80094c4:	e00d      	b.n	80094e2 <__sflush_r+0xae>
 80094c6:	2301      	movs	r3, #1
 80094c8:	4628      	mov	r0, r5
 80094ca:	47b0      	blx	r6
 80094cc:	4602      	mov	r2, r0
 80094ce:	1c50      	adds	r0, r2, #1
 80094d0:	d1c9      	bne.n	8009466 <__sflush_r+0x32>
 80094d2:	682b      	ldr	r3, [r5, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d0c6      	beq.n	8009466 <__sflush_r+0x32>
 80094d8:	2b1d      	cmp	r3, #29
 80094da:	d001      	beq.n	80094e0 <__sflush_r+0xac>
 80094dc:	2b16      	cmp	r3, #22
 80094de:	d11e      	bne.n	800951e <__sflush_r+0xea>
 80094e0:	602f      	str	r7, [r5, #0]
 80094e2:	2000      	movs	r0, #0
 80094e4:	e022      	b.n	800952c <__sflush_r+0xf8>
 80094e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094ea:	b21b      	sxth	r3, r3
 80094ec:	e01b      	b.n	8009526 <__sflush_r+0xf2>
 80094ee:	690f      	ldr	r7, [r1, #16]
 80094f0:	2f00      	cmp	r7, #0
 80094f2:	d0f6      	beq.n	80094e2 <__sflush_r+0xae>
 80094f4:	0793      	lsls	r3, r2, #30
 80094f6:	680e      	ldr	r6, [r1, #0]
 80094f8:	bf08      	it	eq
 80094fa:	694b      	ldreq	r3, [r1, #20]
 80094fc:	600f      	str	r7, [r1, #0]
 80094fe:	bf18      	it	ne
 8009500:	2300      	movne	r3, #0
 8009502:	eba6 0807 	sub.w	r8, r6, r7
 8009506:	608b      	str	r3, [r1, #8]
 8009508:	f1b8 0f00 	cmp.w	r8, #0
 800950c:	dde9      	ble.n	80094e2 <__sflush_r+0xae>
 800950e:	6a21      	ldr	r1, [r4, #32]
 8009510:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009512:	4643      	mov	r3, r8
 8009514:	463a      	mov	r2, r7
 8009516:	4628      	mov	r0, r5
 8009518:	47b0      	blx	r6
 800951a:	2800      	cmp	r0, #0
 800951c:	dc08      	bgt.n	8009530 <__sflush_r+0xfc>
 800951e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009526:	81a3      	strh	r3, [r4, #12]
 8009528:	f04f 30ff 	mov.w	r0, #4294967295
 800952c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009530:	4407      	add	r7, r0
 8009532:	eba8 0800 	sub.w	r8, r8, r0
 8009536:	e7e7      	b.n	8009508 <__sflush_r+0xd4>
 8009538:	dfbffffe 	.word	0xdfbffffe

0800953c <_fflush_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	690b      	ldr	r3, [r1, #16]
 8009540:	4605      	mov	r5, r0
 8009542:	460c      	mov	r4, r1
 8009544:	b913      	cbnz	r3, 800954c <_fflush_r+0x10>
 8009546:	2500      	movs	r5, #0
 8009548:	4628      	mov	r0, r5
 800954a:	bd38      	pop	{r3, r4, r5, pc}
 800954c:	b118      	cbz	r0, 8009556 <_fflush_r+0x1a>
 800954e:	6a03      	ldr	r3, [r0, #32]
 8009550:	b90b      	cbnz	r3, 8009556 <_fflush_r+0x1a>
 8009552:	f7fd fabb 	bl	8006acc <__sinit>
 8009556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d0f3      	beq.n	8009546 <_fflush_r+0xa>
 800955e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009560:	07d0      	lsls	r0, r2, #31
 8009562:	d404      	bmi.n	800956e <_fflush_r+0x32>
 8009564:	0599      	lsls	r1, r3, #22
 8009566:	d402      	bmi.n	800956e <_fflush_r+0x32>
 8009568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800956a:	f7fd fbc6 	bl	8006cfa <__retarget_lock_acquire_recursive>
 800956e:	4628      	mov	r0, r5
 8009570:	4621      	mov	r1, r4
 8009572:	f7ff ff5f 	bl	8009434 <__sflush_r>
 8009576:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009578:	07da      	lsls	r2, r3, #31
 800957a:	4605      	mov	r5, r0
 800957c:	d4e4      	bmi.n	8009548 <_fflush_r+0xc>
 800957e:	89a3      	ldrh	r3, [r4, #12]
 8009580:	059b      	lsls	r3, r3, #22
 8009582:	d4e1      	bmi.n	8009548 <_fflush_r+0xc>
 8009584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009586:	f7fd fbb9 	bl	8006cfc <__retarget_lock_release_recursive>
 800958a:	e7dd      	b.n	8009548 <_fflush_r+0xc>

0800958c <fiprintf>:
 800958c:	b40e      	push	{r1, r2, r3}
 800958e:	b503      	push	{r0, r1, lr}
 8009590:	4601      	mov	r1, r0
 8009592:	ab03      	add	r3, sp, #12
 8009594:	4805      	ldr	r0, [pc, #20]	@ (80095ac <fiprintf+0x20>)
 8009596:	f853 2b04 	ldr.w	r2, [r3], #4
 800959a:	6800      	ldr	r0, [r0, #0]
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	f000 fc15 	bl	8009dcc <_vfiprintf_r>
 80095a2:	b002      	add	sp, #8
 80095a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095a8:	b003      	add	sp, #12
 80095aa:	4770      	bx	lr
 80095ac:	20000104 	.word	0x20000104

080095b0 <memmove>:
 80095b0:	4288      	cmp	r0, r1
 80095b2:	b510      	push	{r4, lr}
 80095b4:	eb01 0402 	add.w	r4, r1, r2
 80095b8:	d902      	bls.n	80095c0 <memmove+0x10>
 80095ba:	4284      	cmp	r4, r0
 80095bc:	4623      	mov	r3, r4
 80095be:	d807      	bhi.n	80095d0 <memmove+0x20>
 80095c0:	1e43      	subs	r3, r0, #1
 80095c2:	42a1      	cmp	r1, r4
 80095c4:	d008      	beq.n	80095d8 <memmove+0x28>
 80095c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095ce:	e7f8      	b.n	80095c2 <memmove+0x12>
 80095d0:	4402      	add	r2, r0
 80095d2:	4601      	mov	r1, r0
 80095d4:	428a      	cmp	r2, r1
 80095d6:	d100      	bne.n	80095da <memmove+0x2a>
 80095d8:	bd10      	pop	{r4, pc}
 80095da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095e2:	e7f7      	b.n	80095d4 <memmove+0x24>

080095e4 <strncmp>:
 80095e4:	b510      	push	{r4, lr}
 80095e6:	b16a      	cbz	r2, 8009604 <strncmp+0x20>
 80095e8:	3901      	subs	r1, #1
 80095ea:	1884      	adds	r4, r0, r2
 80095ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d103      	bne.n	8009600 <strncmp+0x1c>
 80095f8:	42a0      	cmp	r0, r4
 80095fa:	d001      	beq.n	8009600 <strncmp+0x1c>
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	d1f5      	bne.n	80095ec <strncmp+0x8>
 8009600:	1ad0      	subs	r0, r2, r3
 8009602:	bd10      	pop	{r4, pc}
 8009604:	4610      	mov	r0, r2
 8009606:	e7fc      	b.n	8009602 <strncmp+0x1e>

08009608 <_sbrk_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	4d06      	ldr	r5, [pc, #24]	@ (8009624 <_sbrk_r+0x1c>)
 800960c:	2300      	movs	r3, #0
 800960e:	4604      	mov	r4, r0
 8009610:	4608      	mov	r0, r1
 8009612:	602b      	str	r3, [r5, #0]
 8009614:	f7f8 fcc4 	bl	8001fa0 <_sbrk>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	d102      	bne.n	8009622 <_sbrk_r+0x1a>
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	b103      	cbz	r3, 8009622 <_sbrk_r+0x1a>
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	20000ba4 	.word	0x20000ba4

08009628 <nan>:
 8009628:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009630 <nan+0x8>
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	00000000 	.word	0x00000000
 8009634:	7ff80000 	.word	0x7ff80000

08009638 <abort>:
 8009638:	b508      	push	{r3, lr}
 800963a:	2006      	movs	r0, #6
 800963c:	f000 fd9a 	bl	800a174 <raise>
 8009640:	2001      	movs	r0, #1
 8009642:	f7f8 fc34 	bl	8001eae <_exit>

08009646 <_calloc_r>:
 8009646:	b570      	push	{r4, r5, r6, lr}
 8009648:	fba1 5402 	umull	r5, r4, r1, r2
 800964c:	b93c      	cbnz	r4, 800965e <_calloc_r+0x18>
 800964e:	4629      	mov	r1, r5
 8009650:	f7fe fa52 	bl	8007af8 <_malloc_r>
 8009654:	4606      	mov	r6, r0
 8009656:	b928      	cbnz	r0, 8009664 <_calloc_r+0x1e>
 8009658:	2600      	movs	r6, #0
 800965a:	4630      	mov	r0, r6
 800965c:	bd70      	pop	{r4, r5, r6, pc}
 800965e:	220c      	movs	r2, #12
 8009660:	6002      	str	r2, [r0, #0]
 8009662:	e7f9      	b.n	8009658 <_calloc_r+0x12>
 8009664:	462a      	mov	r2, r5
 8009666:	4621      	mov	r1, r4
 8009668:	f7fd fac9 	bl	8006bfe <memset>
 800966c:	e7f5      	b.n	800965a <_calloc_r+0x14>

0800966e <rshift>:
 800966e:	6903      	ldr	r3, [r0, #16]
 8009670:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009678:	ea4f 1261 	mov.w	r2, r1, asr #5
 800967c:	f100 0414 	add.w	r4, r0, #20
 8009680:	dd45      	ble.n	800970e <rshift+0xa0>
 8009682:	f011 011f 	ands.w	r1, r1, #31
 8009686:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800968a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800968e:	d10c      	bne.n	80096aa <rshift+0x3c>
 8009690:	f100 0710 	add.w	r7, r0, #16
 8009694:	4629      	mov	r1, r5
 8009696:	42b1      	cmp	r1, r6
 8009698:	d334      	bcc.n	8009704 <rshift+0x96>
 800969a:	1a9b      	subs	r3, r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	1eea      	subs	r2, r5, #3
 80096a0:	4296      	cmp	r6, r2
 80096a2:	bf38      	it	cc
 80096a4:	2300      	movcc	r3, #0
 80096a6:	4423      	add	r3, r4
 80096a8:	e015      	b.n	80096d6 <rshift+0x68>
 80096aa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80096ae:	f1c1 0820 	rsb	r8, r1, #32
 80096b2:	40cf      	lsrs	r7, r1
 80096b4:	f105 0e04 	add.w	lr, r5, #4
 80096b8:	46a1      	mov	r9, r4
 80096ba:	4576      	cmp	r6, lr
 80096bc:	46f4      	mov	ip, lr
 80096be:	d815      	bhi.n	80096ec <rshift+0x7e>
 80096c0:	1a9a      	subs	r2, r3, r2
 80096c2:	0092      	lsls	r2, r2, #2
 80096c4:	3a04      	subs	r2, #4
 80096c6:	3501      	adds	r5, #1
 80096c8:	42ae      	cmp	r6, r5
 80096ca:	bf38      	it	cc
 80096cc:	2200      	movcc	r2, #0
 80096ce:	18a3      	adds	r3, r4, r2
 80096d0:	50a7      	str	r7, [r4, r2]
 80096d2:	b107      	cbz	r7, 80096d6 <rshift+0x68>
 80096d4:	3304      	adds	r3, #4
 80096d6:	1b1a      	subs	r2, r3, r4
 80096d8:	42a3      	cmp	r3, r4
 80096da:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80096de:	bf08      	it	eq
 80096e0:	2300      	moveq	r3, #0
 80096e2:	6102      	str	r2, [r0, #16]
 80096e4:	bf08      	it	eq
 80096e6:	6143      	streq	r3, [r0, #20]
 80096e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096ec:	f8dc c000 	ldr.w	ip, [ip]
 80096f0:	fa0c fc08 	lsl.w	ip, ip, r8
 80096f4:	ea4c 0707 	orr.w	r7, ip, r7
 80096f8:	f849 7b04 	str.w	r7, [r9], #4
 80096fc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009700:	40cf      	lsrs	r7, r1
 8009702:	e7da      	b.n	80096ba <rshift+0x4c>
 8009704:	f851 cb04 	ldr.w	ip, [r1], #4
 8009708:	f847 cf04 	str.w	ip, [r7, #4]!
 800970c:	e7c3      	b.n	8009696 <rshift+0x28>
 800970e:	4623      	mov	r3, r4
 8009710:	e7e1      	b.n	80096d6 <rshift+0x68>

08009712 <__hexdig_fun>:
 8009712:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009716:	2b09      	cmp	r3, #9
 8009718:	d802      	bhi.n	8009720 <__hexdig_fun+0xe>
 800971a:	3820      	subs	r0, #32
 800971c:	b2c0      	uxtb	r0, r0
 800971e:	4770      	bx	lr
 8009720:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009724:	2b05      	cmp	r3, #5
 8009726:	d801      	bhi.n	800972c <__hexdig_fun+0x1a>
 8009728:	3847      	subs	r0, #71	@ 0x47
 800972a:	e7f7      	b.n	800971c <__hexdig_fun+0xa>
 800972c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009730:	2b05      	cmp	r3, #5
 8009732:	d801      	bhi.n	8009738 <__hexdig_fun+0x26>
 8009734:	3827      	subs	r0, #39	@ 0x27
 8009736:	e7f1      	b.n	800971c <__hexdig_fun+0xa>
 8009738:	2000      	movs	r0, #0
 800973a:	4770      	bx	lr

0800973c <__gethex>:
 800973c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009740:	b085      	sub	sp, #20
 8009742:	468a      	mov	sl, r1
 8009744:	9302      	str	r3, [sp, #8]
 8009746:	680b      	ldr	r3, [r1, #0]
 8009748:	9001      	str	r0, [sp, #4]
 800974a:	4690      	mov	r8, r2
 800974c:	1c9c      	adds	r4, r3, #2
 800974e:	46a1      	mov	r9, r4
 8009750:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009754:	2830      	cmp	r0, #48	@ 0x30
 8009756:	d0fa      	beq.n	800974e <__gethex+0x12>
 8009758:	eba9 0303 	sub.w	r3, r9, r3
 800975c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009760:	f7ff ffd7 	bl	8009712 <__hexdig_fun>
 8009764:	4605      	mov	r5, r0
 8009766:	2800      	cmp	r0, #0
 8009768:	d168      	bne.n	800983c <__gethex+0x100>
 800976a:	49a0      	ldr	r1, [pc, #640]	@ (80099ec <__gethex+0x2b0>)
 800976c:	2201      	movs	r2, #1
 800976e:	4648      	mov	r0, r9
 8009770:	f7ff ff38 	bl	80095e4 <strncmp>
 8009774:	4607      	mov	r7, r0
 8009776:	2800      	cmp	r0, #0
 8009778:	d167      	bne.n	800984a <__gethex+0x10e>
 800977a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800977e:	4626      	mov	r6, r4
 8009780:	f7ff ffc7 	bl	8009712 <__hexdig_fun>
 8009784:	2800      	cmp	r0, #0
 8009786:	d062      	beq.n	800984e <__gethex+0x112>
 8009788:	4623      	mov	r3, r4
 800978a:	7818      	ldrb	r0, [r3, #0]
 800978c:	2830      	cmp	r0, #48	@ 0x30
 800978e:	4699      	mov	r9, r3
 8009790:	f103 0301 	add.w	r3, r3, #1
 8009794:	d0f9      	beq.n	800978a <__gethex+0x4e>
 8009796:	f7ff ffbc 	bl	8009712 <__hexdig_fun>
 800979a:	fab0 f580 	clz	r5, r0
 800979e:	096d      	lsrs	r5, r5, #5
 80097a0:	f04f 0b01 	mov.w	fp, #1
 80097a4:	464a      	mov	r2, r9
 80097a6:	4616      	mov	r6, r2
 80097a8:	3201      	adds	r2, #1
 80097aa:	7830      	ldrb	r0, [r6, #0]
 80097ac:	f7ff ffb1 	bl	8009712 <__hexdig_fun>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d1f8      	bne.n	80097a6 <__gethex+0x6a>
 80097b4:	498d      	ldr	r1, [pc, #564]	@ (80099ec <__gethex+0x2b0>)
 80097b6:	2201      	movs	r2, #1
 80097b8:	4630      	mov	r0, r6
 80097ba:	f7ff ff13 	bl	80095e4 <strncmp>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d13f      	bne.n	8009842 <__gethex+0x106>
 80097c2:	b944      	cbnz	r4, 80097d6 <__gethex+0x9a>
 80097c4:	1c74      	adds	r4, r6, #1
 80097c6:	4622      	mov	r2, r4
 80097c8:	4616      	mov	r6, r2
 80097ca:	3201      	adds	r2, #1
 80097cc:	7830      	ldrb	r0, [r6, #0]
 80097ce:	f7ff ffa0 	bl	8009712 <__hexdig_fun>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	d1f8      	bne.n	80097c8 <__gethex+0x8c>
 80097d6:	1ba4      	subs	r4, r4, r6
 80097d8:	00a7      	lsls	r7, r4, #2
 80097da:	7833      	ldrb	r3, [r6, #0]
 80097dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80097e0:	2b50      	cmp	r3, #80	@ 0x50
 80097e2:	d13e      	bne.n	8009862 <__gethex+0x126>
 80097e4:	7873      	ldrb	r3, [r6, #1]
 80097e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80097e8:	d033      	beq.n	8009852 <__gethex+0x116>
 80097ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80097ec:	d034      	beq.n	8009858 <__gethex+0x11c>
 80097ee:	1c71      	adds	r1, r6, #1
 80097f0:	2400      	movs	r4, #0
 80097f2:	7808      	ldrb	r0, [r1, #0]
 80097f4:	f7ff ff8d 	bl	8009712 <__hexdig_fun>
 80097f8:	1e43      	subs	r3, r0, #1
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	2b18      	cmp	r3, #24
 80097fe:	d830      	bhi.n	8009862 <__gethex+0x126>
 8009800:	f1a0 0210 	sub.w	r2, r0, #16
 8009804:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009808:	f7ff ff83 	bl	8009712 <__hexdig_fun>
 800980c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009810:	fa5f fc8c 	uxtb.w	ip, ip
 8009814:	f1bc 0f18 	cmp.w	ip, #24
 8009818:	f04f 030a 	mov.w	r3, #10
 800981c:	d91e      	bls.n	800985c <__gethex+0x120>
 800981e:	b104      	cbz	r4, 8009822 <__gethex+0xe6>
 8009820:	4252      	negs	r2, r2
 8009822:	4417      	add	r7, r2
 8009824:	f8ca 1000 	str.w	r1, [sl]
 8009828:	b1ed      	cbz	r5, 8009866 <__gethex+0x12a>
 800982a:	f1bb 0f00 	cmp.w	fp, #0
 800982e:	bf0c      	ite	eq
 8009830:	2506      	moveq	r5, #6
 8009832:	2500      	movne	r5, #0
 8009834:	4628      	mov	r0, r5
 8009836:	b005      	add	sp, #20
 8009838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800983c:	2500      	movs	r5, #0
 800983e:	462c      	mov	r4, r5
 8009840:	e7b0      	b.n	80097a4 <__gethex+0x68>
 8009842:	2c00      	cmp	r4, #0
 8009844:	d1c7      	bne.n	80097d6 <__gethex+0x9a>
 8009846:	4627      	mov	r7, r4
 8009848:	e7c7      	b.n	80097da <__gethex+0x9e>
 800984a:	464e      	mov	r6, r9
 800984c:	462f      	mov	r7, r5
 800984e:	2501      	movs	r5, #1
 8009850:	e7c3      	b.n	80097da <__gethex+0x9e>
 8009852:	2400      	movs	r4, #0
 8009854:	1cb1      	adds	r1, r6, #2
 8009856:	e7cc      	b.n	80097f2 <__gethex+0xb6>
 8009858:	2401      	movs	r4, #1
 800985a:	e7fb      	b.n	8009854 <__gethex+0x118>
 800985c:	fb03 0002 	mla	r0, r3, r2, r0
 8009860:	e7ce      	b.n	8009800 <__gethex+0xc4>
 8009862:	4631      	mov	r1, r6
 8009864:	e7de      	b.n	8009824 <__gethex+0xe8>
 8009866:	eba6 0309 	sub.w	r3, r6, r9
 800986a:	3b01      	subs	r3, #1
 800986c:	4629      	mov	r1, r5
 800986e:	2b07      	cmp	r3, #7
 8009870:	dc0a      	bgt.n	8009888 <__gethex+0x14c>
 8009872:	9801      	ldr	r0, [sp, #4]
 8009874:	f7fe f9cc 	bl	8007c10 <_Balloc>
 8009878:	4604      	mov	r4, r0
 800987a:	b940      	cbnz	r0, 800988e <__gethex+0x152>
 800987c:	4b5c      	ldr	r3, [pc, #368]	@ (80099f0 <__gethex+0x2b4>)
 800987e:	4602      	mov	r2, r0
 8009880:	21e4      	movs	r1, #228	@ 0xe4
 8009882:	485c      	ldr	r0, [pc, #368]	@ (80099f4 <__gethex+0x2b8>)
 8009884:	f7fd fa58 	bl	8006d38 <__assert_func>
 8009888:	3101      	adds	r1, #1
 800988a:	105b      	asrs	r3, r3, #1
 800988c:	e7ef      	b.n	800986e <__gethex+0x132>
 800988e:	f100 0a14 	add.w	sl, r0, #20
 8009892:	2300      	movs	r3, #0
 8009894:	4655      	mov	r5, sl
 8009896:	469b      	mov	fp, r3
 8009898:	45b1      	cmp	r9, r6
 800989a:	d337      	bcc.n	800990c <__gethex+0x1d0>
 800989c:	f845 bb04 	str.w	fp, [r5], #4
 80098a0:	eba5 050a 	sub.w	r5, r5, sl
 80098a4:	10ad      	asrs	r5, r5, #2
 80098a6:	6125      	str	r5, [r4, #16]
 80098a8:	4658      	mov	r0, fp
 80098aa:	f7fe faa3 	bl	8007df4 <__hi0bits>
 80098ae:	016d      	lsls	r5, r5, #5
 80098b0:	f8d8 6000 	ldr.w	r6, [r8]
 80098b4:	1a2d      	subs	r5, r5, r0
 80098b6:	42b5      	cmp	r5, r6
 80098b8:	dd54      	ble.n	8009964 <__gethex+0x228>
 80098ba:	1bad      	subs	r5, r5, r6
 80098bc:	4629      	mov	r1, r5
 80098be:	4620      	mov	r0, r4
 80098c0:	f7fe fe37 	bl	8008532 <__any_on>
 80098c4:	4681      	mov	r9, r0
 80098c6:	b178      	cbz	r0, 80098e8 <__gethex+0x1ac>
 80098c8:	1e6b      	subs	r3, r5, #1
 80098ca:	1159      	asrs	r1, r3, #5
 80098cc:	f003 021f 	and.w	r2, r3, #31
 80098d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80098d4:	f04f 0901 	mov.w	r9, #1
 80098d8:	fa09 f202 	lsl.w	r2, r9, r2
 80098dc:	420a      	tst	r2, r1
 80098de:	d003      	beq.n	80098e8 <__gethex+0x1ac>
 80098e0:	454b      	cmp	r3, r9
 80098e2:	dc36      	bgt.n	8009952 <__gethex+0x216>
 80098e4:	f04f 0902 	mov.w	r9, #2
 80098e8:	4629      	mov	r1, r5
 80098ea:	4620      	mov	r0, r4
 80098ec:	f7ff febf 	bl	800966e <rshift>
 80098f0:	442f      	add	r7, r5
 80098f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098f6:	42bb      	cmp	r3, r7
 80098f8:	da42      	bge.n	8009980 <__gethex+0x244>
 80098fa:	9801      	ldr	r0, [sp, #4]
 80098fc:	4621      	mov	r1, r4
 80098fe:	f7fe f9c7 	bl	8007c90 <_Bfree>
 8009902:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009904:	2300      	movs	r3, #0
 8009906:	6013      	str	r3, [r2, #0]
 8009908:	25a3      	movs	r5, #163	@ 0xa3
 800990a:	e793      	b.n	8009834 <__gethex+0xf8>
 800990c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009910:	2a2e      	cmp	r2, #46	@ 0x2e
 8009912:	d012      	beq.n	800993a <__gethex+0x1fe>
 8009914:	2b20      	cmp	r3, #32
 8009916:	d104      	bne.n	8009922 <__gethex+0x1e6>
 8009918:	f845 bb04 	str.w	fp, [r5], #4
 800991c:	f04f 0b00 	mov.w	fp, #0
 8009920:	465b      	mov	r3, fp
 8009922:	7830      	ldrb	r0, [r6, #0]
 8009924:	9303      	str	r3, [sp, #12]
 8009926:	f7ff fef4 	bl	8009712 <__hexdig_fun>
 800992a:	9b03      	ldr	r3, [sp, #12]
 800992c:	f000 000f 	and.w	r0, r0, #15
 8009930:	4098      	lsls	r0, r3
 8009932:	ea4b 0b00 	orr.w	fp, fp, r0
 8009936:	3304      	adds	r3, #4
 8009938:	e7ae      	b.n	8009898 <__gethex+0x15c>
 800993a:	45b1      	cmp	r9, r6
 800993c:	d8ea      	bhi.n	8009914 <__gethex+0x1d8>
 800993e:	492b      	ldr	r1, [pc, #172]	@ (80099ec <__gethex+0x2b0>)
 8009940:	9303      	str	r3, [sp, #12]
 8009942:	2201      	movs	r2, #1
 8009944:	4630      	mov	r0, r6
 8009946:	f7ff fe4d 	bl	80095e4 <strncmp>
 800994a:	9b03      	ldr	r3, [sp, #12]
 800994c:	2800      	cmp	r0, #0
 800994e:	d1e1      	bne.n	8009914 <__gethex+0x1d8>
 8009950:	e7a2      	b.n	8009898 <__gethex+0x15c>
 8009952:	1ea9      	subs	r1, r5, #2
 8009954:	4620      	mov	r0, r4
 8009956:	f7fe fdec 	bl	8008532 <__any_on>
 800995a:	2800      	cmp	r0, #0
 800995c:	d0c2      	beq.n	80098e4 <__gethex+0x1a8>
 800995e:	f04f 0903 	mov.w	r9, #3
 8009962:	e7c1      	b.n	80098e8 <__gethex+0x1ac>
 8009964:	da09      	bge.n	800997a <__gethex+0x23e>
 8009966:	1b75      	subs	r5, r6, r5
 8009968:	4621      	mov	r1, r4
 800996a:	9801      	ldr	r0, [sp, #4]
 800996c:	462a      	mov	r2, r5
 800996e:	f7fe fba7 	bl	80080c0 <__lshift>
 8009972:	1b7f      	subs	r7, r7, r5
 8009974:	4604      	mov	r4, r0
 8009976:	f100 0a14 	add.w	sl, r0, #20
 800997a:	f04f 0900 	mov.w	r9, #0
 800997e:	e7b8      	b.n	80098f2 <__gethex+0x1b6>
 8009980:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009984:	42bd      	cmp	r5, r7
 8009986:	dd6f      	ble.n	8009a68 <__gethex+0x32c>
 8009988:	1bed      	subs	r5, r5, r7
 800998a:	42ae      	cmp	r6, r5
 800998c:	dc34      	bgt.n	80099f8 <__gethex+0x2bc>
 800998e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009992:	2b02      	cmp	r3, #2
 8009994:	d022      	beq.n	80099dc <__gethex+0x2a0>
 8009996:	2b03      	cmp	r3, #3
 8009998:	d024      	beq.n	80099e4 <__gethex+0x2a8>
 800999a:	2b01      	cmp	r3, #1
 800999c:	d115      	bne.n	80099ca <__gethex+0x28e>
 800999e:	42ae      	cmp	r6, r5
 80099a0:	d113      	bne.n	80099ca <__gethex+0x28e>
 80099a2:	2e01      	cmp	r6, #1
 80099a4:	d10b      	bne.n	80099be <__gethex+0x282>
 80099a6:	9a02      	ldr	r2, [sp, #8]
 80099a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	2301      	movs	r3, #1
 80099b0:	6123      	str	r3, [r4, #16]
 80099b2:	f8ca 3000 	str.w	r3, [sl]
 80099b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099b8:	2562      	movs	r5, #98	@ 0x62
 80099ba:	601c      	str	r4, [r3, #0]
 80099bc:	e73a      	b.n	8009834 <__gethex+0xf8>
 80099be:	1e71      	subs	r1, r6, #1
 80099c0:	4620      	mov	r0, r4
 80099c2:	f7fe fdb6 	bl	8008532 <__any_on>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d1ed      	bne.n	80099a6 <__gethex+0x26a>
 80099ca:	9801      	ldr	r0, [sp, #4]
 80099cc:	4621      	mov	r1, r4
 80099ce:	f7fe f95f 	bl	8007c90 <_Bfree>
 80099d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099d4:	2300      	movs	r3, #0
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	2550      	movs	r5, #80	@ 0x50
 80099da:	e72b      	b.n	8009834 <__gethex+0xf8>
 80099dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1f3      	bne.n	80099ca <__gethex+0x28e>
 80099e2:	e7e0      	b.n	80099a6 <__gethex+0x26a>
 80099e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1dd      	bne.n	80099a6 <__gethex+0x26a>
 80099ea:	e7ee      	b.n	80099ca <__gethex+0x28e>
 80099ec:	0800b0e0 	.word	0x0800b0e0
 80099f0:	0800af7a 	.word	0x0800af7a
 80099f4:	0800b151 	.word	0x0800b151
 80099f8:	1e6f      	subs	r7, r5, #1
 80099fa:	f1b9 0f00 	cmp.w	r9, #0
 80099fe:	d130      	bne.n	8009a62 <__gethex+0x326>
 8009a00:	b127      	cbz	r7, 8009a0c <__gethex+0x2d0>
 8009a02:	4639      	mov	r1, r7
 8009a04:	4620      	mov	r0, r4
 8009a06:	f7fe fd94 	bl	8008532 <__any_on>
 8009a0a:	4681      	mov	r9, r0
 8009a0c:	117a      	asrs	r2, r7, #5
 8009a0e:	2301      	movs	r3, #1
 8009a10:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009a14:	f007 071f 	and.w	r7, r7, #31
 8009a18:	40bb      	lsls	r3, r7
 8009a1a:	4213      	tst	r3, r2
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	4620      	mov	r0, r4
 8009a20:	bf18      	it	ne
 8009a22:	f049 0902 	orrne.w	r9, r9, #2
 8009a26:	f7ff fe22 	bl	800966e <rshift>
 8009a2a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009a2e:	1b76      	subs	r6, r6, r5
 8009a30:	2502      	movs	r5, #2
 8009a32:	f1b9 0f00 	cmp.w	r9, #0
 8009a36:	d047      	beq.n	8009ac8 <__gethex+0x38c>
 8009a38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d015      	beq.n	8009a6c <__gethex+0x330>
 8009a40:	2b03      	cmp	r3, #3
 8009a42:	d017      	beq.n	8009a74 <__gethex+0x338>
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d109      	bne.n	8009a5c <__gethex+0x320>
 8009a48:	f019 0f02 	tst.w	r9, #2
 8009a4c:	d006      	beq.n	8009a5c <__gethex+0x320>
 8009a4e:	f8da 3000 	ldr.w	r3, [sl]
 8009a52:	ea49 0903 	orr.w	r9, r9, r3
 8009a56:	f019 0f01 	tst.w	r9, #1
 8009a5a:	d10e      	bne.n	8009a7a <__gethex+0x33e>
 8009a5c:	f045 0510 	orr.w	r5, r5, #16
 8009a60:	e032      	b.n	8009ac8 <__gethex+0x38c>
 8009a62:	f04f 0901 	mov.w	r9, #1
 8009a66:	e7d1      	b.n	8009a0c <__gethex+0x2d0>
 8009a68:	2501      	movs	r5, #1
 8009a6a:	e7e2      	b.n	8009a32 <__gethex+0x2f6>
 8009a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a6e:	f1c3 0301 	rsb	r3, r3, #1
 8009a72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d0f0      	beq.n	8009a5c <__gethex+0x320>
 8009a7a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009a7e:	f104 0314 	add.w	r3, r4, #20
 8009a82:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009a86:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009a8a:	f04f 0c00 	mov.w	ip, #0
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a94:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009a98:	d01b      	beq.n	8009ad2 <__gethex+0x396>
 8009a9a:	3201      	adds	r2, #1
 8009a9c:	6002      	str	r2, [r0, #0]
 8009a9e:	2d02      	cmp	r5, #2
 8009aa0:	f104 0314 	add.w	r3, r4, #20
 8009aa4:	d13c      	bne.n	8009b20 <__gethex+0x3e4>
 8009aa6:	f8d8 2000 	ldr.w	r2, [r8]
 8009aaa:	3a01      	subs	r2, #1
 8009aac:	42b2      	cmp	r2, r6
 8009aae:	d109      	bne.n	8009ac4 <__gethex+0x388>
 8009ab0:	1171      	asrs	r1, r6, #5
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ab8:	f006 061f 	and.w	r6, r6, #31
 8009abc:	fa02 f606 	lsl.w	r6, r2, r6
 8009ac0:	421e      	tst	r6, r3
 8009ac2:	d13a      	bne.n	8009b3a <__gethex+0x3fe>
 8009ac4:	f045 0520 	orr.w	r5, r5, #32
 8009ac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aca:	601c      	str	r4, [r3, #0]
 8009acc:	9b02      	ldr	r3, [sp, #8]
 8009ace:	601f      	str	r7, [r3, #0]
 8009ad0:	e6b0      	b.n	8009834 <__gethex+0xf8>
 8009ad2:	4299      	cmp	r1, r3
 8009ad4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ad8:	d8d9      	bhi.n	8009a8e <__gethex+0x352>
 8009ada:	68a3      	ldr	r3, [r4, #8]
 8009adc:	459b      	cmp	fp, r3
 8009ade:	db17      	blt.n	8009b10 <__gethex+0x3d4>
 8009ae0:	6861      	ldr	r1, [r4, #4]
 8009ae2:	9801      	ldr	r0, [sp, #4]
 8009ae4:	3101      	adds	r1, #1
 8009ae6:	f7fe f893 	bl	8007c10 <_Balloc>
 8009aea:	4681      	mov	r9, r0
 8009aec:	b918      	cbnz	r0, 8009af6 <__gethex+0x3ba>
 8009aee:	4b1a      	ldr	r3, [pc, #104]	@ (8009b58 <__gethex+0x41c>)
 8009af0:	4602      	mov	r2, r0
 8009af2:	2184      	movs	r1, #132	@ 0x84
 8009af4:	e6c5      	b.n	8009882 <__gethex+0x146>
 8009af6:	6922      	ldr	r2, [r4, #16]
 8009af8:	3202      	adds	r2, #2
 8009afa:	f104 010c 	add.w	r1, r4, #12
 8009afe:	0092      	lsls	r2, r2, #2
 8009b00:	300c      	adds	r0, #12
 8009b02:	f7fd f904 	bl	8006d0e <memcpy>
 8009b06:	4621      	mov	r1, r4
 8009b08:	9801      	ldr	r0, [sp, #4]
 8009b0a:	f7fe f8c1 	bl	8007c90 <_Bfree>
 8009b0e:	464c      	mov	r4, r9
 8009b10:	6923      	ldr	r3, [r4, #16]
 8009b12:	1c5a      	adds	r2, r3, #1
 8009b14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b18:	6122      	str	r2, [r4, #16]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	615a      	str	r2, [r3, #20]
 8009b1e:	e7be      	b.n	8009a9e <__gethex+0x362>
 8009b20:	6922      	ldr	r2, [r4, #16]
 8009b22:	455a      	cmp	r2, fp
 8009b24:	dd0b      	ble.n	8009b3e <__gethex+0x402>
 8009b26:	2101      	movs	r1, #1
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f7ff fda0 	bl	800966e <rshift>
 8009b2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b32:	3701      	adds	r7, #1
 8009b34:	42bb      	cmp	r3, r7
 8009b36:	f6ff aee0 	blt.w	80098fa <__gethex+0x1be>
 8009b3a:	2501      	movs	r5, #1
 8009b3c:	e7c2      	b.n	8009ac4 <__gethex+0x388>
 8009b3e:	f016 061f 	ands.w	r6, r6, #31
 8009b42:	d0fa      	beq.n	8009b3a <__gethex+0x3fe>
 8009b44:	4453      	add	r3, sl
 8009b46:	f1c6 0620 	rsb	r6, r6, #32
 8009b4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009b4e:	f7fe f951 	bl	8007df4 <__hi0bits>
 8009b52:	42b0      	cmp	r0, r6
 8009b54:	dbe7      	blt.n	8009b26 <__gethex+0x3ea>
 8009b56:	e7f0      	b.n	8009b3a <__gethex+0x3fe>
 8009b58:	0800af7a 	.word	0x0800af7a

08009b5c <L_shift>:
 8009b5c:	f1c2 0208 	rsb	r2, r2, #8
 8009b60:	0092      	lsls	r2, r2, #2
 8009b62:	b570      	push	{r4, r5, r6, lr}
 8009b64:	f1c2 0620 	rsb	r6, r2, #32
 8009b68:	6843      	ldr	r3, [r0, #4]
 8009b6a:	6804      	ldr	r4, [r0, #0]
 8009b6c:	fa03 f506 	lsl.w	r5, r3, r6
 8009b70:	432c      	orrs	r4, r5
 8009b72:	40d3      	lsrs	r3, r2
 8009b74:	6004      	str	r4, [r0, #0]
 8009b76:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b7a:	4288      	cmp	r0, r1
 8009b7c:	d3f4      	bcc.n	8009b68 <L_shift+0xc>
 8009b7e:	bd70      	pop	{r4, r5, r6, pc}

08009b80 <__match>:
 8009b80:	b530      	push	{r4, r5, lr}
 8009b82:	6803      	ldr	r3, [r0, #0]
 8009b84:	3301      	adds	r3, #1
 8009b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b8a:	b914      	cbnz	r4, 8009b92 <__match+0x12>
 8009b8c:	6003      	str	r3, [r0, #0]
 8009b8e:	2001      	movs	r0, #1
 8009b90:	bd30      	pop	{r4, r5, pc}
 8009b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b96:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009b9a:	2d19      	cmp	r5, #25
 8009b9c:	bf98      	it	ls
 8009b9e:	3220      	addls	r2, #32
 8009ba0:	42a2      	cmp	r2, r4
 8009ba2:	d0f0      	beq.n	8009b86 <__match+0x6>
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	e7f3      	b.n	8009b90 <__match+0x10>

08009ba8 <__hexnan>:
 8009ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bac:	680b      	ldr	r3, [r1, #0]
 8009bae:	6801      	ldr	r1, [r0, #0]
 8009bb0:	115e      	asrs	r6, r3, #5
 8009bb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009bb6:	f013 031f 	ands.w	r3, r3, #31
 8009bba:	b087      	sub	sp, #28
 8009bbc:	bf18      	it	ne
 8009bbe:	3604      	addne	r6, #4
 8009bc0:	2500      	movs	r5, #0
 8009bc2:	1f37      	subs	r7, r6, #4
 8009bc4:	4682      	mov	sl, r0
 8009bc6:	4690      	mov	r8, r2
 8009bc8:	9301      	str	r3, [sp, #4]
 8009bca:	f846 5c04 	str.w	r5, [r6, #-4]
 8009bce:	46b9      	mov	r9, r7
 8009bd0:	463c      	mov	r4, r7
 8009bd2:	9502      	str	r5, [sp, #8]
 8009bd4:	46ab      	mov	fp, r5
 8009bd6:	784a      	ldrb	r2, [r1, #1]
 8009bd8:	1c4b      	adds	r3, r1, #1
 8009bda:	9303      	str	r3, [sp, #12]
 8009bdc:	b342      	cbz	r2, 8009c30 <__hexnan+0x88>
 8009bde:	4610      	mov	r0, r2
 8009be0:	9105      	str	r1, [sp, #20]
 8009be2:	9204      	str	r2, [sp, #16]
 8009be4:	f7ff fd95 	bl	8009712 <__hexdig_fun>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d151      	bne.n	8009c90 <__hexnan+0xe8>
 8009bec:	9a04      	ldr	r2, [sp, #16]
 8009bee:	9905      	ldr	r1, [sp, #20]
 8009bf0:	2a20      	cmp	r2, #32
 8009bf2:	d818      	bhi.n	8009c26 <__hexnan+0x7e>
 8009bf4:	9b02      	ldr	r3, [sp, #8]
 8009bf6:	459b      	cmp	fp, r3
 8009bf8:	dd13      	ble.n	8009c22 <__hexnan+0x7a>
 8009bfa:	454c      	cmp	r4, r9
 8009bfc:	d206      	bcs.n	8009c0c <__hexnan+0x64>
 8009bfe:	2d07      	cmp	r5, #7
 8009c00:	dc04      	bgt.n	8009c0c <__hexnan+0x64>
 8009c02:	462a      	mov	r2, r5
 8009c04:	4649      	mov	r1, r9
 8009c06:	4620      	mov	r0, r4
 8009c08:	f7ff ffa8 	bl	8009b5c <L_shift>
 8009c0c:	4544      	cmp	r4, r8
 8009c0e:	d952      	bls.n	8009cb6 <__hexnan+0x10e>
 8009c10:	2300      	movs	r3, #0
 8009c12:	f1a4 0904 	sub.w	r9, r4, #4
 8009c16:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c1a:	f8cd b008 	str.w	fp, [sp, #8]
 8009c1e:	464c      	mov	r4, r9
 8009c20:	461d      	mov	r5, r3
 8009c22:	9903      	ldr	r1, [sp, #12]
 8009c24:	e7d7      	b.n	8009bd6 <__hexnan+0x2e>
 8009c26:	2a29      	cmp	r2, #41	@ 0x29
 8009c28:	d157      	bne.n	8009cda <__hexnan+0x132>
 8009c2a:	3102      	adds	r1, #2
 8009c2c:	f8ca 1000 	str.w	r1, [sl]
 8009c30:	f1bb 0f00 	cmp.w	fp, #0
 8009c34:	d051      	beq.n	8009cda <__hexnan+0x132>
 8009c36:	454c      	cmp	r4, r9
 8009c38:	d206      	bcs.n	8009c48 <__hexnan+0xa0>
 8009c3a:	2d07      	cmp	r5, #7
 8009c3c:	dc04      	bgt.n	8009c48 <__hexnan+0xa0>
 8009c3e:	462a      	mov	r2, r5
 8009c40:	4649      	mov	r1, r9
 8009c42:	4620      	mov	r0, r4
 8009c44:	f7ff ff8a 	bl	8009b5c <L_shift>
 8009c48:	4544      	cmp	r4, r8
 8009c4a:	d936      	bls.n	8009cba <__hexnan+0x112>
 8009c4c:	f1a8 0204 	sub.w	r2, r8, #4
 8009c50:	4623      	mov	r3, r4
 8009c52:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c56:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c5a:	429f      	cmp	r7, r3
 8009c5c:	d2f9      	bcs.n	8009c52 <__hexnan+0xaa>
 8009c5e:	1b3b      	subs	r3, r7, r4
 8009c60:	f023 0303 	bic.w	r3, r3, #3
 8009c64:	3304      	adds	r3, #4
 8009c66:	3401      	adds	r4, #1
 8009c68:	3e03      	subs	r6, #3
 8009c6a:	42b4      	cmp	r4, r6
 8009c6c:	bf88      	it	hi
 8009c6e:	2304      	movhi	r3, #4
 8009c70:	4443      	add	r3, r8
 8009c72:	2200      	movs	r2, #0
 8009c74:	f843 2b04 	str.w	r2, [r3], #4
 8009c78:	429f      	cmp	r7, r3
 8009c7a:	d2fb      	bcs.n	8009c74 <__hexnan+0xcc>
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	b91b      	cbnz	r3, 8009c88 <__hexnan+0xe0>
 8009c80:	4547      	cmp	r7, r8
 8009c82:	d128      	bne.n	8009cd6 <__hexnan+0x12e>
 8009c84:	2301      	movs	r3, #1
 8009c86:	603b      	str	r3, [r7, #0]
 8009c88:	2005      	movs	r0, #5
 8009c8a:	b007      	add	sp, #28
 8009c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c90:	3501      	adds	r5, #1
 8009c92:	2d08      	cmp	r5, #8
 8009c94:	f10b 0b01 	add.w	fp, fp, #1
 8009c98:	dd06      	ble.n	8009ca8 <__hexnan+0x100>
 8009c9a:	4544      	cmp	r4, r8
 8009c9c:	d9c1      	bls.n	8009c22 <__hexnan+0x7a>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ca4:	2501      	movs	r5, #1
 8009ca6:	3c04      	subs	r4, #4
 8009ca8:	6822      	ldr	r2, [r4, #0]
 8009caa:	f000 000f 	and.w	r0, r0, #15
 8009cae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009cb2:	6020      	str	r0, [r4, #0]
 8009cb4:	e7b5      	b.n	8009c22 <__hexnan+0x7a>
 8009cb6:	2508      	movs	r5, #8
 8009cb8:	e7b3      	b.n	8009c22 <__hexnan+0x7a>
 8009cba:	9b01      	ldr	r3, [sp, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d0dd      	beq.n	8009c7c <__hexnan+0xd4>
 8009cc0:	f1c3 0320 	rsb	r3, r3, #32
 8009cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc8:	40da      	lsrs	r2, r3
 8009cca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009cce:	4013      	ands	r3, r2
 8009cd0:	f846 3c04 	str.w	r3, [r6, #-4]
 8009cd4:	e7d2      	b.n	8009c7c <__hexnan+0xd4>
 8009cd6:	3f04      	subs	r7, #4
 8009cd8:	e7d0      	b.n	8009c7c <__hexnan+0xd4>
 8009cda:	2004      	movs	r0, #4
 8009cdc:	e7d5      	b.n	8009c8a <__hexnan+0xe2>

08009cde <__ascii_mbtowc>:
 8009cde:	b082      	sub	sp, #8
 8009ce0:	b901      	cbnz	r1, 8009ce4 <__ascii_mbtowc+0x6>
 8009ce2:	a901      	add	r1, sp, #4
 8009ce4:	b142      	cbz	r2, 8009cf8 <__ascii_mbtowc+0x1a>
 8009ce6:	b14b      	cbz	r3, 8009cfc <__ascii_mbtowc+0x1e>
 8009ce8:	7813      	ldrb	r3, [r2, #0]
 8009cea:	600b      	str	r3, [r1, #0]
 8009cec:	7812      	ldrb	r2, [r2, #0]
 8009cee:	1e10      	subs	r0, r2, #0
 8009cf0:	bf18      	it	ne
 8009cf2:	2001      	movne	r0, #1
 8009cf4:	b002      	add	sp, #8
 8009cf6:	4770      	bx	lr
 8009cf8:	4610      	mov	r0, r2
 8009cfa:	e7fb      	b.n	8009cf4 <__ascii_mbtowc+0x16>
 8009cfc:	f06f 0001 	mvn.w	r0, #1
 8009d00:	e7f8      	b.n	8009cf4 <__ascii_mbtowc+0x16>

08009d02 <_realloc_r>:
 8009d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d06:	4680      	mov	r8, r0
 8009d08:	4615      	mov	r5, r2
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	b921      	cbnz	r1, 8009d18 <_realloc_r+0x16>
 8009d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d12:	4611      	mov	r1, r2
 8009d14:	f7fd bef0 	b.w	8007af8 <_malloc_r>
 8009d18:	b92a      	cbnz	r2, 8009d26 <_realloc_r+0x24>
 8009d1a:	f7fd fe79 	bl	8007a10 <_free_r>
 8009d1e:	2400      	movs	r4, #0
 8009d20:	4620      	mov	r0, r4
 8009d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d26:	f000 fa41 	bl	800a1ac <_malloc_usable_size_r>
 8009d2a:	4285      	cmp	r5, r0
 8009d2c:	4606      	mov	r6, r0
 8009d2e:	d802      	bhi.n	8009d36 <_realloc_r+0x34>
 8009d30:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009d34:	d8f4      	bhi.n	8009d20 <_realloc_r+0x1e>
 8009d36:	4629      	mov	r1, r5
 8009d38:	4640      	mov	r0, r8
 8009d3a:	f7fd fedd 	bl	8007af8 <_malloc_r>
 8009d3e:	4607      	mov	r7, r0
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d0ec      	beq.n	8009d1e <_realloc_r+0x1c>
 8009d44:	42b5      	cmp	r5, r6
 8009d46:	462a      	mov	r2, r5
 8009d48:	4621      	mov	r1, r4
 8009d4a:	bf28      	it	cs
 8009d4c:	4632      	movcs	r2, r6
 8009d4e:	f7fc ffde 	bl	8006d0e <memcpy>
 8009d52:	4621      	mov	r1, r4
 8009d54:	4640      	mov	r0, r8
 8009d56:	f7fd fe5b 	bl	8007a10 <_free_r>
 8009d5a:	463c      	mov	r4, r7
 8009d5c:	e7e0      	b.n	8009d20 <_realloc_r+0x1e>

08009d5e <__ascii_wctomb>:
 8009d5e:	4603      	mov	r3, r0
 8009d60:	4608      	mov	r0, r1
 8009d62:	b141      	cbz	r1, 8009d76 <__ascii_wctomb+0x18>
 8009d64:	2aff      	cmp	r2, #255	@ 0xff
 8009d66:	d904      	bls.n	8009d72 <__ascii_wctomb+0x14>
 8009d68:	228a      	movs	r2, #138	@ 0x8a
 8009d6a:	601a      	str	r2, [r3, #0]
 8009d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d70:	4770      	bx	lr
 8009d72:	700a      	strb	r2, [r1, #0]
 8009d74:	2001      	movs	r0, #1
 8009d76:	4770      	bx	lr

08009d78 <__sfputc_r>:
 8009d78:	6893      	ldr	r3, [r2, #8]
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	b410      	push	{r4}
 8009d80:	6093      	str	r3, [r2, #8]
 8009d82:	da08      	bge.n	8009d96 <__sfputc_r+0x1e>
 8009d84:	6994      	ldr	r4, [r2, #24]
 8009d86:	42a3      	cmp	r3, r4
 8009d88:	db01      	blt.n	8009d8e <__sfputc_r+0x16>
 8009d8a:	290a      	cmp	r1, #10
 8009d8c:	d103      	bne.n	8009d96 <__sfputc_r+0x1e>
 8009d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d92:	f000 b933 	b.w	8009ffc <__swbuf_r>
 8009d96:	6813      	ldr	r3, [r2, #0]
 8009d98:	1c58      	adds	r0, r3, #1
 8009d9a:	6010      	str	r0, [r2, #0]
 8009d9c:	7019      	strb	r1, [r3, #0]
 8009d9e:	4608      	mov	r0, r1
 8009da0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <__sfputs_r>:
 8009da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da8:	4606      	mov	r6, r0
 8009daa:	460f      	mov	r7, r1
 8009dac:	4614      	mov	r4, r2
 8009dae:	18d5      	adds	r5, r2, r3
 8009db0:	42ac      	cmp	r4, r5
 8009db2:	d101      	bne.n	8009db8 <__sfputs_r+0x12>
 8009db4:	2000      	movs	r0, #0
 8009db6:	e007      	b.n	8009dc8 <__sfputs_r+0x22>
 8009db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dbc:	463a      	mov	r2, r7
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	f7ff ffda 	bl	8009d78 <__sfputc_r>
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	d1f3      	bne.n	8009db0 <__sfputs_r+0xa>
 8009dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009dcc <_vfiprintf_r>:
 8009dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd0:	460d      	mov	r5, r1
 8009dd2:	b09d      	sub	sp, #116	@ 0x74
 8009dd4:	4614      	mov	r4, r2
 8009dd6:	4698      	mov	r8, r3
 8009dd8:	4606      	mov	r6, r0
 8009dda:	b118      	cbz	r0, 8009de4 <_vfiprintf_r+0x18>
 8009ddc:	6a03      	ldr	r3, [r0, #32]
 8009dde:	b90b      	cbnz	r3, 8009de4 <_vfiprintf_r+0x18>
 8009de0:	f7fc fe74 	bl	8006acc <__sinit>
 8009de4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009de6:	07d9      	lsls	r1, r3, #31
 8009de8:	d405      	bmi.n	8009df6 <_vfiprintf_r+0x2a>
 8009dea:	89ab      	ldrh	r3, [r5, #12]
 8009dec:	059a      	lsls	r2, r3, #22
 8009dee:	d402      	bmi.n	8009df6 <_vfiprintf_r+0x2a>
 8009df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009df2:	f7fc ff82 	bl	8006cfa <__retarget_lock_acquire_recursive>
 8009df6:	89ab      	ldrh	r3, [r5, #12]
 8009df8:	071b      	lsls	r3, r3, #28
 8009dfa:	d501      	bpl.n	8009e00 <_vfiprintf_r+0x34>
 8009dfc:	692b      	ldr	r3, [r5, #16]
 8009dfe:	b99b      	cbnz	r3, 8009e28 <_vfiprintf_r+0x5c>
 8009e00:	4629      	mov	r1, r5
 8009e02:	4630      	mov	r0, r6
 8009e04:	f000 f938 	bl	800a078 <__swsetup_r>
 8009e08:	b170      	cbz	r0, 8009e28 <_vfiprintf_r+0x5c>
 8009e0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e0c:	07dc      	lsls	r4, r3, #31
 8009e0e:	d504      	bpl.n	8009e1a <_vfiprintf_r+0x4e>
 8009e10:	f04f 30ff 	mov.w	r0, #4294967295
 8009e14:	b01d      	add	sp, #116	@ 0x74
 8009e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1a:	89ab      	ldrh	r3, [r5, #12]
 8009e1c:	0598      	lsls	r0, r3, #22
 8009e1e:	d4f7      	bmi.n	8009e10 <_vfiprintf_r+0x44>
 8009e20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e22:	f7fc ff6b 	bl	8006cfc <__retarget_lock_release_recursive>
 8009e26:	e7f3      	b.n	8009e10 <_vfiprintf_r+0x44>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e2c:	2320      	movs	r3, #32
 8009e2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e36:	2330      	movs	r3, #48	@ 0x30
 8009e38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009fe8 <_vfiprintf_r+0x21c>
 8009e3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e40:	f04f 0901 	mov.w	r9, #1
 8009e44:	4623      	mov	r3, r4
 8009e46:	469a      	mov	sl, r3
 8009e48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e4c:	b10a      	cbz	r2, 8009e52 <_vfiprintf_r+0x86>
 8009e4e:	2a25      	cmp	r2, #37	@ 0x25
 8009e50:	d1f9      	bne.n	8009e46 <_vfiprintf_r+0x7a>
 8009e52:	ebba 0b04 	subs.w	fp, sl, r4
 8009e56:	d00b      	beq.n	8009e70 <_vfiprintf_r+0xa4>
 8009e58:	465b      	mov	r3, fp
 8009e5a:	4622      	mov	r2, r4
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f7ff ffa1 	bl	8009da6 <__sfputs_r>
 8009e64:	3001      	adds	r0, #1
 8009e66:	f000 80a7 	beq.w	8009fb8 <_vfiprintf_r+0x1ec>
 8009e6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e6c:	445a      	add	r2, fp
 8009e6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e70:	f89a 3000 	ldrb.w	r3, [sl]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f000 809f 	beq.w	8009fb8 <_vfiprintf_r+0x1ec>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e84:	f10a 0a01 	add.w	sl, sl, #1
 8009e88:	9304      	str	r3, [sp, #16]
 8009e8a:	9307      	str	r3, [sp, #28]
 8009e8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e90:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e92:	4654      	mov	r4, sl
 8009e94:	2205      	movs	r2, #5
 8009e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e9a:	4853      	ldr	r0, [pc, #332]	@ (8009fe8 <_vfiprintf_r+0x21c>)
 8009e9c:	f7f6 f998 	bl	80001d0 <memchr>
 8009ea0:	9a04      	ldr	r2, [sp, #16]
 8009ea2:	b9d8      	cbnz	r0, 8009edc <_vfiprintf_r+0x110>
 8009ea4:	06d1      	lsls	r1, r2, #27
 8009ea6:	bf44      	itt	mi
 8009ea8:	2320      	movmi	r3, #32
 8009eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009eae:	0713      	lsls	r3, r2, #28
 8009eb0:	bf44      	itt	mi
 8009eb2:	232b      	movmi	r3, #43	@ 0x2b
 8009eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8009ebc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ebe:	d015      	beq.n	8009eec <_vfiprintf_r+0x120>
 8009ec0:	9a07      	ldr	r2, [sp, #28]
 8009ec2:	4654      	mov	r4, sl
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	f04f 0c0a 	mov.w	ip, #10
 8009eca:	4621      	mov	r1, r4
 8009ecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ed0:	3b30      	subs	r3, #48	@ 0x30
 8009ed2:	2b09      	cmp	r3, #9
 8009ed4:	d94b      	bls.n	8009f6e <_vfiprintf_r+0x1a2>
 8009ed6:	b1b0      	cbz	r0, 8009f06 <_vfiprintf_r+0x13a>
 8009ed8:	9207      	str	r2, [sp, #28]
 8009eda:	e014      	b.n	8009f06 <_vfiprintf_r+0x13a>
 8009edc:	eba0 0308 	sub.w	r3, r0, r8
 8009ee0:	fa09 f303 	lsl.w	r3, r9, r3
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	9304      	str	r3, [sp, #16]
 8009ee8:	46a2      	mov	sl, r4
 8009eea:	e7d2      	b.n	8009e92 <_vfiprintf_r+0xc6>
 8009eec:	9b03      	ldr	r3, [sp, #12]
 8009eee:	1d19      	adds	r1, r3, #4
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	9103      	str	r1, [sp, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	bfbb      	ittet	lt
 8009ef8:	425b      	neglt	r3, r3
 8009efa:	f042 0202 	orrlt.w	r2, r2, #2
 8009efe:	9307      	strge	r3, [sp, #28]
 8009f00:	9307      	strlt	r3, [sp, #28]
 8009f02:	bfb8      	it	lt
 8009f04:	9204      	strlt	r2, [sp, #16]
 8009f06:	7823      	ldrb	r3, [r4, #0]
 8009f08:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f0a:	d10a      	bne.n	8009f22 <_vfiprintf_r+0x156>
 8009f0c:	7863      	ldrb	r3, [r4, #1]
 8009f0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f10:	d132      	bne.n	8009f78 <_vfiprintf_r+0x1ac>
 8009f12:	9b03      	ldr	r3, [sp, #12]
 8009f14:	1d1a      	adds	r2, r3, #4
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	9203      	str	r2, [sp, #12]
 8009f1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f1e:	3402      	adds	r4, #2
 8009f20:	9305      	str	r3, [sp, #20]
 8009f22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ff8 <_vfiprintf_r+0x22c>
 8009f26:	7821      	ldrb	r1, [r4, #0]
 8009f28:	2203      	movs	r2, #3
 8009f2a:	4650      	mov	r0, sl
 8009f2c:	f7f6 f950 	bl	80001d0 <memchr>
 8009f30:	b138      	cbz	r0, 8009f42 <_vfiprintf_r+0x176>
 8009f32:	9b04      	ldr	r3, [sp, #16]
 8009f34:	eba0 000a 	sub.w	r0, r0, sl
 8009f38:	2240      	movs	r2, #64	@ 0x40
 8009f3a:	4082      	lsls	r2, r0
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	3401      	adds	r4, #1
 8009f40:	9304      	str	r3, [sp, #16]
 8009f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f46:	4829      	ldr	r0, [pc, #164]	@ (8009fec <_vfiprintf_r+0x220>)
 8009f48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f4c:	2206      	movs	r2, #6
 8009f4e:	f7f6 f93f 	bl	80001d0 <memchr>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d03f      	beq.n	8009fd6 <_vfiprintf_r+0x20a>
 8009f56:	4b26      	ldr	r3, [pc, #152]	@ (8009ff0 <_vfiprintf_r+0x224>)
 8009f58:	bb1b      	cbnz	r3, 8009fa2 <_vfiprintf_r+0x1d6>
 8009f5a:	9b03      	ldr	r3, [sp, #12]
 8009f5c:	3307      	adds	r3, #7
 8009f5e:	f023 0307 	bic.w	r3, r3, #7
 8009f62:	3308      	adds	r3, #8
 8009f64:	9303      	str	r3, [sp, #12]
 8009f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f68:	443b      	add	r3, r7
 8009f6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f6c:	e76a      	b.n	8009e44 <_vfiprintf_r+0x78>
 8009f6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f72:	460c      	mov	r4, r1
 8009f74:	2001      	movs	r0, #1
 8009f76:	e7a8      	b.n	8009eca <_vfiprintf_r+0xfe>
 8009f78:	2300      	movs	r3, #0
 8009f7a:	3401      	adds	r4, #1
 8009f7c:	9305      	str	r3, [sp, #20]
 8009f7e:	4619      	mov	r1, r3
 8009f80:	f04f 0c0a 	mov.w	ip, #10
 8009f84:	4620      	mov	r0, r4
 8009f86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f8a:	3a30      	subs	r2, #48	@ 0x30
 8009f8c:	2a09      	cmp	r2, #9
 8009f8e:	d903      	bls.n	8009f98 <_vfiprintf_r+0x1cc>
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d0c6      	beq.n	8009f22 <_vfiprintf_r+0x156>
 8009f94:	9105      	str	r1, [sp, #20]
 8009f96:	e7c4      	b.n	8009f22 <_vfiprintf_r+0x156>
 8009f98:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e7f0      	b.n	8009f84 <_vfiprintf_r+0x1b8>
 8009fa2:	ab03      	add	r3, sp, #12
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	462a      	mov	r2, r5
 8009fa8:	4b12      	ldr	r3, [pc, #72]	@ (8009ff4 <_vfiprintf_r+0x228>)
 8009faa:	a904      	add	r1, sp, #16
 8009fac:	4630      	mov	r0, r6
 8009fae:	f7fb ff35 	bl	8005e1c <_printf_float>
 8009fb2:	4607      	mov	r7, r0
 8009fb4:	1c78      	adds	r0, r7, #1
 8009fb6:	d1d6      	bne.n	8009f66 <_vfiprintf_r+0x19a>
 8009fb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fba:	07d9      	lsls	r1, r3, #31
 8009fbc:	d405      	bmi.n	8009fca <_vfiprintf_r+0x1fe>
 8009fbe:	89ab      	ldrh	r3, [r5, #12]
 8009fc0:	059a      	lsls	r2, r3, #22
 8009fc2:	d402      	bmi.n	8009fca <_vfiprintf_r+0x1fe>
 8009fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fc6:	f7fc fe99 	bl	8006cfc <__retarget_lock_release_recursive>
 8009fca:	89ab      	ldrh	r3, [r5, #12]
 8009fcc:	065b      	lsls	r3, r3, #25
 8009fce:	f53f af1f 	bmi.w	8009e10 <_vfiprintf_r+0x44>
 8009fd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fd4:	e71e      	b.n	8009e14 <_vfiprintf_r+0x48>
 8009fd6:	ab03      	add	r3, sp, #12
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	462a      	mov	r2, r5
 8009fdc:	4b05      	ldr	r3, [pc, #20]	@ (8009ff4 <_vfiprintf_r+0x228>)
 8009fde:	a904      	add	r1, sp, #16
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	f7fc f9b3 	bl	800634c <_printf_i>
 8009fe6:	e7e4      	b.n	8009fb2 <_vfiprintf_r+0x1e6>
 8009fe8:	0800b138 	.word	0x0800b138
 8009fec:	0800b142 	.word	0x0800b142
 8009ff0:	08005e1d 	.word	0x08005e1d
 8009ff4:	08009da7 	.word	0x08009da7
 8009ff8:	0800b13e 	.word	0x0800b13e

08009ffc <__swbuf_r>:
 8009ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffe:	460e      	mov	r6, r1
 800a000:	4614      	mov	r4, r2
 800a002:	4605      	mov	r5, r0
 800a004:	b118      	cbz	r0, 800a00e <__swbuf_r+0x12>
 800a006:	6a03      	ldr	r3, [r0, #32]
 800a008:	b90b      	cbnz	r3, 800a00e <__swbuf_r+0x12>
 800a00a:	f7fc fd5f 	bl	8006acc <__sinit>
 800a00e:	69a3      	ldr	r3, [r4, #24]
 800a010:	60a3      	str	r3, [r4, #8]
 800a012:	89a3      	ldrh	r3, [r4, #12]
 800a014:	071a      	lsls	r2, r3, #28
 800a016:	d501      	bpl.n	800a01c <__swbuf_r+0x20>
 800a018:	6923      	ldr	r3, [r4, #16]
 800a01a:	b943      	cbnz	r3, 800a02e <__swbuf_r+0x32>
 800a01c:	4621      	mov	r1, r4
 800a01e:	4628      	mov	r0, r5
 800a020:	f000 f82a 	bl	800a078 <__swsetup_r>
 800a024:	b118      	cbz	r0, 800a02e <__swbuf_r+0x32>
 800a026:	f04f 37ff 	mov.w	r7, #4294967295
 800a02a:	4638      	mov	r0, r7
 800a02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	6922      	ldr	r2, [r4, #16]
 800a032:	1a98      	subs	r0, r3, r2
 800a034:	6963      	ldr	r3, [r4, #20]
 800a036:	b2f6      	uxtb	r6, r6
 800a038:	4283      	cmp	r3, r0
 800a03a:	4637      	mov	r7, r6
 800a03c:	dc05      	bgt.n	800a04a <__swbuf_r+0x4e>
 800a03e:	4621      	mov	r1, r4
 800a040:	4628      	mov	r0, r5
 800a042:	f7ff fa7b 	bl	800953c <_fflush_r>
 800a046:	2800      	cmp	r0, #0
 800a048:	d1ed      	bne.n	800a026 <__swbuf_r+0x2a>
 800a04a:	68a3      	ldr	r3, [r4, #8]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	60a3      	str	r3, [r4, #8]
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	1c5a      	adds	r2, r3, #1
 800a054:	6022      	str	r2, [r4, #0]
 800a056:	701e      	strb	r6, [r3, #0]
 800a058:	6962      	ldr	r2, [r4, #20]
 800a05a:	1c43      	adds	r3, r0, #1
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d004      	beq.n	800a06a <__swbuf_r+0x6e>
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	07db      	lsls	r3, r3, #31
 800a064:	d5e1      	bpl.n	800a02a <__swbuf_r+0x2e>
 800a066:	2e0a      	cmp	r6, #10
 800a068:	d1df      	bne.n	800a02a <__swbuf_r+0x2e>
 800a06a:	4621      	mov	r1, r4
 800a06c:	4628      	mov	r0, r5
 800a06e:	f7ff fa65 	bl	800953c <_fflush_r>
 800a072:	2800      	cmp	r0, #0
 800a074:	d0d9      	beq.n	800a02a <__swbuf_r+0x2e>
 800a076:	e7d6      	b.n	800a026 <__swbuf_r+0x2a>

0800a078 <__swsetup_r>:
 800a078:	b538      	push	{r3, r4, r5, lr}
 800a07a:	4b29      	ldr	r3, [pc, #164]	@ (800a120 <__swsetup_r+0xa8>)
 800a07c:	4605      	mov	r5, r0
 800a07e:	6818      	ldr	r0, [r3, #0]
 800a080:	460c      	mov	r4, r1
 800a082:	b118      	cbz	r0, 800a08c <__swsetup_r+0x14>
 800a084:	6a03      	ldr	r3, [r0, #32]
 800a086:	b90b      	cbnz	r3, 800a08c <__swsetup_r+0x14>
 800a088:	f7fc fd20 	bl	8006acc <__sinit>
 800a08c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a090:	0719      	lsls	r1, r3, #28
 800a092:	d422      	bmi.n	800a0da <__swsetup_r+0x62>
 800a094:	06da      	lsls	r2, r3, #27
 800a096:	d407      	bmi.n	800a0a8 <__swsetup_r+0x30>
 800a098:	2209      	movs	r2, #9
 800a09a:	602a      	str	r2, [r5, #0]
 800a09c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0a0:	81a3      	strh	r3, [r4, #12]
 800a0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a6:	e033      	b.n	800a110 <__swsetup_r+0x98>
 800a0a8:	0758      	lsls	r0, r3, #29
 800a0aa:	d512      	bpl.n	800a0d2 <__swsetup_r+0x5a>
 800a0ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0ae:	b141      	cbz	r1, 800a0c2 <__swsetup_r+0x4a>
 800a0b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0b4:	4299      	cmp	r1, r3
 800a0b6:	d002      	beq.n	800a0be <__swsetup_r+0x46>
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	f7fd fca9 	bl	8007a10 <_free_r>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a0c8:	81a3      	strh	r3, [r4, #12]
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	6063      	str	r3, [r4, #4]
 800a0ce:	6923      	ldr	r3, [r4, #16]
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	89a3      	ldrh	r3, [r4, #12]
 800a0d4:	f043 0308 	orr.w	r3, r3, #8
 800a0d8:	81a3      	strh	r3, [r4, #12]
 800a0da:	6923      	ldr	r3, [r4, #16]
 800a0dc:	b94b      	cbnz	r3, 800a0f2 <__swsetup_r+0x7a>
 800a0de:	89a3      	ldrh	r3, [r4, #12]
 800a0e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0e8:	d003      	beq.n	800a0f2 <__swsetup_r+0x7a>
 800a0ea:	4621      	mov	r1, r4
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	f000 f88b 	bl	800a208 <__smakebuf_r>
 800a0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f6:	f013 0201 	ands.w	r2, r3, #1
 800a0fa:	d00a      	beq.n	800a112 <__swsetup_r+0x9a>
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	60a2      	str	r2, [r4, #8]
 800a100:	6962      	ldr	r2, [r4, #20]
 800a102:	4252      	negs	r2, r2
 800a104:	61a2      	str	r2, [r4, #24]
 800a106:	6922      	ldr	r2, [r4, #16]
 800a108:	b942      	cbnz	r2, 800a11c <__swsetup_r+0xa4>
 800a10a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a10e:	d1c5      	bne.n	800a09c <__swsetup_r+0x24>
 800a110:	bd38      	pop	{r3, r4, r5, pc}
 800a112:	0799      	lsls	r1, r3, #30
 800a114:	bf58      	it	pl
 800a116:	6962      	ldrpl	r2, [r4, #20]
 800a118:	60a2      	str	r2, [r4, #8]
 800a11a:	e7f4      	b.n	800a106 <__swsetup_r+0x8e>
 800a11c:	2000      	movs	r0, #0
 800a11e:	e7f7      	b.n	800a110 <__swsetup_r+0x98>
 800a120:	20000104 	.word	0x20000104

0800a124 <_raise_r>:
 800a124:	291f      	cmp	r1, #31
 800a126:	b538      	push	{r3, r4, r5, lr}
 800a128:	4605      	mov	r5, r0
 800a12a:	460c      	mov	r4, r1
 800a12c:	d904      	bls.n	800a138 <_raise_r+0x14>
 800a12e:	2316      	movs	r3, #22
 800a130:	6003      	str	r3, [r0, #0]
 800a132:	f04f 30ff 	mov.w	r0, #4294967295
 800a136:	bd38      	pop	{r3, r4, r5, pc}
 800a138:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a13a:	b112      	cbz	r2, 800a142 <_raise_r+0x1e>
 800a13c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a140:	b94b      	cbnz	r3, 800a156 <_raise_r+0x32>
 800a142:	4628      	mov	r0, r5
 800a144:	f000 f830 	bl	800a1a8 <_getpid_r>
 800a148:	4622      	mov	r2, r4
 800a14a:	4601      	mov	r1, r0
 800a14c:	4628      	mov	r0, r5
 800a14e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a152:	f000 b817 	b.w	800a184 <_kill_r>
 800a156:	2b01      	cmp	r3, #1
 800a158:	d00a      	beq.n	800a170 <_raise_r+0x4c>
 800a15a:	1c59      	adds	r1, r3, #1
 800a15c:	d103      	bne.n	800a166 <_raise_r+0x42>
 800a15e:	2316      	movs	r3, #22
 800a160:	6003      	str	r3, [r0, #0]
 800a162:	2001      	movs	r0, #1
 800a164:	e7e7      	b.n	800a136 <_raise_r+0x12>
 800a166:	2100      	movs	r1, #0
 800a168:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a16c:	4620      	mov	r0, r4
 800a16e:	4798      	blx	r3
 800a170:	2000      	movs	r0, #0
 800a172:	e7e0      	b.n	800a136 <_raise_r+0x12>

0800a174 <raise>:
 800a174:	4b02      	ldr	r3, [pc, #8]	@ (800a180 <raise+0xc>)
 800a176:	4601      	mov	r1, r0
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	f7ff bfd3 	b.w	800a124 <_raise_r>
 800a17e:	bf00      	nop
 800a180:	20000104 	.word	0x20000104

0800a184 <_kill_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	4d07      	ldr	r5, [pc, #28]	@ (800a1a4 <_kill_r+0x20>)
 800a188:	2300      	movs	r3, #0
 800a18a:	4604      	mov	r4, r0
 800a18c:	4608      	mov	r0, r1
 800a18e:	4611      	mov	r1, r2
 800a190:	602b      	str	r3, [r5, #0]
 800a192:	f7f7 fe7c 	bl	8001e8e <_kill>
 800a196:	1c43      	adds	r3, r0, #1
 800a198:	d102      	bne.n	800a1a0 <_kill_r+0x1c>
 800a19a:	682b      	ldr	r3, [r5, #0]
 800a19c:	b103      	cbz	r3, 800a1a0 <_kill_r+0x1c>
 800a19e:	6023      	str	r3, [r4, #0]
 800a1a0:	bd38      	pop	{r3, r4, r5, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20000ba4 	.word	0x20000ba4

0800a1a8 <_getpid_r>:
 800a1a8:	f7f7 be69 	b.w	8001e7e <_getpid>

0800a1ac <_malloc_usable_size_r>:
 800a1ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1b0:	1f18      	subs	r0, r3, #4
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	bfbc      	itt	lt
 800a1b6:	580b      	ldrlt	r3, [r1, r0]
 800a1b8:	18c0      	addlt	r0, r0, r3
 800a1ba:	4770      	bx	lr

0800a1bc <__swhatbuf_r>:
 800a1bc:	b570      	push	{r4, r5, r6, lr}
 800a1be:	460c      	mov	r4, r1
 800a1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c4:	2900      	cmp	r1, #0
 800a1c6:	b096      	sub	sp, #88	@ 0x58
 800a1c8:	4615      	mov	r5, r2
 800a1ca:	461e      	mov	r6, r3
 800a1cc:	da0d      	bge.n	800a1ea <__swhatbuf_r+0x2e>
 800a1ce:	89a3      	ldrh	r3, [r4, #12]
 800a1d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1d4:	f04f 0100 	mov.w	r1, #0
 800a1d8:	bf14      	ite	ne
 800a1da:	2340      	movne	r3, #64	@ 0x40
 800a1dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	6031      	str	r1, [r6, #0]
 800a1e4:	602b      	str	r3, [r5, #0]
 800a1e6:	b016      	add	sp, #88	@ 0x58
 800a1e8:	bd70      	pop	{r4, r5, r6, pc}
 800a1ea:	466a      	mov	r2, sp
 800a1ec:	f000 f848 	bl	800a280 <_fstat_r>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	dbec      	blt.n	800a1ce <__swhatbuf_r+0x12>
 800a1f4:	9901      	ldr	r1, [sp, #4]
 800a1f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1fe:	4259      	negs	r1, r3
 800a200:	4159      	adcs	r1, r3
 800a202:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a206:	e7eb      	b.n	800a1e0 <__swhatbuf_r+0x24>

0800a208 <__smakebuf_r>:
 800a208:	898b      	ldrh	r3, [r1, #12]
 800a20a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a20c:	079d      	lsls	r5, r3, #30
 800a20e:	4606      	mov	r6, r0
 800a210:	460c      	mov	r4, r1
 800a212:	d507      	bpl.n	800a224 <__smakebuf_r+0x1c>
 800a214:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a218:	6023      	str	r3, [r4, #0]
 800a21a:	6123      	str	r3, [r4, #16]
 800a21c:	2301      	movs	r3, #1
 800a21e:	6163      	str	r3, [r4, #20]
 800a220:	b003      	add	sp, #12
 800a222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a224:	ab01      	add	r3, sp, #4
 800a226:	466a      	mov	r2, sp
 800a228:	f7ff ffc8 	bl	800a1bc <__swhatbuf_r>
 800a22c:	9f00      	ldr	r7, [sp, #0]
 800a22e:	4605      	mov	r5, r0
 800a230:	4639      	mov	r1, r7
 800a232:	4630      	mov	r0, r6
 800a234:	f7fd fc60 	bl	8007af8 <_malloc_r>
 800a238:	b948      	cbnz	r0, 800a24e <__smakebuf_r+0x46>
 800a23a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a23e:	059a      	lsls	r2, r3, #22
 800a240:	d4ee      	bmi.n	800a220 <__smakebuf_r+0x18>
 800a242:	f023 0303 	bic.w	r3, r3, #3
 800a246:	f043 0302 	orr.w	r3, r3, #2
 800a24a:	81a3      	strh	r3, [r4, #12]
 800a24c:	e7e2      	b.n	800a214 <__smakebuf_r+0xc>
 800a24e:	89a3      	ldrh	r3, [r4, #12]
 800a250:	6020      	str	r0, [r4, #0]
 800a252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a256:	81a3      	strh	r3, [r4, #12]
 800a258:	9b01      	ldr	r3, [sp, #4]
 800a25a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a25e:	b15b      	cbz	r3, 800a278 <__smakebuf_r+0x70>
 800a260:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a264:	4630      	mov	r0, r6
 800a266:	f000 f81d 	bl	800a2a4 <_isatty_r>
 800a26a:	b128      	cbz	r0, 800a278 <__smakebuf_r+0x70>
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	f023 0303 	bic.w	r3, r3, #3
 800a272:	f043 0301 	orr.w	r3, r3, #1
 800a276:	81a3      	strh	r3, [r4, #12]
 800a278:	89a3      	ldrh	r3, [r4, #12]
 800a27a:	431d      	orrs	r5, r3
 800a27c:	81a5      	strh	r5, [r4, #12]
 800a27e:	e7cf      	b.n	800a220 <__smakebuf_r+0x18>

0800a280 <_fstat_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4d07      	ldr	r5, [pc, #28]	@ (800a2a0 <_fstat_r+0x20>)
 800a284:	2300      	movs	r3, #0
 800a286:	4604      	mov	r4, r0
 800a288:	4608      	mov	r0, r1
 800a28a:	4611      	mov	r1, r2
 800a28c:	602b      	str	r3, [r5, #0]
 800a28e:	f7f7 fe5e 	bl	8001f4e <_fstat>
 800a292:	1c43      	adds	r3, r0, #1
 800a294:	d102      	bne.n	800a29c <_fstat_r+0x1c>
 800a296:	682b      	ldr	r3, [r5, #0]
 800a298:	b103      	cbz	r3, 800a29c <_fstat_r+0x1c>
 800a29a:	6023      	str	r3, [r4, #0]
 800a29c:	bd38      	pop	{r3, r4, r5, pc}
 800a29e:	bf00      	nop
 800a2a0:	20000ba4 	.word	0x20000ba4

0800a2a4 <_isatty_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4d06      	ldr	r5, [pc, #24]	@ (800a2c0 <_isatty_r+0x1c>)
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	4608      	mov	r0, r1
 800a2ae:	602b      	str	r3, [r5, #0]
 800a2b0:	f7f7 fe5d 	bl	8001f6e <_isatty>
 800a2b4:	1c43      	adds	r3, r0, #1
 800a2b6:	d102      	bne.n	800a2be <_isatty_r+0x1a>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	b103      	cbz	r3, 800a2be <_isatty_r+0x1a>
 800a2bc:	6023      	str	r3, [r4, #0]
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	20000ba4 	.word	0x20000ba4

0800a2c4 <_init>:
 800a2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c6:	bf00      	nop
 800a2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ca:	bc08      	pop	{r3}
 800a2cc:	469e      	mov	lr, r3
 800a2ce:	4770      	bx	lr

0800a2d0 <_fini>:
 800a2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d2:	bf00      	nop
 800a2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2d6:	bc08      	pop	{r3}
 800a2d8:	469e      	mov	lr, r3
 800a2da:	4770      	bx	lr
