
Major Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004fb0  08004fb0  00005fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005050  08005050  00007108  2**0
                  CONTENTS
  4 .ARM          00000008  08005050  08005050  00006050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005058  08005058  00007108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005058  08005058  00006058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800505c  0800505c  0000605c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  08005060  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007108  2**0
                  CONTENTS
 10 .bss          00000580  20000108  20000108  00007108  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000688  20000688  00007108  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007108  2**0
                  CONTENTS, READONLY
 13 .debug_info   000100ba  00000000  00000000  00007138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c98  00000000  00000000  000171f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  00019e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aa3  00000000  00000000  0001ac98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c67d  00000000  00000000  0001b73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013de1  00000000  00000000  00057db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6946  00000000  00000000  0006bb99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001524df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d4c  00000000  00000000  00152524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00156270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000108 	.word	0x20000108
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f98 	.word	0x08004f98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000010c 	.word	0x2000010c
 80001cc:	08004f98 	.word	0x08004f98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <initialise_board>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_USB_PCD_Init(void);

void initialise_board() {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fda7 	bl	8000dc8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f831 	bl	80002e0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f931 	bl	80004e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000282:	f000 f88f 	bl	80003a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000286:	f000 f8cd 	bl	8000424 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800028a:	f000 f909 	bl	80004a0 <MX_USB_PCD_Init>
  
  BSP_GYRO_Init();
 800028e:	f003 fbe9 	bl	8003a64 <BSP_GYRO_Init>

  RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000292:	4b10      	ldr	r3, [pc, #64]	@ (80002d4 <initialise_board+0x64>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	4a0f      	ldr	r2, [pc, #60]	@ (80002d4 <initialise_board+0x64>)
 8000298:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 800029c:	6153      	str	r3, [r2, #20]

  RCC->APB1ENR |=  RCC_APB1ENR_TIM2EN;
 800029e:	4b0d      	ldr	r3, [pc, #52]	@ (80002d4 <initialise_board+0x64>)
 80002a0:	69db      	ldr	r3, [r3, #28]
 80002a2:	4a0c      	ldr	r2, [pc, #48]	@ (80002d4 <initialise_board+0x64>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	61d3      	str	r3, [r2, #28]
  RCC->APB1ENR |=  RCC_APB1ENR_TIM3EN;
 80002aa:	4b0a      	ldr	r3, [pc, #40]	@ (80002d4 <initialise_board+0x64>)
 80002ac:	69db      	ldr	r3, [r3, #28]
 80002ae:	4a09      	ldr	r2, [pc, #36]	@ (80002d4 <initialise_board+0x64>)
 80002b0:	f043 0302 	orr.w	r3, r3, #2
 80002b4:	61d3      	str	r3, [r2, #28]

  SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 80002b6:	2200      	movs	r2, #0
 80002b8:	4907      	ldr	r1, [pc, #28]	@ (80002d8 <initialise_board+0x68>)
 80002ba:	2004      	movs	r0, #4
 80002bc:	f000 fa42 	bl	8000744 <SerialInitialise>

  uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <initialise_board+0x6c>)
 80002c2:	607b      	str	r3, [r7, #4]
  *led_output_registers = 0x5555;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f245 5255 	movw	r2, #21845	@ 0x5555
 80002ca:	801a      	strh	r2, [r3, #0]
}
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40021000 	.word	0x40021000
 80002d8:	20000000 	.word	0x20000000
 80002dc:	48001002 	.word	0x48001002

080002e0 <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b09e      	sub	sp, #120	@ 0x78
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002ea:	2228      	movs	r2, #40	@ 0x28
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f004 f9d2 	bl	8004698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000304:	463b      	mov	r3, r7
 8000306:	223c      	movs	r2, #60	@ 0x3c
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f004 f9c4 	bl	8004698 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000310:	2303      	movs	r3, #3
 8000312:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000314:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000318:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031e:	2301      	movs	r3, #1
 8000320:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000322:	2310      	movs	r3, #16
 8000324:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000326:	2302      	movs	r3, #2
 8000328:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800032a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800032e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000330:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000334:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000336:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800033a:	4618      	mov	r0, r3
 800033c:	f001 fb1a 	bl	8001974 <HAL_RCC_OscConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000346:	f000 f94b 	bl	80005e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034a:	230f      	movs	r3, #15
 800034c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034e:	2302      	movs	r3, #2
 8000350:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800035a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000360:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000364:	2101      	movs	r1, #1
 8000366:	4618      	mov	r0, r3
 8000368:	f002 fb42 	bl	80029f0 <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000372:	f000 f935 	bl	80005e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000376:	4b0a      	ldr	r3, [pc, #40]	@ (80003a0 <SystemClock_Config+0xc0>)
 8000378:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800037a:	2300      	movs	r3, #0
 800037c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800037e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000382:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000384:	463b      	mov	r3, r7
 8000386:	4618      	mov	r0, r3
 8000388:	f002 fd18 	bl	8002dbc <HAL_RCCEx_PeriphCLKConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000392:	f000 f925 	bl	80005e0 <Error_Handler>
  }
}
 8000396:	bf00      	nop
 8000398:	3778      	adds	r7, #120	@ 0x78
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	00020020 	.word	0x00020020

080003a4 <MX_I2C1_Init>:

// I2C1 Initialization Function
static void MX_I2C1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80003a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003aa:	4a1c      	ldr	r2, [pc, #112]	@ (800041c <MX_I2C1_Init+0x78>)
 80003ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000420 <MX_I2C1_Init+0x7c>)
 80003b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003b4:	4b18      	ldr	r3, [pc, #96]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ba:	4b17      	ldr	r3, [pc, #92]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003bc:	2201      	movs	r2, #1
 80003be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003c0:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003c6:	4b14      	ldr	r3, [pc, #80]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003cc:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003d2:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003de:	480e      	ldr	r0, [pc, #56]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003e0:	f001 f8d0 	bl	8001584 <HAL_I2C_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003ea:	f000 f8f9 	bl	80005e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ee:	2100      	movs	r1, #0
 80003f0:	4809      	ldr	r0, [pc, #36]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003f2:	f001 f956 	bl	80016a2 <HAL_I2CEx_ConfigAnalogFilter>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003fc:	f000 f8f0 	bl	80005e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000400:	2100      	movs	r1, #0
 8000402:	4805      	ldr	r0, [pc, #20]	@ (8000418 <MX_I2C1_Init+0x74>)
 8000404:	f001 f998 	bl	8001738 <HAL_I2CEx_ConfigDigitalFilter>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800040e:	f000 f8e7 	bl	80005e0 <Error_Handler>
  }
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000124 	.word	0x20000124
 800041c:	40005400 	.word	0x40005400
 8000420:	2000090e 	.word	0x2000090e

08000424 <MX_SPI1_Init>:

// SPI1 Initialization Function
static void MX_SPI1_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000428:	4b1b      	ldr	r3, [pc, #108]	@ (8000498 <MX_SPI1_Init+0x74>)
 800042a:	4a1c      	ldr	r2, [pc, #112]	@ (800049c <MX_SPI1_Init+0x78>)
 800042c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800042e:	4b1a      	ldr	r3, [pc, #104]	@ (8000498 <MX_SPI1_Init+0x74>)
 8000430:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000434:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000436:	4b18      	ldr	r3, [pc, #96]	@ (8000498 <MX_SPI1_Init+0x74>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800043c:	4b16      	ldr	r3, [pc, #88]	@ (8000498 <MX_SPI1_Init+0x74>)
 800043e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000442:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000444:	4b14      	ldr	r3, [pc, #80]	@ (8000498 <MX_SPI1_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800044a:	4b13      	ldr	r3, [pc, #76]	@ (8000498 <MX_SPI1_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000450:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <MX_SPI1_Init+0x74>)
 8000452:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000456:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000458:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <MX_SPI1_Init+0x74>)
 800045a:	2208      	movs	r2, #8
 800045c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800045e:	4b0e      	ldr	r3, [pc, #56]	@ (8000498 <MX_SPI1_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000464:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <MX_SPI1_Init+0x74>)
 8000466:	2200      	movs	r2, #0
 8000468:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800046a:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <MX_SPI1_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000470:	4b09      	ldr	r3, [pc, #36]	@ (8000498 <MX_SPI1_Init+0x74>)
 8000472:	2207      	movs	r2, #7
 8000474:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000476:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <MX_SPI1_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800047c:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <MX_SPI1_Init+0x74>)
 800047e:	2208      	movs	r2, #8
 8000480:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000482:	4805      	ldr	r0, [pc, #20]	@ (8000498 <MX_SPI1_Init+0x74>)
 8000484:	f002 fe4a 	bl	800311c <HAL_SPI_Init>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800048e:	f000 f8a7 	bl	80005e0 <Error_Handler>
  }
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000178 	.word	0x20000178
 800049c:	40013000 	.word	0x40013000

080004a0 <MX_USB_PCD_Init>:

// USB Initialization Function
static void MX_USB_PCD_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  hpcd_USB_FS.Instance = USB;
 80004a4:	4b0d      	ldr	r3, [pc, #52]	@ (80004dc <MX_USB_PCD_Init+0x3c>)
 80004a6:	4a0e      	ldr	r2, [pc, #56]	@ (80004e0 <MX_USB_PCD_Init+0x40>)
 80004a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80004aa:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <MX_USB_PCD_Init+0x3c>)
 80004ac:	2208      	movs	r2, #8
 80004ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80004b0:	4b0a      	ldr	r3, [pc, #40]	@ (80004dc <MX_USB_PCD_Init+0x3c>)
 80004b2:	2202      	movs	r2, #2
 80004b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80004b6:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <MX_USB_PCD_Init+0x3c>)
 80004b8:	2202      	movs	r2, #2
 80004ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80004bc:	4b07      	ldr	r3, [pc, #28]	@ (80004dc <MX_USB_PCD_Init+0x3c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004c2:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <MX_USB_PCD_Init+0x3c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004c8:	4804      	ldr	r0, [pc, #16]	@ (80004dc <MX_USB_PCD_Init+0x3c>)
 80004ca:	f001 f981 	bl	80017d0 <HAL_PCD_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80004d4:	f000 f884 	bl	80005e0 <Error_Handler>
  }
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	200001dc 	.word	0x200001dc
 80004e0:	40005c00 	.word	0x40005c00

080004e4 <MX_GPIO_Init>:

// GPIO Initialization Function
static void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	@ 0x28
 80004e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004fa:	4b37      	ldr	r3, [pc, #220]	@ (80005d8 <MX_GPIO_Init+0xf4>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a36      	ldr	r2, [pc, #216]	@ (80005d8 <MX_GPIO_Init+0xf4>)
 8000500:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b34      	ldr	r3, [pc, #208]	@ (80005d8 <MX_GPIO_Init+0xf4>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800050e:	613b      	str	r3, [r7, #16]
 8000510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b31      	ldr	r3, [pc, #196]	@ (80005d8 <MX_GPIO_Init+0xf4>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a30      	ldr	r2, [pc, #192]	@ (80005d8 <MX_GPIO_Init+0xf4>)
 8000518:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b2e      	ldr	r3, [pc, #184]	@ (80005d8 <MX_GPIO_Init+0xf4>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052a:	4b2b      	ldr	r3, [pc, #172]	@ (80005d8 <MX_GPIO_Init+0xf4>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a2a      	ldr	r2, [pc, #168]	@ (80005d8 <MX_GPIO_Init+0xf4>)
 8000530:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b28      	ldr	r3, [pc, #160]	@ (80005d8 <MX_GPIO_Init+0xf4>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b25      	ldr	r3, [pc, #148]	@ (80005d8 <MX_GPIO_Init+0xf4>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a24      	ldr	r2, [pc, #144]	@ (80005d8 <MX_GPIO_Init+0xf4>)
 8000548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b22      	ldr	r3, [pc, #136]	@ (80005d8 <MX_GPIO_Init+0xf4>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	4b1f      	ldr	r3, [pc, #124]	@ (80005d8 <MX_GPIO_Init+0xf4>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a1e      	ldr	r2, [pc, #120]	@ (80005d8 <MX_GPIO_Init+0xf4>)
 8000560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000564:	6153      	str	r3, [r2, #20]
 8000566:	4b1c      	ldr	r3, [pc, #112]	@ (80005d8 <MX_GPIO_Init+0xf4>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000572:	2200      	movs	r2, #0
 8000574:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000578:	4818      	ldr	r0, [pc, #96]	@ (80005dc <MX_GPIO_Init+0xf8>)
 800057a:	f000 ffeb 	bl	8001554 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800057e:	2337      	movs	r3, #55	@ 0x37
 8000580:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000582:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	4812      	ldr	r0, [pc, #72]	@ (80005dc <MX_GPIO_Init+0xf8>)
 8000594:	f000 fd88 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000598:	f64f 7308 	movw	r3, #65288	@ 0xff08
 800059c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059e:	2301      	movs	r3, #1
 80005a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	2300      	movs	r3, #0
 80005a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	4619      	mov	r1, r3
 80005b0:	480a      	ldr	r0, [pc, #40]	@ (80005dc <MX_GPIO_Init+0xf8>)
 80005b2:	f000 fd79 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005b6:	2301      	movs	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005cc:	f000 fd6c 	bl	80010a8 <HAL_GPIO_Init>
}
 80005d0:	bf00      	nop
 80005d2:	3728      	adds	r7, #40	@ 0x28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000
 80005dc:	48001000 	.word	0x48001000

080005e0 <Error_Handler>:

// This function is executed in case of error occurrence.
void Error_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e4:	b672      	cpsid	i
}
 80005e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <Error_Handler+0x8>

080005ec <set_timesUp>:
#include "timers.h"
/* USER CODE END Includes */

uint8_t timesUp = 0;

void set_timesUp(){
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
    if (timesUp == 0) {
 80005f0:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <set_timesUp+0x24>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d103      	bne.n	8000600 <set_timesUp+0x14>
        timesUp = 1;
 80005f8:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <set_timesUp+0x24>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
    }
    else {
        timesUp = 0;
    }
}
 80005fe:	e002      	b.n	8000606 <set_timesUp+0x1a>
        timesUp = 0;
 8000600:	4b03      	ldr	r3, [pc, #12]	@ (8000610 <set_timesUp+0x24>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	200004c8 	.word	0x200004c8

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b5b0      	push	{r4, r5, r7, lr}
 8000616:	b094      	sub	sp, #80	@ 0x50
 8000618:	af00      	add	r7, sp, #0
	initialise_board();
 800061a:	f7ff fe29 	bl	8000270 <initialise_board>

	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 800061e:	2200      	movs	r2, #0
 8000620:	4940      	ldr	r1, [pc, #256]	@ (8000724 <main+0x110>)
 8000622:	2004      	movs	r0, #4
 8000624:	f000 f88e 	bl	8000744 <SerialInitialise>
	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000628:	4b3f      	ldr	r3, [pc, #252]	@ (8000728 <main+0x114>)
 800062a:	f107 040c 	add.w	r4, r7, #12
 800062e:	461d      	mov	r5, r3
 8000630:	6828      	ldr	r0, [r5, #0]
 8000632:	6869      	ldr	r1, [r5, #4]
 8000634:	68aa      	ldr	r2, [r5, #8]
 8000636:	68eb      	ldr	r3, [r5, #12]
 8000638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063a:	6928      	ldr	r0, [r5, #16]
 800063c:	6020      	str	r0, [r4, #0]
 800063e:	7d2b      	ldrb	r3, [r5, #20]
 8000640:	7123      	strb	r3, [r4, #4]
 8000642:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8000646:	222b      	movs	r2, #43	@ 0x2b
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f004 f824 	bl	8004698 <memset>

	uint8_t outcome;

	while (1){

		trigger_oneshot(30000, &set_timesUp);
 8000650:	4936      	ldr	r1, [pc, #216]	@ (800072c <main+0x118>)
 8000652:	f247 5030 	movw	r0, #30000	@ 0x7530
 8000656:	f000 fb27 	bl	8000ca8 <trigger_oneshot>

		while (timesUp == 0) {
 800065a:	e050      	b.n	80006fe <main+0xea>
			outcome = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

			while (!outcome){
 8000662:	e023      	b.n	80006ac <main+0x98>
				BSP_GYRO_GetXYZ(&gyro_values[0]);
 8000664:	463b      	mov	r3, r7
 8000666:	4618      	mov	r0, r3
 8000668:	f003 fab0 	bl	8003bcc <BSP_GYRO_GetXYZ>
				if (gyro_values[1]/20000 <= -25){
 800066c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000670:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8000730 <main+0x11c>
 8000674:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000678:	eebb 7a09 	vmov.f32	s14, #185	@ 0xc1c80000 -25.0
 800067c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000684:	d802      	bhi.n	800068c <main+0x78>
					outcome = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				}
				if (gyro_values[1]/20000 >= 25){
 800068c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000690:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8000730 <main+0x11c>
 8000694:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000698:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800069c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a4:	db02      	blt.n	80006ac <main+0x98>
					outcome = 2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			while (!outcome){
 80006ac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d0d7      	beq.n	8000664 <main+0x50>
				}
			}

			if (outcome == 1){
 80006b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d10c      	bne.n	80006d6 <main+0xc2>
				sprintf(string_to_send, "Correct!\r\n");
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	491c      	ldr	r1, [pc, #112]	@ (8000734 <main+0x120>)
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 ffc8 	bl	8004658 <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	4915      	ldr	r1, [pc, #84]	@ (8000724 <main+0x110>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 f8c5 	bl	800085e <SerialOutputString>
 80006d4:	e00f      	b.n	80006f6 <main+0xe2>
			}
			else if (outcome == 2){
 80006d6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d10b      	bne.n	80006f6 <main+0xe2>
				sprintf(string_to_send, "Pass!\r\n");
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	4915      	ldr	r1, [pc, #84]	@ (8000738 <main+0x124>)
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 ffb7 	bl	8004658 <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	490d      	ldr	r1, [pc, #52]	@ (8000724 <main+0x110>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 f8b4 	bl	800085e <SerialOutputString>
			}
			HAL_Delay(500);
 80006f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006fa:	f000 fbcb 	bl	8000e94 <HAL_Delay>
		while (timesUp == 0) {
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <main+0x128>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d0aa      	beq.n	800065c <main+0x48>
		}

		sprintf(string_to_send, "Time's Up!\r\n");
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	490d      	ldr	r1, [pc, #52]	@ (8000740 <main+0x12c>)
 800070c:	4618      	mov	r0, r3
 800070e:	f003 ffa3 	bl	8004658 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	4903      	ldr	r1, [pc, #12]	@ (8000724 <main+0x110>)
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f8a0 	bl	800085e <SerialOutputString>

		for(;;){}
 800071e:	bf00      	nop
 8000720:	e7fd      	b.n	800071e <main+0x10a>
 8000722:	bf00      	nop
 8000724:	20000000 	.word	0x20000000
 8000728:	08004fd4 	.word	0x08004fd4
 800072c:	080005ed 	.word	0x080005ed
 8000730:	469c4000 	.word	0x469c4000
 8000734:	08004fb0 	.word	0x08004fb0
 8000738:	08004fbc 	.word	0x08004fbc
 800073c:	200004c8 	.word	0x200004c8
 8000740:	08004fc4 	.word	0x08004fc4

08000744 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000744:	b480      	push	{r7}
 8000746:	b087      	sub	sp, #28
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	63da      	str	r2, [r3, #60]	@ 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000756:	4b34      	ldr	r3, [pc, #208]	@ (8000828 <SerialInitialise+0xe4>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a33      	ldr	r2, [pc, #204]	@ (8000828 <SerialInitialise+0xe4>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000760:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000762:	4b31      	ldr	r3, [pc, #196]	@ (8000828 <SerialInitialise+0xe4>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	4a30      	ldr	r2, [pc, #192]	@ (8000828 <SerialInitialise+0xe4>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	6a1b      	ldr	r3, [r3, #32]
 8000772:	2b02      	cmp	r3, #2
 8000774:	d106      	bne.n	8000784 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000776:	4b2c      	ldr	r3, [pc, #176]	@ (8000828 <SerialInitialise+0xe4>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a2b      	ldr	r2, [pc, #172]	@ (8000828 <SerialInitialise+0xe4>)
 800077c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000780:	6153      	str	r3, [r2, #20]
		break;
 8000782:	e000      	b.n	8000786 <SerialInitialise+0x42>
	default:
		break;
 8000784:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800078e:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000794:	68ba      	ldr	r2, [r7, #8]
 8000796:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000798:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	69d9      	ldr	r1, [r3, #28]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	430a      	orrs	r2, r1
 80007b8:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	d821      	bhi.n	800080a <SerialInitialise+0xc6>
 80007c6:	a201      	add	r2, pc, #4	@ (adr r2, 80007cc <SerialInitialise+0x88>)
 80007c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007cc:	080007e1 	.word	0x080007e1
 80007d0:	080007e9 	.word	0x080007e9
 80007d4:	080007f1 	.word	0x080007f1
 80007d8:	080007f9 	.word	0x080007f9
 80007dc:	08000801 	.word	0x08000801
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	2246      	movs	r2, #70	@ 0x46
 80007e4:	801a      	strh	r2, [r3, #0]
		break;
 80007e6:	e010      	b.n	800080a <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	2246      	movs	r2, #70	@ 0x46
 80007ec:	801a      	strh	r2, [r3, #0]
		break;
 80007ee:	e00c      	b.n	800080a <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	2246      	movs	r2, #70	@ 0x46
 80007f4:	801a      	strh	r2, [r3, #0]
		break;
 80007f6:	e008      	b.n	800080a <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	2246      	movs	r2, #70	@ 0x46
 80007fc:	801a      	strh	r2, [r3, #0]
		break;
 80007fe:	e004      	b.n	800080a <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8000806:	801a      	strh	r2, [r3, #0]
		break;
 8000808:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f042 020d 	orr.w	r2, r2, #13
 8000818:	601a      	str	r2, [r3, #0]
}
 800081a:	bf00      	nop
 800081c:	371c      	adds	r7, #28
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8000838:	bf00      	nop
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000844:	2b00      	cmp	r3, #0
 8000846:	d0f8      	beq.n	800083a <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	691b      	ldr	r3, [r3, #16]
 800084c:	79fa      	ldrb	r2, [r7, #7]
 800084e:	b292      	uxth	r2, r2
 8000850:	801a      	strh	r2, [r3, #0]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 800085e:	b580      	push	{r7, lr}
 8000860:	b084      	sub	sp, #16
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 800086c:	e00b      	b.n	8000886 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	6839      	ldr	r1, [r7, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ffd9 	bl	800082c <SerialOutputChar>
		counter++;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	3301      	adds	r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
		pt++;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3301      	adds	r3, #1
 8000884:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1ef      	bne.n	800086e <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000892:	2b00      	cmp	r3, #0
 8000894:	d003      	beq.n	800089e <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	4798      	blx	r3
}
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <HAL_MspInit+0x44>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	4a0e      	ldr	r2, [pc, #56]	@ (80008ec <HAL_MspInit+0x44>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6193      	str	r3, [r2, #24]
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <HAL_MspInit+0x44>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <HAL_MspInit+0x44>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	4a08      	ldr	r2, [pc, #32]	@ (80008ec <HAL_MspInit+0x44>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d0:	61d3      	str	r3, [r2, #28]
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <HAL_MspInit+0x44>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008de:	2007      	movs	r0, #7
 80008e0:	f000 fbae 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	@ 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a17      	ldr	r2, [pc, #92]	@ (800096c <HAL_I2C_MspInit+0x7c>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d127      	bne.n	8000962 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <HAL_I2C_MspInit+0x80>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a16      	ldr	r2, [pc, #88]	@ (8000970 <HAL_I2C_MspInit+0x80>)
 8000918:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <HAL_I2C_MspInit+0x80>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800092a:	23c0      	movs	r3, #192	@ 0xc0
 800092c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800092e:	2312      	movs	r3, #18
 8000930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000932:	2301      	movs	r3, #1
 8000934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800093a:	2304      	movs	r3, #4
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	480b      	ldr	r0, [pc, #44]	@ (8000974 <HAL_I2C_MspInit+0x84>)
 8000946:	f000 fbaf 	bl	80010a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <HAL_I2C_MspInit+0x80>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_I2C_MspInit+0x80>)
 8000950:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000954:	61d3      	str	r3, [r2, #28]
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_I2C_MspInit+0x80>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	@ 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40005400 	.word	0x40005400
 8000970:	40021000 	.word	0x40021000
 8000974:	48000400 	.word	0x48000400

08000978 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	@ 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <HAL_SPI_MspInit+0x7c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d128      	bne.n	80009ec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <HAL_SPI_MspInit+0x80>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a16      	ldr	r2, [pc, #88]	@ (80009f8 <HAL_SPI_MspInit+0x80>)
 80009a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <HAL_SPI_MspInit+0x80>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <HAL_SPI_MspInit+0x80>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4a10      	ldr	r2, [pc, #64]	@ (80009f8 <HAL_SPI_MspInit+0x80>)
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009bc:	6153      	str	r3, [r2, #20]
 80009be:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <HAL_SPI_MspInit+0x80>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80009ca:	23e0      	movs	r3, #224	@ 0xe0
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009da:	2305      	movs	r3, #5
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e8:	f000 fb5e 	bl	80010a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	@ 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40013000 	.word	0x40013000
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a08      	ldr	r2, [pc, #32]	@ (8000a2c <HAL_SPI_MspDeInit+0x30>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d10a      	bne.n	8000a24 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <HAL_SPI_MspDeInit+0x34>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	4a07      	ldr	r2, [pc, #28]	@ (8000a30 <HAL_SPI_MspDeInit+0x34>)
 8000a14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a18:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 8000a1a:	21e0      	movs	r1, #224	@ 0xe0
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a20:	f000 fcbc 	bl	800139c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40013000 	.word	0x40013000
 8000a30:	40021000 	.word	0x40021000

08000a34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	@ 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a18      	ldr	r2, [pc, #96]	@ (8000ab4 <HAL_PCD_MspInit+0x80>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d129      	bne.n	8000aaa <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <HAL_PCD_MspInit+0x84>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	4a17      	ldr	r2, [pc, #92]	@ (8000ab8 <HAL_PCD_MspInit+0x84>)
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a60:	6153      	str	r3, [r2, #20]
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <HAL_PCD_MspInit+0x84>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000a6e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a80:	230e      	movs	r3, #14
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8e:	f000 fb0b 	bl	80010a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <HAL_PCD_MspInit+0x84>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a08      	ldr	r2, [pc, #32]	@ (8000ab8 <HAL_PCD_MspInit+0x84>)
 8000a98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_PCD_MspInit+0x84>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	@ 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40005c00 	.word	0x40005c00
 8000ab8:	40021000 	.word	0x40021000

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b12:	f000 f99f 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b24:	4a14      	ldr	r2, [pc, #80]	@ (8000b78 <_sbrk+0x5c>)
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <_sbrk+0x60>)
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b30:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <_sbrk+0x64>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <_sbrk+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b4c:	f003 fdac 	bl	80046a8 <__errno>
 8000b50:	4603      	mov	r3, r0
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	e009      	b.n	8000b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b62:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <_sbrk+0x64>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	2000a000 	.word	0x2000a000
 8000b7c:	00000400 	.word	0x00000400
 8000b80:	200004cc 	.word	0x200004cc
 8000b84:	20000688 	.word	0x20000688

08000b88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	@ (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db0b      	blt.n	8000bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 021f 	and.w	r2, r3, #31
 8000bc4:	4907      	ldr	r1, [pc, #28]	@ (8000be4 <__NVIC_EnableIRQ+0x38>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	095b      	lsrs	r3, r3, #5
 8000bcc:	2001      	movs	r0, #1
 8000bce:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	@ (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	@ (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <enable_interrupt>:
#define MILLISECOND_SCALAR 8

// pointer to callback function for oneshot timer
void (*oneshot_callback_function)();

void enable_interrupt(IRQn_Type IRQn, uint32_t priority) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Tell the NVIC module that TIM2 interrupts should be handled
	NVIC_SetPriority(IRQn, priority);  // Set Priority
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	6839      	ldr	r1, [r7, #0]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffc8 	bl	8000be8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQn);
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ffa5 	bl	8000bac <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c62:	b662      	cpsie	i
}
 8000c64:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
// run the oneshot timer interrupt handler
	if (TIM2->SR & TIM_SR_UIF) {
 8000c74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d00e      	beq.n	8000ca0 <TIM2_IRQHandler+0x30>
		// clear oneshot timer interrupt
		TIM2->SR &= ~TIM_SR_UIF;
 8000c82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c8c:	f023 0301 	bic.w	r3, r3, #1
 8000c90:	6113      	str	r3, [r2, #16]

		if (oneshot_callback_function != NULL)
 8000c92:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <TIM2_IRQHandler+0x34>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d002      	beq.n	8000ca0 <TIM2_IRQHandler+0x30>
		{
			oneshot_callback_function();
 8000c9a:	4b02      	ldr	r3, [pc, #8]	@ (8000ca4 <TIM2_IRQHandler+0x34>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4798      	blx	r3
		}

	}

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200004d0 	.word	0x200004d0

08000ca8 <trigger_oneshot>:

void trigger_oneshot(uint16_t delay, void (*callback_function)()) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	80fb      	strh	r3, [r7, #6]

	// reset CR1
	TIM2->CR1 = 0x00;
 8000cb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]

	// set the prescaler to 999, slower than the default clock 1000 times
	TIM2->PSC = PRESCALER; // 125 microseconds = 0.125 milliseconds per count
 8000cbc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cc0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000cc4:	629a      	str	r2, [r3, #40]	@ 0x28

	// set the auto reload according to the prescaler
	TIM2->ARR = 0x01; // 8 - 1 millisecond
 8000cc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cca:	2201      	movs	r2, #1
 8000ccc:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->ARR = TIM2->ARR * delay * 6; // delay in millisecond
 8000cce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd4:	88fa      	ldrh	r2, [r7, #6]
 8000cd6:	fb03 f202 	mul.w	r2, r3, r2
 8000cda:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	62cb      	str	r3, [r1, #44]	@ 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // enable auto reload buffering
 8000ce8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cf6:	6013      	str	r3, [r2, #0]

	// set to only counter overflow raises interrupt flag
	TIM2->CR1 |= TIM_CR1_URS;
 8000cf8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6013      	str	r3, [r2, #0]

	// set to one-pulse mode
	TIM2->CR1 |= TIM_CR1_OPM;
 8000d08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6013      	str	r3, [r2, #0]

	// re-initialise the counter and generates an update of the registers
	TIM2->EGR |= TIM_EGR_UG;
 8000d18:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6153      	str	r3, [r2, #20]

	// enable the update interrupt
	TIM2->DIER |= TIM_DIER_UIE;
 8000d28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	60d3      	str	r3, [r2, #12]

	// clear the interrupt
	TIM2->SR &= ~TIM_SR_UIF;
 8000d38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d42:	f023 0301 	bic.w	r3, r3, #1
 8000d46:	6113      	str	r3, [r2, #16]

	oneshot_callback_function = callback_function;
 8000d48:	4a09      	ldr	r2, [pc, #36]	@ (8000d70 <trigger_oneshot+0xc8>)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	6013      	str	r3, [r2, #0]

	enable_interrupt(TIM2_IRQn, 0);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	201c      	movs	r0, #28
 8000d52:	f7ff ff73 	bl	8000c3c <enable_interrupt>

	// enable counter
	TIM2->CR1 |= TIM_CR1_CEN;
 8000d56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6013      	str	r3, [r2, #0]

}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200004d0 	.word	0x200004d0

08000d74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d78:	f7ff ff06 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d7c:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7e:	490d      	ldr	r1, [pc, #52]	@ (8000db4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d80:	4a0d      	ldr	r2, [pc, #52]	@ (8000db8 <LoopForever+0xe>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d94:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc0 <LoopForever+0x16>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da2:	f003 fc87 	bl	80046b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000da6:	f7ff fc35 	bl	8000614 <main>

08000daa <LoopForever>:

LoopForever:
    b LoopForever
 8000daa:	e7fe      	b.n	8000daa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dac:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000db8:	08005060 	.word	0x08005060
  ldr r2, =_sbss
 8000dbc:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000dc0:	20000688 	.word	0x20000688

08000dc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC1_2_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <HAL_Init+0x28>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	@ (8000df0 <HAL_Init+0x28>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f931 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 f808 	bl	8000df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff fd60 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40022000 	.word	0x40022000

08000df4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <HAL_InitTick+0x54>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HAL_InitTick+0x58>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f93b 	bl	800108e <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00e      	b.n	8000e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d80a      	bhi.n	8000e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f000 f911 	bl	8001056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e34:	4a06      	ldr	r2, [pc, #24]	@ (8000e50 <HAL_InitTick+0x5c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000040 	.word	0x20000040
 8000e4c:	20000048 	.word	0x20000048
 8000e50:	20000044 	.word	0x20000044

08000e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <HAL_IncTick+0x20>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_IncTick+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <HAL_IncTick+0x24>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000048 	.word	0x20000048
 8000e78:	200004d4 	.word	0x200004d4

08000e7c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e80:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	200004d4 	.word	0x200004d4

08000e94 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff ffee 	bl	8000e7c <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d005      	beq.n	8000eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <HAL_Delay+0x44>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000eba:	bf00      	nop
 8000ebc:	f7ff ffde 	bl	8000e7c <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f7      	bhi.n	8000ebc <HAL_Delay+0x28>
  {
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000048 	.word	0x20000048

08000edc <__NVIC_SetPriorityGrouping>:
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_SetPriority>:
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	@ (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	@ (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	@ 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	@ 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800100c:	d301      	bcc.n	8001012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2301      	movs	r3, #1
 8001010:	e00f      	b.n	8001032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <SysTick_Config+0x40>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101a:	210f      	movs	r1, #15
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f7ff ff8e 	bl	8000f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <SysTick_Config+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	@ (800103c <SysTick_Config+0x40>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff47 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff5c 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ff8e 	bl	8000f94 <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff5d 	bl	8000f40 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ffb0 	bl	8000ffc <SysTick_Config>
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b6:	e154      	b.n	8001362 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	2101      	movs	r1, #1
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
 80010c4:	4013      	ands	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8146 	beq.w	800135c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d005      	beq.n	80010e8 <HAL_GPIO_Init+0x40>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d130      	bne.n	800114a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111e:	2201      	movs	r2, #1
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	f003 0201 	and.w	r2, r3, #1
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b03      	cmp	r3, #3
 8001154:	d017      	beq.n	8001186 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d123      	bne.n	80011da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	08da      	lsrs	r2, r3, #3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3208      	adds	r2, #8
 800119a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	220f      	movs	r2, #15
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	691a      	ldr	r2, [r3, #16]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	08da      	lsrs	r2, r3, #3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3208      	adds	r2, #8
 80011d4:	6939      	ldr	r1, [r7, #16]
 80011d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2203      	movs	r2, #3
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0203 	and.w	r2, r3, #3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 80a0 	beq.w	800135c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121c:	4b58      	ldr	r3, [pc, #352]	@ (8001380 <HAL_GPIO_Init+0x2d8>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a57      	ldr	r2, [pc, #348]	@ (8001380 <HAL_GPIO_Init+0x2d8>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b55      	ldr	r3, [pc, #340]	@ (8001380 <HAL_GPIO_Init+0x2d8>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001234:	4a53      	ldr	r2, [pc, #332]	@ (8001384 <HAL_GPIO_Init+0x2dc>)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800125e:	d019      	beq.n	8001294 <HAL_GPIO_Init+0x1ec>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a49      	ldr	r2, [pc, #292]	@ (8001388 <HAL_GPIO_Init+0x2e0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d013      	beq.n	8001290 <HAL_GPIO_Init+0x1e8>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a48      	ldr	r2, [pc, #288]	@ (800138c <HAL_GPIO_Init+0x2e4>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d00d      	beq.n	800128c <HAL_GPIO_Init+0x1e4>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a47      	ldr	r2, [pc, #284]	@ (8001390 <HAL_GPIO_Init+0x2e8>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d007      	beq.n	8001288 <HAL_GPIO_Init+0x1e0>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a46      	ldr	r2, [pc, #280]	@ (8001394 <HAL_GPIO_Init+0x2ec>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d101      	bne.n	8001284 <HAL_GPIO_Init+0x1dc>
 8001280:	2304      	movs	r3, #4
 8001282:	e008      	b.n	8001296 <HAL_GPIO_Init+0x1ee>
 8001284:	2305      	movs	r3, #5
 8001286:	e006      	b.n	8001296 <HAL_GPIO_Init+0x1ee>
 8001288:	2303      	movs	r3, #3
 800128a:	e004      	b.n	8001296 <HAL_GPIO_Init+0x1ee>
 800128c:	2302      	movs	r3, #2
 800128e:	e002      	b.n	8001296 <HAL_GPIO_Init+0x1ee>
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <HAL_GPIO_Init+0x1ee>
 8001294:	2300      	movs	r3, #0
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	f002 0203 	and.w	r2, r2, #3
 800129c:	0092      	lsls	r2, r2, #2
 800129e:	4093      	lsls	r3, r2
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012a6:	4937      	ldr	r1, [pc, #220]	@ (8001384 <HAL_GPIO_Init+0x2dc>)
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b4:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <HAL_GPIO_Init+0x2f0>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012d8:	4a2f      	ldr	r2, [pc, #188]	@ (8001398 <HAL_GPIO_Init+0x2f0>)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012de:	4b2e      	ldr	r3, [pc, #184]	@ (8001398 <HAL_GPIO_Init+0x2f0>)
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001302:	4a25      	ldr	r2, [pc, #148]	@ (8001398 <HAL_GPIO_Init+0x2f0>)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001308:	4b23      	ldr	r3, [pc, #140]	@ (8001398 <HAL_GPIO_Init+0x2f0>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800132c:	4a1a      	ldr	r2, [pc, #104]	@ (8001398 <HAL_GPIO_Init+0x2f0>)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001332:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <HAL_GPIO_Init+0x2f0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001356:	4a10      	ldr	r2, [pc, #64]	@ (8001398 <HAL_GPIO_Init+0x2f0>)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	f47f aea3 	bne.w	80010b8 <HAL_GPIO_Init+0x10>
  }
}
 8001372:	bf00      	nop
 8001374:	bf00      	nop
 8001376:	371c      	adds	r7, #28
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40021000 	.word	0x40021000
 8001384:	40010000 	.word	0x40010000
 8001388:	48000400 	.word	0x48000400
 800138c:	48000800 	.word	0x48000800
 8001390:	48000c00 	.word	0x48000c00
 8001394:	48001000 	.word	0x48001000
 8001398:	40010400 	.word	0x40010400

0800139c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80013aa:	e0b8      	b.n	800151e <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80013ac:	2201      	movs	r2, #1
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80ab 	beq.w	8001518 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80013c2:	4a5e      	ldr	r2, [pc, #376]	@ (800153c <HAL_GPIO_DeInit+0x1a0>)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	3302      	adds	r3, #2
 80013ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	220f      	movs	r2, #15
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	4013      	ands	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013ea:	d019      	beq.n	8001420 <HAL_GPIO_DeInit+0x84>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a54      	ldr	r2, [pc, #336]	@ (8001540 <HAL_GPIO_DeInit+0x1a4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d013      	beq.n	800141c <HAL_GPIO_DeInit+0x80>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a53      	ldr	r2, [pc, #332]	@ (8001544 <HAL_GPIO_DeInit+0x1a8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d00d      	beq.n	8001418 <HAL_GPIO_DeInit+0x7c>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a52      	ldr	r2, [pc, #328]	@ (8001548 <HAL_GPIO_DeInit+0x1ac>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d007      	beq.n	8001414 <HAL_GPIO_DeInit+0x78>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a51      	ldr	r2, [pc, #324]	@ (800154c <HAL_GPIO_DeInit+0x1b0>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d101      	bne.n	8001410 <HAL_GPIO_DeInit+0x74>
 800140c:	2304      	movs	r3, #4
 800140e:	e008      	b.n	8001422 <HAL_GPIO_DeInit+0x86>
 8001410:	2305      	movs	r3, #5
 8001412:	e006      	b.n	8001422 <HAL_GPIO_DeInit+0x86>
 8001414:	2303      	movs	r3, #3
 8001416:	e004      	b.n	8001422 <HAL_GPIO_DeInit+0x86>
 8001418:	2302      	movs	r3, #2
 800141a:	e002      	b.n	8001422 <HAL_GPIO_DeInit+0x86>
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <HAL_GPIO_DeInit+0x86>
 8001420:	2300      	movs	r3, #0
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	f002 0203 	and.w	r2, r2, #3
 8001428:	0092      	lsls	r2, r2, #2
 800142a:	4093      	lsls	r3, r2
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	429a      	cmp	r2, r3
 8001430:	d132      	bne.n	8001498 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001432:	4b47      	ldr	r3, [pc, #284]	@ (8001550 <HAL_GPIO_DeInit+0x1b4>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	4945      	ldr	r1, [pc, #276]	@ (8001550 <HAL_GPIO_DeInit+0x1b4>)
 800143c:	4013      	ands	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001440:	4b43      	ldr	r3, [pc, #268]	@ (8001550 <HAL_GPIO_DeInit+0x1b4>)
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	43db      	mvns	r3, r3
 8001448:	4941      	ldr	r1, [pc, #260]	@ (8001550 <HAL_GPIO_DeInit+0x1b4>)
 800144a:	4013      	ands	r3, r2
 800144c:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800144e:	4b40      	ldr	r3, [pc, #256]	@ (8001550 <HAL_GPIO_DeInit+0x1b4>)
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	493e      	ldr	r1, [pc, #248]	@ (8001550 <HAL_GPIO_DeInit+0x1b4>)
 8001458:	4013      	ands	r3, r2
 800145a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800145c:	4b3c      	ldr	r3, [pc, #240]	@ (8001550 <HAL_GPIO_DeInit+0x1b4>)
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	43db      	mvns	r3, r3
 8001464:	493a      	ldr	r1, [pc, #232]	@ (8001550 <HAL_GPIO_DeInit+0x1b4>)
 8001466:	4013      	ands	r3, r2
 8001468:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	220f      	movs	r2, #15
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800147a:	4a30      	ldr	r2, [pc, #192]	@ (800153c <HAL_GPIO_DeInit+0x1a0>)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	43da      	mvns	r2, r3
 800148a:	482c      	ldr	r0, [pc, #176]	@ (800153c <HAL_GPIO_DeInit+0x1a0>)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	400a      	ands	r2, r1
 8001492:	3302      	adds	r3, #2
 8001494:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2103      	movs	r1, #3
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	401a      	ands	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	08da      	lsrs	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3208      	adds	r2, #8
 80014b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	220f      	movs	r2, #15
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	08d2      	lsrs	r2, r2, #3
 80014ce:	4019      	ands	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3208      	adds	r2, #8
 80014d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2103      	movs	r1, #3
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	401a      	ands	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	2101      	movs	r1, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	401a      	ands	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2103      	movs	r1, #3
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	401a      	ands	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3301      	adds	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	f47f af40 	bne.w	80013ac <HAL_GPIO_DeInit+0x10>
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40010000 	.word	0x40010000
 8001540:	48000400 	.word	0x48000400
 8001544:	48000800 	.word	0x48000800
 8001548:	48000c00 	.word	0x48000c00
 800154c:	48001000 	.word	0x48001000
 8001550:	40010400 	.word	0x40010400

08001554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
 8001560:	4613      	mov	r3, r2
 8001562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001570:	e002      	b.n	8001578 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e081      	b.n	800169a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d106      	bne.n	80015b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff f9a0 	bl	80008f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2224      	movs	r2, #36	@ 0x24
 80015b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0201 	bic.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d107      	bne.n	80015fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	e006      	b.n	800160c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800160a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d104      	bne.n	800161e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800161c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800162c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001630:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001640:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69d9      	ldr	r1, [r3, #28]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1a      	ldr	r2, [r3, #32]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2220      	movs	r2, #32
 8001686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b20      	cmp	r3, #32
 80016b6:	d138      	bne.n	800172a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e032      	b.n	800172c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2224      	movs	r2, #36	@ 0x24
 80016d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0201 	bic.w	r2, r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80016f4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6819      	ldr	r1, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0201 	orr.w	r2, r2, #1
 8001714:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2220      	movs	r2, #32
 800171a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800172a:	2302      	movs	r3, #2
  }
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b20      	cmp	r3, #32
 800174c:	d139      	bne.n	80017c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001758:	2302      	movs	r3, #2
 800175a:	e033      	b.n	80017c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2224      	movs	r2, #36	@ 0x24
 8001768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800178a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4313      	orrs	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0201 	orr.w	r2, r2, #1
 80017ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2220      	movs	r2, #32
 80017b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	e000      	b.n	80017c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017c2:	2302      	movs	r3, #2
  }
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d2:	b08b      	sub	sp, #44	@ 0x2c
 80017d4:	af06      	add	r7, sp, #24
 80017d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e0c4      	b.n	800196c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d106      	bne.n	80017fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff f91c 	bl	8000a34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2203      	movs	r2, #3
 8001800:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f002 f8ef 	bl	80039ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
 8001812:	e040      	b.n	8001896 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	440b      	add	r3, r1
 8001824:	3301      	adds	r3, #1
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	3303      	adds	r3, #3
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	3338      	adds	r3, #56	@ 0x38
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	333c      	adds	r3, #60	@ 0x3c
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	3340      	adds	r3, #64	@ 0x40
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	3301      	adds	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
 8001896:	7bfa      	ldrb	r2, [r7, #15]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	429a      	cmp	r2, r3
 800189e:	d3b9      	bcc.n	8001814 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e044      	b.n	8001930 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	440b      	add	r3, r1
 80018b4:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	3301      	adds	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	7bfa      	ldrb	r2, [r7, #15]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	d3b5      	bcc.n	80018a6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	687e      	ldr	r6, [r7, #4]
 8001942:	466d      	mov	r5, sp
 8001944:	f106 0410 	add.w	r4, r6, #16
 8001948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800194a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800194c:	6823      	ldr	r3, [r4, #0]
 800194e:	602b      	str	r3, [r5, #0]
 8001950:	1d33      	adds	r3, r6, #4
 8001952:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001954:	6838      	ldr	r0, [r7, #0]
 8001956:	f002 f864 	bl	8003a22 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800197a:	af00      	add	r7, sp, #0
 800197c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001980:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001984:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800198a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	f001 b823 	b.w	80029e0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800199e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 817d 	beq.w	8001caa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019b0:	4bbc      	ldr	r3, [pc, #752]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d00c      	beq.n	80019d6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019bc:	4bb9      	ldr	r3, [pc, #740]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d15c      	bne.n	8001a82 <HAL_RCC_OscConfig+0x10e>
 80019c8:	4bb6      	ldr	r3, [pc, #728]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019d4:	d155      	bne.n	8001a82 <HAL_RCC_OscConfig+0x10e>
 80019d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019da:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	095b      	lsrs	r3, r3, #5
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d102      	bne.n	8001a08 <HAL_RCC_OscConfig+0x94>
 8001a02:	4ba8      	ldr	r3, [pc, #672]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	e015      	b.n	8001a34 <HAL_RCC_OscConfig+0xc0>
 8001a08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a0c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001a1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a20:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001a24:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001a28:	fa93 f3a3 	rbit	r3, r3
 8001a2c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001a30:	4b9c      	ldr	r3, [pc, #624]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a38:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001a3c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001a40:	fa92 f2a2 	rbit	r2, r2
 8001a44:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001a48:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001a4c:	fab2 f282 	clz	r2, r2
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	f042 0220 	orr.w	r2, r2, #32
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	f002 021f 	and.w	r2, r2, #31
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 811f 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x334>
 8001a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f040 8116 	bne.w	8001ca8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	f000 bfaf 	b.w	80029e0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x12e>
 8001a94:	4b83      	ldr	r3, [pc, #524]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a82      	ldr	r2, [pc, #520]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001a9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	e036      	b.n	8001b10 <HAL_RCC_OscConfig+0x19c>
 8001aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10c      	bne.n	8001acc <HAL_RCC_OscConfig+0x158>
 8001ab2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a7b      	ldr	r2, [pc, #492]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001ab8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	4b79      	ldr	r3, [pc, #484]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a78      	ldr	r2, [pc, #480]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001ac4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	e021      	b.n	8001b10 <HAL_RCC_OscConfig+0x19c>
 8001acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x184>
 8001ade:	4b71      	ldr	r3, [pc, #452]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a70      	ldr	r2, [pc, #448]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001ae4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b6e      	ldr	r3, [pc, #440]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a6d      	ldr	r2, [pc, #436]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e00b      	b.n	8001b10 <HAL_RCC_OscConfig+0x19c>
 8001af8:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a69      	ldr	r2, [pc, #420]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001afe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b67      	ldr	r3, [pc, #412]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a66      	ldr	r2, [pc, #408]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001b0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b0e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b10:	4b64      	ldr	r3, [pc, #400]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b14:	f023 020f 	bic.w	r2, r3, #15
 8001b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	495f      	ldr	r1, [pc, #380]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d059      	beq.n	8001bee <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff f99f 	bl	8000e7c <HAL_GetTick>
 8001b3e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff f99a 	bl	8000e7c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b64      	cmp	r3, #100	@ 0x64
 8001b52:	d902      	bls.n	8001b5a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	f000 bf43 	b.w	80029e0 <HAL_RCC_OscConfig+0x106c>
 8001b5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b5e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001b6e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	095b      	lsrs	r3, r3, #5
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d102      	bne.n	8001b8c <HAL_RCC_OscConfig+0x218>
 8001b86:	4b47      	ldr	r3, [pc, #284]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	e015      	b.n	8001bb8 <HAL_RCC_OscConfig+0x244>
 8001b8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b90:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001ba0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ba4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001ba8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bbc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001bc0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001bc4:	fa92 f2a2 	rbit	r2, r2
 8001bc8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001bcc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001bd0:	fab2 f282 	clz	r2, r2
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	f042 0220 	orr.w	r2, r2, #32
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	f002 021f 	and.w	r2, r2, #31
 8001be0:	2101      	movs	r1, #1
 8001be2:	fa01 f202 	lsl.w	r2, r1, r2
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0ab      	beq.n	8001b44 <HAL_RCC_OscConfig+0x1d0>
 8001bec:	e05d      	b.n	8001caa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7ff f945 	bl	8000e7c <HAL_GetTick>
 8001bf2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7ff f940 	bl	8000e7c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b64      	cmp	r3, #100	@ 0x64
 8001c06:	d902      	bls.n	8001c0e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	f000 bee9 	b.w	80029e0 <HAL_RCC_OscConfig+0x106c>
 8001c0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c12:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001c22:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	095b      	lsrs	r3, r3, #5
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d102      	bne.n	8001c40 <HAL_RCC_OscConfig+0x2cc>
 8001c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	e015      	b.n	8001c6c <HAL_RCC_OscConfig+0x2f8>
 8001c40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c44:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001c4c:	fa93 f3a3 	rbit	r3, r3
 8001c50:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001c54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c58:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001c5c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001c68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <HAL_RCC_OscConfig+0x330>)
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c70:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001c74:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001c78:	fa92 f2a2 	rbit	r2, r2
 8001c7c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001c80:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c84:	fab2 f282 	clz	r2, r2
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	f042 0220 	orr.w	r2, r2, #32
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	f002 021f 	and.w	r2, r2, #31
 8001c94:	2101      	movs	r1, #1
 8001c96:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1ab      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x284>
 8001ca0:	e003      	b.n	8001caa <HAL_RCC_OscConfig+0x336>
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 817d 	beq.w	8001fba <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cc0:	4ba6      	ldr	r3, [pc, #664]	@ (8001f5c <HAL_RCC_OscConfig+0x5e8>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00b      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ccc:	4ba3      	ldr	r3, [pc, #652]	@ (8001f5c <HAL_RCC_OscConfig+0x5e8>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d172      	bne.n	8001dbe <HAL_RCC_OscConfig+0x44a>
 8001cd8:	4ba0      	ldr	r3, [pc, #640]	@ (8001f5c <HAL_RCC_OscConfig+0x5e8>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d16c      	bne.n	8001dbe <HAL_RCC_OscConfig+0x44a>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001cf6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	095b      	lsrs	r3, r3, #5
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d102      	bne.n	8001d14 <HAL_RCC_OscConfig+0x3a0>
 8001d0e:	4b93      	ldr	r3, [pc, #588]	@ (8001f5c <HAL_RCC_OscConfig+0x5e8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	e013      	b.n	8001d3c <HAL_RCC_OscConfig+0x3c8>
 8001d14:	2302      	movs	r3, #2
 8001d16:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001d26:	2302      	movs	r3, #2
 8001d28:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001d2c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001d38:	4b88      	ldr	r3, [pc, #544]	@ (8001f5c <HAL_RCC_OscConfig+0x5e8>)
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001d42:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001d46:	fa92 f2a2 	rbit	r2, r2
 8001d4a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001d4e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001d52:	fab2 f282 	clz	r2, r2
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	f042 0220 	orr.w	r2, r2, #32
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	f002 021f 	and.w	r2, r2, #31
 8001d62:	2101      	movs	r1, #1
 8001d64:	fa01 f202 	lsl.w	r2, r1, r2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00a      	beq.n	8001d84 <HAL_RCC_OscConfig+0x410>
 8001d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d002      	beq.n	8001d84 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	f000 be2e 	b.w	80029e0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d84:	4b75      	ldr	r3, [pc, #468]	@ (8001f5c <HAL_RCC_OscConfig+0x5e8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	21f8      	movs	r1, #248	@ 0xf8
 8001d9a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001da2:	fa91 f1a1 	rbit	r1, r1
 8001da6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001daa:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001dae:	fab1 f181 	clz	r1, r1
 8001db2:	b2c9      	uxtb	r1, r1
 8001db4:	408b      	lsls	r3, r1
 8001db6:	4969      	ldr	r1, [pc, #420]	@ (8001f5c <HAL_RCC_OscConfig+0x5e8>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbc:	e0fd      	b.n	8001fba <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8088 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x56c>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001de2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001df0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	461a      	mov	r2, r3
 8001df8:	2301      	movs	r3, #1
 8001dfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff f83e 	bl	8000e7c <HAL_GetTick>
 8001e00:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e06:	f7ff f839 	bl	8000e7c <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d902      	bls.n	8001e1c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	f000 bde2 	b.w	80029e0 <HAL_RCC_OscConfig+0x106c>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001e2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	095b      	lsrs	r3, r3, #5
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d102      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4d8>
 8001e46:	4b45      	ldr	r3, [pc, #276]	@ (8001f5c <HAL_RCC_OscConfig+0x5e8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	e013      	b.n	8001e74 <HAL_RCC_OscConfig+0x500>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001e64:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001e68:	fa93 f3a3 	rbit	r3, r3
 8001e6c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001e70:	4b3a      	ldr	r3, [pc, #232]	@ (8001f5c <HAL_RCC_OscConfig+0x5e8>)
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	2202      	movs	r2, #2
 8001e76:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001e7a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001e7e:	fa92 f2a2 	rbit	r2, r2
 8001e82:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001e86:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001e8a:	fab2 f282 	clz	r2, r2
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	f042 0220 	orr.w	r2, r2, #32
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	f002 021f 	and.w	r2, r2, #31
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0af      	beq.n	8001e06 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f5c <HAL_RCC_OscConfig+0x5e8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	21f8      	movs	r1, #248	@ 0xf8
 8001ebc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001ec4:	fa91 f1a1 	rbit	r1, r1
 8001ec8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001ecc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001ed0:	fab1 f181 	clz	r1, r1
 8001ed4:	b2c9      	uxtb	r1, r1
 8001ed6:	408b      	lsls	r3, r1
 8001ed8:	4920      	ldr	r1, [pc, #128]	@ (8001f5c <HAL_RCC_OscConfig+0x5e8>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]
 8001ede:	e06c      	b.n	8001fba <HAL_RCC_OscConfig+0x646>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001ef2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f00:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	461a      	mov	r2, r3
 8001f08:	2300      	movs	r3, #0
 8001f0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7fe ffb6 	bl	8000e7c <HAL_GetTick>
 8001f10:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f16:	f7fe ffb1 	bl	8000e7c <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d902      	bls.n	8001f2c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	f000 bd5a 	b.w	80029e0 <HAL_RCC_OscConfig+0x106c>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	095b      	lsrs	r3, r3, #5
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d104      	bne.n	8001f60 <HAL_RCC_OscConfig+0x5ec>
 8001f56:	4b01      	ldr	r3, [pc, #4]	@ (8001f5c <HAL_RCC_OscConfig+0x5e8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	e015      	b.n	8001f88 <HAL_RCC_OscConfig+0x614>
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	2302      	movs	r3, #2
 8001f62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001f72:	2302      	movs	r3, #2
 8001f74:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001f78:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001f84:	4bc8      	ldr	r3, [pc, #800]	@ (80022a8 <HAL_RCC_OscConfig+0x934>)
 8001f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f88:	2202      	movs	r2, #2
 8001f8a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001f8e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001f92:	fa92 f2a2 	rbit	r2, r2
 8001f96:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001f9a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001f9e:	fab2 f282 	clz	r2, r2
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	f042 0220 	orr.w	r2, r2, #32
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	f002 021f 	and.w	r2, r2, #31
 8001fae:	2101      	movs	r1, #1
 8001fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1ad      	bne.n	8001f16 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8110 	beq.w	80021f0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d079      	beq.n	80020d4 <HAL_RCC_OscConfig+0x760>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4bab      	ldr	r3, [pc, #684]	@ (80022ac <HAL_RCC_OscConfig+0x938>)
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	461a      	mov	r2, r3
 8002006:	2301      	movs	r3, #1
 8002008:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7fe ff37 	bl	8000e7c <HAL_GetTick>
 800200e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002012:	e00a      	b.n	800202a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002014:	f7fe ff32 	bl	8000e7c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d902      	bls.n	800202a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	f000 bcdb 	b.w	80029e0 <HAL_RCC_OscConfig+0x106c>
 800202a:	2302      	movs	r3, #2
 800202c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800203c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002040:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002044:	2202      	movs	r2, #2
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	fa93 f2a3 	rbit	r2, r3
 8002056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002068:	2202      	movs	r2, #2
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	fa93 f2a3 	rbit	r2, r3
 800207a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002082:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002084:	4b88      	ldr	r3, [pc, #544]	@ (80022a8 <HAL_RCC_OscConfig+0x934>)
 8002086:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002090:	2102      	movs	r1, #2
 8002092:	6019      	str	r1, [r3, #0]
 8002094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002098:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	fa93 f1a3 	rbit	r1, r3
 80020a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80020aa:	6019      	str	r1, [r3, #0]
  return result;
 80020ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	2101      	movs	r1, #1
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0a0      	beq.n	8002014 <HAL_RCC_OscConfig+0x6a0>
 80020d2:	e08d      	b.n	80021f0 <HAL_RCC_OscConfig+0x87c>
 80020d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020dc:	2201      	movs	r2, #1
 80020de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	fa93 f2a3 	rbit	r2, r3
 80020ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80020f6:	601a      	str	r2, [r3, #0]
  return result;
 80020f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002100:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	4b68      	ldr	r3, [pc, #416]	@ (80022ac <HAL_RCC_OscConfig+0x938>)
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	461a      	mov	r2, r3
 8002112:	2300      	movs	r3, #0
 8002114:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002116:	f7fe feb1 	bl	8000e7c <HAL_GetTick>
 800211a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211e:	e00a      	b.n	8002136 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002120:	f7fe feac 	bl	8000e7c <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d902      	bls.n	8002136 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	f000 bc55 	b.w	80029e0 <HAL_RCC_OscConfig+0x106c>
 8002136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800213e:	2202      	movs	r2, #2
 8002140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002146:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800215e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002162:	2202      	movs	r2, #2
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	fa93 f2a3 	rbit	r2, r3
 8002174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002178:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002182:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002186:	2202      	movs	r2, #2
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	fa93 f2a3 	rbit	r2, r3
 8002198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80021a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a2:	4b41      	ldr	r3, [pc, #260]	@ (80022a8 <HAL_RCC_OscConfig+0x934>)
 80021a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021aa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80021ae:	2102      	movs	r1, #2
 80021b0:	6019      	str	r1, [r3, #0]
 80021b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	fa93 f1a3 	rbit	r1, r3
 80021c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021c8:	6019      	str	r1, [r3, #0]
  return result;
 80021ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	fab3 f383 	clz	r3, r3
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d197      	bne.n	8002120 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 81a1 	beq.w	8002548 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220c:	4b26      	ldr	r3, [pc, #152]	@ (80022a8 <HAL_RCC_OscConfig+0x934>)
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d116      	bne.n	8002246 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002218:	4b23      	ldr	r3, [pc, #140]	@ (80022a8 <HAL_RCC_OscConfig+0x934>)
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	4a22      	ldr	r2, [pc, #136]	@ (80022a8 <HAL_RCC_OscConfig+0x934>)
 800221e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002222:	61d3      	str	r3, [r2, #28]
 8002224:	4b20      	ldr	r3, [pc, #128]	@ (80022a8 <HAL_RCC_OscConfig+0x934>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800222c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002230:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800223e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002240:	2301      	movs	r3, #1
 8002242:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <HAL_RCC_OscConfig+0x93c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d11a      	bne.n	8002288 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002252:	4b17      	ldr	r3, [pc, #92]	@ (80022b0 <HAL_RCC_OscConfig+0x93c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a16      	ldr	r2, [pc, #88]	@ (80022b0 <HAL_RCC_OscConfig+0x93c>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800225c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7fe fe0d 	bl	8000e7c <HAL_GetTick>
 8002262:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002266:	e009      	b.n	800227c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002268:	f7fe fe08 	bl	8000e7c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b64      	cmp	r3, #100	@ 0x64
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e3b1      	b.n	80029e0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227c:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <HAL_RCC_OscConfig+0x93c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0ef      	beq.n	8002268 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d10d      	bne.n	80022b4 <HAL_RCC_OscConfig+0x940>
 8002298:	4b03      	ldr	r3, [pc, #12]	@ (80022a8 <HAL_RCC_OscConfig+0x934>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a02      	ldr	r2, [pc, #8]	@ (80022a8 <HAL_RCC_OscConfig+0x934>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	e03c      	b.n	8002320 <HAL_RCC_OscConfig+0x9ac>
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	10908120 	.word	0x10908120
 80022b0:	40007000 	.word	0x40007000
 80022b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10c      	bne.n	80022de <HAL_RCC_OscConfig+0x96a>
 80022c4:	4bc1      	ldr	r3, [pc, #772]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4ac0      	ldr	r2, [pc, #768]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	6213      	str	r3, [r2, #32]
 80022d0:	4bbe      	ldr	r3, [pc, #760]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4abd      	ldr	r2, [pc, #756]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 80022d6:	f023 0304 	bic.w	r3, r3, #4
 80022da:	6213      	str	r3, [r2, #32]
 80022dc:	e020      	b.n	8002320 <HAL_RCC_OscConfig+0x9ac>
 80022de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x994>
 80022ee:	4bb7      	ldr	r3, [pc, #732]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4ab6      	ldr	r2, [pc, #728]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	6213      	str	r3, [r2, #32]
 80022fa:	4bb4      	ldr	r3, [pc, #720]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4ab3      	ldr	r2, [pc, #716]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6213      	str	r3, [r2, #32]
 8002306:	e00b      	b.n	8002320 <HAL_RCC_OscConfig+0x9ac>
 8002308:	4bb0      	ldr	r3, [pc, #704]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4aaf      	ldr	r2, [pc, #700]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	6213      	str	r3, [r2, #32]
 8002314:	4bad      	ldr	r3, [pc, #692]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4aac      	ldr	r2, [pc, #688]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 800231a:	f023 0304 	bic.w	r3, r3, #4
 800231e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002324:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 8081 	beq.w	8002434 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002332:	f7fe fda3 	bl	8000e7c <HAL_GetTick>
 8002336:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233a:	e00b      	b.n	8002354 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7fe fd9e 	bl	8000e7c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e345      	b.n	80029e0 <HAL_RCC_OscConfig+0x106c>
 8002354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002358:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800235c:	2202      	movs	r2, #2
 800235e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002364:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	fa93 f2a3 	rbit	r2, r3
 800236e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002372:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002380:	2202      	movs	r2, #2
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002388:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	fa93 f2a3 	rbit	r2, r3
 8002392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002396:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800239a:	601a      	str	r2, [r3, #0]
  return result;
 800239c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80023a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d102      	bne.n	80023c0 <HAL_RCC_OscConfig+0xa4c>
 80023ba:	4b84      	ldr	r3, [pc, #528]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	e013      	b.n	80023e8 <HAL_RCC_OscConfig+0xa74>
 80023c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80023c8:	2202      	movs	r2, #2
 80023ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	fa93 f2a3 	rbit	r2, r3
 80023da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023de:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	4b79      	ldr	r3, [pc, #484]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023ec:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80023f0:	2102      	movs	r1, #2
 80023f2:	6011      	str	r1, [r2, #0]
 80023f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023f8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	fa92 f1a2 	rbit	r1, r2
 8002402:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002406:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800240a:	6011      	str	r1, [r2, #0]
  return result;
 800240c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002410:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	fab2 f282 	clz	r2, r2
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	f002 021f 	and.w	r2, r2, #31
 8002426:	2101      	movs	r1, #1
 8002428:	fa01 f202 	lsl.w	r2, r1, r2
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d084      	beq.n	800233c <HAL_RCC_OscConfig+0x9c8>
 8002432:	e07f      	b.n	8002534 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002434:	f7fe fd22 	bl	8000e7c <HAL_GetTick>
 8002438:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	e00b      	b.n	8002456 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7fe fd1d 	bl	8000e7c <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e2c4      	b.n	80029e0 <HAL_RCC_OscConfig+0x106c>
 8002456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800245e:	2202      	movs	r2, #2
 8002460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002466:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	fa93 f2a3 	rbit	r2, r3
 8002470:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002474:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002482:	2202      	movs	r2, #2
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	fa93 f2a3 	rbit	r2, r3
 8002494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002498:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800249c:	601a      	str	r2, [r3, #0]
  return result;
 800249e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80024a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f043 0302 	orr.w	r3, r3, #2
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d102      	bne.n	80024c2 <HAL_RCC_OscConfig+0xb4e>
 80024bc:	4b43      	ldr	r3, [pc, #268]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	e013      	b.n	80024ea <HAL_RCC_OscConfig+0xb76>
 80024c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80024ca:	2202      	movs	r2, #2
 80024cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	fa93 f2a3 	rbit	r2, r3
 80024dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	4b39      	ldr	r3, [pc, #228]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024ee:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80024f2:	2102      	movs	r1, #2
 80024f4:	6011      	str	r1, [r2, #0]
 80024f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024fa:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	fa92 f1a2 	rbit	r1, r2
 8002504:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002508:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800250c:	6011      	str	r1, [r2, #0]
  return result;
 800250e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002512:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	fab2 f282 	clz	r2, r2
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	f002 021f 	and.w	r2, r2, #31
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f202 	lsl.w	r2, r1, r2
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d184      	bne.n	800243e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002534:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002538:	2b01      	cmp	r3, #1
 800253a:	d105      	bne.n	8002548 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253c:	4b23      	ldr	r3, [pc, #140]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	4a22      	ldr	r2, [pc, #136]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 8002542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002546:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 8242 	beq.w	80029de <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800255a:	4b1c      	ldr	r3, [pc, #112]	@ (80025cc <HAL_RCC_OscConfig+0xc58>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b08      	cmp	r3, #8
 8002564:	f000 8213 	beq.w	800298e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	2b02      	cmp	r3, #2
 8002576:	f040 8162 	bne.w	800283e <HAL_RCC_OscConfig+0xeca>
 800257a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002582:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002586:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	fa93 f2a3 	rbit	r2, r3
 8002596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800259e:	601a      	str	r2, [r3, #0]
  return result;
 80025a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80025a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	461a      	mov	r2, r3
 80025bc:	2300      	movs	r3, #0
 80025be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fe fc5c 	bl	8000e7c <HAL_GetTick>
 80025c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c8:	e00c      	b.n	80025e4 <HAL_RCC_OscConfig+0xc70>
 80025ca:	bf00      	nop
 80025cc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d0:	f7fe fc54 	bl	8000e7c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e1fd      	b.n	80029e0 <HAL_RCC_OscConfig+0x106c>
 80025e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80025ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	fa93 f2a3 	rbit	r2, r3
 8002600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002604:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002608:	601a      	str	r2, [r3, #0]
  return result;
 800260a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002612:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	fab3 f383 	clz	r3, r3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d102      	bne.n	800262e <HAL_RCC_OscConfig+0xcba>
 8002628:	4bb0      	ldr	r3, [pc, #704]	@ (80028ec <HAL_RCC_OscConfig+0xf78>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	e027      	b.n	800267e <HAL_RCC_OscConfig+0xd0a>
 800262e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002632:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002636:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800263a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002640:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	fa93 f2a3 	rbit	r2, r3
 800264a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002658:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800265c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002666:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	fa93 f2a3 	rbit	r2, r3
 8002670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002674:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	4b9c      	ldr	r3, [pc, #624]	@ (80028ec <HAL_RCC_OscConfig+0xf78>)
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002682:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002686:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800268a:	6011      	str	r1, [r2, #0]
 800268c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002690:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	fa92 f1a2 	rbit	r1, r2
 800269a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800269e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80026a2:	6011      	str	r1, [r2, #0]
  return result;
 80026a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026a8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	fab2 f282 	clz	r2, r2
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	f042 0220 	orr.w	r2, r2, #32
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	f002 021f 	and.w	r2, r2, #31
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f202 	lsl.w	r2, r1, r2
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d182      	bne.n	80025d0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ca:	4b88      	ldr	r3, [pc, #544]	@ (80028ec <HAL_RCC_OscConfig+0xf78>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80026de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	430b      	orrs	r3, r1
 80026ec:	497f      	ldr	r1, [pc, #508]	@ (80028ec <HAL_RCC_OscConfig+0xf78>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
 80026f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80026fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002704:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	fa93 f2a3 	rbit	r2, r3
 800270e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002712:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002716:	601a      	str	r2, [r3, #0]
  return result;
 8002718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002720:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800272c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	461a      	mov	r2, r3
 8002734:	2301      	movs	r3, #1
 8002736:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fe fba0 	bl	8000e7c <HAL_GetTick>
 800273c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002740:	e009      	b.n	8002756 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002742:	f7fe fb9b 	bl	8000e7c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e144      	b.n	80029e0 <HAL_RCC_OscConfig+0x106c>
 8002756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800275e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002768:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	fa93 f2a3 	rbit	r2, r3
 8002772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002776:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800277a:	601a      	str	r2, [r3, #0]
  return result;
 800277c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002780:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002784:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	095b      	lsrs	r3, r3, #5
 800278e:	b2db      	uxtb	r3, r3
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d102      	bne.n	80027a0 <HAL_RCC_OscConfig+0xe2c>
 800279a:	4b54      	ldr	r3, [pc, #336]	@ (80028ec <HAL_RCC_OscConfig+0xf78>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	e027      	b.n	80027f0 <HAL_RCC_OscConfig+0xe7c>
 80027a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80027a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	fa93 f2a3 	rbit	r2, r3
 80027bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ca:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80027ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	fa93 f2a3 	rbit	r2, r3
 80027e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	4b3f      	ldr	r3, [pc, #252]	@ (80028ec <HAL_RCC_OscConfig+0xf78>)
 80027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027f4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80027f8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027fc:	6011      	str	r1, [r2, #0]
 80027fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002802:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	fa92 f1a2 	rbit	r1, r2
 800280c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002810:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002814:	6011      	str	r1, [r2, #0]
  return result;
 8002816:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800281a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	fab2 f282 	clz	r2, r2
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	f042 0220 	orr.w	r2, r2, #32
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	f002 021f 	and.w	r2, r2, #31
 8002830:	2101      	movs	r1, #1
 8002832:	fa01 f202 	lsl.w	r2, r1, r2
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d082      	beq.n	8002742 <HAL_RCC_OscConfig+0xdce>
 800283c:	e0cf      	b.n	80029de <HAL_RCC_OscConfig+0x106a>
 800283e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002842:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002846:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800284a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002850:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002862:	601a      	str	r2, [r3, #0]
  return result;
 8002864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002868:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800286c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002878:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	461a      	mov	r2, r3
 8002880:	2300      	movs	r3, #0
 8002882:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe fafa 	bl	8000e7c <HAL_GetTick>
 8002888:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288c:	e009      	b.n	80028a2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288e:	f7fe faf5 	bl	8000e7c <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e09e      	b.n	80029e0 <HAL_RCC_OscConfig+0x106c>
 80028a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80028aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	fa93 f2a3 	rbit	r2, r3
 80028be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80028c6:	601a      	str	r2, [r3, #0]
  return result;
 80028c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028cc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80028d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d104      	bne.n	80028f0 <HAL_RCC_OscConfig+0xf7c>
 80028e6:	4b01      	ldr	r3, [pc, #4]	@ (80028ec <HAL_RCC_OscConfig+0xf78>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	e029      	b.n	8002940 <HAL_RCC_OscConfig+0xfcc>
 80028ec:	40021000 	.word	0x40021000
 80028f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80028f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002902:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	fa93 f2a3 	rbit	r2, r3
 800290c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002910:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800291e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002928:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	fa93 f2a3 	rbit	r2, r3
 8002932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002936:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	4b2b      	ldr	r3, [pc, #172]	@ (80029ec <HAL_RCC_OscConfig+0x1078>)
 800293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002940:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002944:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002948:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800294c:	6011      	str	r1, [r2, #0]
 800294e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002952:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	fa92 f1a2 	rbit	r1, r2
 800295c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002960:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002964:	6011      	str	r1, [r2, #0]
  return result;
 8002966:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800296a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	fab2 f282 	clz	r2, r2
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	f042 0220 	orr.w	r2, r2, #32
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	f002 021f 	and.w	r2, r2, #31
 8002980:	2101      	movs	r1, #1
 8002982:	fa01 f202 	lsl.w	r2, r1, r2
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d180      	bne.n	800288e <HAL_RCC_OscConfig+0xf1a>
 800298c:	e027      	b.n	80029de <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800298e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002992:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e01e      	b.n	80029e0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029a2:	4b12      	ldr	r3, [pc, #72]	@ (80029ec <HAL_RCC_OscConfig+0x1078>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80029ae:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d10b      	bne.n	80029da <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80029c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80029c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000

080029f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b09e      	sub	sp, #120	@ 0x78
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e162      	b.n	8002cce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a08:	4b90      	ldr	r3, [pc, #576]	@ (8002c4c <HAL_RCC_ClockConfig+0x25c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d910      	bls.n	8002a38 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b8d      	ldr	r3, [pc, #564]	@ (8002c4c <HAL_RCC_ClockConfig+0x25c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 0207 	bic.w	r2, r3, #7
 8002a1e:	498b      	ldr	r1, [pc, #556]	@ (8002c4c <HAL_RCC_ClockConfig+0x25c>)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b89      	ldr	r3, [pc, #548]	@ (8002c4c <HAL_RCC_ClockConfig+0x25c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e14a      	b.n	8002cce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a44:	4b82      	ldr	r3, [pc, #520]	@ (8002c50 <HAL_RCC_ClockConfig+0x260>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	497f      	ldr	r1, [pc, #508]	@ (8002c50 <HAL_RCC_ClockConfig+0x260>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 80dc 	beq.w	8002c1c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d13c      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xf6>
 8002a6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a70:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002a7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7c:	fab3 f383 	clz	r3, r3
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d102      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xa6>
 8002a90:	4b6f      	ldr	r3, [pc, #444]	@ (8002c50 <HAL_RCC_ClockConfig+0x260>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	e00f      	b.n	8002ab6 <HAL_RCC_ClockConfig+0xc6>
 8002a96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a9a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002aa4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aa8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002aaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002aac:	fa93 f3a3 	rbit	r3, r3
 8002ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ab2:	4b67      	ldr	r3, [pc, #412]	@ (8002c50 <HAL_RCC_ClockConfig+0x260>)
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002aba:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002abc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002abe:	fa92 f2a2 	rbit	r2, r2
 8002ac2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002ac4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002ac6:	fab2 f282 	clz	r2, r2
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	f042 0220 	orr.w	r2, r2, #32
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	f002 021f 	and.w	r2, r2, #31
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d17b      	bne.n	8002bda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0f3      	b.n	8002cce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d13c      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x178>
 8002aee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002af2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	095b      	lsrs	r3, r3, #5
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d102      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x128>
 8002b12:	4b4f      	ldr	r3, [pc, #316]	@ (8002c50 <HAL_RCC_ClockConfig+0x260>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	e00f      	b.n	8002b38 <HAL_RCC_ClockConfig+0x148>
 8002b18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b34:	4b46      	ldr	r3, [pc, #280]	@ (8002c50 <HAL_RCC_ClockConfig+0x260>)
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b3c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002b3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b40:	fa92 f2a2 	rbit	r2, r2
 8002b44:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002b46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b48:	fab2 f282 	clz	r2, r2
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	f042 0220 	orr.w	r2, r2, #32
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	f002 021f 	and.w	r2, r2, #31
 8002b58:	2101      	movs	r1, #1
 8002b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d13a      	bne.n	8002bda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0b2      	b.n	8002cce <HAL_RCC_ClockConfig+0x2de>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d102      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x1a0>
 8002b8a:	4b31      	ldr	r3, [pc, #196]	@ (8002c50 <HAL_RCC_ClockConfig+0x260>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	e00d      	b.n	8002bac <HAL_RCC_ClockConfig+0x1bc>
 8002b90:	2302      	movs	r3, #2
 8002b92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	623b      	str	r3, [r7, #32]
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	61fb      	str	r3, [r7, #28]
 8002ba8:	4b29      	ldr	r3, [pc, #164]	@ (8002c50 <HAL_RCC_ClockConfig+0x260>)
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	2202      	movs	r2, #2
 8002bae:	61ba      	str	r2, [r7, #24]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	fa92 f2a2 	rbit	r2, r2
 8002bb6:	617a      	str	r2, [r7, #20]
  return result;
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	fab2 f282 	clz	r2, r2
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	f042 0220 	orr.w	r2, r2, #32
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	f002 021f 	and.w	r2, r2, #31
 8002bca:	2101      	movs	r1, #1
 8002bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e079      	b.n	8002cce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bda:	4b1d      	ldr	r3, [pc, #116]	@ (8002c50 <HAL_RCC_ClockConfig+0x260>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f023 0203 	bic.w	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	491a      	ldr	r1, [pc, #104]	@ (8002c50 <HAL_RCC_ClockConfig+0x260>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bec:	f7fe f946 	bl	8000e7c <HAL_GetTick>
 8002bf0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf4:	f7fe f942 	bl	8000e7c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e061      	b.n	8002cce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <HAL_RCC_ClockConfig+0x260>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 020c 	and.w	r2, r3, #12
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d1eb      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c4c <HAL_RCC_ClockConfig+0x25c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d214      	bcs.n	8002c54 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b08      	ldr	r3, [pc, #32]	@ (8002c4c <HAL_RCC_ClockConfig+0x25c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 0207 	bic.w	r2, r3, #7
 8002c32:	4906      	ldr	r1, [pc, #24]	@ (8002c4c <HAL_RCC_ClockConfig+0x25c>)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b04      	ldr	r3, [pc, #16]	@ (8002c4c <HAL_RCC_ClockConfig+0x25c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e040      	b.n	8002cce <HAL_RCC_ClockConfig+0x2de>
 8002c4c:	40022000 	.word	0x40022000
 8002c50:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c60:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	491a      	ldr	r1, [pc, #104]	@ (8002cd8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7e:	4b16      	ldr	r3, [pc, #88]	@ (8002cd8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4912      	ldr	r1, [pc, #72]	@ (8002cd8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c92:	f000 f829 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8002c96:	4601      	mov	r1, r0
 8002c98:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ca0:	22f0      	movs	r2, #240	@ 0xf0
 8002ca2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	fa92 f2a2 	rbit	r2, r2
 8002caa:	60fa      	str	r2, [r7, #12]
  return result;
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	fab2 f282 	clz	r2, r2
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	40d3      	lsrs	r3, r2
 8002cb6:	4a09      	ldr	r2, [pc, #36]	@ (8002cdc <HAL_RCC_ClockConfig+0x2ec>)
 8002cb8:	5cd3      	ldrb	r3, [r2, r3]
 8002cba:	fa21 f303 	lsr.w	r3, r1, r3
 8002cbe:	4a08      	ldr	r2, [pc, #32]	@ (8002ce0 <HAL_RCC_ClockConfig+0x2f0>)
 8002cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002cc2:	4b08      	ldr	r3, [pc, #32]	@ (8002ce4 <HAL_RCC_ClockConfig+0x2f4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe f894 	bl	8000df4 <HAL_InitTick>
  
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3778      	adds	r7, #120	@ 0x78
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	08004fec 	.word	0x08004fec
 8002ce0:	20000040 	.word	0x20000040
 8002ce4:	20000044 	.word	0x20000044

08002ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b08b      	sub	sp, #44	@ 0x2c
 8002cec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d02:	4b29      	ldr	r3, [pc, #164]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d002      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x30>
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d003      	beq.n	8002d1e <HAL_RCC_GetSysClockFreq+0x36>
 8002d16:	e03c      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d18:	4b24      	ldr	r3, [pc, #144]	@ (8002dac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d1a:	623b      	str	r3, [r7, #32]
      break;
 8002d1c:	e03c      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002d24:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002d28:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	fa92 f2a2 	rbit	r2, r2
 8002d30:	607a      	str	r2, [r7, #4]
  return result;
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	fab2 f282 	clz	r2, r2
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	40d3      	lsrs	r3, r2
 8002d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
 8002d40:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d42:	4b19      	ldr	r3, [pc, #100]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	220f      	movs	r2, #15
 8002d4c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	fa92 f2a2 	rbit	r2, r2
 8002d54:	60fa      	str	r2, [r7, #12]
  return result;
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	fab2 f282 	clz	r2, r2
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	40d3      	lsrs	r3, r2
 8002d60:	4a14      	ldr	r2, [pc, #80]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d62:	5cd3      	ldrb	r3, [r2, r3]
 8002d64:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d70:	4a0e      	ldr	r2, [pc, #56]	@ (8002dac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d80:	e004      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	4a0c      	ldr	r2, [pc, #48]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	623b      	str	r3, [r7, #32]
      break;
 8002d90:	e002      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d92:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d94:	623b      	str	r3, [r7, #32]
      break;
 8002d96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d98:	6a3b      	ldr	r3, [r7, #32]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	372c      	adds	r7, #44	@ 0x2c
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	007a1200 	.word	0x007a1200
 8002db0:	08004ffc 	.word	0x08004ffc
 8002db4:	0800500c 	.word	0x0800500c
 8002db8:	003d0900 	.word	0x003d0900

08002dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b092      	sub	sp, #72	@ 0x48
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80d4 	beq.w	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de0:	4b4e      	ldr	r3, [pc, #312]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10e      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dec:	4b4b      	ldr	r3, [pc, #300]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	4a4a      	ldr	r2, [pc, #296]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002df6:	61d3      	str	r3, [r2, #28]
 8002df8:	4b48      	ldr	r3, [pc, #288]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e04:	2301      	movs	r3, #1
 8002e06:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0a:	4b45      	ldr	r3, [pc, #276]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d118      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e16:	4b42      	ldr	r3, [pc, #264]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a41      	ldr	r2, [pc, #260]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e22:	f7fe f82b 	bl	8000e7c <HAL_GetTick>
 8002e26:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	e008      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2a:	f7fe f827 	bl	8000e7c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b64      	cmp	r3, #100	@ 0x64
 8002e36:	d901      	bls.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e169      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3c:	4b38      	ldr	r3, [pc, #224]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e48:	4b34      	ldr	r3, [pc, #208]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8084 	beq.w	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d07c      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e68:	4b2c      	ldr	r3, [pc, #176]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e76:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b26      	ldr	r3, [pc, #152]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	461a      	mov	r2, r3
 8002e92:	2301      	movs	r3, #1
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b1d      	ldr	r3, [pc, #116]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002eba:	4a18      	ldr	r2, [pc, #96]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ebe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d04b      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eca:	f7fd ffd7 	bl	8000e7c <HAL_GetTick>
 8002ece:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fd ffd3 	bl	8000e7c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e113      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	623b      	str	r3, [r7, #32]
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	61fb      	str	r3, [r7, #28]
  return result;
 8002f00:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d108      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f16:	4b01      	ldr	r3, [pc, #4]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	e00d      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40007000 	.word	0x40007000
 8002f24:	10908100 	.word	0x10908100
 8002f28:	2302      	movs	r3, #2
 8002f2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	4b78      	ldr	r3, [pc, #480]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	2202      	movs	r2, #2
 8002f3a:	613a      	str	r2, [r7, #16]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	fa92 f2a2 	rbit	r2, r2
 8002f42:	60fa      	str	r2, [r7, #12]
  return result;
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	fab2 f282 	clz	r2, r2
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	f002 021f 	and.w	r2, r2, #31
 8002f56:	2101      	movs	r1, #1
 8002f58:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0b7      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f62:	4b6d      	ldr	r3, [pc, #436]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	496a      	ldr	r1, [pc, #424]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f74:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d105      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7c:	4b66      	ldr	r3, [pc, #408]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4a65      	ldr	r2, [pc, #404]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f94:	4b60      	ldr	r3, [pc, #384]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f98:	f023 0203 	bic.w	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	495d      	ldr	r1, [pc, #372]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fb2:	4b59      	ldr	r3, [pc, #356]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	4956      	ldr	r1, [pc, #344]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fd0:	4b51      	ldr	r3, [pc, #324]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	494e      	ldr	r1, [pc, #312]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fee:	4b4a      	ldr	r3, [pc, #296]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	f023 0210 	bic.w	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	4947      	ldr	r1, [pc, #284]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800300c:	4b42      	ldr	r3, [pc, #264]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003018:	493f      	ldr	r1, [pc, #252]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800302a:	4b3b      	ldr	r3, [pc, #236]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	f023 0220 	bic.w	r2, r3, #32
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	4938      	ldr	r1, [pc, #224]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003038:	4313      	orrs	r3, r2
 800303a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003048:	4b33      	ldr	r3, [pc, #204]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	4930      	ldr	r1, [pc, #192]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003056:	4313      	orrs	r3, r2
 8003058:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0310 	and.w	r3, r3, #16
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003066:	4b2c      	ldr	r3, [pc, #176]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	4929      	ldr	r1, [pc, #164]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003074:	4313      	orrs	r3, r2
 8003076:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003084:	4b24      	ldr	r3, [pc, #144]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003090:	4921      	ldr	r1, [pc, #132]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ae:	491a      	ldr	r1, [pc, #104]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80030c0:	4b15      	ldr	r3, [pc, #84]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c4:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030cc:	4912      	ldr	r1, [pc, #72]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030de:	4b0e      	ldr	r3, [pc, #56]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	490b      	ldr	r1, [pc, #44]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80030fc:	4b06      	ldr	r3, [pc, #24]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003100:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003108:	4903      	ldr	r1, [pc, #12]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800310a:	4313      	orrs	r3, r2
 800310c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3748      	adds	r7, #72	@ 0x48
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000

0800311c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e09d      	b.n	800326a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	2b00      	cmp	r3, #0
 8003134:	d108      	bne.n	8003148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800313e:	d009      	beq.n	8003154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	61da      	str	r2, [r3, #28]
 8003146:	e005      	b.n	8003154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd fc02 	bl	8000978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800318a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003194:	d902      	bls.n	800319c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	e002      	b.n	80031a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800319c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80031aa:	d007      	beq.n	80031bc <HAL_SPI_Init+0xa0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031b4:	d002      	beq.n	80031bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fe:	ea42 0103 	orr.w	r1, r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003206:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	0c1b      	lsrs	r3, r3, #16
 8003218:	f003 0204 	and.w	r2, r3, #4
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003238:	ea42 0103 	orr.w	r1, r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003258:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e01a      	b.n	80032ba <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800329a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7fd fbad 	bl	80009fc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b08a      	sub	sp, #40	@ 0x28
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032d0:	2301      	movs	r3, #1
 80032d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_SPI_TransmitReceive+0x26>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e20a      	b.n	80036fe <HAL_SPI_TransmitReceive+0x43c>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032f0:	f7fd fdc4 	bl	8000e7c <HAL_GetTick>
 80032f4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032fc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003304:	887b      	ldrh	r3, [r7, #2]
 8003306:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003308:	887b      	ldrh	r3, [r7, #2]
 800330a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800330c:	7efb      	ldrb	r3, [r7, #27]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d00e      	beq.n	8003330 <HAL_SPI_TransmitReceive+0x6e>
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003318:	d106      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x66>
 8003322:	7efb      	ldrb	r3, [r7, #27]
 8003324:	2b04      	cmp	r3, #4
 8003326:	d003      	beq.n	8003330 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003328:	2302      	movs	r3, #2
 800332a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800332e:	e1e0      	b.n	80036f2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_SPI_TransmitReceive+0x80>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <HAL_SPI_TransmitReceive+0x80>
 800333c:	887b      	ldrh	r3, [r7, #2]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d103      	bne.n	800334a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003348:	e1d3      	b.n	80036f2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b04      	cmp	r3, #4
 8003354:	d003      	beq.n	800335e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2205      	movs	r2, #5
 800335a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	887a      	ldrh	r2, [r7, #2]
 800336e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	887a      	ldrh	r2, [r7, #2]
 8003376:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	887a      	ldrh	r2, [r7, #2]
 8003384:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	887a      	ldrh	r2, [r7, #2]
 800338a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033a0:	d802      	bhi.n	80033a8 <HAL_SPI_TransmitReceive+0xe6>
 80033a2:	8a3b      	ldrh	r3, [r7, #16]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d908      	bls.n	80033ba <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033b6:	605a      	str	r2, [r3, #4]
 80033b8:	e007      	b.n	80033ca <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80033c8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d4:	2b40      	cmp	r3, #64	@ 0x40
 80033d6:	d007      	beq.n	80033e8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033f0:	f240 8081 	bls.w	80034f6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <HAL_SPI_TransmitReceive+0x140>
 80033fc:	8a7b      	ldrh	r3, [r7, #18]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d16d      	bne.n	80034de <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003406:	881a      	ldrh	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003412:	1c9a      	adds	r2, r3, #2
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003426:	e05a      	b.n	80034de <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b02      	cmp	r3, #2
 8003434:	d11b      	bne.n	800346e <HAL_SPI_TransmitReceive+0x1ac>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d016      	beq.n	800346e <HAL_SPI_TransmitReceive+0x1ac>
 8003440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003442:	2b01      	cmp	r3, #1
 8003444:	d113      	bne.n	800346e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344a:	881a      	ldrh	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003456:	1c9a      	adds	r2, r3, #2
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b01      	cmp	r3, #1
 800347a:	d11c      	bne.n	80034b6 <HAL_SPI_TransmitReceive+0x1f4>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d016      	beq.n	80034b6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	b292      	uxth	r2, r2
 8003494:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349a:	1c9a      	adds	r2, r3, #2
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034b2:	2301      	movs	r3, #1
 80034b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034b6:	f7fd fce1 	bl	8000e7c <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d80b      	bhi.n	80034de <HAL_SPI_TransmitReceive+0x21c>
 80034c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d007      	beq.n	80034de <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80034dc:	e109      	b.n	80036f2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d19f      	bne.n	8003428 <HAL_SPI_TransmitReceive+0x166>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d199      	bne.n	8003428 <HAL_SPI_TransmitReceive+0x166>
 80034f4:	e0e3      	b.n	80036be <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_SPI_TransmitReceive+0x244>
 80034fe:	8a7b      	ldrh	r3, [r7, #18]
 8003500:	2b01      	cmp	r3, #1
 8003502:	f040 80cf 	bne.w	80036a4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	d912      	bls.n	8003536 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003514:	881a      	ldrh	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003520:	1c9a      	adds	r2, r3, #2
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b02      	subs	r3, #2
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003534:	e0b6      	b.n	80036a4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	330c      	adds	r3, #12
 8003540:	7812      	ldrb	r2, [r2, #0]
 8003542:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800355c:	e0a2      	b.n	80036a4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b02      	cmp	r3, #2
 800356a:	d134      	bne.n	80035d6 <HAL_SPI_TransmitReceive+0x314>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d02f      	beq.n	80035d6 <HAL_SPI_TransmitReceive+0x314>
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	2b01      	cmp	r3, #1
 800357a:	d12c      	bne.n	80035d6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b01      	cmp	r3, #1
 8003584:	d912      	bls.n	80035ac <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358a:	881a      	ldrh	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003596:	1c9a      	adds	r2, r3, #2
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b02      	subs	r3, #2
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035aa:	e012      	b.n	80035d2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	330c      	adds	r3, #12
 80035b6:	7812      	ldrb	r2, [r2, #0]
 80035b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d148      	bne.n	8003676 <HAL_SPI_TransmitReceive+0x3b4>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d042      	beq.n	8003676 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d923      	bls.n	8003644 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	b292      	uxth	r2, r2
 8003608:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	1c9a      	adds	r2, r3, #2
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b02      	subs	r3, #2
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b01      	cmp	r3, #1
 8003630:	d81f      	bhi.n	8003672 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	e016      	b.n	8003672 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f103 020c 	add.w	r2, r3, #12
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003672:	2301      	movs	r3, #1
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003676:	f7fd fc01 	bl	8000e7c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003682:	429a      	cmp	r2, r3
 8003684:	d803      	bhi.n	800368e <HAL_SPI_TransmitReceive+0x3cc>
 8003686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d102      	bne.n	8003694 <HAL_SPI_TransmitReceive+0x3d2>
 800368e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003690:	2b00      	cmp	r3, #0
 8003692:	d107      	bne.n	80036a4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80036a2:	e026      	b.n	80036f2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f47f af57 	bne.w	800355e <HAL_SPI_TransmitReceive+0x29c>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f47f af50 	bne.w	800355e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f94c 	bl	8003960 <SPI_EndRxTxTransaction>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e8:	e003      	b.n	80036f2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80036fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3728      	adds	r7, #40	@ 0x28
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003714:	b2db      	uxtb	r3, r3
}
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	4613      	mov	r3, r2
 8003732:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003734:	f7fd fba2 	bl	8000e7c <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	4413      	add	r3, r2
 8003742:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003744:	f7fd fb9a 	bl	8000e7c <HAL_GetTick>
 8003748:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800374a:	4b39      	ldr	r3, [pc, #228]	@ (8003830 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	015b      	lsls	r3, r3, #5
 8003750:	0d1b      	lsrs	r3, r3, #20
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	fb02 f303 	mul.w	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800375a:	e054      	b.n	8003806 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003762:	d050      	beq.n	8003806 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003764:	f7fd fb8a 	bl	8000e7c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	429a      	cmp	r2, r3
 8003772:	d902      	bls.n	800377a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d13d      	bne.n	80037f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003788:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003792:	d111      	bne.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800379c:	d004      	beq.n	80037a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a6:	d107      	bne.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037c0:	d10f      	bne.n	80037e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e017      	b.n	8003826 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	3b01      	subs	r3, #1
 8003804:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4013      	ands	r3, r2
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	429a      	cmp	r2, r3
 8003814:	bf0c      	ite	eq
 8003816:	2301      	moveq	r3, #1
 8003818:	2300      	movne	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	461a      	mov	r2, r3
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	429a      	cmp	r2, r3
 8003822:	d19b      	bne.n	800375c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000040 	.word	0x20000040

08003834 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	@ 0x28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003842:	2300      	movs	r3, #0
 8003844:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003846:	f7fd fb19 	bl	8000e7c <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	4413      	add	r3, r2
 8003854:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003856:	f7fd fb11 	bl	8000e7c <HAL_GetTick>
 800385a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003864:	4b3d      	ldr	r3, [pc, #244]	@ (800395c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	00da      	lsls	r2, r3, #3
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	0d1b      	lsrs	r3, r3, #20
 8003874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003876:	fb02 f303 	mul.w	r3, r2, r3
 800387a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800387c:	e060      	b.n	8003940 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003884:	d107      	bne.n	8003896 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d104      	bne.n	8003896 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003894:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d050      	beq.n	8003940 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800389e:	f7fd faed 	bl	8000e7c <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d902      	bls.n	80038b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80038ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d13d      	bne.n	8003930 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038cc:	d111      	bne.n	80038f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038d6:	d004      	beq.n	80038e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038e0:	d107      	bne.n	80038f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038fa:	d10f      	bne.n	800391c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800391a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e010      	b.n	8003952 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	3b01      	subs	r3, #1
 800393e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	4013      	ands	r3, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	429a      	cmp	r2, r3
 800394e:	d196      	bne.n	800387e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3728      	adds	r7, #40	@ 0x28
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000040 	.word	0x20000040

08003960 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2200      	movs	r2, #0
 8003974:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f7ff ff5b 	bl	8003834 <SPI_WaitFifoStateUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003988:	f043 0220 	orr.w	r2, r3, #32
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e027      	b.n	80039e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2200      	movs	r2, #0
 800399c:	2180      	movs	r1, #128	@ 0x80
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f7ff fec0 	bl	8003724 <SPI_WaitFlagStateUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ae:	f043 0220 	orr.w	r2, r3, #32
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e014      	b.n	80039e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f7ff ff34 	bl	8003834 <SPI_WaitFifoStateUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d6:	f043 0220 	orr.w	r2, r3, #32
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e000      	b.n	80039e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039f4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80039f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a22:	b084      	sub	sp, #16
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	f107 0014 	add.w	r0, r7, #20
 8003a30:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	b004      	add	sp, #16
 8003a62:	4770      	bx	lr

08003a64 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8003a72:	2300      	movs	r3, #0
 8003a74:	703b      	strb	r3, [r7, #0]
 8003a76:	2300      	movs	r3, #0
 8003a78:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8003a7a:	4b51      	ldr	r3, [pc, #324]	@ (8003bc0 <BSP_GYRO_Init+0x15c>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	4798      	blx	r3
 8003a80:	4603      	mov	r3, r0
 8003a82:	2bd4      	cmp	r3, #212	@ 0xd4
 8003a84:	d005      	beq.n	8003a92 <BSP_GYRO_Init+0x2e>
 8003a86:	4b4e      	ldr	r3, [pc, #312]	@ (8003bc0 <BSP_GYRO_Init+0x15c>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	4798      	blx	r3
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2bd5      	cmp	r3, #213	@ 0xd5
 8003a90:	d145      	bne.n	8003b1e <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8003a92:	4b4c      	ldr	r3, [pc, #304]	@ (8003bc4 <BSP_GYRO_Init+0x160>)
 8003a94:	4a4a      	ldr	r2, [pc, #296]	@ (8003bc0 <BSP_GYRO_Init+0x15c>)
 8003a96:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8003a98:	2308      	movs	r3, #8
 8003a9a:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8003aa0:	2307      	movs	r3, #7
 8003aa2:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8003aa4:	2330      	movs	r3, #48	@ 0x30
 8003aa6:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8003aac:	2300      	movs	r3, #0
 8003aae:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8003ab0:	2310      	movs	r3, #16
 8003ab2:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003ab4:	793a      	ldrb	r2, [r7, #4]
 8003ab6:	797b      	ldrb	r3, [r7, #5]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003abc:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003aca:	7a3a      	ldrb	r2, [r7, #8]
 8003acc:	7a7b      	ldrb	r3, [r7, #9]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8003ad2:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	021b      	lsls	r3, r3, #8
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	89bb      	ldrh	r3, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8003ae2:	4b38      	ldr	r3, [pc, #224]	@ (8003bc4 <BSP_GYRO_Init+0x160>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	89ba      	ldrh	r2, [r7, #12]
 8003aea:	4610      	mov	r0, r2
 8003aec:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8003aee:	2300      	movs	r3, #0
 8003af0:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003af6:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8003af8:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003afa:	4313      	orrs	r3, r2
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8003b00:	4b30      	ldr	r3, [pc, #192]	@ (8003bc4 <BSP_GYRO_Init+0x160>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b06:	89ba      	ldrh	r2, [r7, #12]
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8003b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc4 <BSP_GYRO_Init+0x160>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b14:	2010      	movs	r0, #16
 8003b16:	4798      	blx	r3

    ret = GYRO_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	73fb      	strb	r3, [r7, #15]
 8003b1c:	e04a      	b.n	8003bb4 <BSP_GYRO_Init+0x150>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 8003b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc8 <BSP_GYRO_Init+0x164>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	4798      	blx	r3
 8003b24:	4603      	mov	r3, r0
 8003b26:	2bd3      	cmp	r3, #211	@ 0xd3
 8003b28:	d144      	bne.n	8003bb4 <BSP_GYRO_Init+0x150>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8003b2a:	4b26      	ldr	r3, [pc, #152]	@ (8003bc4 <BSP_GYRO_Init+0x160>)
 8003b2c:	4a26      	ldr	r2, [pc, #152]	@ (8003bc8 <BSP_GYRO_Init+0x164>)
 8003b2e:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 8003b30:	2308      	movs	r3, #8
 8003b32:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 8003b34:	2300      	movs	r3, #0
 8003b36:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 8003b38:	2307      	movs	r3, #7
 8003b3a:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 8003b3c:	2330      	movs	r3, #48	@ 0x30
 8003b3e:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8003b40:	2300      	movs	r3, #0
 8003b42:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 8003b44:	2300      	movs	r3, #0
 8003b46:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 8003b48:	2310      	movs	r3, #16
 8003b4a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003b4c:	793a      	ldrb	r2, [r7, #4]
 8003b4e:	797b      	ldrb	r3, [r7, #5]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003b54:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003b56:	4313      	orrs	r3, r2
 8003b58:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003b62:	7a3a      	ldrb	r2, [r7, #8]
 8003b64:	7a7b      	ldrb	r3, [r7, #9]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8003b6a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	89bb      	ldrh	r3, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8003b7a:	4b12      	ldr	r3, [pc, #72]	@ (8003bc4 <BSP_GYRO_Init+0x160>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	89ba      	ldrh	r2, [r7, #12]
 8003b82:	4610      	mov	r0, r2
 8003b84:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 8003b86:	2300      	movs	r3, #0
 8003b88:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003b8e:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8003b90:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003b92:	4313      	orrs	r3, r2
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8003b98:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <BSP_GYRO_Init+0x160>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9e:	89ba      	ldrh	r2, [r7, #12]
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 8003ba6:	4b07      	ldr	r3, [pc, #28]	@ (8003bc4 <BSP_GYRO_Init+0x160>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bac:	2010      	movs	r0, #16
 8003bae:	4798      	blx	r3

    ret = GYRO_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000080 	.word	0x20000080
 8003bc4:	200004d8 	.word	0x200004d8
 8003bc8:	2000004c 	.word	0x2000004c

08003bcc <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8003bd4:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <BSP_GYRO_GetXYZ+0x24>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d004      	beq.n	8003be8 <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8003bde:	4b04      	ldr	r3, [pc, #16]	@ (8003bf0 <BSP_GYRO_GetXYZ+0x24>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4798      	blx	r3
  }
}
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	200004d8 	.word	0x200004d8

08003bf4 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8003c02:	f000 fc77 	bl	80044f4 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8003c0c:	f107 030f 	add.w	r3, r7, #15
 8003c10:	2201      	movs	r2, #1
 8003c12:	2120      	movs	r1, #32
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fcb3 	bl	8004580 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 8003c24:	f107 030f 	add.w	r3, r7, #15
 8003c28:	2201      	movs	r2, #1
 8003c2a:	2123      	movs	r1, #35	@ 0x23
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fca7 	bl	8004580 <GYRO_IO_Write>
}
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	af00      	add	r7, sp, #0
}
 8003c3e:	bf00      	nop
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8003c4e:	f000 fc51 	bl	80044f4 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8003c52:	1dfb      	adds	r3, r7, #7
 8003c54:	2201      	movs	r2, #1
 8003c56:	210f      	movs	r1, #15
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fcc3 	bl	80045e4 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8003c6e:	1dfb      	adds	r3, r7, #7
 8003c70:	2201      	movs	r2, #1
 8003c72:	2124      	movs	r1, #36	@ 0x24
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fcb5 	bl	80045e4 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8003c84:	1dfb      	adds	r3, r7, #7
 8003c86:	2201      	movs	r2, #1
 8003c88:	2124      	movs	r1, #36	@ 0x24
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fc78 	bl	8004580 <GYRO_IO_Write>
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8003cac:	f107 030f 	add.w	r3, r7, #15
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	2120      	movs	r1, #32
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fc63 	bl	8004580 <GYRO_IO_Write>
}
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	4603      	mov	r3, r0
 8003cca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8003cd4:	f107 030f 	add.w	r3, r7, #15
 8003cd8:	2201      	movs	r2, #1
 8003cda:	2130      	movs	r1, #48	@ 0x30
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fc81 	bl	80045e4 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8003ce2:	f107 030e 	add.w	r3, r7, #14
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	2122      	movs	r1, #34	@ 0x22
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fc7a 	bl	80045e4 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
 8003cf2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	121b      	asrs	r3, r3, #8
 8003d00:	b25a      	sxtb	r2, r3
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	b25b      	sxtb	r3, r3
 8003d06:	4313      	orrs	r3, r2
 8003d08:	b25b      	sxtb	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8003d0e:	7bbb      	ldrb	r3, [r7, #14]
 8003d10:	f023 0320 	bic.w	r3, r3, #32
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8003d18:	88fb      	ldrh	r3, [r7, #6]
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	7bbb      	ldrb	r3, [r7, #14]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8003d24:	f107 030f 	add.w	r3, r7, #15
 8003d28:	2201      	movs	r2, #1
 8003d2a:	2130      	movs	r1, #48	@ 0x30
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fc27 	bl	8004580 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8003d32:	f107 030e 	add.w	r3, r7, #14
 8003d36:	2201      	movs	r2, #1
 8003d38:	2122      	movs	r1, #34	@ 0x22
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fc20 	bl	8004580 <GYRO_IO_Write>
}
 8003d40:	bf00      	nop
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8003d52:	f107 030f 	add.w	r3, r7, #15
 8003d56:	2201      	movs	r2, #1
 8003d58:	2122      	movs	r1, #34	@ 0x22
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fc42 	bl	80045e4 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	73fb      	strb	r3, [r7, #15]
 8003d7a:	e00c      	b.n	8003d96 <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d109      	bne.n	8003d96 <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	f023 0308 	bic.w	r3, r3, #8
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	f043 0308 	orr.w	r3, r3, #8
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8003d96:	f107 030f 	add.w	r3, r7, #15
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	2122      	movs	r1, #34	@ 0x22
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fbee 	bl	8004580 <GYRO_IO_Write>
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8003db6:	f107 030f 	add.w	r3, r7, #15
 8003dba:	2201      	movs	r2, #1
 8003dbc:	2122      	movs	r1, #34	@ 0x22
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fc10 	bl	80045e4 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d107      	bne.n	8003dda <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	73fb      	strb	r3, [r7, #15]
 8003dd8:	e009      	b.n	8003dee <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d106      	bne.n	8003dee <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	f023 0308 	bic.w	r3, r3, #8
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8003dee:	f107 030f 	add.w	r3, r7, #15
 8003df2:	2201      	movs	r2, #1
 8003df4:	2122      	movs	r1, #34	@ 0x22
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fbc2 	bl	8004580 <GYRO_IO_Write>
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8003e0e:	f107 030f 	add.w	r3, r7, #15
 8003e12:	2201      	movs	r2, #1
 8003e14:	2121      	movs	r1, #33	@ 0x21
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fbe4 	bl	80045e4 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8003e30:	f107 030f 	add.w	r3, r7, #15
 8003e34:	2201      	movs	r2, #1
 8003e36:	2121      	movs	r1, #33	@ 0x21
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fba1 	bl	8004580 <GYRO_IO_Write>
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8003e50:	f107 030f 	add.w	r3, r7, #15
 8003e54:	2201      	movs	r2, #1
 8003e56:	2124      	movs	r1, #36	@ 0x24
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fbc3 	bl	80045e4 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	f023 0310 	bic.w	r3, r3, #16
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8003e68:	7bfa      	ldrb	r2, [r7, #15]
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8003e72:	f107 030f 	add.w	r3, r7, #15
 8003e76:	2201      	movs	r2, #1
 8003e78:	2124      	movs	r1, #36	@ 0x24
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fb80 	bl	8004580 <GYRO_IO_Write>
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	@ 0x28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8003e90:	2300      	movs	r3, #0
 8003e92:	61bb      	str	r3, [r7, #24]
 8003e94:	2300      	movs	r3, #0
 8003e96:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8003e98:	f107 0310 	add.w	r3, r7, #16
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  int i = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8003eb0:	f107 030f 	add.w	r3, r7, #15
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	2123      	movs	r1, #35	@ 0x23
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fb93 	bl	80045e4 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8003ebe:	f107 0318 	add.w	r3, r7, #24
 8003ec2:	2206      	movs	r2, #6
 8003ec4:	2128      	movs	r1, #40	@ 0x28
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fb8c 	bl	80045e4 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d121      	bne.n	8003f1a <I3G4250D_ReadXYZAngRate+0x92>
  {
    for (i = 0; i < 3; i++)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	623b      	str	r3, [r7, #32]
 8003eda:	e01a      	b.n	8003f12 <I3G4250D_ReadXYZAngRate+0x8a>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	3328      	adds	r3, #40	@ 0x28
 8003ee4:	443b      	add	r3, r7
 8003ee6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003eea:	021b      	lsls	r3, r3, #8
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	6a3a      	ldr	r2, [r7, #32]
 8003ef0:	0052      	lsls	r2, r2, #1
 8003ef2:	3228      	adds	r2, #40	@ 0x28
 8003ef4:	443a      	add	r2, r7
 8003ef6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8003efa:	4413      	add	r3, r2
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	b21a      	sxth	r2, r3
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	3328      	adds	r3, #40	@ 0x28
 8003f06:	443b      	add	r3, r7
 8003f08:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	623b      	str	r3, [r7, #32]
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	dde1      	ble.n	8003edc <I3G4250D_ReadXYZAngRate+0x54>
 8003f18:	e020      	b.n	8003f5c <I3G4250D_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	623b      	str	r3, [r7, #32]
 8003f1e:	e01a      	b.n	8003f56 <I3G4250D_ReadXYZAngRate+0xce>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	3328      	adds	r3, #40	@ 0x28
 8003f26:	443b      	add	r3, r7
 8003f28:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	6a3a      	ldr	r2, [r7, #32]
 8003f32:	0052      	lsls	r2, r2, #1
 8003f34:	3201      	adds	r2, #1
 8003f36:	3228      	adds	r2, #40	@ 0x28
 8003f38:	443a      	add	r2, r7
 8003f3a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8003f3e:	4413      	add	r3, r2
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	b21a      	sxth	r2, r3
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	3328      	adds	r3, #40	@ 0x28
 8003f4a:	443b      	add	r3, r7
 8003f4c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	3301      	adds	r3, #1
 8003f54:	623b      	str	r3, [r7, #32]
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	dde1      	ble.n	8003f20 <I3G4250D_ReadXYZAngRate+0x98>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d00c      	beq.n	8003f80 <I3G4250D_ReadXYZAngRate+0xf8>
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	dc0d      	bgt.n	8003f86 <I3G4250D_ReadXYZAngRate+0xfe>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <I3G4250D_ReadXYZAngRate+0xec>
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d003      	beq.n	8003f7a <I3G4250D_ReadXYZAngRate+0xf2>
 8003f72:	e008      	b.n	8003f86 <I3G4250D_ReadXYZAngRate+0xfe>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8003f74:	4b15      	ldr	r3, [pc, #84]	@ (8003fcc <I3G4250D_ReadXYZAngRate+0x144>)
 8003f76:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8003f78:	e005      	b.n	8003f86 <I3G4250D_ReadXYZAngRate+0xfe>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8003f7a:	4b15      	ldr	r3, [pc, #84]	@ (8003fd0 <I3G4250D_ReadXYZAngRate+0x148>)
 8003f7c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8003f7e:	e002      	b.n	8003f86 <I3G4250D_ReadXYZAngRate+0xfe>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8003f80:	4b14      	ldr	r3, [pc, #80]	@ (8003fd4 <I3G4250D_ReadXYZAngRate+0x14c>)
 8003f82:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8003f84:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 8003f86:	2300      	movs	r3, #0
 8003f88:	623b      	str	r3, [r7, #32]
 8003f8a:	e016      	b.n	8003fba <I3G4250D_ReadXYZAngRate+0x132>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	3328      	adds	r3, #40	@ 0x28
 8003f92:	443b      	add	r3, r7
 8003f94:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8003f98:	ee07 3a90 	vmov	s15, r3
 8003f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	623b      	str	r3, [r7, #32]
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	dde5      	ble.n	8003f8c <I3G4250D_ReadXYZAngRate+0x104>
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	3728      	adds	r7, #40	@ 0x28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	410c0000 	.word	0x410c0000
 8003fd0:	418c0000 	.word	0x418c0000
 8003fd4:	428c0000 	.word	0x428c0000

08003fd8 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8003fe6:	f000 fa85 	bl	80044f4 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8003ff0:	f107 030f 	add.w	r3, r7, #15
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	2120      	movs	r1, #32
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fac1 	bl	8004580 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	0a1b      	lsrs	r3, r3, #8
 8004002:	b29b      	uxth	r3, r3
 8004004:	b2db      	uxtb	r3, r3
 8004006:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8004008:	f107 030f 	add.w	r3, r7, #15
 800400c:	2201      	movs	r2, #1
 800400e:	2123      	movs	r1, #35	@ 0x23
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fab5 	bl	8004580 <GYRO_IO_Write>
}
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 800401e:	b480      	push	{r7}
 8004020:	af00      	add	r7, sp, #0
}
 8004022:	bf00      	nop
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8004032:	f000 fa5f 	bl	80044f4 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8004036:	1dfb      	adds	r3, r7, #7
 8004038:	2201      	movs	r2, #1
 800403a:	210f      	movs	r1, #15
 800403c:	4618      	mov	r0, r3
 800403e:	f000 fad1 	bl	80045e4 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8004042:	79fb      	ldrb	r3, [r7, #7]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004052:	1dfb      	adds	r3, r7, #7
 8004054:	2201      	movs	r2, #1
 8004056:	2124      	movs	r1, #36	@ 0x24
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fac3 	bl	80045e4 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004064:	b2db      	uxtb	r3, r3
 8004066:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004068:	1dfb      	adds	r3, r7, #7
 800406a:	2201      	movs	r2, #1
 800406c:	2124      	movs	r1, #36	@ 0x24
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fa86 	bl	8004580 <GYRO_IO_Write>
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004086:	2300      	movs	r3, #0
 8004088:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8004090:	f107 030f 	add.w	r3, r7, #15
 8004094:	2201      	movs	r2, #1
 8004096:	2120      	movs	r1, #32
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fa71 	bl	8004580 <GYRO_IO_Write>
}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	4603      	mov	r3, r0
 80040ae:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80040b0:	2300      	movs	r3, #0
 80040b2:	73fb      	strb	r3, [r7, #15]
 80040b4:	2300      	movs	r3, #0
 80040b6:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80040b8:	f107 030f 	add.w	r3, r7, #15
 80040bc:	2201      	movs	r2, #1
 80040be:	2130      	movs	r1, #48	@ 0x30
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fa8f 	bl	80045e4 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80040c6:	f107 030e 	add.w	r3, r7, #14
 80040ca:	2201      	movs	r2, #1
 80040cc:	2122      	movs	r1, #34	@ 0x22
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fa88 	bl	80045e4 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	121b      	asrs	r3, r3, #8
 80040e4:	b25a      	sxtb	r2, r3
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	b25b      	sxtb	r3, r3
 80040ea:	4313      	orrs	r3, r2
 80040ec:	b25b      	sxtb	r3, r3
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80040f2:	7bbb      	ldrb	r3, [r7, #14]
 80040f4:	f023 0320 	bic.w	r3, r3, #32
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	7bbb      	ldrb	r3, [r7, #14]
 8004102:	4313      	orrs	r3, r2
 8004104:	b2db      	uxtb	r3, r3
 8004106:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8004108:	f107 030f 	add.w	r3, r7, #15
 800410c:	2201      	movs	r2, #1
 800410e:	2130      	movs	r1, #48	@ 0x30
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fa35 	bl	8004580 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8004116:	f107 030e 	add.w	r3, r7, #14
 800411a:	2201      	movs	r2, #1
 800411c:	2122      	movs	r1, #34	@ 0x22
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fa2e 	bl	8004580 <GYRO_IO_Write>
}
 8004124:	bf00      	nop
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004136:	f107 030f 	add.w	r3, r7, #15
 800413a:	2201      	movs	r2, #1
 800413c:	2122      	movs	r1, #34	@ 0x22
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fa50 	bl	80045e4 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004150:	b2db      	uxtb	r3, r3
 8004152:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800415a:	b2db      	uxtb	r3, r3
 800415c:	73fb      	strb	r3, [r7, #15]
 800415e:	e00c      	b.n	800417a <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d109      	bne.n	800417a <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	f023 0308 	bic.w	r3, r3, #8
 800416c:	b2db      	uxtb	r3, r3
 800416e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	f043 0308 	orr.w	r3, r3, #8
 8004176:	b2db      	uxtb	r3, r3
 8004178:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800417a:	f107 030f 	add.w	r3, r7, #15
 800417e:	2201      	movs	r2, #1
 8004180:	2122      	movs	r1, #34	@ 0x22
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f9fc 	bl	8004580 <GYRO_IO_Write>
}
 8004188:	bf00      	nop
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800419a:	f107 030f 	add.w	r3, r7, #15
 800419e:	2201      	movs	r2, #1
 80041a0:	2122      	movs	r1, #34	@ 0x22
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fa1e 	bl	80045e4 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80041a8:	79fb      	ldrb	r3, [r7, #7]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d107      	bne.n	80041be <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	73fb      	strb	r3, [r7, #15]
 80041bc:	e009      	b.n	80041d2 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d106      	bne.n	80041d2 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	f023 0308 	bic.w	r3, r3, #8
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80041d2:	f107 030f 	add.w	r3, r7, #15
 80041d6:	2201      	movs	r2, #1
 80041d8:	2122      	movs	r1, #34	@ 0x22
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f9d0 	bl	8004580 <GYRO_IO_Write>
}
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80041f2:	f107 030f 	add.w	r3, r7, #15
 80041f6:	2201      	movs	r2, #1
 80041f8:	2121      	movs	r1, #33	@ 0x21
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 f9f2 	bl	80045e4 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004206:	b2db      	uxtb	r3, r3
 8004208:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800420a:	7bfa      	ldrb	r2, [r7, #15]
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	4313      	orrs	r3, r2
 8004210:	b2db      	uxtb	r3, r3
 8004212:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8004214:	f107 030f 	add.w	r3, r7, #15
 8004218:	2201      	movs	r2, #1
 800421a:	2121      	movs	r1, #33	@ 0x21
 800421c:	4618      	mov	r0, r3
 800421e:	f000 f9af 	bl	8004580 <GYRO_IO_Write>
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	4603      	mov	r3, r0
 8004232:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004234:	f107 030f 	add.w	r3, r7, #15
 8004238:	2201      	movs	r2, #1
 800423a:	2124      	movs	r1, #36	@ 0x24
 800423c:	4618      	mov	r0, r3
 800423e:	f000 f9d1 	bl	80045e4 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	f023 0310 	bic.w	r3, r3, #16
 8004248:	b2db      	uxtb	r3, r3
 800424a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800424c:	7bfa      	ldrb	r2, [r7, #15]
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	4313      	orrs	r3, r2
 8004252:	b2db      	uxtb	r3, r3
 8004254:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004256:	f107 030f 	add.w	r3, r7, #15
 800425a:	2201      	movs	r2, #1
 800425c:	2124      	movs	r1, #36	@ 0x24
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f98e 	bl	8004580 <GYRO_IO_Write>
}
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	@ 0x28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8004274:	2300      	movs	r3, #0
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	2300      	movs	r3, #0
 800427a:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 800427c:	f107 0310 	add.w	r3, r7, #16
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 8004290:	2300      	movs	r3, #0
 8004292:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8004294:	f107 030f 	add.w	r3, r7, #15
 8004298:	2201      	movs	r2, #1
 800429a:	2123      	movs	r1, #35	@ 0x23
 800429c:	4618      	mov	r0, r3
 800429e:	f000 f9a1 	bl	80045e4 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 80042a2:	f107 0318 	add.w	r3, r7, #24
 80042a6:	2206      	movs	r2, #6
 80042a8:	2128      	movs	r1, #40	@ 0x28
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f99a 	bl	80045e4 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d121      	bne.n	80042fe <L3GD20_ReadXYZAngRate+0x92>
  {
    for(i=0; i<3; i++)
 80042ba:	2300      	movs	r3, #0
 80042bc:	623b      	str	r3, [r7, #32]
 80042be:	e01a      	b.n	80042f6 <L3GD20_ReadXYZAngRate+0x8a>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	3301      	adds	r3, #1
 80042c6:	3328      	adds	r3, #40	@ 0x28
 80042c8:	443b      	add	r3, r7
 80042ca:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	6a3a      	ldr	r2, [r7, #32]
 80042d4:	0052      	lsls	r2, r2, #1
 80042d6:	3228      	adds	r2, #40	@ 0x28
 80042d8:	443a      	add	r2, r7
 80042da:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80042de:	4413      	add	r3, r2
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	b21a      	sxth	r2, r3
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	3328      	adds	r3, #40	@ 0x28
 80042ea:	443b      	add	r3, r7
 80042ec:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	3301      	adds	r3, #1
 80042f4:	623b      	str	r3, [r7, #32]
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	dde1      	ble.n	80042c0 <L3GD20_ReadXYZAngRate+0x54>
 80042fc:	e020      	b.n	8004340 <L3GD20_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80042fe:	2300      	movs	r3, #0
 8004300:	623b      	str	r3, [r7, #32]
 8004302:	e01a      	b.n	800433a <L3GD20_ReadXYZAngRate+0xce>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	3328      	adds	r3, #40	@ 0x28
 800430a:	443b      	add	r3, r7
 800430c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	b29b      	uxth	r3, r3
 8004314:	6a3a      	ldr	r2, [r7, #32]
 8004316:	0052      	lsls	r2, r2, #1
 8004318:	3201      	adds	r2, #1
 800431a:	3228      	adds	r2, #40	@ 0x28
 800431c:	443a      	add	r2, r7
 800431e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8004322:	4413      	add	r3, r2
 8004324:	b29b      	uxth	r3, r3
 8004326:	b21a      	sxth	r2, r3
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	3328      	adds	r3, #40	@ 0x28
 800432e:	443b      	add	r3, r7
 8004330:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	3301      	adds	r3, #1
 8004338:	623b      	str	r3, [r7, #32]
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	2b02      	cmp	r3, #2
 800433e:	dde1      	ble.n	8004304 <L3GD20_ReadXYZAngRate+0x98>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004346:	2b20      	cmp	r3, #32
 8004348:	d00c      	beq.n	8004364 <L3GD20_ReadXYZAngRate+0xf8>
 800434a:	2b20      	cmp	r3, #32
 800434c:	dc0d      	bgt.n	800436a <L3GD20_ReadXYZAngRate+0xfe>
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <L3GD20_ReadXYZAngRate+0xec>
 8004352:	2b10      	cmp	r3, #16
 8004354:	d003      	beq.n	800435e <L3GD20_ReadXYZAngRate+0xf2>
 8004356:	e008      	b.n	800436a <L3GD20_ReadXYZAngRate+0xfe>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8004358:	4b15      	ldr	r3, [pc, #84]	@ (80043b0 <L3GD20_ReadXYZAngRate+0x144>)
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 800435c:	e005      	b.n	800436a <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800435e:	4b15      	ldr	r3, [pc, #84]	@ (80043b4 <L3GD20_ReadXYZAngRate+0x148>)
 8004360:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8004362:	e002      	b.n	800436a <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8004364:	4b14      	ldr	r3, [pc, #80]	@ (80043b8 <L3GD20_ReadXYZAngRate+0x14c>)
 8004366:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8004368:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 800436a:	2300      	movs	r3, #0
 800436c:	623b      	str	r3, [r7, #32]
 800436e:	e016      	b.n	800439e <L3GD20_ReadXYZAngRate+0x132>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	3328      	adds	r3, #40	@ 0x28
 8004376:	443b      	add	r3, r7
 8004378:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800437c:	ee07 3a90 	vmov	s15, r3
 8004380:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4413      	add	r3, r2
 800438c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004394:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	3301      	adds	r3, #1
 800439c:	623b      	str	r3, [r7, #32]
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	dde5      	ble.n	8004370 <L3GD20_ReadXYZAngRate+0x104>
  }
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop
 80043a8:	3728      	adds	r7, #40	@ 0x28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	410c0000 	.word	0x410c0000
 80043b4:	418c0000 	.word	0x418c0000
 80043b8:	428c0000 	.word	0x428c0000

080043bc <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80043c0:	481a      	ldr	r0, [pc, #104]	@ (800442c <SPIx_Init+0x70>)
 80043c2:	f7ff f9a0 	bl	8003706 <HAL_SPI_GetState>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d12c      	bne.n	8004426 <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80043cc:	4b17      	ldr	r3, [pc, #92]	@ (800442c <SPIx_Init+0x70>)
 80043ce:	4a18      	ldr	r2, [pc, #96]	@ (8004430 <SPIx_Init+0x74>)
 80043d0:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80043d2:	4b16      	ldr	r3, [pc, #88]	@ (800442c <SPIx_Init+0x70>)
 80043d4:	2218      	movs	r2, #24
 80043d6:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 80043d8:	4b14      	ldr	r3, [pc, #80]	@ (800442c <SPIx_Init+0x70>)
 80043da:	2200      	movs	r2, #0
 80043dc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043de:	4b13      	ldr	r3, [pc, #76]	@ (800442c <SPIx_Init+0x70>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043e4:	4b11      	ldr	r3, [pc, #68]	@ (800442c <SPIx_Init+0x70>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ea:	4b10      	ldr	r3, [pc, #64]	@ (800442c <SPIx_Init+0x70>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80043f0:	4b0e      	ldr	r3, [pc, #56]	@ (800442c <SPIx_Init+0x70>)
 80043f2:	2207      	movs	r2, #7
 80043f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80043f6:	4b0d      	ldr	r3, [pc, #52]	@ (800442c <SPIx_Init+0x70>)
 80043f8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80043fc:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043fe:	4b0b      	ldr	r3, [pc, #44]	@ (800442c <SPIx_Init+0x70>)
 8004400:	2200      	movs	r2, #0
 8004402:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8004404:	4b09      	ldr	r3, [pc, #36]	@ (800442c <SPIx_Init+0x70>)
 8004406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800440a:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 800440c:	4b07      	ldr	r3, [pc, #28]	@ (800442c <SPIx_Init+0x70>)
 800440e:	2200      	movs	r2, #0
 8004410:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8004412:	4b06      	ldr	r3, [pc, #24]	@ (800442c <SPIx_Init+0x70>)
 8004414:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004418:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 800441a:	4804      	ldr	r0, [pc, #16]	@ (800442c <SPIx_Init+0x70>)
 800441c:	f000 f836 	bl	800448c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8004420:	4802      	ldr	r0, [pc, #8]	@ (800442c <SPIx_Init+0x70>)
 8004422:	f7fe fe7b 	bl	800311c <HAL_SPI_Init>
  }
}
 8004426:	bf00      	nop
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	200004dc 	.word	0x200004dc
 8004430:	40013000 	.word	0x40013000

08004434 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af02      	add	r7, sp, #8
 800443a:	4603      	mov	r3, r0
 800443c:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 800443e:	2300      	movs	r3, #0
 8004440:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8004442:	4b0a      	ldr	r3, [pc, #40]	@ (800446c <SPIx_WriteRead+0x38>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f107 020f 	add.w	r2, r7, #15
 800444a:	1df9      	adds	r1, r7, #7
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	2301      	movs	r3, #1
 8004450:	4807      	ldr	r0, [pc, #28]	@ (8004470 <SPIx_WriteRead+0x3c>)
 8004452:	f7fe ff36 	bl	80032c2 <HAL_SPI_TransmitReceive>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 800445c:	f000 f80a 	bl	8004474 <SPIx_Error>
  }
  
  return receivedbyte;
 8004460:	7bfb      	ldrb	r3, [r7, #15]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	200000b4 	.word	0x200000b4
 8004470:	200004dc 	.word	0x200004dc

08004474 <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8004478:	4803      	ldr	r0, [pc, #12]	@ (8004488 <SPIx_Error+0x14>)
 800447a:	f7fe fefa 	bl	8003272 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 800447e:	f7ff ff9d 	bl	80043bc <SPIx_Init>
}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	200004dc 	.word	0x200004dc

0800448c <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	@ 0x28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8004494:	4b16      	ldr	r3, [pc, #88]	@ (80044f0 <SPIx_MspInit+0x64>)
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	4a15      	ldr	r2, [pc, #84]	@ (80044f0 <SPIx_MspInit+0x64>)
 800449a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800449e:	6193      	str	r3, [r2, #24]
 80044a0:	4b13      	ldr	r3, [pc, #76]	@ (80044f0 <SPIx_MspInit+0x64>)
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80044ac:	4b10      	ldr	r3, [pc, #64]	@ (80044f0 <SPIx_MspInit+0x64>)
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	4a0f      	ldr	r2, [pc, #60]	@ (80044f0 <SPIx_MspInit+0x64>)
 80044b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044b6:	6153      	str	r3, [r2, #20]
 80044b8:	4b0d      	ldr	r3, [pc, #52]	@ (80044f0 <SPIx_MspInit+0x64>)
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80044c4:	23e0      	movs	r3, #224	@ 0xe0
 80044c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80044c8:	2302      	movs	r3, #2
 80044ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 80044cc:	2300      	movs	r3, #0
 80044ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80044d0:	2303      	movs	r3, #3
 80044d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80044d4:	2305      	movs	r3, #5
 80044d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80044d8:	f107 0314 	add.w	r3, r7, #20
 80044dc:	4619      	mov	r1, r3
 80044de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044e2:	f7fc fde1 	bl	80010a8 <HAL_GPIO_Init>
}
 80044e6:	bf00      	nop
 80044e8:	3728      	adds	r7, #40	@ 0x28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40021000 	.word	0x40021000

080044f4 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80044fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004578 <GYRO_IO_Init+0x84>)
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004578 <GYRO_IO_Init+0x84>)
 8004500:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004504:	6153      	str	r3, [r2, #20]
 8004506:	4b1c      	ldr	r3, [pc, #112]	@ (8004578 <GYRO_IO_Init+0x84>)
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8004512:	2308      	movs	r3, #8
 8004514:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004516:	2301      	movs	r3, #1
 8004518:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800451e:	2303      	movs	r3, #3
 8004520:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8004522:	f107 030c 	add.w	r3, r7, #12
 8004526:	4619      	mov	r1, r3
 8004528:	4814      	ldr	r0, [pc, #80]	@ (800457c <GYRO_IO_Init+0x88>)
 800452a:	f7fc fdbd 	bl	80010a8 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 800452e:	2201      	movs	r2, #1
 8004530:	2108      	movs	r1, #8
 8004532:	4812      	ldr	r0, [pc, #72]	@ (800457c <GYRO_IO_Init+0x88>)
 8004534:	f7fd f80e 	bl	8001554 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8004538:	4b0f      	ldr	r3, [pc, #60]	@ (8004578 <GYRO_IO_Init+0x84>)
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	4a0e      	ldr	r2, [pc, #56]	@ (8004578 <GYRO_IO_Init+0x84>)
 800453e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004542:	6153      	str	r3, [r2, #20]
 8004544:	4b0c      	ldr	r3, [pc, #48]	@ (8004578 <GYRO_IO_Init+0x84>)
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800454c:	607b      	str	r3, [r7, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8004550:	2303      	movs	r3, #3
 8004552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8004554:	2300      	movs	r3, #0
 8004556:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004558:	2303      	movs	r3, #3
 800455a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004560:	f107 030c 	add.w	r3, r7, #12
 8004564:	4619      	mov	r1, r3
 8004566:	4805      	ldr	r0, [pc, #20]	@ (800457c <GYRO_IO_Init+0x88>)
 8004568:	f7fc fd9e 	bl	80010a8 <HAL_GPIO_Init>
  
  SPIx_Init();
 800456c:	f7ff ff26 	bl	80043bc <SPIx_Init>
}
 8004570:	bf00      	nop
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021000 	.word	0x40021000
 800457c:	48001000 	.word	0x48001000

08004580 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	70fb      	strb	r3, [r7, #3]
 800458c:	4613      	mov	r3, r2
 800458e:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8004590:	883b      	ldrh	r3, [r7, #0]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d903      	bls.n	800459e <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800459c:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800459e:	2200      	movs	r2, #0
 80045a0:	2108      	movs	r1, #8
 80045a2:	480f      	ldr	r0, [pc, #60]	@ (80045e0 <GYRO_IO_Write+0x60>)
 80045a4:	f7fc ffd6 	bl	8001554 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80045a8:	78fb      	ldrb	r3, [r7, #3]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff ff42 	bl	8004434 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80045b0:	e00a      	b.n	80045c8 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff ff3c 	bl	8004434 <SPIx_WriteRead>
    NumByteToWrite--;
 80045bc:	883b      	ldrh	r3, [r7, #0]
 80045be:	3b01      	subs	r3, #1
 80045c0:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3301      	adds	r3, #1
 80045c6:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80045c8:	883b      	ldrh	r3, [r7, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f1      	bne.n	80045b2 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80045ce:	2201      	movs	r2, #1
 80045d0:	2108      	movs	r1, #8
 80045d2:	4803      	ldr	r0, [pc, #12]	@ (80045e0 <GYRO_IO_Write+0x60>)
 80045d4:	f7fc ffbe 	bl	8001554 <HAL_GPIO_WritePin>
}
 80045d8:	bf00      	nop
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	48001000 	.word	0x48001000

080045e4 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	460b      	mov	r3, r1
 80045ee:	70fb      	strb	r3, [r7, #3]
 80045f0:	4613      	mov	r3, r2
 80045f2:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80045f4:	883b      	ldrh	r3, [r7, #0]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d904      	bls.n	8004604 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8004600:	70fb      	strb	r3, [r7, #3]
 8004602:	e003      	b.n	800460c <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800460a:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800460c:	2200      	movs	r2, #0
 800460e:	2108      	movs	r1, #8
 8004610:	4810      	ldr	r0, [pc, #64]	@ (8004654 <GYRO_IO_Read+0x70>)
 8004612:	f7fc ff9f 	bl	8001554 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8004616:	78fb      	ldrb	r3, [r7, #3]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff ff0b 	bl	8004434 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800461e:	e00c      	b.n	800463a <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8004620:	2000      	movs	r0, #0
 8004622:	f7ff ff07 	bl	8004434 <SPIx_WriteRead>
 8004626:	4603      	mov	r3, r0
 8004628:	461a      	mov	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800462e:	883b      	ldrh	r3, [r7, #0]
 8004630:	3b01      	subs	r3, #1
 8004632:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3301      	adds	r3, #1
 8004638:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800463a:	883b      	ldrh	r3, [r7, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1ef      	bne.n	8004620 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004640:	2201      	movs	r2, #1
 8004642:	2108      	movs	r1, #8
 8004644:	4803      	ldr	r0, [pc, #12]	@ (8004654 <GYRO_IO_Read+0x70>)
 8004646:	f7fc ff85 	bl	8001554 <HAL_GPIO_WritePin>
}  
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	48001000 	.word	0x48001000

08004658 <siprintf>:
 8004658:	b40e      	push	{r1, r2, r3}
 800465a:	b500      	push	{lr}
 800465c:	b09c      	sub	sp, #112	@ 0x70
 800465e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004660:	9002      	str	r0, [sp, #8]
 8004662:	9006      	str	r0, [sp, #24]
 8004664:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004668:	4809      	ldr	r0, [pc, #36]	@ (8004690 <siprintf+0x38>)
 800466a:	9107      	str	r1, [sp, #28]
 800466c:	9104      	str	r1, [sp, #16]
 800466e:	4909      	ldr	r1, [pc, #36]	@ (8004694 <siprintf+0x3c>)
 8004670:	f853 2b04 	ldr.w	r2, [r3], #4
 8004674:	9105      	str	r1, [sp, #20]
 8004676:	6800      	ldr	r0, [r0, #0]
 8004678:	9301      	str	r3, [sp, #4]
 800467a:	a902      	add	r1, sp, #8
 800467c:	f000 f9a2 	bl	80049c4 <_svfiprintf_r>
 8004680:	9b02      	ldr	r3, [sp, #8]
 8004682:	2200      	movs	r2, #0
 8004684:	701a      	strb	r2, [r3, #0]
 8004686:	b01c      	add	sp, #112	@ 0x70
 8004688:	f85d eb04 	ldr.w	lr, [sp], #4
 800468c:	b003      	add	sp, #12
 800468e:	4770      	bx	lr
 8004690:	200000b8 	.word	0x200000b8
 8004694:	ffff0208 	.word	0xffff0208

08004698 <memset>:
 8004698:	4402      	add	r2, r0
 800469a:	4603      	mov	r3, r0
 800469c:	4293      	cmp	r3, r2
 800469e:	d100      	bne.n	80046a2 <memset+0xa>
 80046a0:	4770      	bx	lr
 80046a2:	f803 1b01 	strb.w	r1, [r3], #1
 80046a6:	e7f9      	b.n	800469c <memset+0x4>

080046a8 <__errno>:
 80046a8:	4b01      	ldr	r3, [pc, #4]	@ (80046b0 <__errno+0x8>)
 80046aa:	6818      	ldr	r0, [r3, #0]
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	200000b8 	.word	0x200000b8

080046b4 <__libc_init_array>:
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	4d0d      	ldr	r5, [pc, #52]	@ (80046ec <__libc_init_array+0x38>)
 80046b8:	4c0d      	ldr	r4, [pc, #52]	@ (80046f0 <__libc_init_array+0x3c>)
 80046ba:	1b64      	subs	r4, r4, r5
 80046bc:	10a4      	asrs	r4, r4, #2
 80046be:	2600      	movs	r6, #0
 80046c0:	42a6      	cmp	r6, r4
 80046c2:	d109      	bne.n	80046d8 <__libc_init_array+0x24>
 80046c4:	4d0b      	ldr	r5, [pc, #44]	@ (80046f4 <__libc_init_array+0x40>)
 80046c6:	4c0c      	ldr	r4, [pc, #48]	@ (80046f8 <__libc_init_array+0x44>)
 80046c8:	f000 fc66 	bl	8004f98 <_init>
 80046cc:	1b64      	subs	r4, r4, r5
 80046ce:	10a4      	asrs	r4, r4, #2
 80046d0:	2600      	movs	r6, #0
 80046d2:	42a6      	cmp	r6, r4
 80046d4:	d105      	bne.n	80046e2 <__libc_init_array+0x2e>
 80046d6:	bd70      	pop	{r4, r5, r6, pc}
 80046d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046dc:	4798      	blx	r3
 80046de:	3601      	adds	r6, #1
 80046e0:	e7ee      	b.n	80046c0 <__libc_init_array+0xc>
 80046e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e6:	4798      	blx	r3
 80046e8:	3601      	adds	r6, #1
 80046ea:	e7f2      	b.n	80046d2 <__libc_init_array+0x1e>
 80046ec:	08005058 	.word	0x08005058
 80046f0:	08005058 	.word	0x08005058
 80046f4:	08005058 	.word	0x08005058
 80046f8:	0800505c 	.word	0x0800505c

080046fc <__retarget_lock_acquire_recursive>:
 80046fc:	4770      	bx	lr

080046fe <__retarget_lock_release_recursive>:
 80046fe:	4770      	bx	lr

08004700 <memcpy>:
 8004700:	440a      	add	r2, r1
 8004702:	4291      	cmp	r1, r2
 8004704:	f100 33ff 	add.w	r3, r0, #4294967295
 8004708:	d100      	bne.n	800470c <memcpy+0xc>
 800470a:	4770      	bx	lr
 800470c:	b510      	push	{r4, lr}
 800470e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004712:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004716:	4291      	cmp	r1, r2
 8004718:	d1f9      	bne.n	800470e <memcpy+0xe>
 800471a:	bd10      	pop	{r4, pc}

0800471c <_free_r>:
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	4605      	mov	r5, r0
 8004720:	2900      	cmp	r1, #0
 8004722:	d041      	beq.n	80047a8 <_free_r+0x8c>
 8004724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004728:	1f0c      	subs	r4, r1, #4
 800472a:	2b00      	cmp	r3, #0
 800472c:	bfb8      	it	lt
 800472e:	18e4      	addlt	r4, r4, r3
 8004730:	f000 f8e0 	bl	80048f4 <__malloc_lock>
 8004734:	4a1d      	ldr	r2, [pc, #116]	@ (80047ac <_free_r+0x90>)
 8004736:	6813      	ldr	r3, [r2, #0]
 8004738:	b933      	cbnz	r3, 8004748 <_free_r+0x2c>
 800473a:	6063      	str	r3, [r4, #4]
 800473c:	6014      	str	r4, [r2, #0]
 800473e:	4628      	mov	r0, r5
 8004740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004744:	f000 b8dc 	b.w	8004900 <__malloc_unlock>
 8004748:	42a3      	cmp	r3, r4
 800474a:	d908      	bls.n	800475e <_free_r+0x42>
 800474c:	6820      	ldr	r0, [r4, #0]
 800474e:	1821      	adds	r1, r4, r0
 8004750:	428b      	cmp	r3, r1
 8004752:	bf01      	itttt	eq
 8004754:	6819      	ldreq	r1, [r3, #0]
 8004756:	685b      	ldreq	r3, [r3, #4]
 8004758:	1809      	addeq	r1, r1, r0
 800475a:	6021      	streq	r1, [r4, #0]
 800475c:	e7ed      	b.n	800473a <_free_r+0x1e>
 800475e:	461a      	mov	r2, r3
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	b10b      	cbz	r3, 8004768 <_free_r+0x4c>
 8004764:	42a3      	cmp	r3, r4
 8004766:	d9fa      	bls.n	800475e <_free_r+0x42>
 8004768:	6811      	ldr	r1, [r2, #0]
 800476a:	1850      	adds	r0, r2, r1
 800476c:	42a0      	cmp	r0, r4
 800476e:	d10b      	bne.n	8004788 <_free_r+0x6c>
 8004770:	6820      	ldr	r0, [r4, #0]
 8004772:	4401      	add	r1, r0
 8004774:	1850      	adds	r0, r2, r1
 8004776:	4283      	cmp	r3, r0
 8004778:	6011      	str	r1, [r2, #0]
 800477a:	d1e0      	bne.n	800473e <_free_r+0x22>
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	6053      	str	r3, [r2, #4]
 8004782:	4408      	add	r0, r1
 8004784:	6010      	str	r0, [r2, #0]
 8004786:	e7da      	b.n	800473e <_free_r+0x22>
 8004788:	d902      	bls.n	8004790 <_free_r+0x74>
 800478a:	230c      	movs	r3, #12
 800478c:	602b      	str	r3, [r5, #0]
 800478e:	e7d6      	b.n	800473e <_free_r+0x22>
 8004790:	6820      	ldr	r0, [r4, #0]
 8004792:	1821      	adds	r1, r4, r0
 8004794:	428b      	cmp	r3, r1
 8004796:	bf04      	itt	eq
 8004798:	6819      	ldreq	r1, [r3, #0]
 800479a:	685b      	ldreq	r3, [r3, #4]
 800479c:	6063      	str	r3, [r4, #4]
 800479e:	bf04      	itt	eq
 80047a0:	1809      	addeq	r1, r1, r0
 80047a2:	6021      	streq	r1, [r4, #0]
 80047a4:	6054      	str	r4, [r2, #4]
 80047a6:	e7ca      	b.n	800473e <_free_r+0x22>
 80047a8:	bd38      	pop	{r3, r4, r5, pc}
 80047aa:	bf00      	nop
 80047ac:	20000684 	.word	0x20000684

080047b0 <sbrk_aligned>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	4e0f      	ldr	r6, [pc, #60]	@ (80047f0 <sbrk_aligned+0x40>)
 80047b4:	460c      	mov	r4, r1
 80047b6:	6831      	ldr	r1, [r6, #0]
 80047b8:	4605      	mov	r5, r0
 80047ba:	b911      	cbnz	r1, 80047c2 <sbrk_aligned+0x12>
 80047bc:	f000 fba6 	bl	8004f0c <_sbrk_r>
 80047c0:	6030      	str	r0, [r6, #0]
 80047c2:	4621      	mov	r1, r4
 80047c4:	4628      	mov	r0, r5
 80047c6:	f000 fba1 	bl	8004f0c <_sbrk_r>
 80047ca:	1c43      	adds	r3, r0, #1
 80047cc:	d103      	bne.n	80047d6 <sbrk_aligned+0x26>
 80047ce:	f04f 34ff 	mov.w	r4, #4294967295
 80047d2:	4620      	mov	r0, r4
 80047d4:	bd70      	pop	{r4, r5, r6, pc}
 80047d6:	1cc4      	adds	r4, r0, #3
 80047d8:	f024 0403 	bic.w	r4, r4, #3
 80047dc:	42a0      	cmp	r0, r4
 80047de:	d0f8      	beq.n	80047d2 <sbrk_aligned+0x22>
 80047e0:	1a21      	subs	r1, r4, r0
 80047e2:	4628      	mov	r0, r5
 80047e4:	f000 fb92 	bl	8004f0c <_sbrk_r>
 80047e8:	3001      	adds	r0, #1
 80047ea:	d1f2      	bne.n	80047d2 <sbrk_aligned+0x22>
 80047ec:	e7ef      	b.n	80047ce <sbrk_aligned+0x1e>
 80047ee:	bf00      	nop
 80047f0:	20000680 	.word	0x20000680

080047f4 <_malloc_r>:
 80047f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047f8:	1ccd      	adds	r5, r1, #3
 80047fa:	f025 0503 	bic.w	r5, r5, #3
 80047fe:	3508      	adds	r5, #8
 8004800:	2d0c      	cmp	r5, #12
 8004802:	bf38      	it	cc
 8004804:	250c      	movcc	r5, #12
 8004806:	2d00      	cmp	r5, #0
 8004808:	4606      	mov	r6, r0
 800480a:	db01      	blt.n	8004810 <_malloc_r+0x1c>
 800480c:	42a9      	cmp	r1, r5
 800480e:	d904      	bls.n	800481a <_malloc_r+0x26>
 8004810:	230c      	movs	r3, #12
 8004812:	6033      	str	r3, [r6, #0]
 8004814:	2000      	movs	r0, #0
 8004816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800481a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048f0 <_malloc_r+0xfc>
 800481e:	f000 f869 	bl	80048f4 <__malloc_lock>
 8004822:	f8d8 3000 	ldr.w	r3, [r8]
 8004826:	461c      	mov	r4, r3
 8004828:	bb44      	cbnz	r4, 800487c <_malloc_r+0x88>
 800482a:	4629      	mov	r1, r5
 800482c:	4630      	mov	r0, r6
 800482e:	f7ff ffbf 	bl	80047b0 <sbrk_aligned>
 8004832:	1c43      	adds	r3, r0, #1
 8004834:	4604      	mov	r4, r0
 8004836:	d158      	bne.n	80048ea <_malloc_r+0xf6>
 8004838:	f8d8 4000 	ldr.w	r4, [r8]
 800483c:	4627      	mov	r7, r4
 800483e:	2f00      	cmp	r7, #0
 8004840:	d143      	bne.n	80048ca <_malloc_r+0xd6>
 8004842:	2c00      	cmp	r4, #0
 8004844:	d04b      	beq.n	80048de <_malloc_r+0xea>
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	4639      	mov	r1, r7
 800484a:	4630      	mov	r0, r6
 800484c:	eb04 0903 	add.w	r9, r4, r3
 8004850:	f000 fb5c 	bl	8004f0c <_sbrk_r>
 8004854:	4581      	cmp	r9, r0
 8004856:	d142      	bne.n	80048de <_malloc_r+0xea>
 8004858:	6821      	ldr	r1, [r4, #0]
 800485a:	1a6d      	subs	r5, r5, r1
 800485c:	4629      	mov	r1, r5
 800485e:	4630      	mov	r0, r6
 8004860:	f7ff ffa6 	bl	80047b0 <sbrk_aligned>
 8004864:	3001      	adds	r0, #1
 8004866:	d03a      	beq.n	80048de <_malloc_r+0xea>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	442b      	add	r3, r5
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	f8d8 3000 	ldr.w	r3, [r8]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	bb62      	cbnz	r2, 80048d0 <_malloc_r+0xdc>
 8004876:	f8c8 7000 	str.w	r7, [r8]
 800487a:	e00f      	b.n	800489c <_malloc_r+0xa8>
 800487c:	6822      	ldr	r2, [r4, #0]
 800487e:	1b52      	subs	r2, r2, r5
 8004880:	d420      	bmi.n	80048c4 <_malloc_r+0xd0>
 8004882:	2a0b      	cmp	r2, #11
 8004884:	d917      	bls.n	80048b6 <_malloc_r+0xc2>
 8004886:	1961      	adds	r1, r4, r5
 8004888:	42a3      	cmp	r3, r4
 800488a:	6025      	str	r5, [r4, #0]
 800488c:	bf18      	it	ne
 800488e:	6059      	strne	r1, [r3, #4]
 8004890:	6863      	ldr	r3, [r4, #4]
 8004892:	bf08      	it	eq
 8004894:	f8c8 1000 	streq.w	r1, [r8]
 8004898:	5162      	str	r2, [r4, r5]
 800489a:	604b      	str	r3, [r1, #4]
 800489c:	4630      	mov	r0, r6
 800489e:	f000 f82f 	bl	8004900 <__malloc_unlock>
 80048a2:	f104 000b 	add.w	r0, r4, #11
 80048a6:	1d23      	adds	r3, r4, #4
 80048a8:	f020 0007 	bic.w	r0, r0, #7
 80048ac:	1ac2      	subs	r2, r0, r3
 80048ae:	bf1c      	itt	ne
 80048b0:	1a1b      	subne	r3, r3, r0
 80048b2:	50a3      	strne	r3, [r4, r2]
 80048b4:	e7af      	b.n	8004816 <_malloc_r+0x22>
 80048b6:	6862      	ldr	r2, [r4, #4]
 80048b8:	42a3      	cmp	r3, r4
 80048ba:	bf0c      	ite	eq
 80048bc:	f8c8 2000 	streq.w	r2, [r8]
 80048c0:	605a      	strne	r2, [r3, #4]
 80048c2:	e7eb      	b.n	800489c <_malloc_r+0xa8>
 80048c4:	4623      	mov	r3, r4
 80048c6:	6864      	ldr	r4, [r4, #4]
 80048c8:	e7ae      	b.n	8004828 <_malloc_r+0x34>
 80048ca:	463c      	mov	r4, r7
 80048cc:	687f      	ldr	r7, [r7, #4]
 80048ce:	e7b6      	b.n	800483e <_malloc_r+0x4a>
 80048d0:	461a      	mov	r2, r3
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	42a3      	cmp	r3, r4
 80048d6:	d1fb      	bne.n	80048d0 <_malloc_r+0xdc>
 80048d8:	2300      	movs	r3, #0
 80048da:	6053      	str	r3, [r2, #4]
 80048dc:	e7de      	b.n	800489c <_malloc_r+0xa8>
 80048de:	230c      	movs	r3, #12
 80048e0:	6033      	str	r3, [r6, #0]
 80048e2:	4630      	mov	r0, r6
 80048e4:	f000 f80c 	bl	8004900 <__malloc_unlock>
 80048e8:	e794      	b.n	8004814 <_malloc_r+0x20>
 80048ea:	6005      	str	r5, [r0, #0]
 80048ec:	e7d6      	b.n	800489c <_malloc_r+0xa8>
 80048ee:	bf00      	nop
 80048f0:	20000684 	.word	0x20000684

080048f4 <__malloc_lock>:
 80048f4:	4801      	ldr	r0, [pc, #4]	@ (80048fc <__malloc_lock+0x8>)
 80048f6:	f7ff bf01 	b.w	80046fc <__retarget_lock_acquire_recursive>
 80048fa:	bf00      	nop
 80048fc:	2000067c 	.word	0x2000067c

08004900 <__malloc_unlock>:
 8004900:	4801      	ldr	r0, [pc, #4]	@ (8004908 <__malloc_unlock+0x8>)
 8004902:	f7ff befc 	b.w	80046fe <__retarget_lock_release_recursive>
 8004906:	bf00      	nop
 8004908:	2000067c 	.word	0x2000067c

0800490c <__ssputs_r>:
 800490c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004910:	688e      	ldr	r6, [r1, #8]
 8004912:	461f      	mov	r7, r3
 8004914:	42be      	cmp	r6, r7
 8004916:	680b      	ldr	r3, [r1, #0]
 8004918:	4682      	mov	sl, r0
 800491a:	460c      	mov	r4, r1
 800491c:	4690      	mov	r8, r2
 800491e:	d82d      	bhi.n	800497c <__ssputs_r+0x70>
 8004920:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004924:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004928:	d026      	beq.n	8004978 <__ssputs_r+0x6c>
 800492a:	6965      	ldr	r5, [r4, #20]
 800492c:	6909      	ldr	r1, [r1, #16]
 800492e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004932:	eba3 0901 	sub.w	r9, r3, r1
 8004936:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800493a:	1c7b      	adds	r3, r7, #1
 800493c:	444b      	add	r3, r9
 800493e:	106d      	asrs	r5, r5, #1
 8004940:	429d      	cmp	r5, r3
 8004942:	bf38      	it	cc
 8004944:	461d      	movcc	r5, r3
 8004946:	0553      	lsls	r3, r2, #21
 8004948:	d527      	bpl.n	800499a <__ssputs_r+0x8e>
 800494a:	4629      	mov	r1, r5
 800494c:	f7ff ff52 	bl	80047f4 <_malloc_r>
 8004950:	4606      	mov	r6, r0
 8004952:	b360      	cbz	r0, 80049ae <__ssputs_r+0xa2>
 8004954:	6921      	ldr	r1, [r4, #16]
 8004956:	464a      	mov	r2, r9
 8004958:	f7ff fed2 	bl	8004700 <memcpy>
 800495c:	89a3      	ldrh	r3, [r4, #12]
 800495e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004966:	81a3      	strh	r3, [r4, #12]
 8004968:	6126      	str	r6, [r4, #16]
 800496a:	6165      	str	r5, [r4, #20]
 800496c:	444e      	add	r6, r9
 800496e:	eba5 0509 	sub.w	r5, r5, r9
 8004972:	6026      	str	r6, [r4, #0]
 8004974:	60a5      	str	r5, [r4, #8]
 8004976:	463e      	mov	r6, r7
 8004978:	42be      	cmp	r6, r7
 800497a:	d900      	bls.n	800497e <__ssputs_r+0x72>
 800497c:	463e      	mov	r6, r7
 800497e:	6820      	ldr	r0, [r4, #0]
 8004980:	4632      	mov	r2, r6
 8004982:	4641      	mov	r1, r8
 8004984:	f000 faa8 	bl	8004ed8 <memmove>
 8004988:	68a3      	ldr	r3, [r4, #8]
 800498a:	1b9b      	subs	r3, r3, r6
 800498c:	60a3      	str	r3, [r4, #8]
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	4433      	add	r3, r6
 8004992:	6023      	str	r3, [r4, #0]
 8004994:	2000      	movs	r0, #0
 8004996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499a:	462a      	mov	r2, r5
 800499c:	f000 fac6 	bl	8004f2c <_realloc_r>
 80049a0:	4606      	mov	r6, r0
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d1e0      	bne.n	8004968 <__ssputs_r+0x5c>
 80049a6:	6921      	ldr	r1, [r4, #16]
 80049a8:	4650      	mov	r0, sl
 80049aa:	f7ff feb7 	bl	800471c <_free_r>
 80049ae:	230c      	movs	r3, #12
 80049b0:	f8ca 3000 	str.w	r3, [sl]
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ba:	81a3      	strh	r3, [r4, #12]
 80049bc:	f04f 30ff 	mov.w	r0, #4294967295
 80049c0:	e7e9      	b.n	8004996 <__ssputs_r+0x8a>
	...

080049c4 <_svfiprintf_r>:
 80049c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c8:	4698      	mov	r8, r3
 80049ca:	898b      	ldrh	r3, [r1, #12]
 80049cc:	061b      	lsls	r3, r3, #24
 80049ce:	b09d      	sub	sp, #116	@ 0x74
 80049d0:	4607      	mov	r7, r0
 80049d2:	460d      	mov	r5, r1
 80049d4:	4614      	mov	r4, r2
 80049d6:	d510      	bpl.n	80049fa <_svfiprintf_r+0x36>
 80049d8:	690b      	ldr	r3, [r1, #16]
 80049da:	b973      	cbnz	r3, 80049fa <_svfiprintf_r+0x36>
 80049dc:	2140      	movs	r1, #64	@ 0x40
 80049de:	f7ff ff09 	bl	80047f4 <_malloc_r>
 80049e2:	6028      	str	r0, [r5, #0]
 80049e4:	6128      	str	r0, [r5, #16]
 80049e6:	b930      	cbnz	r0, 80049f6 <_svfiprintf_r+0x32>
 80049e8:	230c      	movs	r3, #12
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	b01d      	add	sp, #116	@ 0x74
 80049f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f6:	2340      	movs	r3, #64	@ 0x40
 80049f8:	616b      	str	r3, [r5, #20]
 80049fa:	2300      	movs	r3, #0
 80049fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80049fe:	2320      	movs	r3, #32
 8004a00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a04:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a08:	2330      	movs	r3, #48	@ 0x30
 8004a0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ba8 <_svfiprintf_r+0x1e4>
 8004a0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a12:	f04f 0901 	mov.w	r9, #1
 8004a16:	4623      	mov	r3, r4
 8004a18:	469a      	mov	sl, r3
 8004a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a1e:	b10a      	cbz	r2, 8004a24 <_svfiprintf_r+0x60>
 8004a20:	2a25      	cmp	r2, #37	@ 0x25
 8004a22:	d1f9      	bne.n	8004a18 <_svfiprintf_r+0x54>
 8004a24:	ebba 0b04 	subs.w	fp, sl, r4
 8004a28:	d00b      	beq.n	8004a42 <_svfiprintf_r+0x7e>
 8004a2a:	465b      	mov	r3, fp
 8004a2c:	4622      	mov	r2, r4
 8004a2e:	4629      	mov	r1, r5
 8004a30:	4638      	mov	r0, r7
 8004a32:	f7ff ff6b 	bl	800490c <__ssputs_r>
 8004a36:	3001      	adds	r0, #1
 8004a38:	f000 80a7 	beq.w	8004b8a <_svfiprintf_r+0x1c6>
 8004a3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a3e:	445a      	add	r2, fp
 8004a40:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a42:	f89a 3000 	ldrb.w	r3, [sl]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 809f 	beq.w	8004b8a <_svfiprintf_r+0x1c6>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a56:	f10a 0a01 	add.w	sl, sl, #1
 8004a5a:	9304      	str	r3, [sp, #16]
 8004a5c:	9307      	str	r3, [sp, #28]
 8004a5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a62:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a64:	4654      	mov	r4, sl
 8004a66:	2205      	movs	r2, #5
 8004a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a6c:	484e      	ldr	r0, [pc, #312]	@ (8004ba8 <_svfiprintf_r+0x1e4>)
 8004a6e:	f7fb fbaf 	bl	80001d0 <memchr>
 8004a72:	9a04      	ldr	r2, [sp, #16]
 8004a74:	b9d8      	cbnz	r0, 8004aae <_svfiprintf_r+0xea>
 8004a76:	06d0      	lsls	r0, r2, #27
 8004a78:	bf44      	itt	mi
 8004a7a:	2320      	movmi	r3, #32
 8004a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a80:	0711      	lsls	r1, r2, #28
 8004a82:	bf44      	itt	mi
 8004a84:	232b      	movmi	r3, #43	@ 0x2b
 8004a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a90:	d015      	beq.n	8004abe <_svfiprintf_r+0xfa>
 8004a92:	9a07      	ldr	r2, [sp, #28]
 8004a94:	4654      	mov	r4, sl
 8004a96:	2000      	movs	r0, #0
 8004a98:	f04f 0c0a 	mov.w	ip, #10
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004aa2:	3b30      	subs	r3, #48	@ 0x30
 8004aa4:	2b09      	cmp	r3, #9
 8004aa6:	d94b      	bls.n	8004b40 <_svfiprintf_r+0x17c>
 8004aa8:	b1b0      	cbz	r0, 8004ad8 <_svfiprintf_r+0x114>
 8004aaa:	9207      	str	r2, [sp, #28]
 8004aac:	e014      	b.n	8004ad8 <_svfiprintf_r+0x114>
 8004aae:	eba0 0308 	sub.w	r3, r0, r8
 8004ab2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	9304      	str	r3, [sp, #16]
 8004aba:	46a2      	mov	sl, r4
 8004abc:	e7d2      	b.n	8004a64 <_svfiprintf_r+0xa0>
 8004abe:	9b03      	ldr	r3, [sp, #12]
 8004ac0:	1d19      	adds	r1, r3, #4
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	9103      	str	r1, [sp, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	bfbb      	ittet	lt
 8004aca:	425b      	neglt	r3, r3
 8004acc:	f042 0202 	orrlt.w	r2, r2, #2
 8004ad0:	9307      	strge	r3, [sp, #28]
 8004ad2:	9307      	strlt	r3, [sp, #28]
 8004ad4:	bfb8      	it	lt
 8004ad6:	9204      	strlt	r2, [sp, #16]
 8004ad8:	7823      	ldrb	r3, [r4, #0]
 8004ada:	2b2e      	cmp	r3, #46	@ 0x2e
 8004adc:	d10a      	bne.n	8004af4 <_svfiprintf_r+0x130>
 8004ade:	7863      	ldrb	r3, [r4, #1]
 8004ae0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ae2:	d132      	bne.n	8004b4a <_svfiprintf_r+0x186>
 8004ae4:	9b03      	ldr	r3, [sp, #12]
 8004ae6:	1d1a      	adds	r2, r3, #4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	9203      	str	r2, [sp, #12]
 8004aec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004af0:	3402      	adds	r4, #2
 8004af2:	9305      	str	r3, [sp, #20]
 8004af4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004bb8 <_svfiprintf_r+0x1f4>
 8004af8:	7821      	ldrb	r1, [r4, #0]
 8004afa:	2203      	movs	r2, #3
 8004afc:	4650      	mov	r0, sl
 8004afe:	f7fb fb67 	bl	80001d0 <memchr>
 8004b02:	b138      	cbz	r0, 8004b14 <_svfiprintf_r+0x150>
 8004b04:	9b04      	ldr	r3, [sp, #16]
 8004b06:	eba0 000a 	sub.w	r0, r0, sl
 8004b0a:	2240      	movs	r2, #64	@ 0x40
 8004b0c:	4082      	lsls	r2, r0
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	3401      	adds	r4, #1
 8004b12:	9304      	str	r3, [sp, #16]
 8004b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b18:	4824      	ldr	r0, [pc, #144]	@ (8004bac <_svfiprintf_r+0x1e8>)
 8004b1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b1e:	2206      	movs	r2, #6
 8004b20:	f7fb fb56 	bl	80001d0 <memchr>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d036      	beq.n	8004b96 <_svfiprintf_r+0x1d2>
 8004b28:	4b21      	ldr	r3, [pc, #132]	@ (8004bb0 <_svfiprintf_r+0x1ec>)
 8004b2a:	bb1b      	cbnz	r3, 8004b74 <_svfiprintf_r+0x1b0>
 8004b2c:	9b03      	ldr	r3, [sp, #12]
 8004b2e:	3307      	adds	r3, #7
 8004b30:	f023 0307 	bic.w	r3, r3, #7
 8004b34:	3308      	adds	r3, #8
 8004b36:	9303      	str	r3, [sp, #12]
 8004b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b3a:	4433      	add	r3, r6
 8004b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b3e:	e76a      	b.n	8004a16 <_svfiprintf_r+0x52>
 8004b40:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b44:	460c      	mov	r4, r1
 8004b46:	2001      	movs	r0, #1
 8004b48:	e7a8      	b.n	8004a9c <_svfiprintf_r+0xd8>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	3401      	adds	r4, #1
 8004b4e:	9305      	str	r3, [sp, #20]
 8004b50:	4619      	mov	r1, r3
 8004b52:	f04f 0c0a 	mov.w	ip, #10
 8004b56:	4620      	mov	r0, r4
 8004b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b5c:	3a30      	subs	r2, #48	@ 0x30
 8004b5e:	2a09      	cmp	r2, #9
 8004b60:	d903      	bls.n	8004b6a <_svfiprintf_r+0x1a6>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0c6      	beq.n	8004af4 <_svfiprintf_r+0x130>
 8004b66:	9105      	str	r1, [sp, #20]
 8004b68:	e7c4      	b.n	8004af4 <_svfiprintf_r+0x130>
 8004b6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b6e:	4604      	mov	r4, r0
 8004b70:	2301      	movs	r3, #1
 8004b72:	e7f0      	b.n	8004b56 <_svfiprintf_r+0x192>
 8004b74:	ab03      	add	r3, sp, #12
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	462a      	mov	r2, r5
 8004b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb4 <_svfiprintf_r+0x1f0>)
 8004b7c:	a904      	add	r1, sp, #16
 8004b7e:	4638      	mov	r0, r7
 8004b80:	f3af 8000 	nop.w
 8004b84:	1c42      	adds	r2, r0, #1
 8004b86:	4606      	mov	r6, r0
 8004b88:	d1d6      	bne.n	8004b38 <_svfiprintf_r+0x174>
 8004b8a:	89ab      	ldrh	r3, [r5, #12]
 8004b8c:	065b      	lsls	r3, r3, #25
 8004b8e:	f53f af2d 	bmi.w	80049ec <_svfiprintf_r+0x28>
 8004b92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b94:	e72c      	b.n	80049f0 <_svfiprintf_r+0x2c>
 8004b96:	ab03      	add	r3, sp, #12
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	462a      	mov	r2, r5
 8004b9c:	4b05      	ldr	r3, [pc, #20]	@ (8004bb4 <_svfiprintf_r+0x1f0>)
 8004b9e:	a904      	add	r1, sp, #16
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	f000 f879 	bl	8004c98 <_printf_i>
 8004ba6:	e7ed      	b.n	8004b84 <_svfiprintf_r+0x1c0>
 8004ba8:	0800501c 	.word	0x0800501c
 8004bac:	08005026 	.word	0x08005026
 8004bb0:	00000000 	.word	0x00000000
 8004bb4:	0800490d 	.word	0x0800490d
 8004bb8:	08005022 	.word	0x08005022

08004bbc <_printf_common>:
 8004bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc0:	4616      	mov	r6, r2
 8004bc2:	4698      	mov	r8, r3
 8004bc4:	688a      	ldr	r2, [r1, #8]
 8004bc6:	690b      	ldr	r3, [r1, #16]
 8004bc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	bfb8      	it	lt
 8004bd0:	4613      	movlt	r3, r2
 8004bd2:	6033      	str	r3, [r6, #0]
 8004bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bd8:	4607      	mov	r7, r0
 8004bda:	460c      	mov	r4, r1
 8004bdc:	b10a      	cbz	r2, 8004be2 <_printf_common+0x26>
 8004bde:	3301      	adds	r3, #1
 8004be0:	6033      	str	r3, [r6, #0]
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	0699      	lsls	r1, r3, #26
 8004be6:	bf42      	ittt	mi
 8004be8:	6833      	ldrmi	r3, [r6, #0]
 8004bea:	3302      	addmi	r3, #2
 8004bec:	6033      	strmi	r3, [r6, #0]
 8004bee:	6825      	ldr	r5, [r4, #0]
 8004bf0:	f015 0506 	ands.w	r5, r5, #6
 8004bf4:	d106      	bne.n	8004c04 <_printf_common+0x48>
 8004bf6:	f104 0a19 	add.w	sl, r4, #25
 8004bfa:	68e3      	ldr	r3, [r4, #12]
 8004bfc:	6832      	ldr	r2, [r6, #0]
 8004bfe:	1a9b      	subs	r3, r3, r2
 8004c00:	42ab      	cmp	r3, r5
 8004c02:	dc26      	bgt.n	8004c52 <_printf_common+0x96>
 8004c04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c08:	6822      	ldr	r2, [r4, #0]
 8004c0a:	3b00      	subs	r3, #0
 8004c0c:	bf18      	it	ne
 8004c0e:	2301      	movne	r3, #1
 8004c10:	0692      	lsls	r2, r2, #26
 8004c12:	d42b      	bmi.n	8004c6c <_printf_common+0xb0>
 8004c14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c18:	4641      	mov	r1, r8
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	47c8      	blx	r9
 8004c1e:	3001      	adds	r0, #1
 8004c20:	d01e      	beq.n	8004c60 <_printf_common+0xa4>
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	6922      	ldr	r2, [r4, #16]
 8004c26:	f003 0306 	and.w	r3, r3, #6
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	bf02      	ittt	eq
 8004c2e:	68e5      	ldreq	r5, [r4, #12]
 8004c30:	6833      	ldreq	r3, [r6, #0]
 8004c32:	1aed      	subeq	r5, r5, r3
 8004c34:	68a3      	ldr	r3, [r4, #8]
 8004c36:	bf0c      	ite	eq
 8004c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c3c:	2500      	movne	r5, #0
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	bfc4      	itt	gt
 8004c42:	1a9b      	subgt	r3, r3, r2
 8004c44:	18ed      	addgt	r5, r5, r3
 8004c46:	2600      	movs	r6, #0
 8004c48:	341a      	adds	r4, #26
 8004c4a:	42b5      	cmp	r5, r6
 8004c4c:	d11a      	bne.n	8004c84 <_printf_common+0xc8>
 8004c4e:	2000      	movs	r0, #0
 8004c50:	e008      	b.n	8004c64 <_printf_common+0xa8>
 8004c52:	2301      	movs	r3, #1
 8004c54:	4652      	mov	r2, sl
 8004c56:	4641      	mov	r1, r8
 8004c58:	4638      	mov	r0, r7
 8004c5a:	47c8      	blx	r9
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d103      	bne.n	8004c68 <_printf_common+0xac>
 8004c60:	f04f 30ff 	mov.w	r0, #4294967295
 8004c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c68:	3501      	adds	r5, #1
 8004c6a:	e7c6      	b.n	8004bfa <_printf_common+0x3e>
 8004c6c:	18e1      	adds	r1, r4, r3
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	2030      	movs	r0, #48	@ 0x30
 8004c72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c76:	4422      	add	r2, r4
 8004c78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c80:	3302      	adds	r3, #2
 8004c82:	e7c7      	b.n	8004c14 <_printf_common+0x58>
 8004c84:	2301      	movs	r3, #1
 8004c86:	4622      	mov	r2, r4
 8004c88:	4641      	mov	r1, r8
 8004c8a:	4638      	mov	r0, r7
 8004c8c:	47c8      	blx	r9
 8004c8e:	3001      	adds	r0, #1
 8004c90:	d0e6      	beq.n	8004c60 <_printf_common+0xa4>
 8004c92:	3601      	adds	r6, #1
 8004c94:	e7d9      	b.n	8004c4a <_printf_common+0x8e>
	...

08004c98 <_printf_i>:
 8004c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c9c:	7e0f      	ldrb	r7, [r1, #24]
 8004c9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ca0:	2f78      	cmp	r7, #120	@ 0x78
 8004ca2:	4691      	mov	r9, r2
 8004ca4:	4680      	mov	r8, r0
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	469a      	mov	sl, r3
 8004caa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004cae:	d807      	bhi.n	8004cc0 <_printf_i+0x28>
 8004cb0:	2f62      	cmp	r7, #98	@ 0x62
 8004cb2:	d80a      	bhi.n	8004cca <_printf_i+0x32>
 8004cb4:	2f00      	cmp	r7, #0
 8004cb6:	f000 80d2 	beq.w	8004e5e <_printf_i+0x1c6>
 8004cba:	2f58      	cmp	r7, #88	@ 0x58
 8004cbc:	f000 80b9 	beq.w	8004e32 <_printf_i+0x19a>
 8004cc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004cc8:	e03a      	b.n	8004d40 <_printf_i+0xa8>
 8004cca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004cce:	2b15      	cmp	r3, #21
 8004cd0:	d8f6      	bhi.n	8004cc0 <_printf_i+0x28>
 8004cd2:	a101      	add	r1, pc, #4	@ (adr r1, 8004cd8 <_printf_i+0x40>)
 8004cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cd8:	08004d31 	.word	0x08004d31
 8004cdc:	08004d45 	.word	0x08004d45
 8004ce0:	08004cc1 	.word	0x08004cc1
 8004ce4:	08004cc1 	.word	0x08004cc1
 8004ce8:	08004cc1 	.word	0x08004cc1
 8004cec:	08004cc1 	.word	0x08004cc1
 8004cf0:	08004d45 	.word	0x08004d45
 8004cf4:	08004cc1 	.word	0x08004cc1
 8004cf8:	08004cc1 	.word	0x08004cc1
 8004cfc:	08004cc1 	.word	0x08004cc1
 8004d00:	08004cc1 	.word	0x08004cc1
 8004d04:	08004e45 	.word	0x08004e45
 8004d08:	08004d6f 	.word	0x08004d6f
 8004d0c:	08004dff 	.word	0x08004dff
 8004d10:	08004cc1 	.word	0x08004cc1
 8004d14:	08004cc1 	.word	0x08004cc1
 8004d18:	08004e67 	.word	0x08004e67
 8004d1c:	08004cc1 	.word	0x08004cc1
 8004d20:	08004d6f 	.word	0x08004d6f
 8004d24:	08004cc1 	.word	0x08004cc1
 8004d28:	08004cc1 	.word	0x08004cc1
 8004d2c:	08004e07 	.word	0x08004e07
 8004d30:	6833      	ldr	r3, [r6, #0]
 8004d32:	1d1a      	adds	r2, r3, #4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6032      	str	r2, [r6, #0]
 8004d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d40:	2301      	movs	r3, #1
 8004d42:	e09d      	b.n	8004e80 <_printf_i+0x1e8>
 8004d44:	6833      	ldr	r3, [r6, #0]
 8004d46:	6820      	ldr	r0, [r4, #0]
 8004d48:	1d19      	adds	r1, r3, #4
 8004d4a:	6031      	str	r1, [r6, #0]
 8004d4c:	0606      	lsls	r6, r0, #24
 8004d4e:	d501      	bpl.n	8004d54 <_printf_i+0xbc>
 8004d50:	681d      	ldr	r5, [r3, #0]
 8004d52:	e003      	b.n	8004d5c <_printf_i+0xc4>
 8004d54:	0645      	lsls	r5, r0, #25
 8004d56:	d5fb      	bpl.n	8004d50 <_printf_i+0xb8>
 8004d58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d5c:	2d00      	cmp	r5, #0
 8004d5e:	da03      	bge.n	8004d68 <_printf_i+0xd0>
 8004d60:	232d      	movs	r3, #45	@ 0x2d
 8004d62:	426d      	negs	r5, r5
 8004d64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d68:	4859      	ldr	r0, [pc, #356]	@ (8004ed0 <_printf_i+0x238>)
 8004d6a:	230a      	movs	r3, #10
 8004d6c:	e011      	b.n	8004d92 <_printf_i+0xfa>
 8004d6e:	6821      	ldr	r1, [r4, #0]
 8004d70:	6833      	ldr	r3, [r6, #0]
 8004d72:	0608      	lsls	r0, r1, #24
 8004d74:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d78:	d402      	bmi.n	8004d80 <_printf_i+0xe8>
 8004d7a:	0649      	lsls	r1, r1, #25
 8004d7c:	bf48      	it	mi
 8004d7e:	b2ad      	uxthmi	r5, r5
 8004d80:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d82:	4853      	ldr	r0, [pc, #332]	@ (8004ed0 <_printf_i+0x238>)
 8004d84:	6033      	str	r3, [r6, #0]
 8004d86:	bf14      	ite	ne
 8004d88:	230a      	movne	r3, #10
 8004d8a:	2308      	moveq	r3, #8
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d92:	6866      	ldr	r6, [r4, #4]
 8004d94:	60a6      	str	r6, [r4, #8]
 8004d96:	2e00      	cmp	r6, #0
 8004d98:	bfa2      	ittt	ge
 8004d9a:	6821      	ldrge	r1, [r4, #0]
 8004d9c:	f021 0104 	bicge.w	r1, r1, #4
 8004da0:	6021      	strge	r1, [r4, #0]
 8004da2:	b90d      	cbnz	r5, 8004da8 <_printf_i+0x110>
 8004da4:	2e00      	cmp	r6, #0
 8004da6:	d04b      	beq.n	8004e40 <_printf_i+0x1a8>
 8004da8:	4616      	mov	r6, r2
 8004daa:	fbb5 f1f3 	udiv	r1, r5, r3
 8004dae:	fb03 5711 	mls	r7, r3, r1, r5
 8004db2:	5dc7      	ldrb	r7, [r0, r7]
 8004db4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004db8:	462f      	mov	r7, r5
 8004dba:	42bb      	cmp	r3, r7
 8004dbc:	460d      	mov	r5, r1
 8004dbe:	d9f4      	bls.n	8004daa <_printf_i+0x112>
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d10b      	bne.n	8004ddc <_printf_i+0x144>
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	07df      	lsls	r7, r3, #31
 8004dc8:	d508      	bpl.n	8004ddc <_printf_i+0x144>
 8004dca:	6923      	ldr	r3, [r4, #16]
 8004dcc:	6861      	ldr	r1, [r4, #4]
 8004dce:	4299      	cmp	r1, r3
 8004dd0:	bfde      	ittt	le
 8004dd2:	2330      	movle	r3, #48	@ 0x30
 8004dd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ddc:	1b92      	subs	r2, r2, r6
 8004dde:	6122      	str	r2, [r4, #16]
 8004de0:	f8cd a000 	str.w	sl, [sp]
 8004de4:	464b      	mov	r3, r9
 8004de6:	aa03      	add	r2, sp, #12
 8004de8:	4621      	mov	r1, r4
 8004dea:	4640      	mov	r0, r8
 8004dec:	f7ff fee6 	bl	8004bbc <_printf_common>
 8004df0:	3001      	adds	r0, #1
 8004df2:	d14a      	bne.n	8004e8a <_printf_i+0x1f2>
 8004df4:	f04f 30ff 	mov.w	r0, #4294967295
 8004df8:	b004      	add	sp, #16
 8004dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	f043 0320 	orr.w	r3, r3, #32
 8004e04:	6023      	str	r3, [r4, #0]
 8004e06:	4833      	ldr	r0, [pc, #204]	@ (8004ed4 <_printf_i+0x23c>)
 8004e08:	2778      	movs	r7, #120	@ 0x78
 8004e0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	6831      	ldr	r1, [r6, #0]
 8004e12:	061f      	lsls	r7, r3, #24
 8004e14:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e18:	d402      	bmi.n	8004e20 <_printf_i+0x188>
 8004e1a:	065f      	lsls	r7, r3, #25
 8004e1c:	bf48      	it	mi
 8004e1e:	b2ad      	uxthmi	r5, r5
 8004e20:	6031      	str	r1, [r6, #0]
 8004e22:	07d9      	lsls	r1, r3, #31
 8004e24:	bf44      	itt	mi
 8004e26:	f043 0320 	orrmi.w	r3, r3, #32
 8004e2a:	6023      	strmi	r3, [r4, #0]
 8004e2c:	b11d      	cbz	r5, 8004e36 <_printf_i+0x19e>
 8004e2e:	2310      	movs	r3, #16
 8004e30:	e7ac      	b.n	8004d8c <_printf_i+0xf4>
 8004e32:	4827      	ldr	r0, [pc, #156]	@ (8004ed0 <_printf_i+0x238>)
 8004e34:	e7e9      	b.n	8004e0a <_printf_i+0x172>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	f023 0320 	bic.w	r3, r3, #32
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	e7f6      	b.n	8004e2e <_printf_i+0x196>
 8004e40:	4616      	mov	r6, r2
 8004e42:	e7bd      	b.n	8004dc0 <_printf_i+0x128>
 8004e44:	6833      	ldr	r3, [r6, #0]
 8004e46:	6825      	ldr	r5, [r4, #0]
 8004e48:	6961      	ldr	r1, [r4, #20]
 8004e4a:	1d18      	adds	r0, r3, #4
 8004e4c:	6030      	str	r0, [r6, #0]
 8004e4e:	062e      	lsls	r6, r5, #24
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	d501      	bpl.n	8004e58 <_printf_i+0x1c0>
 8004e54:	6019      	str	r1, [r3, #0]
 8004e56:	e002      	b.n	8004e5e <_printf_i+0x1c6>
 8004e58:	0668      	lsls	r0, r5, #25
 8004e5a:	d5fb      	bpl.n	8004e54 <_printf_i+0x1bc>
 8004e5c:	8019      	strh	r1, [r3, #0]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	6123      	str	r3, [r4, #16]
 8004e62:	4616      	mov	r6, r2
 8004e64:	e7bc      	b.n	8004de0 <_printf_i+0x148>
 8004e66:	6833      	ldr	r3, [r6, #0]
 8004e68:	1d1a      	adds	r2, r3, #4
 8004e6a:	6032      	str	r2, [r6, #0]
 8004e6c:	681e      	ldr	r6, [r3, #0]
 8004e6e:	6862      	ldr	r2, [r4, #4]
 8004e70:	2100      	movs	r1, #0
 8004e72:	4630      	mov	r0, r6
 8004e74:	f7fb f9ac 	bl	80001d0 <memchr>
 8004e78:	b108      	cbz	r0, 8004e7e <_printf_i+0x1e6>
 8004e7a:	1b80      	subs	r0, r0, r6
 8004e7c:	6060      	str	r0, [r4, #4]
 8004e7e:	6863      	ldr	r3, [r4, #4]
 8004e80:	6123      	str	r3, [r4, #16]
 8004e82:	2300      	movs	r3, #0
 8004e84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e88:	e7aa      	b.n	8004de0 <_printf_i+0x148>
 8004e8a:	6923      	ldr	r3, [r4, #16]
 8004e8c:	4632      	mov	r2, r6
 8004e8e:	4649      	mov	r1, r9
 8004e90:	4640      	mov	r0, r8
 8004e92:	47d0      	blx	sl
 8004e94:	3001      	adds	r0, #1
 8004e96:	d0ad      	beq.n	8004df4 <_printf_i+0x15c>
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	079b      	lsls	r3, r3, #30
 8004e9c:	d413      	bmi.n	8004ec6 <_printf_i+0x22e>
 8004e9e:	68e0      	ldr	r0, [r4, #12]
 8004ea0:	9b03      	ldr	r3, [sp, #12]
 8004ea2:	4298      	cmp	r0, r3
 8004ea4:	bfb8      	it	lt
 8004ea6:	4618      	movlt	r0, r3
 8004ea8:	e7a6      	b.n	8004df8 <_printf_i+0x160>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4632      	mov	r2, r6
 8004eae:	4649      	mov	r1, r9
 8004eb0:	4640      	mov	r0, r8
 8004eb2:	47d0      	blx	sl
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d09d      	beq.n	8004df4 <_printf_i+0x15c>
 8004eb8:	3501      	adds	r5, #1
 8004eba:	68e3      	ldr	r3, [r4, #12]
 8004ebc:	9903      	ldr	r1, [sp, #12]
 8004ebe:	1a5b      	subs	r3, r3, r1
 8004ec0:	42ab      	cmp	r3, r5
 8004ec2:	dcf2      	bgt.n	8004eaa <_printf_i+0x212>
 8004ec4:	e7eb      	b.n	8004e9e <_printf_i+0x206>
 8004ec6:	2500      	movs	r5, #0
 8004ec8:	f104 0619 	add.w	r6, r4, #25
 8004ecc:	e7f5      	b.n	8004eba <_printf_i+0x222>
 8004ece:	bf00      	nop
 8004ed0:	0800502d 	.word	0x0800502d
 8004ed4:	0800503e 	.word	0x0800503e

08004ed8 <memmove>:
 8004ed8:	4288      	cmp	r0, r1
 8004eda:	b510      	push	{r4, lr}
 8004edc:	eb01 0402 	add.w	r4, r1, r2
 8004ee0:	d902      	bls.n	8004ee8 <memmove+0x10>
 8004ee2:	4284      	cmp	r4, r0
 8004ee4:	4623      	mov	r3, r4
 8004ee6:	d807      	bhi.n	8004ef8 <memmove+0x20>
 8004ee8:	1e43      	subs	r3, r0, #1
 8004eea:	42a1      	cmp	r1, r4
 8004eec:	d008      	beq.n	8004f00 <memmove+0x28>
 8004eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ef6:	e7f8      	b.n	8004eea <memmove+0x12>
 8004ef8:	4402      	add	r2, r0
 8004efa:	4601      	mov	r1, r0
 8004efc:	428a      	cmp	r2, r1
 8004efe:	d100      	bne.n	8004f02 <memmove+0x2a>
 8004f00:	bd10      	pop	{r4, pc}
 8004f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f0a:	e7f7      	b.n	8004efc <memmove+0x24>

08004f0c <_sbrk_r>:
 8004f0c:	b538      	push	{r3, r4, r5, lr}
 8004f0e:	4d06      	ldr	r5, [pc, #24]	@ (8004f28 <_sbrk_r+0x1c>)
 8004f10:	2300      	movs	r3, #0
 8004f12:	4604      	mov	r4, r0
 8004f14:	4608      	mov	r0, r1
 8004f16:	602b      	str	r3, [r5, #0]
 8004f18:	f7fb fe00 	bl	8000b1c <_sbrk>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d102      	bne.n	8004f26 <_sbrk_r+0x1a>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	b103      	cbz	r3, 8004f26 <_sbrk_r+0x1a>
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
 8004f28:	20000678 	.word	0x20000678

08004f2c <_realloc_r>:
 8004f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f30:	4680      	mov	r8, r0
 8004f32:	4615      	mov	r5, r2
 8004f34:	460c      	mov	r4, r1
 8004f36:	b921      	cbnz	r1, 8004f42 <_realloc_r+0x16>
 8004f38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	f7ff bc59 	b.w	80047f4 <_malloc_r>
 8004f42:	b92a      	cbnz	r2, 8004f50 <_realloc_r+0x24>
 8004f44:	f7ff fbea 	bl	800471c <_free_r>
 8004f48:	2400      	movs	r4, #0
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f50:	f000 f81a 	bl	8004f88 <_malloc_usable_size_r>
 8004f54:	4285      	cmp	r5, r0
 8004f56:	4606      	mov	r6, r0
 8004f58:	d802      	bhi.n	8004f60 <_realloc_r+0x34>
 8004f5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004f5e:	d8f4      	bhi.n	8004f4a <_realloc_r+0x1e>
 8004f60:	4629      	mov	r1, r5
 8004f62:	4640      	mov	r0, r8
 8004f64:	f7ff fc46 	bl	80047f4 <_malloc_r>
 8004f68:	4607      	mov	r7, r0
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	d0ec      	beq.n	8004f48 <_realloc_r+0x1c>
 8004f6e:	42b5      	cmp	r5, r6
 8004f70:	462a      	mov	r2, r5
 8004f72:	4621      	mov	r1, r4
 8004f74:	bf28      	it	cs
 8004f76:	4632      	movcs	r2, r6
 8004f78:	f7ff fbc2 	bl	8004700 <memcpy>
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	4640      	mov	r0, r8
 8004f80:	f7ff fbcc 	bl	800471c <_free_r>
 8004f84:	463c      	mov	r4, r7
 8004f86:	e7e0      	b.n	8004f4a <_realloc_r+0x1e>

08004f88 <_malloc_usable_size_r>:
 8004f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f8c:	1f18      	subs	r0, r3, #4
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	bfbc      	itt	lt
 8004f92:	580b      	ldrlt	r3, [r1, r0]
 8004f94:	18c0      	addlt	r0, r0, r3
 8004f96:	4770      	bx	lr

08004f98 <_init>:
 8004f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9a:	bf00      	nop
 8004f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9e:	bc08      	pop	{r3}
 8004fa0:	469e      	mov	lr, r3
 8004fa2:	4770      	bx	lr

08004fa4 <_fini>:
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	bf00      	nop
 8004fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004faa:	bc08      	pop	{r3}
 8004fac:	469e      	mov	lr, r3
 8004fae:	4770      	bx	lr
