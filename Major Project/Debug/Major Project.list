
Major Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  08005f68  08005f68  00015f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065c4  080065c4  000202f8  2**0
                  CONTENTS
  4 .ARM          00000000  080065c4  080065c4  000202f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065c4  080065c4  000202f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065c4  080065c4  000165c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065c8  080065c8  000165c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f8  20000000  080065cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202f8  2**0
                  CONTENTS
 10 .bss          00000718  200002f8  200002f8  000202f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a10  20000a10  000202f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010dd7  00000000  00000000  0002036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000031a1  00000000  00000000  00031142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f40  00000000  00000000  000342e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b96  00000000  00000000  00035228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da55  00000000  00000000  00035dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001647e  00000000  00000000  00073813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7c04  00000000  00000000  00089c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004754  00000000  00000000  00171898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  00175fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f8 	.word	0x200002f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f50 	.word	0x08005f50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002fc 	.word	0x200002fc
 80001cc:	08005f50 	.word	0x08005f50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <set_leds>:
#define INCORRECT 0b01010101

// Function set LEDs pattern by binary number
// input: binary led mask pattern
void set_leds(uint8_t led_mask_pattern)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800027a:	4b05      	ldr	r3, [pc, #20]	; (8000290 <set_leds+0x20>)
 800027c:	60fb      	str	r3, [r7, #12]

	if (led_mask_pattern <= 255 && led_mask_pattern >= 0)
	{
		*led_register = led_mask_pattern;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	79fa      	ldrb	r2, [r7, #7]
 8000282:	701a      	strb	r2, [r3, #0]
	}
}
 8000284:	bf00      	nop
 8000286:	3714      	adds	r7, #20
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	48001015 	.word	0x48001015

08000294 <correct_leds>:

void correct_leds() {
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
    // Turn on LEDs
    set_leds(CORRECT);
 8000298:	20ff      	movs	r0, #255	; 0xff
 800029a:	f7ff ffe9 	bl	8000270 <set_leds>

    // Delay for 1 second (adjust delay according to system clock)
    delay(1000);
 800029e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002a2:	f000 ffd7 	bl	8001254 <delay>

    // Turn off LEDs
    set_leds(0);
 80002a6:	2000      	movs	r0, #0
 80002a8:	f7ff ffe2 	bl	8000270 <set_leds>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <incorrect_leds>:

void incorrect_leds() {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
    // Turn on LEDs
    set_leds(INCORRECT);
 80002b4:	2055      	movs	r0, #85	; 0x55
 80002b6:	f7ff ffdb 	bl	8000270 <set_leds>

    // Delay for 1 second (adjust delay according to system clock)
    delay(1000);
 80002ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002be:	f000 ffc9 	bl	8001254 <delay>

    // Turn off LEDs
    set_leds(0);
 80002c2:	2000      	movs	r0, #0
 80002c4:	f7ff ffd4 	bl	8000270 <set_leds>
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}

080002cc <end_leds>:

void end_leds(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	 // Turn on LEDs
	set_leds(CORRECT);
 80002d0:	20ff      	movs	r0, #255	; 0xff
 80002d2:	f7ff ffcd 	bl	8000270 <set_leds>

	// Delay for 5 second (adjust delay according to system clock)
	delay(2000);
 80002d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002da:	f000 ffbb 	bl	8001254 <delay>

	// Turn off LEDs
	 set_leds(0);
 80002de:	2000      	movs	r0, #0
 80002e0:	f7ff ffc6 	bl	8000270 <set_leds>
}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <get_gyro_values>:
#include <stdio.h>

#include "BSP/stm32f3_discovery.h"
#include "BSP/stm32f3_discovery_gyroscope.h"

float get_gyro_values(void){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
	float gyro_values[3];

	BSP_GYRO_GetXYZ(&gyro_values[0]);
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4618      	mov	r0, r3
 80002f2:	f003 feeb 	bl	80040cc <BSP_GYRO_GetXYZ>

	return gyro_values[1]/20000;
 80002f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80002fa:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000310 <get_gyro_values+0x28>
 80002fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000302:	eef0 7a66 	vmov.f32	s15, s13
}
 8000306:	eeb0 0a67 	vmov.f32	s0, s15
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	469c4000 	.word	0x469c4000

08000314 <randomWord>:
#include "stm32f303xc.h"
#include "timers.h"

#define NUM_WORDS 100 // Total number of words in the array

char* randomWord() {
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
    };

    static int usedIndices[NUM_WORDS] = {0}; // Static array to track used indices
    static int numUsed = 0; // Count of used words

    if (numUsed == NUM_WORDS) {
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <randomWord+0x6c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b64      	cmp	r3, #100	; 0x64
 8000320:	d108      	bne.n	8000334 <randomWord+0x20>
        // If all words have been used, reset the usedIndices array
        memset(usedIndices, 0, sizeof(usedIndices));
 8000322:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000326:	2100      	movs	r1, #0
 8000328:	4816      	ldr	r0, [pc, #88]	; (8000384 <randomWord+0x70>)
 800032a:	f004 fdae 	bl	8004e8a <memset>
        numUsed = 0;
 800032e:	4b14      	ldr	r3, [pc, #80]	; (8000380 <randomWord+0x6c>)
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
    }

    int numWords = sizeof(allWords) / sizeof(allWords[0]); // Calculate the number of words in the array
 8000334:	2369      	movs	r3, #105	; 0x69
 8000336:	607b      	str	r3, [r7, #4]

    int randomIndex;
    do {
        randomIndex = rand() % numWords; // Generate a random index within the bounds of the array
 8000338:	f004 fc44 	bl	8004bc4 <rand>
 800033c:	4603      	mov	r3, r0
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	fb93 f2f2 	sdiv	r2, r3, r2
 8000344:	6879      	ldr	r1, [r7, #4]
 8000346:	fb01 f202 	mul.w	r2, r1, r2
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	603b      	str	r3, [r7, #0]
    } while (usedIndices[randomIndex]); // Check if the word at this index has been used
 800034e:	4a0d      	ldr	r2, [pc, #52]	; (8000384 <randomWord+0x70>)
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1ee      	bne.n	8000338 <randomWord+0x24>

    usedIndices[randomIndex] = 1; // Mark this index as used
 800035a:	4a0a      	ldr	r2, [pc, #40]	; (8000384 <randomWord+0x70>)
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	2101      	movs	r1, #1
 8000360:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    numUsed++; // Increment the count of used words
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <randomWord+0x6c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	3301      	adds	r3, #1
 800036a:	4a05      	ldr	r2, [pc, #20]	; (8000380 <randomWord+0x6c>)
 800036c:	6013      	str	r3, [r2, #0]

    return allWords[randomIndex]; // Return the randomly chosen word
 800036e:	4a06      	ldr	r2, [pc, #24]	; (8000388 <randomWord+0x74>)
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000376:	4618      	mov	r0, r3
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000318 	.word	0x20000318
 8000384:	2000031c 	.word	0x2000031c
 8000388:	20000000 	.word	0x20000000

0800038c <set_timesUp>:

uint8_t timesUp = 0;

void set_timesUp(){
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
    if (timesUp == 0) {
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <set_timesUp+0x24>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d103      	bne.n	80003a0 <set_timesUp+0x14>
        timesUp = 1;
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <set_timesUp+0x24>)
 800039a:	2201      	movs	r2, #1
 800039c:	701a      	strb	r2, [r3, #0]
    }
    else {
        timesUp = 0;
    }
}
 800039e:	e002      	b.n	80003a6 <set_timesUp+0x1a>
        timesUp = 0;
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <set_timesUp+0x24>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	701a      	strb	r2, [r3, #0]
}
 80003a6:	bf00      	nop
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	20000314 	.word	0x20000314

080003b4 <headsUp>:

void headsUp(uint8_t *P1score, uint8_t *P2score){
 80003b4:	b5b0      	push	{r4, r5, r7, lr}
 80003b6:	b09a      	sub	sp, #104	; 0x68
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	6039      	str	r1, [r7, #0]

	uint8_t string_to_send[64] = "This is a string !\r\n";
 80003be:	4b7b      	ldr	r3, [pc, #492]	; (80005ac <headsUp+0x1f8>)
 80003c0:	f107 041c 	add.w	r4, r7, #28
 80003c4:	461d      	mov	r5, r3
 80003c6:	6828      	ldr	r0, [r5, #0]
 80003c8:	6869      	ldr	r1, [r5, #4]
 80003ca:	68aa      	ldr	r2, [r5, #8]
 80003cc:	68eb      	ldr	r3, [r5, #12]
 80003ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003d0:	6928      	ldr	r0, [r5, #16]
 80003d2:	6020      	str	r0, [r4, #0]
 80003d4:	7d2b      	ldrb	r3, [r5, #20]
 80003d6:	7123      	strb	r3, [r4, #4]
 80003d8:	f107 0331 	add.w	r3, r7, #49	; 0x31
 80003dc:	222b      	movs	r2, #43	; 0x2b
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f004 fd52 	bl	8004e8a <memset>

	for (int i = 1; i <= 2; i++) {
 80003e6:	2301      	movs	r3, #1
 80003e8:	667b      	str	r3, [r7, #100]	; 0x64
 80003ea:	e0d6      	b.n	800059a <headsUp+0x1e6>
		uint8_t Pscore = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

		sprintf(string_to_send, "Player %d your timer starts now!\r\n", i);
 80003f2:	f107 031c 	add.w	r3, r7, #28
 80003f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80003f8:	496d      	ldr	r1, [pc, #436]	; (80005b0 <headsUp+0x1fc>)
 80003fa:	4618      	mov	r0, r3
 80003fc:	f004 fce2 	bl	8004dc4 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000400:	f107 031c 	add.w	r3, r7, #28
 8000404:	496b      	ldr	r1, [pc, #428]	; (80005b4 <headsUp+0x200>)
 8000406:	4618      	mov	r0, r3
 8000408:	f000 fc13 	bl	8000c32 <SerialOutputString>
		game_timer(30000, &set_timesUp);
 800040c:	496a      	ldr	r1, [pc, #424]	; (80005b8 <headsUp+0x204>)
 800040e:	f247 5030 	movw	r0, #30000	; 0x7530
 8000412:	f000 febd 	bl	8001190 <game_timer>

		while (timesUp == 0) {
 8000416:	e06f      	b.n	80004f8 <headsUp+0x144>
			uint8_t outcome = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62


			uint8_t guessWord[20];
			char* random = randomWord();
 800041e:	f7ff ff79 	bl	8000314 <randomWord>
 8000422:	65f8      	str	r0, [r7, #92]	; 0x5c
			strcpy((char*)guessWord, random);
 8000424:	f107 0308 	add.w	r3, r7, #8
 8000428:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800042a:	4618      	mov	r0, r3
 800042c:	f004 fda9 	bl	8004f82 <strcpy>
			sprintf(string_to_send, "%s\r\n", (char*)guessWord);
 8000430:	f107 0208 	add.w	r2, r7, #8
 8000434:	f107 031c 	add.w	r3, r7, #28
 8000438:	4960      	ldr	r1, [pc, #384]	; (80005bc <headsUp+0x208>)
 800043a:	4618      	mov	r0, r3
 800043c:	f004 fcc2 	bl	8004dc4 <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 8000440:	f107 031c 	add.w	r3, r7, #28
 8000444:	495b      	ldr	r1, [pc, #364]	; (80005b4 <headsUp+0x200>)
 8000446:	4618      	mov	r0, r3
 8000448:	f000 fbf3 	bl	8000c32 <SerialOutputString>

			while (!outcome){
 800044c:	e026      	b.n	800049c <headsUp+0xe8>
				if (get_gyro_values() >= 25){
 800044e:	f7ff ff4b 	bl	80002e8 <get_gyro_values>
 8000452:	eef0 7a40 	vmov.f32	s15, s0
 8000456:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800045a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800045e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000462:	db02      	blt.n	800046a <headsUp+0xb6>
					outcome = 1;
 8000464:	2301      	movs	r3, #1
 8000466:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
				}
				if (get_gyro_values() <= -25){
 800046a:	f7ff ff3d 	bl	80002e8 <get_gyro_values>
 800046e:	eef0 7a40 	vmov.f32	s15, s0
 8000472:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
 8000476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800047a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800047e:	d802      	bhi.n	8000486 <headsUp+0xd2>
					outcome = 2;
 8000480:	2302      	movs	r3, #2
 8000482:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
				}
				if (timesUp){
 8000486:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <headsUp+0x20c>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d003      	beq.n	8000496 <headsUp+0xe2>
					outcome = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
					break;
 8000494:	e006      	b.n	80004a4 <headsUp+0xf0>
				}
				delay(100);
 8000496:	2064      	movs	r0, #100	; 0x64
 8000498:	f000 fedc 	bl	8001254 <delay>
			while (!outcome){
 800049c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d0d4      	beq.n	800044e <headsUp+0x9a>
			}

			if (outcome == 1){
 80004a4:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d113      	bne.n	80004d4 <headsUp+0x120>
				Pscore++;
 80004ac:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80004b0:	3301      	adds	r3, #1
 80004b2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
				sprintf(string_to_send, "Correct!\r\n");
 80004b6:	f107 031c 	add.w	r3, r7, #28
 80004ba:	4942      	ldr	r1, [pc, #264]	; (80005c4 <headsUp+0x210>)
 80004bc:	4618      	mov	r0, r3
 80004be:	f004 fc81 	bl	8004dc4 <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 80004c2:	f107 031c 	add.w	r3, r7, #28
 80004c6:	493b      	ldr	r1, [pc, #236]	; (80005b4 <headsUp+0x200>)
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 fbb2 	bl	8000c32 <SerialOutputString>
				correct_leds();
 80004ce:	f7ff fee1 	bl	8000294 <correct_leds>
 80004d2:	e011      	b.n	80004f8 <headsUp+0x144>
			}
			else if (outcome == 2){
 80004d4:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80004d8:	2b02      	cmp	r3, #2
 80004da:	d112      	bne.n	8000502 <headsUp+0x14e>
				sprintf(string_to_send, "Pass!\r\n");
 80004dc:	f107 031c 	add.w	r3, r7, #28
 80004e0:	4939      	ldr	r1, [pc, #228]	; (80005c8 <headsUp+0x214>)
 80004e2:	4618      	mov	r0, r3
 80004e4:	f004 fc6e 	bl	8004dc4 <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 80004e8:	f107 031c 	add.w	r3, r7, #28
 80004ec:	4931      	ldr	r1, [pc, #196]	; (80005b4 <headsUp+0x200>)
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 fb9f 	bl	8000c32 <SerialOutputString>
				incorrect_leds();
 80004f4:	f7ff fedc 	bl	80002b0 <incorrect_leds>
		while (timesUp == 0) {
 80004f8:	4b31      	ldr	r3, [pc, #196]	; (80005c0 <headsUp+0x20c>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d08b      	beq.n	8000418 <headsUp+0x64>
 8000500:	e000      	b.n	8000504 <headsUp+0x150>
			}
			else{
				break;
 8000502:	bf00      	nop
			}
		}
		sprintf(string_to_send, "Time's Up! Player %d's score is %d!\r\n", i, Pscore);
 8000504:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000508:	f107 001c 	add.w	r0, r7, #28
 800050c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800050e:	492f      	ldr	r1, [pc, #188]	; (80005cc <headsUp+0x218>)
 8000510:	f004 fc58 	bl	8004dc4 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000514:	f107 031c 	add.w	r3, r7, #28
 8000518:	4926      	ldr	r1, [pc, #152]	; (80005b4 <headsUp+0x200>)
 800051a:	4618      	mov	r0, r3
 800051c:	f000 fb89 	bl	8000c32 <SerialOutputString>
		end_leds();
 8000520:	f7ff fed4 	bl	80002cc <end_leds>
		if (i == 1){
 8000524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000526:	2b01      	cmp	r3, #1
 8000528:	d11a      	bne.n	8000560 <headsUp+0x1ac>
			*P1score = Pscore;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8000530:	701a      	strb	r2, [r3, #0]
			sprintf(string_to_send, "Press to continue\r\n");
 8000532:	f107 031c 	add.w	r3, r7, #28
 8000536:	4926      	ldr	r1, [pc, #152]	; (80005d0 <headsUp+0x21c>)
 8000538:	4618      	mov	r0, r3
 800053a:	f004 fc43 	bl	8004dc4 <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 800053e:	f107 031c 	add.w	r3, r7, #28
 8000542:	491c      	ldr	r1, [pc, #112]	; (80005b4 <headsUp+0x200>)
 8000544:	4618      	mov	r0, r3
 8000546:	f000 fb74 	bl	8000c32 <SerialOutputString>
			while ((GPIOA->IDR & 0x01) == 0) {}
 800054a:	bf00      	nop
 800054c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000550:	691b      	ldr	r3, [r3, #16]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0f8      	beq.n	800054c <headsUp+0x198>
			set_timesUp();
 800055a:	f7ff ff17 	bl	800038c <set_timesUp>
 800055e:	e019      	b.n	8000594 <headsUp+0x1e0>
		}
		else {
			*P2score = Pscore;
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8000566:	701a      	strb	r2, [r3, #0]
			sprintf(string_to_send, "Press to continue\r\n");
 8000568:	f107 031c 	add.w	r3, r7, #28
 800056c:	4918      	ldr	r1, [pc, #96]	; (80005d0 <headsUp+0x21c>)
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fc28 	bl	8004dc4 <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 8000574:	f107 031c 	add.w	r3, r7, #28
 8000578:	490e      	ldr	r1, [pc, #56]	; (80005b4 <headsUp+0x200>)
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fb59 	bl	8000c32 <SerialOutputString>
			while ((GPIOA->IDR & 0x01) == 0) {}
 8000580:	bf00      	nop
 8000582:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000586:	691b      	ldr	r3, [r3, #16]
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0f8      	beq.n	8000582 <headsUp+0x1ce>
			set_timesUp();
 8000590:	f7ff fefc 	bl	800038c <set_timesUp>
	for (int i = 1; i <= 2; i++) {
 8000594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000596:	3301      	adds	r3, #1
 8000598:	667b      	str	r3, [r7, #100]	; 0x64
 800059a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800059c:	2b02      	cmp	r3, #2
 800059e:	f77f af25 	ble.w	80003ec <headsUp+0x38>
		}
	}
}
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	3768      	adds	r7, #104	; 0x68
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bdb0      	pop	{r4, r5, r7, pc}
 80005ac:	08005fe4 	.word	0x08005fe4
 80005b0:	08005f68 	.word	0x08005f68
 80005b4:	200001a4 	.word	0x200001a4
 80005b8:	0800038d 	.word	0x0800038d
 80005bc:	08005f8c 	.word	0x08005f8c
 80005c0:	20000314 	.word	0x20000314
 80005c4:	08005f94 	.word	0x08005f94
 80005c8:	08005fa0 	.word	0x08005fa0
 80005cc:	08005fa8 	.word	0x08005fa8
 80005d0:	08005fd0 	.word	0x08005fd0

080005d4 <initialise_board>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_USB_PCD_Init(void);

void initialise_board() {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fe97 	bl	800130c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f839 	bl	8000654 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f939 	bl	8000858 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005e6:	f000 f897 	bl	8000718 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005ea:	f000 f8d5 	bl	8000798 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80005ee:	f000 f911 	bl	8000814 <MX_USB_PCD_Init>
  
  BSP_GYRO_Init();
 80005f2:	f003 fcb5 	bl	8003f60 <BSP_GYRO_Init>

  RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <initialise_board+0x70>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <initialise_board+0x70>)
 80005fc:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000600:	6153      	str	r3, [r2, #20]

  RCC->APB1ENR |=  RCC_APB1ENR_TIM2EN;
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <initialise_board+0x70>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <initialise_board+0x70>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	61d3      	str	r3, [r2, #28]
  RCC->APB1ENR |=  RCC_APB1ENR_TIM3EN;
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <initialise_board+0x70>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4a0c      	ldr	r2, [pc, #48]	; (8000644 <initialise_board+0x70>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	61d3      	str	r3, [r2, #28]

  SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 800061a:	2200      	movs	r2, #0
 800061c:	490a      	ldr	r1, [pc, #40]	; (8000648 <initialise_board+0x74>)
 800061e:	2004      	movs	r0, #4
 8000620:	f000 fa68 	bl	8000af4 <SerialInitialise>
  SerialInitialise(BAUD_115200, &UART4_PORT, 0x00);
 8000624:	2200      	movs	r2, #0
 8000626:	4909      	ldr	r1, [pc, #36]	; (800064c <initialise_board+0x78>)
 8000628:	2004      	movs	r0, #4
 800062a:	f000 fa63 	bl	8000af4 <SerialInitialise>

  uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <initialise_board+0x7c>)
 8000630:	607b      	str	r3, [r7, #4]
  *led_output_registers = 0x5555;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f245 5255 	movw	r2, #21845	; 0x5555
 8000638:	801a      	strh	r2, [r3, #0]
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000
 8000648:	200001a4 	.word	0x200001a4
 800064c:	200001e4 	.word	0x200001e4
 8000650:	48001002 	.word	0x48001002

08000654 <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09e      	sub	sp, #120	; 0x78
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800065e:	2228      	movs	r2, #40	; 0x28
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fc11 	bl	8004e8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000678:	463b      	mov	r3, r7
 800067a:	223c      	movs	r2, #60	; 0x3c
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f004 fc03 	bl	8004e8a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000684:	2303      	movs	r3, #3
 8000686:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000688:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800068c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000692:	2301      	movs	r3, #1
 8000694:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000696:	2310      	movs	r3, #16
 8000698:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006a8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fbde 	bl	8001e70 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006ba:	f000 f94b 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006d8:	2101      	movs	r1, #1
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fc06 	bl	8002eec <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006e6:	f000 f935 	bl	8000954 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <SystemClock_Config+0xc0>)
 80006ec:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80006f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 fddc 	bl	80032b8 <HAL_RCCEx_PeriphCLKConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000706:	f000 f925 	bl	8000954 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3778      	adds	r7, #120	; 0x78
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	00020020 	.word	0x00020020

08000718 <MX_I2C1_Init>:

// I2C1 Initialization Function
static void MX_I2C1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_I2C1_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_I2C1_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_I2C1_Init+0x74>)
 8000724:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <MX_I2C1_Init+0x7c>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_I2C1_Init+0x74>)
 8000730:	2201      	movs	r2, #1
 8000732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_I2C1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_I2C1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_I2C1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000752:	480e      	ldr	r0, [pc, #56]	; (800078c <MX_I2C1_Init+0x74>)
 8000754:	f001 f994 	bl	8001a80 <HAL_I2C_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800075e:	f000 f8f9 	bl	8000954 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000762:	2100      	movs	r1, #0
 8000764:	4809      	ldr	r0, [pc, #36]	; (800078c <MX_I2C1_Init+0x74>)
 8000766:	f001 fa1a 	bl	8001b9e <HAL_I2CEx_ConfigAnalogFilter>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000770:	f000 f8f0 	bl	8000954 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000774:	2100      	movs	r1, #0
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_I2C1_Init+0x74>)
 8000778:	f001 fa5c 	bl	8001c34 <HAL_I2CEx_ConfigDigitalFilter>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000782:	f000 f8e7 	bl	8000954 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200004ac 	.word	0x200004ac
 8000790:	40005400 	.word	0x40005400
 8000794:	2000090e 	.word	0x2000090e

08000798 <MX_SPI1_Init>:

// SPI1 Initialization Function
static void MX_SPI1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_SPI1_Init+0x74>)
 800079e:	4a1c      	ldr	r2, [pc, #112]	; (8000810 <MX_SPI1_Init+0x78>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_SPI1_Init+0x74>)
 80007a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_SPI1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_SPI1_Init+0x74>)
 80007b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_SPI1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_SPI1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_SPI1_Init+0x74>)
 80007c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_SPI1_Init+0x74>)
 80007ce:	2208      	movs	r2, #8
 80007d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_SPI1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_SPI1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_SPI1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_SPI1_Init+0x74>)
 80007e6:	2207      	movs	r2, #7
 80007e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_SPI1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_SPI1_Init+0x74>)
 80007f2:	2208      	movs	r2, #8
 80007f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_SPI1_Init+0x74>)
 80007f8:	f002 ff0e 	bl	8003618 <HAL_SPI_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000802:	f000 f8a7 	bl	8000954 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000500 	.word	0x20000500
 8000810:	40013000 	.word	0x40013000

08000814 <MX_USB_PCD_Init>:

// USB Initialization Function
static void MX_USB_PCD_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  hpcd_USB_FS.Instance = USB;
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <MX_USB_PCD_Init+0x3c>)
 800081a:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <MX_USB_PCD_Init+0x40>)
 800081c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USB_PCD_Init+0x3c>)
 8000820:	2208      	movs	r2, #8
 8000822:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_USB_PCD_Init+0x3c>)
 8000826:	2202      	movs	r2, #2
 8000828:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USB_PCD_Init+0x3c>)
 800082c:	2202      	movs	r2, #2
 800082e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_USB_PCD_Init+0x3c>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USB_PCD_Init+0x3c>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_USB_PCD_Init+0x3c>)
 800083e:	f001 fa45 	bl	8001ccc <HAL_PCD_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000848:	f000 f884 	bl	8000954 <Error_Handler>
  }
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000564 	.word	0x20000564
 8000854:	40005c00 	.word	0x40005c00

08000858 <MX_GPIO_Init>:

// GPIO Initialization Function
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800086e:	4b37      	ldr	r3, [pc, #220]	; (800094c <MX_GPIO_Init+0xf4>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a36      	ldr	r2, [pc, #216]	; (800094c <MX_GPIO_Init+0xf4>)
 8000874:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b34      	ldr	r3, [pc, #208]	; (800094c <MX_GPIO_Init+0xf4>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	4b31      	ldr	r3, [pc, #196]	; (800094c <MX_GPIO_Init+0xf4>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a30      	ldr	r2, [pc, #192]	; (800094c <MX_GPIO_Init+0xf4>)
 800088c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b2e      	ldr	r3, [pc, #184]	; (800094c <MX_GPIO_Init+0xf4>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089e:	4b2b      	ldr	r3, [pc, #172]	; (800094c <MX_GPIO_Init+0xf4>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a2a      	ldr	r2, [pc, #168]	; (800094c <MX_GPIO_Init+0xf4>)
 80008a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a8:	6153      	str	r3, [r2, #20]
 80008aa:	4b28      	ldr	r3, [pc, #160]	; (800094c <MX_GPIO_Init+0xf4>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b25      	ldr	r3, [pc, #148]	; (800094c <MX_GPIO_Init+0xf4>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a24      	ldr	r2, [pc, #144]	; (800094c <MX_GPIO_Init+0xf4>)
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c0:	6153      	str	r3, [r2, #20]
 80008c2:	4b22      	ldr	r3, [pc, #136]	; (800094c <MX_GPIO_Init+0xf4>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <MX_GPIO_Init+0xf4>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	4a1e      	ldr	r2, [pc, #120]	; (800094c <MX_GPIO_Init+0xf4>)
 80008d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008d8:	6153      	str	r3, [r2, #20]
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_GPIO_Init+0xf4>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80008e6:	2200      	movs	r2, #0
 80008e8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80008ec:	4818      	ldr	r0, [pc, #96]	; (8000950 <MX_GPIO_Init+0xf8>)
 80008ee:	f001 f8af 	bl	8001a50 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80008f2:	2337      	movs	r3, #55	; 0x37
 80008f4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4812      	ldr	r0, [pc, #72]	; (8000950 <MX_GPIO_Init+0xf8>)
 8000908:	f000 fe4c 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800090c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000910:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	480a      	ldr	r0, [pc, #40]	; (8000950 <MX_GPIO_Init+0xf8>)
 8000926:	f000 fe3d 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092a:	2301      	movs	r3, #1
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000940:	f000 fe30 	bl	80015a4 <HAL_GPIO_Init>
}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	; 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40021000 	.word	0x40021000
 8000950:	48001000 	.word	0x48001000

08000954 <Error_Handler>:

// This function is executed in case of error occurrence.
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000960:	b5b0      	push	{r4, r5, r7, lr}
 8000962:	b094      	sub	sp, #80	; 0x50
 8000964:	af00      	add	r7, sp, #0
	initialise_board();
 8000966:	f7ff fe35 	bl	80005d4 <initialise_board>

	uint8_t string_to_send[64] = "This is a string!\r\n";
 800096a:	4b5c      	ldr	r3, [pc, #368]	; (8000adc <main+0x17c>)
 800096c:	f107 0408 	add.w	r4, r7, #8
 8000970:	461d      	mov	r5, r3
 8000972:	6828      	ldr	r0, [r5, #0]
 8000974:	6869      	ldr	r1, [r5, #4]
 8000976:	68aa      	ldr	r2, [r5, #8]
 8000978:	68eb      	ldr	r3, [r5, #12]
 800097a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097c:	6928      	ldr	r0, [r5, #16]
 800097e:	6020      	str	r0, [r4, #0]
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	222c      	movs	r2, #44	; 0x2c
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f004 fa7e 	bl	8004e8a <memset>

	srand(get_gyro_values());
 800098e:	f7ff fcab 	bl	80002e8 <get_gyro_values>
 8000992:	eef0 7a40 	vmov.f32	s15, s0
 8000996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800099a:	ee17 0a90 	vmov	r0, s15
 800099e:	f004 f8e3 	bl	8004b68 <srand>

	uint8_t rounds = 1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t winner;
	uint8_t multiplier;
	uint8_t P1leaderboard = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint8_t P2leaderboard = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	while (rounds <= 3) {
 80009b4:	e063      	b.n	8000a7e <main+0x11e>
		uint8_t P1score = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	71fb      	strb	r3, [r7, #7]
		uint8_t P2score = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	71bb      	strb	r3, [r7, #6]

		headsUp(&P1score, &P2score);
 80009be:	1dba      	adds	r2, r7, #6
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fcf5 	bl	80003b4 <headsUp>

		// Winner determined
		if (P1score > P2score){
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	79bb      	ldrb	r3, [r7, #6]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d903      	bls.n	80009da <main+0x7a>
			// player 1 will play wavelength
			winner = 1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80009d8:	e006      	b.n	80009e8 <main+0x88>
		}
		else if (P2score > P1score){
 80009da:	79ba      	ldrb	r2, [r7, #6]
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d902      	bls.n	80009e8 <main+0x88>
			// player 2 will play wavelength
			winner = 2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

		// Multiplier
		//uint8_t buffer[8];
		//SerialInputString(buffer, 8, &UART4_PORT, '\r');
		//multiplier = atoi(buffer);
		multiplier = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

		// Wavelength multiplier
		if (winner == 1){
 80009ee:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d107      	bne.n	8000a06 <main+0xa6>
			P1score = P1score * multiplier;
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80009fc:	fb12 f303 	smulbb	r3, r2, r3
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	71fb      	strb	r3, [r7, #7]
 8000a04:	e00a      	b.n	8000a1c <main+0xbc>
		}
		else if (winner == 2){
 8000a06:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d106      	bne.n	8000a1c <main+0xbc>
			P2score = P2score * multiplier;
 8000a0e:	79bb      	ldrb	r3, [r7, #6]
 8000a10:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000a14:	fb12 f303 	smulbb	r3, r2, r3
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	71bb      	strb	r3, [r7, #6]
		}

		// Update leaderboard
		P1leaderboard = P1leaderboard + P1score;
 8000a1c:	79fa      	ldrb	r2, [r7, #7]
 8000a1e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a22:	4413      	add	r3, r2
 8000a24:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		P2leaderboard = P2leaderboard + P2score;
 8000a28:	79ba      	ldrb	r2, [r7, #6]
 8000a2a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000a2e:	4413      	add	r3, r2
 8000a30:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		sprintf(string_to_send, "Player 1 your total score is %d!\r\n", P1leaderboard);
 8000a34:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	4928      	ldr	r1, [pc, #160]	; (8000ae0 <main+0x180>)
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f004 f9c0 	bl	8004dc4 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	4926      	ldr	r1, [pc, #152]	; (8000ae4 <main+0x184>)
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f8f1 	bl	8000c32 <SerialOutputString>
		sprintf(string_to_send, "Player 2 your total score is %d!\r\n", P2leaderboard);
 8000a50:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000a54:	f107 0308 	add.w	r3, r7, #8
 8000a58:	4923      	ldr	r1, [pc, #140]	; (8000ae8 <main+0x188>)
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f004 f9b2 	bl	8004dc4 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	491f      	ldr	r1, [pc, #124]	; (8000ae4 <main+0x184>)
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 f8e3 	bl	8000c32 <SerialOutputString>
		delay(1500);
 8000a6c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000a70:	f000 fbf0 	bl	8001254 <delay>

		rounds++;
 8000a74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a78:	3301      	adds	r3, #1
 8000a7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while (rounds <= 3) {
 8000a7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d997      	bls.n	80009b6 <main+0x56>
	}

	// Final winner announced
	if (P1leaderboard > P2leaderboard){
 8000a86:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000a8a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d90e      	bls.n	8000ab0 <main+0x150>
		sprintf(string_to_send, "Player 1 Wins with a final score of %d!\r\n", P1leaderboard);
 8000a92:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	4914      	ldr	r1, [pc, #80]	; (8000aec <main+0x18c>)
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f004 f991 	bl	8004dc4 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	490f      	ldr	r1, [pc, #60]	; (8000ae4 <main+0x184>)
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 f8c2 	bl	8000c32 <SerialOutputString>
 8000aae:	e013      	b.n	8000ad8 <main+0x178>
	}
	else if (P2leaderboard > P1leaderboard){
 8000ab0:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000ab4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d90d      	bls.n	8000ad8 <main+0x178>
		sprintf(string_to_send, "Player 2 Wins with a final score of %d!\r\n", P2leaderboard);
 8000abc:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	490a      	ldr	r1, [pc, #40]	; (8000af0 <main+0x190>)
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f004 f97c 	bl	8004dc4 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	4904      	ldr	r1, [pc, #16]	; (8000ae4 <main+0x184>)
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f8ad 	bl	8000c32 <SerialOutputString>
	}



	for(;;){};
 8000ad8:	e7fe      	b.n	8000ad8 <main+0x178>
 8000ada:	bf00      	nop
 8000adc:	080064a0 	.word	0x080064a0
 8000ae0:	08006400 	.word	0x08006400
 8000ae4:	200001a4 	.word	0x200001a4
 8000ae8:	08006424 	.word	0x08006424
 8000aec:	08006448 	.word	0x08006448
 8000af0:	08006474 	.word	0x08006474

08000af4 <SerialInitialise>:
		((uint8_t*)&(GPIOC->AFR[1])) + 1,
		0x55};

// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000af4:	b480      	push	{r7}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	63da      	str	r2, [r3, #60]	; 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000b06:	4b3d      	ldr	r3, [pc, #244]	; (8000bfc <SerialInitialise+0x108>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a3c      	ldr	r2, [pc, #240]	; (8000bfc <SerialInitialise+0x108>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000b12:	4b3a      	ldr	r3, [pc, #232]	; (8000bfc <SerialInitialise+0x108>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	4a39      	ldr	r2, [pc, #228]	; (8000bfc <SerialInitialise+0x108>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	6a1b      	ldr	r3, [r3, #32]
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d106      	bne.n	8000b34 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000b26:	4b35      	ldr	r3, [pc, #212]	; (8000bfc <SerialInitialise+0x108>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	4a34      	ldr	r2, [pc, #208]	; (8000bfc <SerialInitialise+0x108>)
 8000b2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b30:	6153      	str	r3, [r2, #20]
		break;
 8000b32:	e000      	b.n	8000b36 <SerialInitialise+0x42>
	default:
		break;
 8000b34:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) |= serial_port->SerialPinModeValue;
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b44:	430a      	orrs	r2, r1
 8000b46:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) |= serial_port->SerialPinSpeedValue;
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b56:	430a      	orrs	r2, r1
 8000b58:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) |= serial_port->SerialPinAlternatePinValue;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000b60:	b2d9      	uxtb	r1, r3
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	69d9      	ldr	r1, [r3, #28]
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	430a      	orrs	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	d825      	bhi.n	8000bde <SerialInitialise+0xea>
 8000b92:	a201      	add	r2, pc, #4	; (adr r2, 8000b98 <SerialInitialise+0xa4>)
 8000b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b98:	08000bad 	.word	0x08000bad
 8000b9c:	08000bb7 	.word	0x08000bb7
 8000ba0:	08000bc1 	.word	0x08000bc1
 8000ba4:	08000bcb 	.word	0x08000bcb
 8000ba8:	08000bd5 	.word	0x08000bd5
	case BAUD_9600:
		*baud_rate_config = 0x341 * 0x06; // 9600 at 8MHz
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	f241 3286 	movw	r2, #4998	; 0x1386
 8000bb2:	801a      	strh	r2, [r3, #0]
		break;
 8000bb4:	e013      	b.n	8000bde <SerialInitialise+0xea>
	case BAUD_19200:
		*baud_rate_config = 0x1A1 * 0x06; // 19200 at 8MHz
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	f640 12c6 	movw	r2, #2502	; 0x9c6
 8000bbc:	801a      	strh	r2, [r3, #0]
		break;
 8000bbe:	e00e      	b.n	8000bde <SerialInitialise+0xea>
	case BAUD_38400:
		*baud_rate_config = 0xD0 * 0x06;  // 38400 at 8MHz
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8000bc6:	801a      	strh	r2, [r3, #0]
		break;
 8000bc8:	e009      	b.n	8000bde <SerialInitialise+0xea>
	case BAUD_57600:
		*baud_rate_config = 0x8B * 0x06;  // 57600 at 8MHz
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f240 3242 	movw	r2, #834	; 0x342
 8000bd0:	801a      	strh	r2, [r3, #0]
		break;
 8000bd2:	e004      	b.n	8000bde <SerialInitialise+0xea>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000bda:	801a      	strh	r2, [r3, #0]
		break;
 8000bdc:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f042 020d 	orr.w	r2, r2, #13
 8000bec:	601a      	str	r2, [r3, #0]
}
 8000bee:	bf00      	nop
 8000bf0:	371c      	adds	r7, #28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000

08000c00 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8000c0c:	bf00      	nop
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d0f8      	beq.n	8000c0e <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	79fa      	ldrb	r2, [r7, #7]
 8000c22:	b292      	uxth	r2, r2
 8000c24:	801a      	strh	r2, [r3, #0]
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b084      	sub	sp, #16
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8000c40:	e00b      	b.n	8000c5a <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	6839      	ldr	r1, [r7, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ffd9 	bl	8000c00 <SerialOutputChar>
		counter++;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	3301      	adds	r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
		pt++;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3301      	adds	r3, #1
 8000c58:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1ef      	bne.n	8000c42 <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	4798      	blx	r3
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6193      	str	r3, [r2, #24]
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <HAL_MspInit+0x44>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	61d3      	str	r3, [r2, #28]
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_MspInit+0x44>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cb2:	2007      	movs	r0, #7
 8000cb4:	f000 fc42 	bl	800153c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <HAL_I2C_MspInit+0x7c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d127      	bne.n	8000d36 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_I2C_MspInit+0x80>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	4a16      	ldr	r2, [pc, #88]	; (8000d44 <HAL_I2C_MspInit+0x80>)
 8000cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf0:	6153      	str	r3, [r2, #20]
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_I2C_MspInit+0x80>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000cfe:	23c0      	movs	r3, #192	; 0xc0
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d02:	2312      	movs	r3, #18
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	480b      	ldr	r0, [pc, #44]	; (8000d48 <HAL_I2C_MspInit+0x84>)
 8000d1a:	f000 fc43 	bl	80015a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_I2C_MspInit+0x80>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_I2C_MspInit+0x80>)
 8000d24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d28:	61d3      	str	r3, [r2, #28]
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_I2C_MspInit+0x80>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40005400 	.word	0x40005400
 8000d44:	40021000 	.word	0x40021000
 8000d48:	48000400 	.word	0x48000400

08000d4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <HAL_SPI_MspInit+0x7c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d128      	bne.n	8000dc0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_SPI_MspInit+0x80>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4a16      	ldr	r2, [pc, #88]	; (8000dcc <HAL_SPI_MspInit+0x80>)
 8000d74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d78:	6193      	str	r3, [r2, #24]
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_SPI_MspInit+0x80>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_SPI_MspInit+0x80>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_SPI_MspInit+0x80>)
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	6153      	str	r3, [r2, #20]
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_SPI_MspInit+0x80>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000d9e:	23e0      	movs	r3, #224	; 0xe0
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dae:	2305      	movs	r3, #5
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f000 fbf2 	bl	80015a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40013000 	.word	0x40013000
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <HAL_SPI_MspDeInit+0x30>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d10a      	bne.n	8000df8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_SPI_MspDeInit+0x34>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_SPI_MspDeInit+0x34>)
 8000de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dec:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 8000dee:	21e0      	movs	r1, #224	; 0xe0
 8000df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df4:	f000 fd50 	bl	8001898 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40013000 	.word	0x40013000
 8000e04:	40021000 	.word	0x40021000

08000e08 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <HAL_PCD_MspInit+0x80>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d129      	bne.n	8000e7e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <HAL_PCD_MspInit+0x84>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <HAL_PCD_MspInit+0x84>)
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	6153      	str	r3, [r2, #20]
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_PCD_MspInit+0x84>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000e42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000e54:	230e      	movs	r3, #14
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f000 fb9f 	bl	80015a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_PCD_MspInit+0x84>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <HAL_PCD_MspInit+0x84>)
 8000e6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e70:	61d3      	str	r3, [r2, #28]
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_PCD_MspInit+0x84>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	; 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40005c00 	.word	0x40005c00
 8000e8c:	40021000 	.word	0x40021000

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000edc:	f000 fa5c 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
	return 1;
 8000ee8:	2301      	movs	r3, #1
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_kill>:

int _kill(int pid, int sig)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000efe:	f004 f813 	bl	8004f28 <__errno>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2216      	movs	r2, #22
 8000f06:	601a      	str	r2, [r3, #0]
	return -1;
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <_exit>:

void _exit (int status)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ffe7 	bl	8000ef4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f26:	e7fe      	b.n	8000f26 <_exit+0x12>

08000f28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	e00a      	b.n	8000f50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f3a:	f3af 8000 	nop.w
 8000f3e:	4601      	mov	r1, r0
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	60ba      	str	r2, [r7, #8]
 8000f46:	b2ca      	uxtb	r2, r1
 8000f48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	dbf0      	blt.n	8000f3a <_read+0x12>
	}

return len;
 8000f58:	687b      	ldr	r3, [r7, #4]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	e009      	b.n	8000f88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	60ba      	str	r2, [r7, #8]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbf1      	blt.n	8000f74 <_write+0x12>
	}
	return len;
 8000f90:	687b      	ldr	r3, [r7, #4]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_close>:

int _close(int file)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
	return -1;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fc2:	605a      	str	r2, [r3, #4]
	return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <_isatty>:

int _isatty(int file)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
	return 1;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <_sbrk+0x5c>)
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <_sbrk+0x60>)
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d207      	bcs.n	8001044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001034:	f003 ff78 	bl	8004f28 <__errno>
 8001038:	4603      	mov	r3, r0
 800103a:	220c      	movs	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e009      	b.n	8001058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <_sbrk+0x64>)
 8001054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	2000a000 	.word	0x2000a000
 8001064:	00000400 	.word	0x00000400
 8001068:	20000850 	.word	0x20000850
 800106c:	20000a10 	.word	0x20000a10

08001070 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <SystemInit+0x20>)
 8001076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <SystemInit+0x20>)
 800107c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <enable_interrupt>:
#define PRESCALER 47999

// pointers to callback functions
void (*TIM2_callback_function)();

void enable_interrupt(IRQn_Type IRQn, uint32_t priority) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Tell the NVIC module that TIM2 interrupts should be handled
	NVIC_SetPriority(IRQn, priority);  // Set Priority
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	6839      	ldr	r1, [r7, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ffc8 	bl	80010d0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQn);
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ffa5 	bl	8001094 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800114a:	b662      	cpsie	i
}
 800114c:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
// run the oneshot timer interrupt handler
	if (TIM2->SR & TIM_SR_UIF) {
 800115c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00e      	beq.n	8001188 <TIM2_IRQHandler+0x30>
		// clear oneshot timer interrupt
		TIM2->SR &= ~TIM_SR_UIF;
 800116a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001174:	f023 0301 	bic.w	r3, r3, #1
 8001178:	6113      	str	r3, [r2, #16]

		if (TIM2_callback_function != NULL)
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <TIM2_IRQHandler+0x34>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <TIM2_IRQHandler+0x30>
		{
			TIM2_callback_function();
 8001182:	4b02      	ldr	r3, [pc, #8]	; (800118c <TIM2_IRQHandler+0x34>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4798      	blx	r3
		}

	}

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000854 	.word	0x20000854

08001190 <game_timer>:

void game_timer(uint16_t time, void (*callback_function)()) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	80fb      	strh	r3, [r7, #6]

	// reset CR1
	TIM2->CR1 = 0x00;
 800119c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]

	// set the prescaler to 999, slower than the default clock 1000 times
	TIM2->PSC = PRESCALER; // 1 millisecond or 1 millisecond per count
 80011a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a8:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28

	// set the auto reload according to the prescaler
	TIM2->ARR = 0x01; // 1 - 1 millisecond
 80011ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b2:	2201      	movs	r2, #1
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->ARR = TIM2->ARR * time; // delay in millisecond
 80011b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011bc:	88fa      	ldrh	r2, [r7, #6]
 80011be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80011c2:	fb02 f303 	mul.w	r3, r2, r3
 80011c6:	62cb      	str	r3, [r1, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // enable auto reload buffering
 80011c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d6:	6013      	str	r3, [r2, #0]

	// set to only counter overflow raises interrupt flag
	TIM2->CR1 |= TIM_CR1_URS;
 80011d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	6013      	str	r3, [r2, #0]

	// set to one-pulse mode
	TIM2->CR1 |= TIM_CR1_OPM;
 80011e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f2:	f043 0308 	orr.w	r3, r3, #8
 80011f6:	6013      	str	r3, [r2, #0]

	// re-initialise the counter and generates an update of the registers
	TIM2->EGR |= TIM_EGR_UG;
 80011f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6153      	str	r3, [r2, #20]

	// enable the update interrupt
	TIM2->DIER |= TIM_DIER_UIE;
 8001208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	60d3      	str	r3, [r2, #12]

	// clear the interrupt
	TIM2->SR &= ~TIM_SR_UIF;
 8001218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	6113      	str	r3, [r2, #16]

	TIM2_callback_function = callback_function;
 8001228:	4a09      	ldr	r2, [pc, #36]	; (8001250 <game_timer+0xc0>)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	6013      	str	r3, [r2, #0]

	enable_interrupt(TIM2_IRQn, 0);
 800122e:	2100      	movs	r1, #0
 8001230:	201c      	movs	r0, #28
 8001232:	f7ff ff77 	bl	8001124 <enable_interrupt>

	// enable counter
	TIM2->CR1 |= TIM_CR1_CEN;
 8001236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6013      	str	r3, [r2, #0]

}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000854 	.word	0x20000854

08001254 <delay>:

void delay(uint16_t delay){
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	80fb      	strh	r3, [r7, #6]
	// reset CR1
	TIM3->CR1 = 0x00;
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <delay+0x60>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
	TIM3->CNT = 0;
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <delay+0x60>)
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	; 0x24

	// set the prescaler to 999, slower than the default clock 1000 times
	TIM3->PSC = PRESCALER; // 1 millisecond or 1 millisecond per count
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <delay+0x60>)
 800126c:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001270:	629a      	str	r2, [r3, #40]	; 0x28

	// re-initialise the counter and generates an update of the registers
	TIM3->EGR |= TIM_EGR_UG;
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <delay+0x60>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <delay+0x60>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6153      	str	r3, [r2, #20]

	// enable counter
	TIM3->CR1 |= TIM_CR1_CEN;
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <delay+0x60>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <delay+0x60>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6013      	str	r3, [r2, #0]

	while (TIM3->CNT < delay) {};
 800128a:	bf00      	nop
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <delay+0x60>)
 800128e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	429a      	cmp	r2, r3
 8001294:	d3fa      	bcc.n	800128c <delay+0x38>

	// disable counter
	TIM3->CR1 &= ~TIM_CR1_CEN;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <delay+0x60>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <delay+0x60>)
 800129c:	f023 0301 	bic.w	r3, r3, #1
 80012a0:	6013      	str	r3, [r2, #0]
	TIM3->CNT = 0;
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <delay+0x60>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	40000400 	.word	0x40000400

080012b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012bc:	f7ff fed8 	bl	8001070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	; (80012f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <LoopForever+0xe>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	; (8001304 <LoopForever+0x16>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e6:	f003 fe25 	bl	8004f34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ea:	f7ff fb39 	bl	8000960 <main>

080012ee <LoopForever>:

LoopForever:
    b LoopForever
 80012ee:	e7fe      	b.n	80012ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012f0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 80012fc:	080065cc 	.word	0x080065cc
  ldr r2, =_sbss
 8001300:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8001304:	20000a10 	.word	0x20000a10

08001308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC1_2_IRQHandler>
	...

0800130c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_Init+0x28>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_Init+0x28>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f90d 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f808 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff fca8 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40022000 	.word	0x40022000

08001338 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x54>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f917 	bl	800158a <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f000 f8ed 	bl	8001552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_InitTick+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000224 	.word	0x20000224
 8001390:	2000022c 	.word	0x2000022c
 8001394:	20000228 	.word	0x20000228

08001398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x20>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x24>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_IncTick+0x24>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	2000022c 	.word	0x2000022c
 80013bc:	20000858 	.word	0x20000858

080013c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_GetTick+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000858 	.word	0x20000858

080013d8 <__NVIC_SetPriorityGrouping>:
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f4:	4013      	ands	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	60d3      	str	r3, [r2, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_GetPriorityGrouping>:
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <__NVIC_GetPriorityGrouping+0x18>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	f003 0307 	and.w	r3, r3, #7
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_SetPriority>:
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff8e 	bl	800143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff47 	bl	80013d8 <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff5c 	bl	8001420 <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff8e 	bl	8001490 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5d 	bl	800143c <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffb0 	bl	80014f8 <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b2:	e154      	b.n	800185e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2101      	movs	r1, #1
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	4013      	ands	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 8146 	beq.w	8001858 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d005      	beq.n	80015e4 <HAL_GPIO_Init+0x40>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d130      	bne.n	8001646 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800161a:	2201      	movs	r2, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	091b      	lsrs	r3, r3, #4
 8001630:	f003 0201 	and.w	r2, r3, #1
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	2b03      	cmp	r3, #3
 8001650:	d017      	beq.n	8001682 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	2203      	movs	r2, #3
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d123      	bne.n	80016d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	08da      	lsrs	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3208      	adds	r2, #8
 8001696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	220f      	movs	r2, #15
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	691a      	ldr	r2, [r3, #16]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	08da      	lsrs	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3208      	adds	r2, #8
 80016d0:	6939      	ldr	r1, [r7, #16]
 80016d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	2203      	movs	r2, #3
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0203 	and.w	r2, r3, #3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 80a0 	beq.w	8001858 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001718:	4b58      	ldr	r3, [pc, #352]	; (800187c <HAL_GPIO_Init+0x2d8>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a57      	ldr	r2, [pc, #348]	; (800187c <HAL_GPIO_Init+0x2d8>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b55      	ldr	r3, [pc, #340]	; (800187c <HAL_GPIO_Init+0x2d8>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001730:	4a53      	ldr	r2, [pc, #332]	; (8001880 <HAL_GPIO_Init+0x2dc>)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	3302      	adds	r3, #2
 8001738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800175a:	d019      	beq.n	8001790 <HAL_GPIO_Init+0x1ec>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a49      	ldr	r2, [pc, #292]	; (8001884 <HAL_GPIO_Init+0x2e0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d013      	beq.n	800178c <HAL_GPIO_Init+0x1e8>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a48      	ldr	r2, [pc, #288]	; (8001888 <HAL_GPIO_Init+0x2e4>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d00d      	beq.n	8001788 <HAL_GPIO_Init+0x1e4>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a47      	ldr	r2, [pc, #284]	; (800188c <HAL_GPIO_Init+0x2e8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d007      	beq.n	8001784 <HAL_GPIO_Init+0x1e0>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a46      	ldr	r2, [pc, #280]	; (8001890 <HAL_GPIO_Init+0x2ec>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d101      	bne.n	8001780 <HAL_GPIO_Init+0x1dc>
 800177c:	2304      	movs	r3, #4
 800177e:	e008      	b.n	8001792 <HAL_GPIO_Init+0x1ee>
 8001780:	2305      	movs	r3, #5
 8001782:	e006      	b.n	8001792 <HAL_GPIO_Init+0x1ee>
 8001784:	2303      	movs	r3, #3
 8001786:	e004      	b.n	8001792 <HAL_GPIO_Init+0x1ee>
 8001788:	2302      	movs	r3, #2
 800178a:	e002      	b.n	8001792 <HAL_GPIO_Init+0x1ee>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <HAL_GPIO_Init+0x1ee>
 8001790:	2300      	movs	r3, #0
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	f002 0203 	and.w	r2, r2, #3
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	4093      	lsls	r3, r2
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017a2:	4937      	ldr	r1, [pc, #220]	; (8001880 <HAL_GPIO_Init+0x2dc>)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3302      	adds	r3, #2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017b0:	4b38      	ldr	r3, [pc, #224]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017d4:	4a2f      	ldr	r2, [pc, #188]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017da:	4b2e      	ldr	r3, [pc, #184]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017fe:	4a25      	ldr	r2, [pc, #148]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001804:	4b23      	ldr	r3, [pc, #140]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001828:	4a1a      	ldr	r2, [pc, #104]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001852:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	3301      	adds	r3, #1
 800185c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	f47f aea3 	bne.w	80015b4 <HAL_GPIO_Init+0x10>
  }
}
 800186e:	bf00      	nop
 8001870:	bf00      	nop
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	40021000 	.word	0x40021000
 8001880:	40010000 	.word	0x40010000
 8001884:	48000400 	.word	0x48000400
 8001888:	48000800 	.word	0x48000800
 800188c:	48000c00 	.word	0x48000c00
 8001890:	48001000 	.word	0x48001000
 8001894:	40010400 	.word	0x40010400

08001898 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80018a6:	e0b8      	b.n	8001a1a <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80018a8:	2201      	movs	r2, #1
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80ab 	beq.w	8001a14 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80018be:	4a5e      	ldr	r2, [pc, #376]	; (8001a38 <HAL_GPIO_DeInit+0x1a0>)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018e6:	d019      	beq.n	800191c <HAL_GPIO_DeInit+0x84>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a54      	ldr	r2, [pc, #336]	; (8001a3c <HAL_GPIO_DeInit+0x1a4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d013      	beq.n	8001918 <HAL_GPIO_DeInit+0x80>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a53      	ldr	r2, [pc, #332]	; (8001a40 <HAL_GPIO_DeInit+0x1a8>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d00d      	beq.n	8001914 <HAL_GPIO_DeInit+0x7c>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a52      	ldr	r2, [pc, #328]	; (8001a44 <HAL_GPIO_DeInit+0x1ac>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d007      	beq.n	8001910 <HAL_GPIO_DeInit+0x78>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a51      	ldr	r2, [pc, #324]	; (8001a48 <HAL_GPIO_DeInit+0x1b0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d101      	bne.n	800190c <HAL_GPIO_DeInit+0x74>
 8001908:	2304      	movs	r3, #4
 800190a:	e008      	b.n	800191e <HAL_GPIO_DeInit+0x86>
 800190c:	2305      	movs	r3, #5
 800190e:	e006      	b.n	800191e <HAL_GPIO_DeInit+0x86>
 8001910:	2303      	movs	r3, #3
 8001912:	e004      	b.n	800191e <HAL_GPIO_DeInit+0x86>
 8001914:	2302      	movs	r3, #2
 8001916:	e002      	b.n	800191e <HAL_GPIO_DeInit+0x86>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_GPIO_DeInit+0x86>
 800191c:	2300      	movs	r3, #0
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	f002 0203 	and.w	r2, r2, #3
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	4093      	lsls	r3, r2
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	429a      	cmp	r2, r3
 800192c:	d132      	bne.n	8001994 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800192e:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <HAL_GPIO_DeInit+0x1b4>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	4945      	ldr	r1, [pc, #276]	; (8001a4c <HAL_GPIO_DeInit+0x1b4>)
 8001938:	4013      	ands	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800193c:	4b43      	ldr	r3, [pc, #268]	; (8001a4c <HAL_GPIO_DeInit+0x1b4>)
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	43db      	mvns	r3, r3
 8001944:	4941      	ldr	r1, [pc, #260]	; (8001a4c <HAL_GPIO_DeInit+0x1b4>)
 8001946:	4013      	ands	r3, r2
 8001948:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800194a:	4b40      	ldr	r3, [pc, #256]	; (8001a4c <HAL_GPIO_DeInit+0x1b4>)
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	43db      	mvns	r3, r3
 8001952:	493e      	ldr	r1, [pc, #248]	; (8001a4c <HAL_GPIO_DeInit+0x1b4>)
 8001954:	4013      	ands	r3, r2
 8001956:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001958:	4b3c      	ldr	r3, [pc, #240]	; (8001a4c <HAL_GPIO_DeInit+0x1b4>)
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	493a      	ldr	r1, [pc, #232]	; (8001a4c <HAL_GPIO_DeInit+0x1b4>)
 8001962:	4013      	ands	r3, r2
 8001964:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	220f      	movs	r2, #15
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001976:	4a30      	ldr	r2, [pc, #192]	; (8001a38 <HAL_GPIO_DeInit+0x1a0>)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3302      	adds	r3, #2
 800197e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43da      	mvns	r2, r3
 8001986:	482c      	ldr	r0, [pc, #176]	; (8001a38 <HAL_GPIO_DeInit+0x1a0>)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	400a      	ands	r2, r1
 800198e:	3302      	adds	r3, #2
 8001990:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	2103      	movs	r1, #3
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	401a      	ands	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	08da      	lsrs	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3208      	adds	r2, #8
 80019b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	08d2      	lsrs	r2, r2, #3
 80019ca:	4019      	ands	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3208      	adds	r2, #8
 80019d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2103      	movs	r1, #3
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	401a      	ands	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	2101      	movs	r1, #1
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	401a      	ands	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	2103      	movs	r1, #3
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	401a      	ands	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f47f af40 	bne.w	80018a8 <HAL_GPIO_DeInit+0x10>
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	48000400 	.word	0x48000400
 8001a40:	48000800 	.word	0x48000800
 8001a44:	48000c00 	.word	0x48000c00
 8001a48:	48001000 	.word	0x48001000
 8001a4c:	40010400 	.word	0x40010400

08001a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a60:	787b      	ldrb	r3, [r7, #1]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a6c:	e002      	b.n	8001a74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e081      	b.n	8001b96 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff f90c 	bl	8000cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2224      	movs	r2, #36	; 0x24
 8001ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ad0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ae0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d107      	bne.n	8001afa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	e006      	b.n	8001b08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d104      	bne.n	8001b1a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69d9      	ldr	r1, [r3, #28]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1a      	ldr	r2, [r3, #32]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2220      	movs	r2, #32
 8001b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d138      	bne.n	8001c26 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e032      	b.n	8001c28 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2224      	movs	r2, #36	; 0x24
 8001bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0201 	bic.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bf0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6819      	ldr	r1, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f042 0201 	orr.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2220      	movs	r2, #32
 8001c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e000      	b.n	8001c28 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c26:	2302      	movs	r3, #2
  }
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	d139      	bne.n	8001cbe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e033      	b.n	8001cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2224      	movs	r2, #36	; 0x24
 8001c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c86:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0201 	orr.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cbe:	2302      	movs	r3, #2
  }
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cce:	b08b      	sub	sp, #44	; 0x2c
 8001cd0:	af06      	add	r7, sp, #24
 8001cd2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0c4      	b.n	8001e68 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff f888 	bl	8000e08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f002 f8ef 	bl	8003ee8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	e040      	b.n	8001d92 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	3301      	adds	r3, #1
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	440b      	add	r3, r1
 8001d4a:	3303      	adds	r3, #3
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3338      	adds	r3, #56	; 0x38
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	333c      	adds	r3, #60	; 0x3c
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	3340      	adds	r3, #64	; 0x40
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d3b9      	bcc.n	8001d10 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	e044      	b.n	8001e2c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	440b      	add	r3, r1
 8001db0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	440b      	add	r3, r1
 8001dc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	440b      	add	r3, r1
 8001df2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	440b      	add	r3, r1
 8001e08:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	440b      	add	r3, r1
 8001e1e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d3b5      	bcc.n	8001da2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	687e      	ldr	r6, [r7, #4]
 8001e3e:	466d      	mov	r5, sp
 8001e40:	f106 0410 	add.w	r4, r6, #16
 8001e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	602b      	str	r3, [r5, #0]
 8001e4c:	1d33      	adds	r3, r6, #4
 8001e4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e50:	6838      	ldr	r0, [r7, #0]
 8001e52:	f002 f864 	bl	8003f1e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e80:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	f001 b823 	b.w	8002edc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 817d 	beq.w	80021a6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001eac:	4bbc      	ldr	r3, [pc, #752]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d00c      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eb8:	4bb9      	ldr	r3, [pc, #740]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d15c      	bne.n	8001f7e <HAL_RCC_OscConfig+0x10e>
 8001ec4:	4bb6      	ldr	r3, [pc, #728]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed0:	d155      	bne.n	8001f7e <HAL_RCC_OscConfig+0x10e>
 8001ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ee6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	095b      	lsrs	r3, r3, #5
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d102      	bne.n	8001f04 <HAL_RCC_OscConfig+0x94>
 8001efe:	4ba8      	ldr	r3, [pc, #672]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	e015      	b.n	8001f30 <HAL_RCC_OscConfig+0xc0>
 8001f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f08:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f1c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f20:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001f2c:	4b9c      	ldr	r3, [pc, #624]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f34:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001f38:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f3c:	fa92 f2a2 	rbit	r2, r2
 8001f40:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001f44:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f48:	fab2 f282 	clz	r2, r2
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	f042 0220 	orr.w	r2, r2, #32
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	f002 021f 	and.w	r2, r2, #31
 8001f58:	2101      	movs	r1, #1
 8001f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 811f 	beq.w	80021a4 <HAL_RCC_OscConfig+0x334>
 8001f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f040 8116 	bne.w	80021a4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	f000 bfaf 	b.w	8002edc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x12e>
 8001f90:	4b83      	ldr	r3, [pc, #524]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a82      	ldr	r2, [pc, #520]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	e036      	b.n	800200c <HAL_RCC_OscConfig+0x19c>
 8001f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x158>
 8001fae:	4b7c      	ldr	r3, [pc, #496]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a7b      	ldr	r2, [pc, #492]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b79      	ldr	r3, [pc, #484]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a78      	ldr	r2, [pc, #480]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e021      	b.n	800200c <HAL_RCC_OscConfig+0x19c>
 8001fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x184>
 8001fda:	4b71      	ldr	r3, [pc, #452]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a70      	ldr	r2, [pc, #448]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b6e      	ldr	r3, [pc, #440]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a6d      	ldr	r2, [pc, #436]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e00b      	b.n	800200c <HAL_RCC_OscConfig+0x19c>
 8001ff4:	4b6a      	ldr	r3, [pc, #424]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a69      	ldr	r2, [pc, #420]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b67      	ldr	r3, [pc, #412]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a66      	ldr	r2, [pc, #408]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8002006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800200c:	4b64      	ldr	r3, [pc, #400]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	f023 020f 	bic.w	r2, r3, #15
 8002014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002018:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	495f      	ldr	r1, [pc, #380]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8002022:	4313      	orrs	r3, r2
 8002024:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d059      	beq.n	80020ea <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff f9c3 	bl	80013c0 <HAL_GetTick>
 800203a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	e00a      	b.n	8002056 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002040:	f7ff f9be 	bl	80013c0 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b64      	cmp	r3, #100	; 0x64
 800204e:	d902      	bls.n	8002056 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	f000 bf43 	b.w	8002edc <HAL_RCC_OscConfig+0x106c>
 8002056:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800205a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800206a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	095b      	lsrs	r3, r3, #5
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d102      	bne.n	8002088 <HAL_RCC_OscConfig+0x218>
 8002082:	4b47      	ldr	r3, [pc, #284]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	e015      	b.n	80020b4 <HAL_RCC_OscConfig+0x244>
 8002088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800208c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800209c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020a0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80020a4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80020b0:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020b8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80020bc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80020c0:	fa92 f2a2 	rbit	r2, r2
 80020c4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80020c8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80020cc:	fab2 f282 	clz	r2, r2
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	f042 0220 	orr.w	r2, r2, #32
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	f002 021f 	and.w	r2, r2, #31
 80020dc:	2101      	movs	r1, #1
 80020de:	fa01 f202 	lsl.w	r2, r1, r2
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ab      	beq.n	8002040 <HAL_RCC_OscConfig+0x1d0>
 80020e8:	e05d      	b.n	80021a6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7ff f969 	bl	80013c0 <HAL_GetTick>
 80020ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f2:	e00a      	b.n	800210a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f4:	f7ff f964 	bl	80013c0 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b64      	cmp	r3, #100	; 0x64
 8002102:	d902      	bls.n	800210a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	f000 bee9 	b.w	8002edc <HAL_RCC_OscConfig+0x106c>
 800210a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800210e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800211e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	095b      	lsrs	r3, r3, #5
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b01      	cmp	r3, #1
 8002134:	d102      	bne.n	800213c <HAL_RCC_OscConfig+0x2cc>
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	e015      	b.n	8002168 <HAL_RCC_OscConfig+0x2f8>
 800213c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002140:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002148:	fa93 f3a3 	rbit	r3, r3
 800214c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002154:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002158:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800216c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002170:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002174:	fa92 f2a2 	rbit	r2, r2
 8002178:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800217c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002180:	fab2 f282 	clz	r2, r2
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	f042 0220 	orr.w	r2, r2, #32
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	f002 021f 	and.w	r2, r2, #31
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f202 	lsl.w	r2, r1, r2
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1ab      	bne.n	80020f4 <HAL_RCC_OscConfig+0x284>
 800219c:	e003      	b.n	80021a6 <HAL_RCC_OscConfig+0x336>
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 817d 	beq.w	80024b6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021bc:	4ba6      	ldr	r3, [pc, #664]	; (8002458 <HAL_RCC_OscConfig+0x5e8>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00b      	beq.n	80021e0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021c8:	4ba3      	ldr	r3, [pc, #652]	; (8002458 <HAL_RCC_OscConfig+0x5e8>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d172      	bne.n	80022ba <HAL_RCC_OscConfig+0x44a>
 80021d4:	4ba0      	ldr	r3, [pc, #640]	; (8002458 <HAL_RCC_OscConfig+0x5e8>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d16c      	bne.n	80022ba <HAL_RCC_OscConfig+0x44a>
 80021e0:	2302      	movs	r3, #2
 80021e2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80021f2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b01      	cmp	r3, #1
 8002208:	d102      	bne.n	8002210 <HAL_RCC_OscConfig+0x3a0>
 800220a:	4b93      	ldr	r3, [pc, #588]	; (8002458 <HAL_RCC_OscConfig+0x5e8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	e013      	b.n	8002238 <HAL_RCC_OscConfig+0x3c8>
 8002210:	2302      	movs	r3, #2
 8002212:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002222:	2302      	movs	r3, #2
 8002224:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002228:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002234:	4b88      	ldr	r3, [pc, #544]	; (8002458 <HAL_RCC_OscConfig+0x5e8>)
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	2202      	movs	r2, #2
 800223a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800223e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002242:	fa92 f2a2 	rbit	r2, r2
 8002246:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800224a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800224e:	fab2 f282 	clz	r2, r2
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	f042 0220 	orr.w	r2, r2, #32
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	f002 021f 	and.w	r2, r2, #31
 800225e:	2101      	movs	r1, #1
 8002260:	fa01 f202 	lsl.w	r2, r1, r2
 8002264:	4013      	ands	r3, r2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCC_OscConfig+0x410>
 800226a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d002      	beq.n	8002280 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	f000 be2e 	b.w	8002edc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002280:	4b75      	ldr	r3, [pc, #468]	; (8002458 <HAL_RCC_OscConfig+0x5e8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	21f8      	movs	r1, #248	; 0xf8
 8002296:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800229e:	fa91 f1a1 	rbit	r1, r1
 80022a2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80022a6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80022aa:	fab1 f181 	clz	r1, r1
 80022ae:	b2c9      	uxtb	r1, r1
 80022b0:	408b      	lsls	r3, r1
 80022b2:	4969      	ldr	r1, [pc, #420]	; (8002458 <HAL_RCC_OscConfig+0x5e8>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b8:	e0fd      	b.n	80024b6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8088 	beq.w	80023dc <HAL_RCC_OscConfig+0x56c>
 80022cc:	2301      	movs	r3, #1
 80022ce:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80022de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	461a      	mov	r2, r3
 80022f4:	2301      	movs	r3, #1
 80022f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff f862 	bl	80013c0 <HAL_GetTick>
 80022fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002302:	f7ff f85d 	bl	80013c0 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d902      	bls.n	8002318 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	f000 bde2 	b.w	8002edc <HAL_RCC_OscConfig+0x106c>
 8002318:	2302      	movs	r3, #2
 800231a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800232a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	095b      	lsrs	r3, r3, #5
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d102      	bne.n	8002348 <HAL_RCC_OscConfig+0x4d8>
 8002342:	4b45      	ldr	r3, [pc, #276]	; (8002458 <HAL_RCC_OscConfig+0x5e8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	e013      	b.n	8002370 <HAL_RCC_OscConfig+0x500>
 8002348:	2302      	movs	r3, #2
 800234a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800235a:	2302      	movs	r3, #2
 800235c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002360:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800236c:	4b3a      	ldr	r3, [pc, #232]	; (8002458 <HAL_RCC_OscConfig+0x5e8>)
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	2202      	movs	r2, #2
 8002372:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002376:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800237a:	fa92 f2a2 	rbit	r2, r2
 800237e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002382:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002386:	fab2 f282 	clz	r2, r2
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	f042 0220 	orr.w	r2, r2, #32
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	f002 021f 	and.w	r2, r2, #31
 8002396:	2101      	movs	r1, #1
 8002398:	fa01 f202 	lsl.w	r2, r1, r2
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0af      	beq.n	8002302 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a2:	4b2d      	ldr	r3, [pc, #180]	; (8002458 <HAL_RCC_OscConfig+0x5e8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	21f8      	movs	r1, #248	; 0xf8
 80023b8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80023c0:	fa91 f1a1 	rbit	r1, r1
 80023c4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80023c8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80023cc:	fab1 f181 	clz	r1, r1
 80023d0:	b2c9      	uxtb	r1, r1
 80023d2:	408b      	lsls	r3, r1
 80023d4:	4920      	ldr	r1, [pc, #128]	; (8002458 <HAL_RCC_OscConfig+0x5e8>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
 80023da:	e06c      	b.n	80024b6 <HAL_RCC_OscConfig+0x646>
 80023dc:	2301      	movs	r3, #1
 80023de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80023ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	461a      	mov	r2, r3
 8002404:	2300      	movs	r3, #0
 8002406:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe ffda 	bl	80013c0 <HAL_GetTick>
 800240c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002412:	f7fe ffd5 	bl	80013c0 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d902      	bls.n	8002428 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	f000 bd5a 	b.w	8002edc <HAL_RCC_OscConfig+0x106c>
 8002428:	2302      	movs	r3, #2
 800242a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800243a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d104      	bne.n	800245c <HAL_RCC_OscConfig+0x5ec>
 8002452:	4b01      	ldr	r3, [pc, #4]	; (8002458 <HAL_RCC_OscConfig+0x5e8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	e015      	b.n	8002484 <HAL_RCC_OscConfig+0x614>
 8002458:	40021000 	.word	0x40021000
 800245c:	2302      	movs	r3, #2
 800245e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800246e:	2302      	movs	r3, #2
 8002470:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002474:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002480:	4bc8      	ldr	r3, [pc, #800]	; (80027a4 <HAL_RCC_OscConfig+0x934>)
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	2202      	movs	r2, #2
 8002486:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800248a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800248e:	fa92 f2a2 	rbit	r2, r2
 8002492:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002496:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800249a:	fab2 f282 	clz	r2, r2
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	f042 0220 	orr.w	r2, r2, #32
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	f002 021f 	and.w	r2, r2, #31
 80024aa:	2101      	movs	r1, #1
 80024ac:	fa01 f202 	lsl.w	r2, r1, r2
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1ad      	bne.n	8002412 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8110 	beq.w	80026ec <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d079      	beq.n	80025d0 <HAL_RCC_OscConfig+0x760>
 80024dc:	2301      	movs	r3, #1
 80024de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80024ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	4bab      	ldr	r3, [pc, #684]	; (80027a8 <HAL_RCC_OscConfig+0x938>)
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	461a      	mov	r2, r3
 8002502:	2301      	movs	r3, #1
 8002504:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7fe ff5b 	bl	80013c0 <HAL_GetTick>
 800250a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	e00a      	b.n	8002526 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002510:	f7fe ff56 	bl	80013c0 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d902      	bls.n	8002526 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	f000 bcdb 	b.w	8002edc <HAL_RCC_OscConfig+0x106c>
 8002526:	2302      	movs	r3, #2
 8002528:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002540:	2202      	movs	r2, #2
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	fa93 f2a3 	rbit	r2, r3
 8002552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002556:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002564:	2202      	movs	r2, #2
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	fa93 f2a3 	rbit	r2, r3
 8002576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800257e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002580:	4b88      	ldr	r3, [pc, #544]	; (80027a4 <HAL_RCC_OscConfig+0x934>)
 8002582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002588:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800258c:	2102      	movs	r1, #2
 800258e:	6019      	str	r1, [r3, #0]
 8002590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002594:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	fa93 f1a3 	rbit	r1, r3
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025a6:	6019      	str	r1, [r3, #0]
  return result;
 80025a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	2101      	movs	r1, #1
 80025c4:	fa01 f303 	lsl.w	r3, r1, r3
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0a0      	beq.n	8002510 <HAL_RCC_OscConfig+0x6a0>
 80025ce:	e08d      	b.n	80026ec <HAL_RCC_OscConfig+0x87c>
 80025d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	fa93 f2a3 	rbit	r2, r3
 80025ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025f2:	601a      	str	r2, [r3, #0]
  return result;
 80025f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025fc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	4b68      	ldr	r3, [pc, #416]	; (80027a8 <HAL_RCC_OscConfig+0x938>)
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	461a      	mov	r2, r3
 800260e:	2300      	movs	r3, #0
 8002610:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002612:	f7fe fed5 	bl	80013c0 <HAL_GetTick>
 8002616:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261a:	e00a      	b.n	8002632 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261c:	f7fe fed0 	bl	80013c0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d902      	bls.n	8002632 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	f000 bc55 	b.w	8002edc <HAL_RCC_OscConfig+0x106c>
 8002632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002636:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800263a:	2202      	movs	r2, #2
 800263c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002642:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	fa93 f2a3 	rbit	r2, r3
 800264c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002650:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800265e:	2202      	movs	r2, #2
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002666:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	fa93 f2a3 	rbit	r2, r3
 8002670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002674:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002682:	2202      	movs	r2, #2
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	fa93 f2a3 	rbit	r2, r3
 8002694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002698:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800269c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_RCC_OscConfig+0x934>)
 80026a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80026aa:	2102      	movs	r1, #2
 80026ac:	6019      	str	r1, [r3, #0]
 80026ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	fa93 f1a3 	rbit	r1, r3
 80026bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80026c4:	6019      	str	r1, [r3, #0]
  return result;
 80026c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ca:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	2101      	movs	r1, #1
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d197      	bne.n	800261c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 81a1 	beq.w	8002a44 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002708:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <HAL_RCC_OscConfig+0x934>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d116      	bne.n	8002742 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002714:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <HAL_RCC_OscConfig+0x934>)
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	4a22      	ldr	r2, [pc, #136]	; (80027a4 <HAL_RCC_OscConfig+0x934>)
 800271a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271e:	61d3      	str	r3, [r2, #28]
 8002720:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <HAL_RCC_OscConfig+0x934>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002736:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800273a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800273c:	2301      	movs	r3, #1
 800273e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002742:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <HAL_RCC_OscConfig+0x93c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d11a      	bne.n	8002784 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274e:	4b17      	ldr	r3, [pc, #92]	; (80027ac <HAL_RCC_OscConfig+0x93c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a16      	ldr	r2, [pc, #88]	; (80027ac <HAL_RCC_OscConfig+0x93c>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275a:	f7fe fe31 	bl	80013c0 <HAL_GetTick>
 800275e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002762:	e009      	b.n	8002778 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002764:	f7fe fe2c 	bl	80013c0 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b64      	cmp	r3, #100	; 0x64
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e3b1      	b.n	8002edc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <HAL_RCC_OscConfig+0x93c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ef      	beq.n	8002764 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002788:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d10d      	bne.n	80027b0 <HAL_RCC_OscConfig+0x940>
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <HAL_RCC_OscConfig+0x934>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	4a02      	ldr	r2, [pc, #8]	; (80027a4 <HAL_RCC_OscConfig+0x934>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6213      	str	r3, [r2, #32]
 80027a0:	e03c      	b.n	800281c <HAL_RCC_OscConfig+0x9ac>
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
 80027a8:	10908120 	.word	0x10908120
 80027ac:	40007000 	.word	0x40007000
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10c      	bne.n	80027da <HAL_RCC_OscConfig+0x96a>
 80027c0:	4bc1      	ldr	r3, [pc, #772]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4ac0      	ldr	r2, [pc, #768]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	6213      	str	r3, [r2, #32]
 80027cc:	4bbe      	ldr	r3, [pc, #760]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	4abd      	ldr	r2, [pc, #756]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 80027d2:	f023 0304 	bic.w	r3, r3, #4
 80027d6:	6213      	str	r3, [r2, #32]
 80027d8:	e020      	b.n	800281c <HAL_RCC_OscConfig+0x9ac>
 80027da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b05      	cmp	r3, #5
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0x994>
 80027ea:	4bb7      	ldr	r3, [pc, #732]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	4ab6      	ldr	r2, [pc, #728]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 80027f0:	f043 0304 	orr.w	r3, r3, #4
 80027f4:	6213      	str	r3, [r2, #32]
 80027f6:	4bb4      	ldr	r3, [pc, #720]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4ab3      	ldr	r2, [pc, #716]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6213      	str	r3, [r2, #32]
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0x9ac>
 8002804:	4bb0      	ldr	r3, [pc, #704]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4aaf      	ldr	r2, [pc, #700]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	6213      	str	r3, [r2, #32]
 8002810:	4bad      	ldr	r3, [pc, #692]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4aac      	ldr	r2, [pc, #688]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 8002816:	f023 0304 	bic.w	r3, r3, #4
 800281a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 8081 	beq.w	8002930 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282e:	f7fe fdc7 	bl	80013c0 <HAL_GetTick>
 8002832:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002838:	f7fe fdc2 	bl	80013c0 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e345      	b.n	8002edc <HAL_RCC_OscConfig+0x106c>
 8002850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002854:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002858:	2202      	movs	r2, #2
 800285a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	fa93 f2a3 	rbit	r2, r3
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002878:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800287c:	2202      	movs	r2, #2
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002884:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	fa93 f2a3 	rbit	r2, r3
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002896:	601a      	str	r2, [r3, #0]
  return result;
 8002898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028a0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f043 0302 	orr.w	r3, r3, #2
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d102      	bne.n	80028bc <HAL_RCC_OscConfig+0xa4c>
 80028b6:	4b84      	ldr	r3, [pc, #528]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	e013      	b.n	80028e4 <HAL_RCC_OscConfig+0xa74>
 80028bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028c4:	2202      	movs	r2, #2
 80028c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	fa93 f2a3 	rbit	r2, r3
 80028d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028da:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	4b79      	ldr	r3, [pc, #484]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028e8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80028ec:	2102      	movs	r1, #2
 80028ee:	6011      	str	r1, [r2, #0]
 80028f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028f4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80028f8:	6812      	ldr	r2, [r2, #0]
 80028fa:	fa92 f1a2 	rbit	r1, r2
 80028fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002902:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002906:	6011      	str	r1, [r2, #0]
  return result;
 8002908:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800290c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	fab2 f282 	clz	r2, r2
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	f002 021f 	and.w	r2, r2, #31
 8002922:	2101      	movs	r1, #1
 8002924:	fa01 f202 	lsl.w	r2, r1, r2
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d084      	beq.n	8002838 <HAL_RCC_OscConfig+0x9c8>
 800292e:	e07f      	b.n	8002a30 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002930:	f7fe fd46 	bl	80013c0 <HAL_GetTick>
 8002934:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002938:	e00b      	b.n	8002952 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800293a:	f7fe fd41 	bl	80013c0 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e2c4      	b.n	8002edc <HAL_RCC_OscConfig+0x106c>
 8002952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002956:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800295a:	2202      	movs	r2, #2
 800295c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002962:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	fa93 f2a3 	rbit	r2, r3
 800296c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002970:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800297e:	2202      	movs	r2, #2
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	fa93 f2a3 	rbit	r2, r3
 8002990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002994:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002998:	601a      	str	r2, [r3, #0]
  return result;
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a4:	fab3 f383 	clz	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f043 0302 	orr.w	r3, r3, #2
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d102      	bne.n	80029be <HAL_RCC_OscConfig+0xb4e>
 80029b8:	4b43      	ldr	r3, [pc, #268]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	e013      	b.n	80029e6 <HAL_RCC_OscConfig+0xb76>
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029c6:	2202      	movs	r2, #2
 80029c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	fa93 f2a3 	rbit	r2, r3
 80029d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029dc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	4b39      	ldr	r3, [pc, #228]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80029ee:	2102      	movs	r1, #2
 80029f0:	6011      	str	r1, [r2, #0]
 80029f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029f6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	fa92 f1a2 	rbit	r1, r2
 8002a00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a04:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a08:	6011      	str	r1, [r2, #0]
  return result;
 8002a0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a0e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	fab2 f282 	clz	r2, r2
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	f002 021f 	and.w	r2, r2, #31
 8002a24:	2101      	movs	r1, #1
 8002a26:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d184      	bne.n	800293a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a30:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d105      	bne.n	8002a44 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a38:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	4a22      	ldr	r2, [pc, #136]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 8002a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a42:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 8242 	beq.w	8002eda <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a56:	4b1c      	ldr	r3, [pc, #112]	; (8002ac8 <HAL_RCC_OscConfig+0xc58>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	f000 8213 	beq.w	8002e8a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	f040 8162 	bne.w	8002d3a <HAL_RCC_OscConfig+0xeca>
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	fa93 f2a3 	rbit	r2, r3
 8002a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a96:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a9a:	601a      	str	r2, [r3, #0]
  return result;
 8002a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002aa4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ab0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2300      	movs	r3, #0
 8002aba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe fc80 	bl	80013c0 <HAL_GetTick>
 8002ac0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac4:	e00c      	b.n	8002ae0 <HAL_RCC_OscConfig+0xc70>
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fe fc78 	bl	80013c0 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e1fd      	b.n	8002edc <HAL_RCC_OscConfig+0x106c>
 8002ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ae8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	fa93 f2a3 	rbit	r2, r3
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b04:	601a      	str	r2, [r3, #0]
  return result;
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d102      	bne.n	8002b2a <HAL_RCC_OscConfig+0xcba>
 8002b24:	4bb0      	ldr	r3, [pc, #704]	; (8002de8 <HAL_RCC_OscConfig+0xf78>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	e027      	b.n	8002b7a <HAL_RCC_OscConfig+0xd0a>
 8002b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	fa93 f2a3 	rbit	r2, r3
 8002b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b54:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	fa93 f2a3 	rbit	r2, r3
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	4b9c      	ldr	r3, [pc, #624]	; (8002de8 <HAL_RCC_OscConfig+0xf78>)
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b7e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b82:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b86:	6011      	str	r1, [r2, #0]
 8002b88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b8c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	fa92 f1a2 	rbit	r1, r2
 8002b96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b9a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b9e:	6011      	str	r1, [r2, #0]
  return result;
 8002ba0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ba4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	fab2 f282 	clz	r2, r2
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f042 0220 	orr.w	r2, r2, #32
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	f002 021f 	and.w	r2, r2, #31
 8002bba:	2101      	movs	r1, #1
 8002bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d182      	bne.n	8002acc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc6:	4b88      	ldr	r3, [pc, #544]	; (8002de8 <HAL_RCC_OscConfig+0xf78>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	430b      	orrs	r3, r1
 8002be8:	497f      	ldr	r1, [pc, #508]	; (8002de8 <HAL_RCC_OscConfig+0xf78>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
 8002bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002bf6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c00:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	fa93 f2a3 	rbit	r2, r3
 8002c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c12:	601a      	str	r2, [r3, #0]
  return result;
 8002c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c18:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c1c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2301      	movs	r3, #1
 8002c32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fe fbc4 	bl	80013c0 <HAL_GetTick>
 8002c38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c3c:	e009      	b.n	8002c52 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7fe fbbf 	bl	80013c0 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e144      	b.n	8002edc <HAL_RCC_OscConfig+0x106c>
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	fa93 f2a3 	rbit	r2, r3
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c76:	601a      	str	r2, [r3, #0]
  return result;
 8002c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d102      	bne.n	8002c9c <HAL_RCC_OscConfig+0xe2c>
 8002c96:	4b54      	ldr	r3, [pc, #336]	; (8002de8 <HAL_RCC_OscConfig+0xf78>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	e027      	b.n	8002cec <HAL_RCC_OscConfig+0xe7c>
 8002c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ca4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cae:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	fa93 f2a3 	rbit	r2, r3
 8002cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002cca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	fa93 f2a3 	rbit	r2, r3
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	4b3f      	ldr	r3, [pc, #252]	; (8002de8 <HAL_RCC_OscConfig+0xf78>)
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cf0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002cf4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cf8:	6011      	str	r1, [r2, #0]
 8002cfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cfe:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	fa92 f1a2 	rbit	r1, r2
 8002d08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d0c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d10:	6011      	str	r1, [r2, #0]
  return result;
 8002d12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d16:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	fab2 f282 	clz	r2, r2
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	f042 0220 	orr.w	r2, r2, #32
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	f002 021f 	and.w	r2, r2, #31
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d082      	beq.n	8002c3e <HAL_RCC_OscConfig+0xdce>
 8002d38:	e0cf      	b.n	8002eda <HAL_RCC_OscConfig+0x106a>
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	fa93 f2a3 	rbit	r2, r3
 8002d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d5e:	601a      	str	r2, [r3, #0]
  return result;
 8002d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d64:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d68:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7fe fb1e 	bl	80013c0 <HAL_GetTick>
 8002d84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d88:	e009      	b.n	8002d9e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7fe fb19 	bl	80013c0 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e09e      	b.n	8002edc <HAL_RCC_OscConfig+0x106c>
 8002d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002da6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	fa93 f2a3 	rbit	r2, r3
 8002dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002dc2:	601a      	str	r2, [r3, #0]
  return result;
 8002dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002dcc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d104      	bne.n	8002dec <HAL_RCC_OscConfig+0xf7c>
 8002de2:	4b01      	ldr	r3, [pc, #4]	; (8002de8 <HAL_RCC_OscConfig+0xf78>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	e029      	b.n	8002e3c <HAL_RCC_OscConfig+0xfcc>
 8002de8:	40021000 	.word	0x40021000
 8002dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002df4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	fa93 f2a3 	rbit	r2, r3
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e16:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e24:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	fa93 f2a3 	rbit	r2, r3
 8002e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e32:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_OscConfig+0x1078>)
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e40:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e48:	6011      	str	r1, [r2, #0]
 8002e4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e4e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	fa92 f1a2 	rbit	r1, r2
 8002e58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e5c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e60:	6011      	str	r1, [r2, #0]
  return result;
 8002e62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e66:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	fab2 f282 	clz	r2, r2
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	f042 0220 	orr.w	r2, r2, #32
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	f002 021f 	and.w	r2, r2, #31
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d180      	bne.n	8002d8a <HAL_RCC_OscConfig+0xf1a>
 8002e88:	e027      	b.n	8002eda <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e01e      	b.n	8002edc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_RCC_OscConfig+0x1078>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ea6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002eaa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d10b      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ebe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ec2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d001      	beq.n	8002eda <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000

08002eec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b09e      	sub	sp, #120	; 0x78
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e162      	b.n	80031ca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f04:	4b90      	ldr	r3, [pc, #576]	; (8003148 <HAL_RCC_ClockConfig+0x25c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d910      	bls.n	8002f34 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f12:	4b8d      	ldr	r3, [pc, #564]	; (8003148 <HAL_RCC_ClockConfig+0x25c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 0207 	bic.w	r2, r3, #7
 8002f1a:	498b      	ldr	r1, [pc, #556]	; (8003148 <HAL_RCC_ClockConfig+0x25c>)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f22:	4b89      	ldr	r3, [pc, #548]	; (8003148 <HAL_RCC_ClockConfig+0x25c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d001      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e14a      	b.n	80031ca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f40:	4b82      	ldr	r3, [pc, #520]	; (800314c <HAL_RCC_ClockConfig+0x260>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	497f      	ldr	r1, [pc, #508]	; (800314c <HAL_RCC_ClockConfig+0x260>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80dc 	beq.w	8003118 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d13c      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xf6>
 8002f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f6c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f70:	fa93 f3a3 	rbit	r3, r3
 8002f74:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f78:	fab3 f383 	clz	r3, r3
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d102      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xa6>
 8002f8c:	4b6f      	ldr	r3, [pc, #444]	; (800314c <HAL_RCC_ClockConfig+0x260>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	e00f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0xc6>
 8002f92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	667b      	str	r3, [r7, #100]	; 0x64
 8002fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fa4:	663b      	str	r3, [r7, #96]	; 0x60
 8002fa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fae:	4b67      	ldr	r3, [pc, #412]	; (800314c <HAL_RCC_ClockConfig+0x260>)
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fb6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fba:	fa92 f2a2 	rbit	r2, r2
 8002fbe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002fc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fc2:	fab2 f282 	clz	r2, r2
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	f042 0220 	orr.w	r2, r2, #32
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f002 021f 	and.w	r2, r2, #31
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d17b      	bne.n	80030d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e0f3      	b.n	80031ca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d13c      	bne.n	8003064 <HAL_RCC_ClockConfig+0x178>
 8002fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	b2db      	uxtb	r3, r3
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b01      	cmp	r3, #1
 800300c:	d102      	bne.n	8003014 <HAL_RCC_ClockConfig+0x128>
 800300e:	4b4f      	ldr	r3, [pc, #316]	; (800314c <HAL_RCC_ClockConfig+0x260>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	e00f      	b.n	8003034 <HAL_RCC_ClockConfig+0x148>
 8003014:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003018:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	647b      	str	r3, [r7, #68]	; 0x44
 8003022:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003026:	643b      	str	r3, [r7, #64]	; 0x40
 8003028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003030:	4b46      	ldr	r3, [pc, #280]	; (800314c <HAL_RCC_ClockConfig+0x260>)
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003038:	63ba      	str	r2, [r7, #56]	; 0x38
 800303a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800303c:	fa92 f2a2 	rbit	r2, r2
 8003040:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003044:	fab2 f282 	clz	r2, r2
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	f042 0220 	orr.w	r2, r2, #32
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	f002 021f 	and.w	r2, r2, #31
 8003054:	2101      	movs	r1, #1
 8003056:	fa01 f202 	lsl.w	r2, r1, r2
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d13a      	bne.n	80030d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0b2      	b.n	80031ca <HAL_RCC_ClockConfig+0x2de>
 8003064:	2302      	movs	r3, #2
 8003066:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306a:	fa93 f3a3 	rbit	r3, r3
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d102      	bne.n	800308c <HAL_RCC_ClockConfig+0x1a0>
 8003086:	4b31      	ldr	r3, [pc, #196]	; (800314c <HAL_RCC_ClockConfig+0x260>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	e00d      	b.n	80030a8 <HAL_RCC_ClockConfig+0x1bc>
 800308c:	2302      	movs	r3, #2
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
 8003098:	2302      	movs	r3, #2
 800309a:	623b      	str	r3, [r7, #32]
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	4b29      	ldr	r3, [pc, #164]	; (800314c <HAL_RCC_ClockConfig+0x260>)
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	2202      	movs	r2, #2
 80030aa:	61ba      	str	r2, [r7, #24]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	fa92 f2a2 	rbit	r2, r2
 80030b2:	617a      	str	r2, [r7, #20]
  return result;
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	fab2 f282 	clz	r2, r2
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	f042 0220 	orr.w	r2, r2, #32
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	f002 021f 	and.w	r2, r2, #31
 80030c6:	2101      	movs	r1, #1
 80030c8:	fa01 f202 	lsl.w	r2, r1, r2
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e079      	b.n	80031ca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030d6:	4b1d      	ldr	r3, [pc, #116]	; (800314c <HAL_RCC_ClockConfig+0x260>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f023 0203 	bic.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	491a      	ldr	r1, [pc, #104]	; (800314c <HAL_RCC_ClockConfig+0x260>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030e8:	f7fe f96a 	bl	80013c0 <HAL_GetTick>
 80030ec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f0:	f7fe f966 	bl	80013c0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e061      	b.n	80031ca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_RCC_ClockConfig+0x260>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 020c 	and.w	r2, r3, #12
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	429a      	cmp	r2, r3
 8003116:	d1eb      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_ClockConfig+0x25c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d214      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <HAL_RCC_ClockConfig+0x25c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 0207 	bic.w	r2, r3, #7
 800312e:	4906      	ldr	r1, [pc, #24]	; (8003148 <HAL_RCC_ClockConfig+0x25c>)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b04      	ldr	r3, [pc, #16]	; (8003148 <HAL_RCC_ClockConfig+0x25c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e040      	b.n	80031ca <HAL_RCC_ClockConfig+0x2de>
 8003148:	40022000 	.word	0x40022000
 800314c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800315c:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <HAL_RCC_ClockConfig+0x2e8>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	491a      	ldr	r1, [pc, #104]	; (80031d4 <HAL_RCC_ClockConfig+0x2e8>)
 800316a:	4313      	orrs	r3, r2
 800316c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800317a:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <HAL_RCC_ClockConfig+0x2e8>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4912      	ldr	r1, [pc, #72]	; (80031d4 <HAL_RCC_ClockConfig+0x2e8>)
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800318e:	f000 f829 	bl	80031e4 <HAL_RCC_GetSysClockFreq>
 8003192:	4601      	mov	r1, r0
 8003194:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <HAL_RCC_ClockConfig+0x2e8>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800319c:	22f0      	movs	r2, #240	; 0xf0
 800319e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	fa92 f2a2 	rbit	r2, r2
 80031a6:	60fa      	str	r2, [r7, #12]
  return result;
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	fab2 f282 	clz	r2, r2
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	40d3      	lsrs	r3, r2
 80031b2:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <HAL_RCC_ClockConfig+0x2ec>)
 80031b4:	5cd3      	ldrb	r3, [r2, r3]
 80031b6:	fa21 f303 	lsr.w	r3, r1, r3
 80031ba:	4a08      	ldr	r2, [pc, #32]	; (80031dc <HAL_RCC_ClockConfig+0x2f0>)
 80031bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <HAL_RCC_ClockConfig+0x2f4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fe f8b8 	bl	8001338 <HAL_InitTick>
  
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3778      	adds	r7, #120	; 0x78
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	080064b4 	.word	0x080064b4
 80031dc:	20000224 	.word	0x20000224
 80031e0:	20000228 	.word	0x20000228

080031e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b08b      	sub	sp, #44	; 0x2c
 80031e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	2300      	movs	r3, #0
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	2300      	movs	r3, #0
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80031fe:	4b29      	ldr	r3, [pc, #164]	; (80032a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b04      	cmp	r3, #4
 800320c:	d002      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x30>
 800320e:	2b08      	cmp	r3, #8
 8003210:	d003      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0x36>
 8003212:	e03c      	b.n	800328e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003214:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003216:	623b      	str	r3, [r7, #32]
      break;
 8003218:	e03c      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003220:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003224:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	fa92 f2a2 	rbit	r2, r2
 800322c:	607a      	str	r2, [r7, #4]
  return result;
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	fab2 f282 	clz	r2, r2
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	40d3      	lsrs	r3, r2
 8003238:	4a1c      	ldr	r2, [pc, #112]	; (80032ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800323a:	5cd3      	ldrb	r3, [r2, r3]
 800323c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800323e:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	220f      	movs	r2, #15
 8003248:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	fa92 f2a2 	rbit	r2, r2
 8003250:	60fa      	str	r2, [r7, #12]
  return result;
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	fab2 f282 	clz	r2, r2
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	40d3      	lsrs	r3, r2
 800325c:	4a14      	ldr	r2, [pc, #80]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800325e:	5cd3      	ldrb	r3, [r2, r3]
 8003260:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800326c:	4a0e      	ldr	r2, [pc, #56]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	fbb2 f2f3 	udiv	r2, r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
 800327c:	e004      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	4a0c      	ldr	r2, [pc, #48]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	623b      	str	r3, [r7, #32]
      break;
 800328c:	e002      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003290:	623b      	str	r3, [r7, #32]
      break;
 8003292:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003294:	6a3b      	ldr	r3, [r7, #32]
}
 8003296:	4618      	mov	r0, r3
 8003298:	372c      	adds	r7, #44	; 0x2c
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	007a1200 	.word	0x007a1200
 80032ac:	080064c4 	.word	0x080064c4
 80032b0:	080064d4 	.word	0x080064d4
 80032b4:	003d0900 	.word	0x003d0900

080032b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b092      	sub	sp, #72	; 0x48
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 80d4 	beq.w	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032dc:	4b4e      	ldr	r3, [pc, #312]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10e      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e8:	4b4b      	ldr	r3, [pc, #300]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	4a4a      	ldr	r2, [pc, #296]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f2:	61d3      	str	r3, [r2, #28]
 80032f4:	4b48      	ldr	r3, [pc, #288]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003300:	2301      	movs	r3, #1
 8003302:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003306:	4b45      	ldr	r3, [pc, #276]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d118      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003312:	4b42      	ldr	r3, [pc, #264]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a41      	ldr	r2, [pc, #260]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331e:	f7fe f84f 	bl	80013c0 <HAL_GetTick>
 8003322:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003324:	e008      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003326:	f7fe f84b 	bl	80013c0 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b64      	cmp	r3, #100	; 0x64
 8003332:	d901      	bls.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e169      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003338:	4b38      	ldr	r3, [pc, #224]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003344:	4b34      	ldr	r3, [pc, #208]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800334e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8084 	beq.w	800345e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800335e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003360:	429a      	cmp	r2, r3
 8003362:	d07c      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003364:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800336e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003372:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	4b26      	ldr	r3, [pc, #152]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	461a      	mov	r2, r3
 800338e:	2301      	movs	r3, #1
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003396:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033a2:	fab3 f383 	clz	r3, r3
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	461a      	mov	r2, r3
 80033b2:	2300      	movs	r3, #0
 80033b4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033b6:	4a18      	ldr	r2, [pc, #96]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d04b      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c6:	f7fd fffb 	bl	80013c0 <HAL_GetTick>
 80033ca:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7fd fff7 	bl	80013c0 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d901      	bls.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e113      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x354>
 80033e4:	2302      	movs	r3, #2
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	fa93 f3a3 	rbit	r3, r3
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
 80033f0:	2302      	movs	r3, #2
 80033f2:	623b      	str	r3, [r7, #32]
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	fa93 f3a3 	rbit	r3, r3
 80033fa:	61fb      	str	r3, [r7, #28]
  return result;
 80033fc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f043 0302 	orr.w	r3, r3, #2
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d108      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003412:	4b01      	ldr	r3, [pc, #4]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	e00d      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003418:	40021000 	.word	0x40021000
 800341c:	40007000 	.word	0x40007000
 8003420:	10908100 	.word	0x10908100
 8003424:	2302      	movs	r3, #2
 8003426:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	4b78      	ldr	r3, [pc, #480]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	2202      	movs	r2, #2
 8003436:	613a      	str	r2, [r7, #16]
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	fa92 f2a2 	rbit	r2, r2
 800343e:	60fa      	str	r2, [r7, #12]
  return result;
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	fab2 f282 	clz	r2, r2
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	f002 021f 	and.w	r2, r2, #31
 8003452:	2101      	movs	r1, #1
 8003454:	fa01 f202 	lsl.w	r2, r1, r2
 8003458:	4013      	ands	r3, r2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0b7      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800345e:	4b6d      	ldr	r3, [pc, #436]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	496a      	ldr	r1, [pc, #424]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800346c:	4313      	orrs	r3, r2
 800346e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003470:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003478:	4b66      	ldr	r3, [pc, #408]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	4a65      	ldr	r2, [pc, #404]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800347e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003482:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003490:	4b60      	ldr	r3, [pc, #384]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	f023 0203 	bic.w	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	495d      	ldr	r1, [pc, #372]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d008      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034ae:	4b59      	ldr	r3, [pc, #356]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	4956      	ldr	r1, [pc, #344]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034cc:	4b51      	ldr	r3, [pc, #324]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	494e      	ldr	r1, [pc, #312]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034ea:	4b4a      	ldr	r3, [pc, #296]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f023 0210 	bic.w	r2, r3, #16
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	4947      	ldr	r1, [pc, #284]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003508:	4b42      	ldr	r3, [pc, #264]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	493f      	ldr	r1, [pc, #252]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003516:	4313      	orrs	r3, r2
 8003518:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003526:	4b3b      	ldr	r3, [pc, #236]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f023 0220 	bic.w	r2, r3, #32
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4938      	ldr	r1, [pc, #224]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003534:	4313      	orrs	r3, r2
 8003536:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003544:	4b33      	ldr	r3, [pc, #204]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	4930      	ldr	r1, [pc, #192]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003552:	4313      	orrs	r3, r2
 8003554:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003562:	4b2c      	ldr	r3, [pc, #176]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	4929      	ldr	r1, [pc, #164]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003570:	4313      	orrs	r3, r2
 8003572:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003580:	4b24      	ldr	r3, [pc, #144]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	4921      	ldr	r1, [pc, #132]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b00      	cmp	r3, #0
 800359c:	d008      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800359e:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	491a      	ldr	r1, [pc, #104]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80035bc:	4b15      	ldr	r3, [pc, #84]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	4912      	ldr	r1, [pc, #72]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80035da:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	490b      	ldr	r1, [pc, #44]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	4903      	ldr	r1, [pc, #12]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003606:	4313      	orrs	r3, r2
 8003608:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3748      	adds	r7, #72	; 0x48
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000

08003618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e09d      	b.n	8003766 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	2b00      	cmp	r3, #0
 8003630:	d108      	bne.n	8003644 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800363a:	d009      	beq.n	8003650 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	61da      	str	r2, [r3, #28]
 8003642:	e005      	b.n	8003650 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fd fb6e 	bl	8000d4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003686:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003690:	d902      	bls.n	8003698 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	e002      	b.n	800369e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800369c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80036a6:	d007      	beq.n	80036b8 <HAL_SPI_Init+0xa0>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036b0:	d002      	beq.n	80036b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fa:	ea42 0103 	orr.w	r1, r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003702:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	0c1b      	lsrs	r3, r3, #16
 8003714:	f003 0204 	and.w	r2, r3, #4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003734:	ea42 0103 	orr.w	r1, r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003754:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e01a      	b.n	80037b6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003796:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7fd fb19 	bl	8000dd0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b08a      	sub	sp, #40	; 0x28
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037cc:	2301      	movs	r3, #1
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_SPI_TransmitReceive+0x26>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e20a      	b.n	8003bfa <HAL_SPI_TransmitReceive+0x43c>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037ec:	f7fd fde8 	bl	80013c0 <HAL_GetTick>
 80037f0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037f8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003800:	887b      	ldrh	r3, [r7, #2]
 8003802:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003804:	887b      	ldrh	r3, [r7, #2]
 8003806:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003808:	7efb      	ldrb	r3, [r7, #27]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d00e      	beq.n	800382c <HAL_SPI_TransmitReceive+0x6e>
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003814:	d106      	bne.n	8003824 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <HAL_SPI_TransmitReceive+0x66>
 800381e:	7efb      	ldrb	r3, [r7, #27]
 8003820:	2b04      	cmp	r3, #4
 8003822:	d003      	beq.n	800382c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003824:	2302      	movs	r3, #2
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800382a:	e1e0      	b.n	8003bee <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_SPI_TransmitReceive+0x80>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_SPI_TransmitReceive+0x80>
 8003838:	887b      	ldrh	r3, [r7, #2]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d103      	bne.n	8003846 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003844:	e1d3      	b.n	8003bee <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b04      	cmp	r3, #4
 8003850:	d003      	beq.n	800385a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2205      	movs	r2, #5
 8003856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	887a      	ldrh	r2, [r7, #2]
 800386a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	887a      	ldrh	r2, [r7, #2]
 8003872:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	887a      	ldrh	r2, [r7, #2]
 8003880:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	887a      	ldrh	r2, [r7, #2]
 8003886:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800389c:	d802      	bhi.n	80038a4 <HAL_SPI_TransmitReceive+0xe6>
 800389e:	8a3b      	ldrh	r3, [r7, #16]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d908      	bls.n	80038b6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	e007      	b.n	80038c6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038c4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d0:	2b40      	cmp	r3, #64	; 0x40
 80038d2:	d007      	beq.n	80038e4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038ec:	f240 8081 	bls.w	80039f2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_SPI_TransmitReceive+0x140>
 80038f8:	8a7b      	ldrh	r3, [r7, #18]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d16d      	bne.n	80039da <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	881a      	ldrh	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	1c9a      	adds	r2, r3, #2
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003922:	e05a      	b.n	80039da <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b02      	cmp	r3, #2
 8003930:	d11b      	bne.n	800396a <HAL_SPI_TransmitReceive+0x1ac>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d016      	beq.n	800396a <HAL_SPI_TransmitReceive+0x1ac>
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	2b01      	cmp	r3, #1
 8003940:	d113      	bne.n	800396a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	881a      	ldrh	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	1c9a      	adds	r2, r3, #2
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d11c      	bne.n	80039b2 <HAL_SPI_TransmitReceive+0x1f4>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d016      	beq.n	80039b2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	b292      	uxth	r2, r2
 8003990:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	1c9a      	adds	r2, r3, #2
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039ae:	2301      	movs	r3, #1
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039b2:	f7fd fd05 	bl	80013c0 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039be:	429a      	cmp	r2, r3
 80039c0:	d80b      	bhi.n	80039da <HAL_SPI_TransmitReceive+0x21c>
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d007      	beq.n	80039da <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80039d8:	e109      	b.n	8003bee <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d19f      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x166>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d199      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x166>
 80039f0:	e0e3      	b.n	8003bba <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_SPI_TransmitReceive+0x244>
 80039fa:	8a7b      	ldrh	r3, [r7, #18]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	f040 80cf 	bne.w	8003ba0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d912      	bls.n	8003a32 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	881a      	ldrh	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	1c9a      	adds	r2, r3, #2
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b02      	subs	r3, #2
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a30:	e0b6      	b.n	8003ba0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	330c      	adds	r3, #12
 8003a3c:	7812      	ldrb	r2, [r2, #0]
 8003a3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a58:	e0a2      	b.n	8003ba0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d134      	bne.n	8003ad2 <HAL_SPI_TransmitReceive+0x314>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d02f      	beq.n	8003ad2 <HAL_SPI_TransmitReceive+0x314>
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d12c      	bne.n	8003ad2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d912      	bls.n	8003aa8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	881a      	ldrh	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	1c9a      	adds	r2, r3, #2
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b02      	subs	r3, #2
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003aa6:	e012      	b.n	8003ace <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	330c      	adds	r3, #12
 8003ab2:	7812      	ldrb	r2, [r2, #0]
 8003ab4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d148      	bne.n	8003b72 <HAL_SPI_TransmitReceive+0x3b4>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d042      	beq.n	8003b72 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d923      	bls.n	8003b40 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	b292      	uxth	r2, r2
 8003b04:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	1c9a      	adds	r2, r3, #2
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b02      	subs	r3, #2
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d81f      	bhi.n	8003b6e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	e016      	b.n	8003b6e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f103 020c 	add.w	r2, r3, #12
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	7812      	ldrb	r2, [r2, #0]
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b72:	f7fd fc25 	bl	80013c0 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d803      	bhi.n	8003b8a <HAL_SPI_TransmitReceive+0x3cc>
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d102      	bne.n	8003b90 <HAL_SPI_TransmitReceive+0x3d2>
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d107      	bne.n	8003ba0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003b9e:	e026      	b.n	8003bee <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f47f af57 	bne.w	8003a5a <HAL_SPI_TransmitReceive+0x29c>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f47f af50 	bne.w	8003a5a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f94c 	bl	8003e5c <SPI_EndRxTxTransaction>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be4:	e003      	b.n	8003bee <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003bf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3728      	adds	r7, #40	; 0x28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c10:	b2db      	uxtb	r3, r3
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c30:	f7fd fbc6 	bl	80013c0 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c40:	f7fd fbbe 	bl	80013c0 <HAL_GetTick>
 8003c44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c46:	4b39      	ldr	r3, [pc, #228]	; (8003d2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	015b      	lsls	r3, r3, #5
 8003c4c:	0d1b      	lsrs	r3, r3, #20
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	fb02 f303 	mul.w	r3, r2, r3
 8003c54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c56:	e054      	b.n	8003d02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5e:	d050      	beq.n	8003d02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c60:	f7fd fbae 	bl	80013c0 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d902      	bls.n	8003c76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d13d      	bne.n	8003cf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c8e:	d111      	bne.n	8003cb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c98:	d004      	beq.n	8003ca4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca2:	d107      	bne.n	8003cb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cbc:	d10f      	bne.n	8003cde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e017      	b.n	8003d22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	bf0c      	ite	eq
 8003d12:	2301      	moveq	r3, #1
 8003d14:	2300      	movne	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	461a      	mov	r2, r3
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d19b      	bne.n	8003c58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000224 	.word	0x20000224

08003d30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08a      	sub	sp, #40	; 0x28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d42:	f7fd fb3d 	bl	80013c0 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	4413      	add	r3, r2
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003d52:	f7fd fb35 	bl	80013c0 <HAL_GetTick>
 8003d56:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d60:	4b3d      	ldr	r3, [pc, #244]	; (8003e58 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	00da      	lsls	r2, r3, #3
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	0d1b      	lsrs	r3, r3, #20
 8003d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d78:	e060      	b.n	8003e3c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d80:	d107      	bne.n	8003d92 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d104      	bne.n	8003d92 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d90:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d98:	d050      	beq.n	8003e3c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d9a:	f7fd fb11 	bl	80013c0 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d902      	bls.n	8003db0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d13d      	bne.n	8003e2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dc8:	d111      	bne.n	8003dee <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd2:	d004      	beq.n	8003dde <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ddc:	d107      	bne.n	8003dee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df6:	d10f      	bne.n	8003e18 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e010      	b.n	8003e4e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4013      	ands	r3, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d196      	bne.n	8003d7a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3728      	adds	r7, #40	; 0x28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000224 	.word	0x20000224

08003e5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f7ff ff5b 	bl	8003d30 <SPI_WaitFifoStateUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e84:	f043 0220 	orr.w	r2, r3, #32
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e027      	b.n	8003ee0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2200      	movs	r2, #0
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f7ff fec0 	bl	8003c20 <SPI_WaitFlagStateUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d007      	beq.n	8003eb6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eaa:	f043 0220 	orr.w	r2, r3, #32
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e014      	b.n	8003ee0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f7ff ff34 	bl	8003d30 <SPI_WaitFifoStateUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed2:	f043 0220 	orr.w	r2, r3, #32
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e000      	b.n	8003ee0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ef0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ef4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	4013      	ands	r3, r2
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f1e:	b084      	sub	sp, #16
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	f107 0014 	add.w	r0, r7, #20
 8003f2c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	b004      	add	sp, #16
 8003f5e:	4770      	bx	lr

08003f60 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8003f6e:	2300      	movs	r3, #0
 8003f70:	703b      	strb	r3, [r7, #0]
 8003f72:	2300      	movs	r3, #0
 8003f74:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8003f76:	4b52      	ldr	r3, [pc, #328]	; (80040c0 <BSP_GYRO_Init+0x160>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	4798      	blx	r3
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2bd4      	cmp	r3, #212	; 0xd4
 8003f80:	d005      	beq.n	8003f8e <BSP_GYRO_Init+0x2e>
 8003f82:	4b4f      	ldr	r3, [pc, #316]	; (80040c0 <BSP_GYRO_Init+0x160>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	4798      	blx	r3
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2bd5      	cmp	r3, #213	; 0xd5
 8003f8c:	d146      	bne.n	800401c <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8003f8e:	4b4d      	ldr	r3, [pc, #308]	; (80040c4 <BSP_GYRO_Init+0x164>)
 8003f90:	4a4b      	ldr	r2, [pc, #300]	; (80040c0 <BSP_GYRO_Init+0x160>)
 8003f92:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8003f94:	2308      	movs	r3, #8
 8003f96:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8003f9c:	2307      	movs	r3, #7
 8003f9e:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8003fa0:	2330      	movs	r3, #48	; 0x30
 8003fa2:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8003fac:	2310      	movs	r3, #16
 8003fae:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003fb0:	793a      	ldrb	r2, [r7, #4]
 8003fb2:	797b      	ldrb	r3, [r7, #5]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003fb8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003fc6:	7a3a      	ldrb	r2, [r7, #8]
 8003fc8:	7a7b      	ldrb	r3, [r7, #9]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8003fce:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	89bb      	ldrh	r3, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8003fe0:	4b38      	ldr	r3, [pc, #224]	; (80040c4 <BSP_GYRO_Init+0x164>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	89ba      	ldrh	r2, [r7, #12]
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8003fec:	2300      	movs	r3, #0
 8003fee:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003ff4:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8003ff6:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8003ffe:	4b31      	ldr	r3, [pc, #196]	; (80040c4 <BSP_GYRO_Init+0x164>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	89ba      	ldrh	r2, [r7, #12]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	4610      	mov	r0, r2
 800400a:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 800400c:	4b2d      	ldr	r3, [pc, #180]	; (80040c4 <BSP_GYRO_Init+0x164>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	2010      	movs	r0, #16
 8004014:	4798      	blx	r3

    ret = GYRO_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	73fb      	strb	r3, [r7, #15]
 800401a:	e04b      	b.n	80040b4 <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 800401c:	4b2a      	ldr	r3, [pc, #168]	; (80040c8 <BSP_GYRO_Init+0x168>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	4798      	blx	r3
 8004022:	4603      	mov	r3, r0
 8004024:	2bd3      	cmp	r3, #211	; 0xd3
 8004026:	d145      	bne.n	80040b4 <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8004028:	4b26      	ldr	r3, [pc, #152]	; (80040c4 <BSP_GYRO_Init+0x164>)
 800402a:	4a27      	ldr	r2, [pc, #156]	; (80040c8 <BSP_GYRO_Init+0x168>)
 800402c:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 800402e:	2308      	movs	r3, #8
 8004030:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 8004032:	2300      	movs	r3, #0
 8004034:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 8004036:	2307      	movs	r3, #7
 8004038:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 800403a:	2330      	movs	r3, #48	; 0x30
 800403c:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 800403e:	2300      	movs	r3, #0
 8004040:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 8004042:	2300      	movs	r3, #0
 8004044:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 8004046:	2310      	movs	r3, #16
 8004048:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800404a:	793a      	ldrb	r2, [r7, #4]
 800404c:	797b      	ldrb	r3, [r7, #5]
 800404e:	4313      	orrs	r3, r2
 8004050:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004052:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004054:	4313      	orrs	r3, r2
 8004056:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004058:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800405a:	4313      	orrs	r3, r2
 800405c:	b2db      	uxtb	r3, r3
 800405e:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004060:	7a3a      	ldrb	r2, [r7, #8]
 8004062:	7a7b      	ldrb	r3, [r7, #9]
 8004064:	4313      	orrs	r3, r2
 8004066:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8004068:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800406a:	4313      	orrs	r3, r2
 800406c:	b2db      	uxtb	r3, r3
 800406e:	b29b      	uxth	r3, r3
 8004070:	021b      	lsls	r3, r3, #8
 8004072:	b29a      	uxth	r2, r3
 8004074:	89bb      	ldrh	r3, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 800407a:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <BSP_GYRO_Init+0x164>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	89ba      	ldrh	r2, [r7, #12]
 8004082:	4610      	mov	r0, r2
 8004084:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 8004086:	2300      	movs	r3, #0
 8004088:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 800408a:	2300      	movs	r3, #0
 800408c:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800408e:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8004090:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8004092:	4313      	orrs	r3, r2
 8004094:	b2db      	uxtb	r3, r3
 8004096:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8004098:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <BSP_GYRO_Init+0x164>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	89ba      	ldrh	r2, [r7, #12]
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	4610      	mov	r0, r2
 80040a4:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 80040a6:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <BSP_GYRO_Init+0x164>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	2010      	movs	r0, #16
 80040ae:	4798      	blx	r3

    ret = GYRO_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000264 	.word	0x20000264
 80040c4:	2000085c 	.word	0x2000085c
 80040c8:	20000230 	.word	0x20000230

080040cc <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <BSP_GYRO_GetXYZ+0x24>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d004      	beq.n	80040e8 <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 80040de:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <BSP_GYRO_GetXYZ+0x24>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	4798      	blx	r3
  }
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	2000085c 	.word	0x2000085c

080040f4 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8004102:	f000 fc7f 	bl	8004a04 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800410c:	f107 030f 	add.w	r3, r7, #15
 8004110:	2201      	movs	r2, #1
 8004112:	2120      	movs	r1, #32
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fcbb 	bl	8004a90 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	0a1b      	lsrs	r3, r3, #8
 800411e:	b29b      	uxth	r3, r3
 8004120:	b2db      	uxtb	r3, r3
 8004122:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 8004124:	f107 030f 	add.w	r3, r7, #15
 8004128:	2201      	movs	r2, #1
 800412a:	2123      	movs	r1, #35	; 0x23
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fcaf 	bl	8004a90 <GYRO_IO_Write>
}
 8004132:	bf00      	nop
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 800413a:	b480      	push	{r7}
 800413c:	af00      	add	r7, sp, #0
}
 800413e:	bf00      	nop
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 800414e:	f000 fc59 	bl	8004a04 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8004152:	1dfb      	adds	r3, r7, #7
 8004154:	2201      	movs	r2, #1
 8004156:	210f      	movs	r1, #15
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fccb 	bl	8004af4 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 800415e:	79fb      	ldrb	r3, [r7, #7]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800416e:	1dfb      	adds	r3, r7, #7
 8004170:	2201      	movs	r2, #1
 8004172:	2124      	movs	r1, #36	; 0x24
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fcbd 	bl	8004af4 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004180:	b2db      	uxtb	r3, r3
 8004182:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8004184:	1dfb      	adds	r3, r7, #7
 8004186:	2201      	movs	r2, #1
 8004188:	2124      	movs	r1, #36	; 0x24
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fc80 	bl	8004a90 <GYRO_IO_Write>
}
 8004190:	bf00      	nop
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 80041ac:	f107 030f 	add.w	r3, r7, #15
 80041b0:	2201      	movs	r2, #1
 80041b2:	2120      	movs	r1, #32
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fc6b 	bl	8004a90 <GYRO_IO_Write>
}
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	4603      	mov	r3, r0
 80041ca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80041cc:	2300      	movs	r3, #0
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	2300      	movs	r3, #0
 80041d2:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 80041d4:	f107 030f 	add.w	r3, r7, #15
 80041d8:	2201      	movs	r2, #1
 80041da:	2130      	movs	r1, #48	; 0x30
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fc89 	bl	8004af4 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 80041e2:	f107 030e 	add.w	r3, r7, #14
 80041e6:	2201      	movs	r2, #1
 80041e8:	2122      	movs	r1, #34	; 0x22
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fc82 	bl	8004af4 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	121b      	asrs	r3, r3, #8
 8004200:	b25a      	sxtb	r2, r3
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	b25b      	sxtb	r3, r3
 8004206:	4313      	orrs	r3, r2
 8004208:	b25b      	sxtb	r3, r3
 800420a:	b2db      	uxtb	r3, r3
 800420c:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 800420e:	7bbb      	ldrb	r3, [r7, #14]
 8004210:	f023 0320 	bic.w	r3, r3, #32
 8004214:	b2db      	uxtb	r3, r3
 8004216:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	7bbb      	ldrb	r3, [r7, #14]
 800421e:	4313      	orrs	r3, r2
 8004220:	b2db      	uxtb	r3, r3
 8004222:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8004224:	f107 030f 	add.w	r3, r7, #15
 8004228:	2201      	movs	r2, #1
 800422a:	2130      	movs	r1, #48	; 0x30
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fc2f 	bl	8004a90 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8004232:	f107 030e 	add.w	r3, r7, #14
 8004236:	2201      	movs	r2, #1
 8004238:	2122      	movs	r1, #34	; 0x22
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fc28 	bl	8004a90 <GYRO_IO_Write>
}
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8004252:	f107 030f 	add.w	r3, r7, #15
 8004256:	2201      	movs	r2, #1
 8004258:	2122      	movs	r1, #34	; 0x22
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fc4a 	bl	8004af4 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800426c:	b2db      	uxtb	r3, r3
 800426e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004276:	b2db      	uxtb	r3, r3
 8004278:	73fb      	strb	r3, [r7, #15]
 800427a:	e00c      	b.n	8004296 <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d109      	bne.n	8004296 <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	f023 0308 	bic.w	r3, r3, #8
 8004288:	b2db      	uxtb	r3, r3
 800428a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	f043 0308 	orr.w	r3, r3, #8
 8004292:	b2db      	uxtb	r3, r3
 8004294:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8004296:	f107 030f 	add.w	r3, r7, #15
 800429a:	2201      	movs	r2, #1
 800429c:	2122      	movs	r1, #34	; 0x22
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fbf6 	bl	8004a90 <GYRO_IO_Write>
}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80042b6:	f107 030f 	add.w	r3, r7, #15
 80042ba:	2201      	movs	r2, #1
 80042bc:	2122      	movs	r1, #34	; 0x22
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fc18 	bl	8004af4 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d107      	bne.n	80042da <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	73fb      	strb	r3, [r7, #15]
 80042d8:	e009      	b.n	80042ee <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d106      	bne.n	80042ee <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	f023 0308 	bic.w	r3, r3, #8
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80042ee:	f107 030f 	add.w	r3, r7, #15
 80042f2:	2201      	movs	r2, #1
 80042f4:	2122      	movs	r1, #34	; 0x22
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fbca 	bl	8004a90 <GYRO_IO_Write>
}
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800430e:	f107 030f 	add.w	r3, r7, #15
 8004312:	2201      	movs	r2, #1
 8004314:	2121      	movs	r1, #33	; 0x21
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fbec 	bl	8004af4 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004322:	b2db      	uxtb	r3, r3
 8004324:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8004326:	7bfa      	ldrb	r2, [r7, #15]
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	4313      	orrs	r3, r2
 800432c:	b2db      	uxtb	r3, r3
 800432e:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8004330:	f107 030f 	add.w	r3, r7, #15
 8004334:	2201      	movs	r2, #1
 8004336:	2121      	movs	r1, #33	; 0x21
 8004338:	4618      	mov	r0, r3
 800433a:	f000 fba9 	bl	8004a90 <GYRO_IO_Write>
}
 800433e:	bf00      	nop
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	4603      	mov	r3, r0
 800434e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8004350:	f107 030f 	add.w	r3, r7, #15
 8004354:	2201      	movs	r2, #1
 8004356:	2124      	movs	r1, #36	; 0x24
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fbcb 	bl	8004af4 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	f023 0310 	bic.w	r3, r3, #16
 8004364:	b2db      	uxtb	r3, r3
 8004366:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8004368:	7bfa      	ldrb	r2, [r7, #15]
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	4313      	orrs	r3, r2
 800436e:	b2db      	uxtb	r3, r3
 8004370:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8004372:	f107 030f 	add.w	r3, r7, #15
 8004376:	2201      	movs	r2, #1
 8004378:	2124      	movs	r1, #36	; 0x24
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fb88 	bl	8004a90 <GYRO_IO_Write>
}
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08a      	sub	sp, #40	; 0x28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8004390:	2300      	movs	r3, #0
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	2300      	movs	r3, #0
 8004396:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8004398:	f107 0310 	add.w	r3, r7, #16
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 80043b0:	f107 030f 	add.w	r3, r7, #15
 80043b4:	2201      	movs	r2, #1
 80043b6:	2123      	movs	r1, #35	; 0x23
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fb9b 	bl	8004af4 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 80043be:	f107 0318 	add.w	r3, r7, #24
 80043c2:	2206      	movs	r2, #6
 80043c4:	2128      	movs	r1, #40	; 0x28
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fb94 	bl	8004af4 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d123      	bne.n	800441e <I3G4250D_ReadXYZAngRate+0x96>
  {
    for (i = 0; i < 3; i++)
 80043d6:	2300      	movs	r3, #0
 80043d8:	623b      	str	r3, [r7, #32]
 80043da:	e01c      	b.n	8004416 <I3G4250D_ReadXYZAngRate+0x8e>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	3301      	adds	r3, #1
 80043e2:	3328      	adds	r3, #40	; 0x28
 80043e4:	443b      	add	r3, r7
 80043e6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	021b      	lsls	r3, r3, #8
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	3328      	adds	r3, #40	; 0x28
 80043f6:	443b      	add	r3, r7
 80043f8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	4413      	add	r3, r2
 8004400:	b29b      	uxth	r3, r3
 8004402:	b21a      	sxth	r2, r3
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	3328      	adds	r3, #40	; 0x28
 800440a:	443b      	add	r3, r7
 800440c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	3301      	adds	r3, #1
 8004414:	623b      	str	r3, [r7, #32]
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	2b02      	cmp	r3, #2
 800441a:	dddf      	ble.n	80043dc <I3G4250D_ReadXYZAngRate+0x54>
 800441c:	e022      	b.n	8004464 <I3G4250D_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 800441e:	2300      	movs	r3, #0
 8004420:	623b      	str	r3, [r7, #32]
 8004422:	e01c      	b.n	800445e <I3G4250D_ReadXYZAngRate+0xd6>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	3328      	adds	r3, #40	; 0x28
 800442a:	443b      	add	r3, r7
 800442c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004430:	b29b      	uxth	r3, r3
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	b29a      	uxth	r2, r3
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	3301      	adds	r3, #1
 800443c:	3328      	adds	r3, #40	; 0x28
 800443e:	443b      	add	r3, r7
 8004440:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004444:	b29b      	uxth	r3, r3
 8004446:	4413      	add	r3, r2
 8004448:	b29b      	uxth	r3, r3
 800444a:	b21a      	sxth	r2, r3
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	3328      	adds	r3, #40	; 0x28
 8004452:	443b      	add	r3, r7
 8004454:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	3301      	adds	r3, #1
 800445c:	623b      	str	r3, [r7, #32]
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	2b02      	cmp	r3, #2
 8004462:	dddf      	ble.n	8004424 <I3G4250D_ReadXYZAngRate+0x9c>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800446a:	2b20      	cmp	r3, #32
 800446c:	d00c      	beq.n	8004488 <I3G4250D_ReadXYZAngRate+0x100>
 800446e:	2b20      	cmp	r3, #32
 8004470:	dc0d      	bgt.n	800448e <I3G4250D_ReadXYZAngRate+0x106>
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <I3G4250D_ReadXYZAngRate+0xf4>
 8004476:	2b10      	cmp	r3, #16
 8004478:	d003      	beq.n	8004482 <I3G4250D_ReadXYZAngRate+0xfa>
 800447a:	e008      	b.n	800448e <I3G4250D_ReadXYZAngRate+0x106>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 800447c:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <I3G4250D_ReadXYZAngRate+0x14c>)
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004480:	e005      	b.n	800448e <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8004482:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <I3G4250D_ReadXYZAngRate+0x150>)
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004486:	e002      	b.n	800448e <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8004488:	4b14      	ldr	r3, [pc, #80]	; (80044dc <I3G4250D_ReadXYZAngRate+0x154>)
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800448c:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 800448e:	2300      	movs	r3, #0
 8004490:	623b      	str	r3, [r7, #32]
 8004492:	e016      	b.n	80044c2 <I3G4250D_ReadXYZAngRate+0x13a>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	3328      	adds	r3, #40	; 0x28
 800449a:	443b      	add	r3, r7
 800449c:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80044a0:	ee07 3a90 	vmov	s15, r3
 80044a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	4413      	add	r3, r2
 80044b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80044b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b8:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	3301      	adds	r3, #1
 80044c0:	623b      	str	r3, [r7, #32]
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	dde5      	ble.n	8004494 <I3G4250D_ReadXYZAngRate+0x10c>
  }
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	3728      	adds	r7, #40	; 0x28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	410c0000 	.word	0x410c0000
 80044d8:	418c0000 	.word	0x418c0000
 80044dc:	428c0000 	.word	0x428c0000

080044e0 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80044ea:	2300      	movs	r3, #0
 80044ec:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80044ee:	f000 fa89 	bl	8004a04 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80044f8:	f107 030f 	add.w	r3, r7, #15
 80044fc:	2201      	movs	r2, #1
 80044fe:	2120      	movs	r1, #32
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fac5 	bl	8004a90 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	0a1b      	lsrs	r3, r3, #8
 800450a:	b29b      	uxth	r3, r3
 800450c:	b2db      	uxtb	r3, r3
 800450e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8004510:	f107 030f 	add.w	r3, r7, #15
 8004514:	2201      	movs	r2, #1
 8004516:	2123      	movs	r1, #35	; 0x23
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fab9 	bl	8004a90 <GYRO_IO_Write>
}
 800451e:	bf00      	nop
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8004526:	b480      	push	{r7}
 8004528:	af00      	add	r7, sp, #0
}
 800452a:	bf00      	nop
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800453a:	f000 fa63 	bl	8004a04 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800453e:	1dfb      	adds	r3, r7, #7
 8004540:	2201      	movs	r2, #1
 8004542:	210f      	movs	r1, #15
 8004544:	4618      	mov	r0, r3
 8004546:	f000 fad5 	bl	8004af4 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800454a:	79fb      	ldrb	r3, [r7, #7]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800455a:	1dfb      	adds	r3, r7, #7
 800455c:	2201      	movs	r2, #1
 800455e:	2124      	movs	r1, #36	; 0x24
 8004560:	4618      	mov	r0, r3
 8004562:	f000 fac7 	bl	8004af4 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800456c:	b2db      	uxtb	r3, r3
 800456e:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004570:	1dfb      	adds	r3, r7, #7
 8004572:	2201      	movs	r2, #1
 8004574:	2124      	movs	r1, #36	; 0x24
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fa8a 	bl	8004a90 <GYRO_IO_Write>
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	4603      	mov	r3, r0
 800458c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8004598:	f107 030f 	add.w	r3, r7, #15
 800459c:	2201      	movs	r2, #1
 800459e:	2120      	movs	r1, #32
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fa75 	bl	8004a90 <GYRO_IO_Write>
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	4603      	mov	r3, r0
 80045b6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80045b8:	2300      	movs	r3, #0
 80045ba:	73fb      	strb	r3, [r7, #15]
 80045bc:	2300      	movs	r3, #0
 80045be:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80045c0:	f107 030f 	add.w	r3, r7, #15
 80045c4:	2201      	movs	r2, #1
 80045c6:	2130      	movs	r1, #48	; 0x30
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fa93 	bl	8004af4 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80045ce:	f107 030e 	add.w	r3, r7, #14
 80045d2:	2201      	movs	r2, #1
 80045d4:	2122      	movs	r1, #34	; 0x22
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fa8c 	bl	8004af4 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	121b      	asrs	r3, r3, #8
 80045ec:	b25a      	sxtb	r2, r3
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	b25b      	sxtb	r3, r3
 80045f2:	4313      	orrs	r3, r2
 80045f4:	b25b      	sxtb	r3, r3
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80045fa:	7bbb      	ldrb	r3, [r7, #14]
 80045fc:	f023 0320 	bic.w	r3, r3, #32
 8004600:	b2db      	uxtb	r3, r3
 8004602:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8004604:	88fb      	ldrh	r3, [r7, #6]
 8004606:	b2da      	uxtb	r2, r3
 8004608:	7bbb      	ldrb	r3, [r7, #14]
 800460a:	4313      	orrs	r3, r2
 800460c:	b2db      	uxtb	r3, r3
 800460e:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8004610:	f107 030f 	add.w	r3, r7, #15
 8004614:	2201      	movs	r2, #1
 8004616:	2130      	movs	r1, #48	; 0x30
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fa39 	bl	8004a90 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800461e:	f107 030e 	add.w	r3, r7, #14
 8004622:	2201      	movs	r2, #1
 8004624:	2122      	movs	r1, #34	; 0x22
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fa32 	bl	8004a90 <GYRO_IO_Write>
}
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800463e:	f107 030f 	add.w	r3, r7, #15
 8004642:	2201      	movs	r2, #1
 8004644:	2122      	movs	r1, #34	; 0x22
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fa54 	bl	8004af4 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004658:	b2db      	uxtb	r3, r3
 800465a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004662:	b2db      	uxtb	r3, r3
 8004664:	73fb      	strb	r3, [r7, #15]
 8004666:	e00c      	b.n	8004682 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d109      	bne.n	8004682 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	f023 0308 	bic.w	r3, r3, #8
 8004674:	b2db      	uxtb	r3, r3
 8004676:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	f043 0308 	orr.w	r3, r3, #8
 800467e:	b2db      	uxtb	r3, r3
 8004680:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004682:	f107 030f 	add.w	r3, r7, #15
 8004686:	2201      	movs	r2, #1
 8004688:	2122      	movs	r1, #34	; 0x22
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fa00 	bl	8004a90 <GYRO_IO_Write>
}
 8004690:	bf00      	nop
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80046a2:	f107 030f 	add.w	r3, r7, #15
 80046a6:	2201      	movs	r2, #1
 80046a8:	2122      	movs	r1, #34	; 0x22
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fa22 	bl	8004af4 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80046b0:	79fb      	ldrb	r3, [r7, #7]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d107      	bne.n	80046c6 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	73fb      	strb	r3, [r7, #15]
 80046c4:	e009      	b.n	80046da <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d106      	bne.n	80046da <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	f023 0308 	bic.w	r3, r3, #8
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80046da:	f107 030f 	add.w	r3, r7, #15
 80046de:	2201      	movs	r2, #1
 80046e0:	2122      	movs	r1, #34	; 0x22
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 f9d4 	bl	8004a90 <GYRO_IO_Write>
}
 80046e8:	bf00      	nop
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80046fa:	f107 030f 	add.w	r3, r7, #15
 80046fe:	2201      	movs	r2, #1
 8004700:	2121      	movs	r1, #33	; 0x21
 8004702:	4618      	mov	r0, r3
 8004704:	f000 f9f6 	bl	8004af4 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800470e:	b2db      	uxtb	r3, r3
 8004710:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8004712:	7bfa      	ldrb	r2, [r7, #15]
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	4313      	orrs	r3, r2
 8004718:	b2db      	uxtb	r3, r3
 800471a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800471c:	f107 030f 	add.w	r3, r7, #15
 8004720:	2201      	movs	r2, #1
 8004722:	2121      	movs	r1, #33	; 0x21
 8004724:	4618      	mov	r0, r3
 8004726:	f000 f9b3 	bl	8004a90 <GYRO_IO_Write>
}
 800472a:	bf00      	nop
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	4603      	mov	r3, r0
 800473a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800473c:	f107 030f 	add.w	r3, r7, #15
 8004740:	2201      	movs	r2, #1
 8004742:	2124      	movs	r1, #36	; 0x24
 8004744:	4618      	mov	r0, r3
 8004746:	f000 f9d5 	bl	8004af4 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	f023 0310 	bic.w	r3, r3, #16
 8004750:	b2db      	uxtb	r3, r3
 8004752:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8004754:	7bfa      	ldrb	r2, [r7, #15]
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	4313      	orrs	r3, r2
 800475a:	b2db      	uxtb	r3, r3
 800475c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800475e:	f107 030f 	add.w	r3, r7, #15
 8004762:	2201      	movs	r2, #1
 8004764:	2124      	movs	r1, #36	; 0x24
 8004766:	4618      	mov	r0, r3
 8004768:	f000 f992 	bl	8004a90 <GYRO_IO_Write>
}
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08a      	sub	sp, #40	; 0x28
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 800477c:	2300      	movs	r3, #0
 800477e:	61bb      	str	r3, [r7, #24]
 8004780:	2300      	movs	r3, #0
 8004782:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8004784:	f107 0310 	add.w	r3, r7, #16
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800478e:	2300      	movs	r3, #0
 8004790:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8004798:	2300      	movs	r3, #0
 800479a:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800479c:	f107 030f 	add.w	r3, r7, #15
 80047a0:	2201      	movs	r2, #1
 80047a2:	2123      	movs	r1, #35	; 0x23
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 f9a5 	bl	8004af4 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 80047aa:	f107 0318 	add.w	r3, r7, #24
 80047ae:	2206      	movs	r2, #6
 80047b0:	2128      	movs	r1, #40	; 0x28
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 f99e 	bl	8004af4 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d123      	bne.n	800480a <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 80047c2:	2300      	movs	r3, #0
 80047c4:	623b      	str	r3, [r7, #32]
 80047c6:	e01c      	b.n	8004802 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	3301      	adds	r3, #1
 80047ce:	3328      	adds	r3, #40	; 0x28
 80047d0:	443b      	add	r3, r7
 80047d2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	021b      	lsls	r3, r3, #8
 80047da:	b29a      	uxth	r2, r3
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	3328      	adds	r3, #40	; 0x28
 80047e2:	443b      	add	r3, r7
 80047e4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	4413      	add	r3, r2
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	b21a      	sxth	r2, r3
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	3328      	adds	r3, #40	; 0x28
 80047f6:	443b      	add	r3, r7
 80047f8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	3301      	adds	r3, #1
 8004800:	623b      	str	r3, [r7, #32]
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	2b02      	cmp	r3, #2
 8004806:	dddf      	ble.n	80047c8 <L3GD20_ReadXYZAngRate+0x54>
 8004808:	e022      	b.n	8004850 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 800480a:	2300      	movs	r3, #0
 800480c:	623b      	str	r3, [r7, #32]
 800480e:	e01c      	b.n	800484a <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	3328      	adds	r3, #40	; 0x28
 8004816:	443b      	add	r3, r7
 8004818:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800481c:	b29b      	uxth	r3, r3
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	b29a      	uxth	r2, r3
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	3301      	adds	r3, #1
 8004828:	3328      	adds	r3, #40	; 0x28
 800482a:	443b      	add	r3, r7
 800482c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004830:	b29b      	uxth	r3, r3
 8004832:	4413      	add	r3, r2
 8004834:	b29b      	uxth	r3, r3
 8004836:	b21a      	sxth	r2, r3
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	3328      	adds	r3, #40	; 0x28
 800483e:	443b      	add	r3, r7
 8004840:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	3301      	adds	r3, #1
 8004848:	623b      	str	r3, [r7, #32]
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	2b02      	cmp	r3, #2
 800484e:	dddf      	ble.n	8004810 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004856:	2b20      	cmp	r3, #32
 8004858:	d00c      	beq.n	8004874 <L3GD20_ReadXYZAngRate+0x100>
 800485a:	2b20      	cmp	r3, #32
 800485c:	dc0d      	bgt.n	800487a <L3GD20_ReadXYZAngRate+0x106>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <L3GD20_ReadXYZAngRate+0xf4>
 8004862:	2b10      	cmp	r3, #16
 8004864:	d003      	beq.n	800486e <L3GD20_ReadXYZAngRate+0xfa>
 8004866:	e008      	b.n	800487a <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8004868:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <L3GD20_ReadXYZAngRate+0x14c>)
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800486c:	e005      	b.n	800487a <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800486e:	4b15      	ldr	r3, [pc, #84]	; (80048c4 <L3GD20_ReadXYZAngRate+0x150>)
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8004872:	e002      	b.n	800487a <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8004874:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <L3GD20_ReadXYZAngRate+0x154>)
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8004878:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 800487a:	2300      	movs	r3, #0
 800487c:	623b      	str	r3, [r7, #32]
 800487e:	e016      	b.n	80048ae <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	3328      	adds	r3, #40	; 0x28
 8004886:	443b      	add	r3, r7
 8004888:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800488c:	ee07 3a90 	vmov	s15, r3
 8004890:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	4413      	add	r3, r2
 800489c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80048a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a4:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	3301      	adds	r3, #1
 80048ac:	623b      	str	r3, [r7, #32]
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	dde5      	ble.n	8004880 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	3728      	adds	r7, #40	; 0x28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	410c0000 	.word	0x410c0000
 80048c4:	418c0000 	.word	0x418c0000
 80048c8:	428c0000 	.word	0x428c0000

080048cc <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80048d0:	481a      	ldr	r0, [pc, #104]	; (800493c <SPIx_Init+0x70>)
 80048d2:	f7ff f996 	bl	8003c02 <HAL_SPI_GetState>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d12c      	bne.n	8004936 <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80048dc:	4b17      	ldr	r3, [pc, #92]	; (800493c <SPIx_Init+0x70>)
 80048de:	4a18      	ldr	r2, [pc, #96]	; (8004940 <SPIx_Init+0x74>)
 80048e0:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80048e2:	4b16      	ldr	r3, [pc, #88]	; (800493c <SPIx_Init+0x70>)
 80048e4:	2218      	movs	r2, #24
 80048e6:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 80048e8:	4b14      	ldr	r3, [pc, #80]	; (800493c <SPIx_Init+0x70>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048ee:	4b13      	ldr	r3, [pc, #76]	; (800493c <SPIx_Init+0x70>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80048f4:	4b11      	ldr	r3, [pc, #68]	; (800493c <SPIx_Init+0x70>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048fa:	4b10      	ldr	r3, [pc, #64]	; (800493c <SPIx_Init+0x70>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8004900:	4b0e      	ldr	r3, [pc, #56]	; (800493c <SPIx_Init+0x70>)
 8004902:	2207      	movs	r2, #7
 8004904:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8004906:	4b0d      	ldr	r3, [pc, #52]	; (800493c <SPIx_Init+0x70>)
 8004908:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800490c:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800490e:	4b0b      	ldr	r3, [pc, #44]	; (800493c <SPIx_Init+0x70>)
 8004910:	2200      	movs	r2, #0
 8004912:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8004914:	4b09      	ldr	r3, [pc, #36]	; (800493c <SPIx_Init+0x70>)
 8004916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800491a:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 800491c:	4b07      	ldr	r3, [pc, #28]	; (800493c <SPIx_Init+0x70>)
 800491e:	2200      	movs	r2, #0
 8004920:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8004922:	4b06      	ldr	r3, [pc, #24]	; (800493c <SPIx_Init+0x70>)
 8004924:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004928:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 800492a:	4804      	ldr	r0, [pc, #16]	; (800493c <SPIx_Init+0x70>)
 800492c:	f000 f836 	bl	800499c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8004930:	4802      	ldr	r0, [pc, #8]	; (800493c <SPIx_Init+0x70>)
 8004932:	f7fe fe71 	bl	8003618 <HAL_SPI_Init>
  }
}
 8004936:	bf00      	nop
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20000860 	.word	0x20000860
 8004940:	40013000 	.word	0x40013000

08004944 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af02      	add	r7, sp, #8
 800494a:	4603      	mov	r3, r0
 800494c:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8004952:	4b0a      	ldr	r3, [pc, #40]	; (800497c <SPIx_WriteRead+0x38>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f107 020f 	add.w	r2, r7, #15
 800495a:	1df9      	adds	r1, r7, #7
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	2301      	movs	r3, #1
 8004960:	4807      	ldr	r0, [pc, #28]	; (8004980 <SPIx_WriteRead+0x3c>)
 8004962:	f7fe ff2c 	bl	80037be <HAL_SPI_TransmitReceive>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 800496c:	f000 f80a 	bl	8004984 <SPIx_Error>
  }
  
  return receivedbyte;
 8004970:	7bfb      	ldrb	r3, [r7, #15]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000298 	.word	0x20000298
 8004980:	20000860 	.word	0x20000860

08004984 <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8004988:	4803      	ldr	r0, [pc, #12]	; (8004998 <SPIx_Error+0x14>)
 800498a:	f7fe fef0 	bl	800376e <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 800498e:	f7ff ff9d 	bl	80048cc <SPIx_Init>
}
 8004992:	bf00      	nop
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000860 	.word	0x20000860

0800499c <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08a      	sub	sp, #40	; 0x28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 80049a4:	4b16      	ldr	r3, [pc, #88]	; (8004a00 <SPIx_MspInit+0x64>)
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	4a15      	ldr	r2, [pc, #84]	; (8004a00 <SPIx_MspInit+0x64>)
 80049aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049ae:	6193      	str	r3, [r2, #24]
 80049b0:	4b13      	ldr	r3, [pc, #76]	; (8004a00 <SPIx_MspInit+0x64>)
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80049bc:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <SPIx_MspInit+0x64>)
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	4a0f      	ldr	r2, [pc, #60]	; (8004a00 <SPIx_MspInit+0x64>)
 80049c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049c6:	6153      	str	r3, [r2, #20]
 80049c8:	4b0d      	ldr	r3, [pc, #52]	; (8004a00 <SPIx_MspInit+0x64>)
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80049d4:	23e0      	movs	r3, #224	; 0xe0
 80049d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80049d8:	2302      	movs	r3, #2
 80049da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 80049dc:	2300      	movs	r3, #0
 80049de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80049e0:	2303      	movs	r3, #3
 80049e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80049e4:	2305      	movs	r3, #5
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80049e8:	f107 0314 	add.w	r3, r7, #20
 80049ec:	4619      	mov	r1, r3
 80049ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049f2:	f7fc fdd7 	bl	80015a4 <HAL_GPIO_Init>
}
 80049f6:	bf00      	nop
 80049f8:	3728      	adds	r7, #40	; 0x28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40021000 	.word	0x40021000

08004a04 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8004a0a:	4b1f      	ldr	r3, [pc, #124]	; (8004a88 <GYRO_IO_Init+0x84>)
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	4a1e      	ldr	r2, [pc, #120]	; (8004a88 <GYRO_IO_Init+0x84>)
 8004a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a14:	6153      	str	r3, [r2, #20]
 8004a16:	4b1c      	ldr	r3, [pc, #112]	; (8004a88 <GYRO_IO_Init+0x84>)
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8004a22:	2308      	movs	r3, #8
 8004a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004a26:	2301      	movs	r3, #1
 8004a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8004a32:	f107 030c 	add.w	r3, r7, #12
 8004a36:	4619      	mov	r1, r3
 8004a38:	4814      	ldr	r0, [pc, #80]	; (8004a8c <GYRO_IO_Init+0x88>)
 8004a3a:	f7fc fdb3 	bl	80015a4 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8004a3e:	2201      	movs	r2, #1
 8004a40:	2108      	movs	r1, #8
 8004a42:	4812      	ldr	r0, [pc, #72]	; (8004a8c <GYRO_IO_Init+0x88>)
 8004a44:	f7fd f804 	bl	8001a50 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8004a48:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <GYRO_IO_Init+0x84>)
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	4a0e      	ldr	r2, [pc, #56]	; (8004a88 <GYRO_IO_Init+0x84>)
 8004a4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a52:	6153      	str	r3, [r2, #20]
 8004a54:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <GYRO_IO_Init+0x84>)
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8004a60:	2303      	movs	r3, #3
 8004a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004a70:	f107 030c 	add.w	r3, r7, #12
 8004a74:	4619      	mov	r1, r3
 8004a76:	4805      	ldr	r0, [pc, #20]	; (8004a8c <GYRO_IO_Init+0x88>)
 8004a78:	f7fc fd94 	bl	80015a4 <HAL_GPIO_Init>
  
  SPIx_Init();
 8004a7c:	f7ff ff26 	bl	80048cc <SPIx_Init>
}
 8004a80:	bf00      	nop
 8004a82:	3720      	adds	r7, #32
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	48001000 	.word	0x48001000

08004a90 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	70fb      	strb	r3, [r7, #3]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8004aa0:	883b      	ldrh	r3, [r7, #0]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d903      	bls.n	8004aae <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8004aa6:	78fb      	ldrb	r3, [r7, #3]
 8004aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aac:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004aae:	2200      	movs	r2, #0
 8004ab0:	2108      	movs	r1, #8
 8004ab2:	480f      	ldr	r0, [pc, #60]	; (8004af0 <GYRO_IO_Write+0x60>)
 8004ab4:	f7fc ffcc 	bl	8001a50 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff ff42 	bl	8004944 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8004ac0:	e00a      	b.n	8004ad8 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff ff3c 	bl	8004944 <SPIx_WriteRead>
    NumByteToWrite--;
 8004acc:	883b      	ldrh	r3, [r7, #0]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8004ad8:	883b      	ldrh	r3, [r7, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f1      	bne.n	8004ac2 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004ade:	2201      	movs	r2, #1
 8004ae0:	2108      	movs	r1, #8
 8004ae2:	4803      	ldr	r0, [pc, #12]	; (8004af0 <GYRO_IO_Write+0x60>)
 8004ae4:	f7fc ffb4 	bl	8001a50 <HAL_GPIO_WritePin>
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	48001000 	.word	0x48001000

08004af4 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	70fb      	strb	r3, [r7, #3]
 8004b00:	4613      	mov	r3, r2
 8004b02:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8004b04:	883b      	ldrh	r3, [r7, #0]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d904      	bls.n	8004b14 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8004b0a:	78fb      	ldrb	r3, [r7, #3]
 8004b0c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004b10:	70fb      	strb	r3, [r7, #3]
 8004b12:	e003      	b.n	8004b1c <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b1a:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2108      	movs	r1, #8
 8004b20:	4810      	ldr	r0, [pc, #64]	; (8004b64 <GYRO_IO_Read+0x70>)
 8004b22:	f7fc ff95 	bl	8001a50 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff ff0b 	bl	8004944 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8004b2e:	e00c      	b.n	8004b4a <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8004b30:	2000      	movs	r0, #0
 8004b32:	f7ff ff07 	bl	8004944 <SPIx_WriteRead>
 8004b36:	4603      	mov	r3, r0
 8004b38:	461a      	mov	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8004b3e:	883b      	ldrh	r3, [r7, #0]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3301      	adds	r3, #1
 8004b48:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8004b4a:	883b      	ldrh	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1ef      	bne.n	8004b30 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004b50:	2201      	movs	r2, #1
 8004b52:	2108      	movs	r1, #8
 8004b54:	4803      	ldr	r0, [pc, #12]	; (8004b64 <GYRO_IO_Read+0x70>)
 8004b56:	f7fc ff7b 	bl	8001a50 <HAL_GPIO_WritePin>
}  
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	48001000 	.word	0x48001000

08004b68 <srand>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4b10      	ldr	r3, [pc, #64]	; (8004bac <srand+0x44>)
 8004b6c:	681d      	ldr	r5, [r3, #0]
 8004b6e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004b70:	4604      	mov	r4, r0
 8004b72:	b9b3      	cbnz	r3, 8004ba2 <srand+0x3a>
 8004b74:	2018      	movs	r0, #24
 8004b76:	f000 fa85 	bl	8005084 <malloc>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	6328      	str	r0, [r5, #48]	; 0x30
 8004b7e:	b920      	cbnz	r0, 8004b8a <srand+0x22>
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <srand+0x48>)
 8004b82:	480c      	ldr	r0, [pc, #48]	; (8004bb4 <srand+0x4c>)
 8004b84:	2146      	movs	r1, #70	; 0x46
 8004b86:	f000 fa13 	bl	8004fb0 <__assert_func>
 8004b8a:	490b      	ldr	r1, [pc, #44]	; (8004bb8 <srand+0x50>)
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <srand+0x54>)
 8004b8e:	e9c0 1300 	strd	r1, r3, [r0]
 8004b92:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <srand+0x58>)
 8004b94:	6083      	str	r3, [r0, #8]
 8004b96:	230b      	movs	r3, #11
 8004b98:	8183      	strh	r3, [r0, #12]
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004ba2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	611c      	str	r4, [r3, #16]
 8004ba8:	615a      	str	r2, [r3, #20]
 8004baa:	bd38      	pop	{r3, r4, r5, pc}
 8004bac:	200002f4 	.word	0x200002f4
 8004bb0:	080064e4 	.word	0x080064e4
 8004bb4:	080064fb 	.word	0x080064fb
 8004bb8:	abcd330e 	.word	0xabcd330e
 8004bbc:	e66d1234 	.word	0xe66d1234
 8004bc0:	0005deec 	.word	0x0005deec

08004bc4 <rand>:
 8004bc4:	4b16      	ldr	r3, [pc, #88]	; (8004c20 <rand+0x5c>)
 8004bc6:	b510      	push	{r4, lr}
 8004bc8:	681c      	ldr	r4, [r3, #0]
 8004bca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004bcc:	b9b3      	cbnz	r3, 8004bfc <rand+0x38>
 8004bce:	2018      	movs	r0, #24
 8004bd0:	f000 fa58 	bl	8005084 <malloc>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	6320      	str	r0, [r4, #48]	; 0x30
 8004bd8:	b920      	cbnz	r0, 8004be4 <rand+0x20>
 8004bda:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <rand+0x60>)
 8004bdc:	4812      	ldr	r0, [pc, #72]	; (8004c28 <rand+0x64>)
 8004bde:	2152      	movs	r1, #82	; 0x52
 8004be0:	f000 f9e6 	bl	8004fb0 <__assert_func>
 8004be4:	4911      	ldr	r1, [pc, #68]	; (8004c2c <rand+0x68>)
 8004be6:	4b12      	ldr	r3, [pc, #72]	; (8004c30 <rand+0x6c>)
 8004be8:	e9c0 1300 	strd	r1, r3, [r0]
 8004bec:	4b11      	ldr	r3, [pc, #68]	; (8004c34 <rand+0x70>)
 8004bee:	6083      	str	r3, [r0, #8]
 8004bf0:	230b      	movs	r3, #11
 8004bf2:	8183      	strh	r3, [r0, #12]
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	2001      	movs	r0, #1
 8004bf8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004bfc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004bfe:	480e      	ldr	r0, [pc, #56]	; (8004c38 <rand+0x74>)
 8004c00:	690b      	ldr	r3, [r1, #16]
 8004c02:	694c      	ldr	r4, [r1, #20]
 8004c04:	4a0d      	ldr	r2, [pc, #52]	; (8004c3c <rand+0x78>)
 8004c06:	4358      	muls	r0, r3
 8004c08:	fb02 0004 	mla	r0, r2, r4, r0
 8004c0c:	fba3 3202 	umull	r3, r2, r3, r2
 8004c10:	3301      	adds	r3, #1
 8004c12:	eb40 0002 	adc.w	r0, r0, r2
 8004c16:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004c1a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004c1e:	bd10      	pop	{r4, pc}
 8004c20:	200002f4 	.word	0x200002f4
 8004c24:	080064e4 	.word	0x080064e4
 8004c28:	080064fb 	.word	0x080064fb
 8004c2c:	abcd330e 	.word	0xabcd330e
 8004c30:	e66d1234 	.word	0xe66d1234
 8004c34:	0005deec 	.word	0x0005deec
 8004c38:	5851f42d 	.word	0x5851f42d
 8004c3c:	4c957f2d 	.word	0x4c957f2d

08004c40 <std>:
 8004c40:	2300      	movs	r3, #0
 8004c42:	b510      	push	{r4, lr}
 8004c44:	4604      	mov	r4, r0
 8004c46:	e9c0 3300 	strd	r3, r3, [r0]
 8004c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c4e:	6083      	str	r3, [r0, #8]
 8004c50:	8181      	strh	r1, [r0, #12]
 8004c52:	6643      	str	r3, [r0, #100]	; 0x64
 8004c54:	81c2      	strh	r2, [r0, #14]
 8004c56:	6183      	str	r3, [r0, #24]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	305c      	adds	r0, #92	; 0x5c
 8004c5e:	f000 f914 	bl	8004e8a <memset>
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <std+0x58>)
 8004c64:	6263      	str	r3, [r4, #36]	; 0x24
 8004c66:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <std+0x5c>)
 8004c68:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <std+0x60>)
 8004c6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <std+0x64>)
 8004c70:	6323      	str	r3, [r4, #48]	; 0x30
 8004c72:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <std+0x68>)
 8004c74:	6224      	str	r4, [r4, #32]
 8004c76:	429c      	cmp	r4, r3
 8004c78:	d006      	beq.n	8004c88 <std+0x48>
 8004c7a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004c7e:	4294      	cmp	r4, r2
 8004c80:	d002      	beq.n	8004c88 <std+0x48>
 8004c82:	33d0      	adds	r3, #208	; 0xd0
 8004c84:	429c      	cmp	r4, r3
 8004c86:	d105      	bne.n	8004c94 <std+0x54>
 8004c88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c90:	f000 b974 	b.w	8004f7c <__retarget_lock_init_recursive>
 8004c94:	bd10      	pop	{r4, pc}
 8004c96:	bf00      	nop
 8004c98:	08004e05 	.word	0x08004e05
 8004c9c:	08004e27 	.word	0x08004e27
 8004ca0:	08004e5f 	.word	0x08004e5f
 8004ca4:	08004e83 	.word	0x08004e83
 8004ca8:	200008c4 	.word	0x200008c4

08004cac <stdio_exit_handler>:
 8004cac:	4a02      	ldr	r2, [pc, #8]	; (8004cb8 <stdio_exit_handler+0xc>)
 8004cae:	4903      	ldr	r1, [pc, #12]	; (8004cbc <stdio_exit_handler+0x10>)
 8004cb0:	4803      	ldr	r0, [pc, #12]	; (8004cc0 <stdio_exit_handler+0x14>)
 8004cb2:	f000 b869 	b.w	8004d88 <_fwalk_sglue>
 8004cb6:	bf00      	nop
 8004cb8:	2000029c 	.word	0x2000029c
 8004cbc:	080058c9 	.word	0x080058c9
 8004cc0:	200002a8 	.word	0x200002a8

08004cc4 <cleanup_stdio>:
 8004cc4:	6841      	ldr	r1, [r0, #4]
 8004cc6:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <cleanup_stdio+0x34>)
 8004cc8:	4299      	cmp	r1, r3
 8004cca:	b510      	push	{r4, lr}
 8004ccc:	4604      	mov	r4, r0
 8004cce:	d001      	beq.n	8004cd4 <cleanup_stdio+0x10>
 8004cd0:	f000 fdfa 	bl	80058c8 <_fflush_r>
 8004cd4:	68a1      	ldr	r1, [r4, #8]
 8004cd6:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <cleanup_stdio+0x38>)
 8004cd8:	4299      	cmp	r1, r3
 8004cda:	d002      	beq.n	8004ce2 <cleanup_stdio+0x1e>
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f000 fdf3 	bl	80058c8 <_fflush_r>
 8004ce2:	68e1      	ldr	r1, [r4, #12]
 8004ce4:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <cleanup_stdio+0x3c>)
 8004ce6:	4299      	cmp	r1, r3
 8004ce8:	d004      	beq.n	8004cf4 <cleanup_stdio+0x30>
 8004cea:	4620      	mov	r0, r4
 8004cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf0:	f000 bdea 	b.w	80058c8 <_fflush_r>
 8004cf4:	bd10      	pop	{r4, pc}
 8004cf6:	bf00      	nop
 8004cf8:	200008c4 	.word	0x200008c4
 8004cfc:	2000092c 	.word	0x2000092c
 8004d00:	20000994 	.word	0x20000994

08004d04 <global_stdio_init.part.0>:
 8004d04:	b510      	push	{r4, lr}
 8004d06:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <global_stdio_init.part.0+0x30>)
 8004d08:	4c0b      	ldr	r4, [pc, #44]	; (8004d38 <global_stdio_init.part.0+0x34>)
 8004d0a:	4a0c      	ldr	r2, [pc, #48]	; (8004d3c <global_stdio_init.part.0+0x38>)
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	4620      	mov	r0, r4
 8004d10:	2200      	movs	r2, #0
 8004d12:	2104      	movs	r1, #4
 8004d14:	f7ff ff94 	bl	8004c40 <std>
 8004d18:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	2109      	movs	r1, #9
 8004d20:	f7ff ff8e 	bl	8004c40 <std>
 8004d24:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d28:	2202      	movs	r2, #2
 8004d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d2e:	2112      	movs	r1, #18
 8004d30:	f7ff bf86 	b.w	8004c40 <std>
 8004d34:	200009fc 	.word	0x200009fc
 8004d38:	200008c4 	.word	0x200008c4
 8004d3c:	08004cad 	.word	0x08004cad

08004d40 <__sfp_lock_acquire>:
 8004d40:	4801      	ldr	r0, [pc, #4]	; (8004d48 <__sfp_lock_acquire+0x8>)
 8004d42:	f000 b91c 	b.w	8004f7e <__retarget_lock_acquire_recursive>
 8004d46:	bf00      	nop
 8004d48:	20000a05 	.word	0x20000a05

08004d4c <__sfp_lock_release>:
 8004d4c:	4801      	ldr	r0, [pc, #4]	; (8004d54 <__sfp_lock_release+0x8>)
 8004d4e:	f000 b917 	b.w	8004f80 <__retarget_lock_release_recursive>
 8004d52:	bf00      	nop
 8004d54:	20000a05 	.word	0x20000a05

08004d58 <__sinit>:
 8004d58:	b510      	push	{r4, lr}
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	f7ff fff0 	bl	8004d40 <__sfp_lock_acquire>
 8004d60:	6a23      	ldr	r3, [r4, #32]
 8004d62:	b11b      	cbz	r3, 8004d6c <__sinit+0x14>
 8004d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d68:	f7ff bff0 	b.w	8004d4c <__sfp_lock_release>
 8004d6c:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <__sinit+0x28>)
 8004d6e:	6223      	str	r3, [r4, #32]
 8004d70:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <__sinit+0x2c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1f5      	bne.n	8004d64 <__sinit+0xc>
 8004d78:	f7ff ffc4 	bl	8004d04 <global_stdio_init.part.0>
 8004d7c:	e7f2      	b.n	8004d64 <__sinit+0xc>
 8004d7e:	bf00      	nop
 8004d80:	08004cc5 	.word	0x08004cc5
 8004d84:	200009fc 	.word	0x200009fc

08004d88 <_fwalk_sglue>:
 8004d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d8c:	4607      	mov	r7, r0
 8004d8e:	4688      	mov	r8, r1
 8004d90:	4614      	mov	r4, r2
 8004d92:	2600      	movs	r6, #0
 8004d94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d98:	f1b9 0901 	subs.w	r9, r9, #1
 8004d9c:	d505      	bpl.n	8004daa <_fwalk_sglue+0x22>
 8004d9e:	6824      	ldr	r4, [r4, #0]
 8004da0:	2c00      	cmp	r4, #0
 8004da2:	d1f7      	bne.n	8004d94 <_fwalk_sglue+0xc>
 8004da4:	4630      	mov	r0, r6
 8004da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004daa:	89ab      	ldrh	r3, [r5, #12]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d907      	bls.n	8004dc0 <_fwalk_sglue+0x38>
 8004db0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004db4:	3301      	adds	r3, #1
 8004db6:	d003      	beq.n	8004dc0 <_fwalk_sglue+0x38>
 8004db8:	4629      	mov	r1, r5
 8004dba:	4638      	mov	r0, r7
 8004dbc:	47c0      	blx	r8
 8004dbe:	4306      	orrs	r6, r0
 8004dc0:	3568      	adds	r5, #104	; 0x68
 8004dc2:	e7e9      	b.n	8004d98 <_fwalk_sglue+0x10>

08004dc4 <siprintf>:
 8004dc4:	b40e      	push	{r1, r2, r3}
 8004dc6:	b500      	push	{lr}
 8004dc8:	b09c      	sub	sp, #112	; 0x70
 8004dca:	ab1d      	add	r3, sp, #116	; 0x74
 8004dcc:	9002      	str	r0, [sp, #8]
 8004dce:	9006      	str	r0, [sp, #24]
 8004dd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dd4:	4809      	ldr	r0, [pc, #36]	; (8004dfc <siprintf+0x38>)
 8004dd6:	9107      	str	r1, [sp, #28]
 8004dd8:	9104      	str	r1, [sp, #16]
 8004dda:	4909      	ldr	r1, [pc, #36]	; (8004e00 <siprintf+0x3c>)
 8004ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004de0:	9105      	str	r1, [sp, #20]
 8004de2:	6800      	ldr	r0, [r0, #0]
 8004de4:	9301      	str	r3, [sp, #4]
 8004de6:	a902      	add	r1, sp, #8
 8004de8:	f000 fa5a 	bl	80052a0 <_svfiprintf_r>
 8004dec:	9b02      	ldr	r3, [sp, #8]
 8004dee:	2200      	movs	r2, #0
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	b01c      	add	sp, #112	; 0x70
 8004df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004df8:	b003      	add	sp, #12
 8004dfa:	4770      	bx	lr
 8004dfc:	200002f4 	.word	0x200002f4
 8004e00:	ffff0208 	.word	0xffff0208

08004e04 <__sread>:
 8004e04:	b510      	push	{r4, lr}
 8004e06:	460c      	mov	r4, r1
 8004e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0c:	f000 f868 	bl	8004ee0 <_read_r>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	bfab      	itete	ge
 8004e14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e16:	89a3      	ldrhlt	r3, [r4, #12]
 8004e18:	181b      	addge	r3, r3, r0
 8004e1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e1e:	bfac      	ite	ge
 8004e20:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e22:	81a3      	strhlt	r3, [r4, #12]
 8004e24:	bd10      	pop	{r4, pc}

08004e26 <__swrite>:
 8004e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e2a:	461f      	mov	r7, r3
 8004e2c:	898b      	ldrh	r3, [r1, #12]
 8004e2e:	05db      	lsls	r3, r3, #23
 8004e30:	4605      	mov	r5, r0
 8004e32:	460c      	mov	r4, r1
 8004e34:	4616      	mov	r6, r2
 8004e36:	d505      	bpl.n	8004e44 <__swrite+0x1e>
 8004e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f000 f83c 	bl	8004ebc <_lseek_r>
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e4e:	81a3      	strh	r3, [r4, #12]
 8004e50:	4632      	mov	r2, r6
 8004e52:	463b      	mov	r3, r7
 8004e54:	4628      	mov	r0, r5
 8004e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5a:	f000 b853 	b.w	8004f04 <_write_r>

08004e5e <__sseek>:
 8004e5e:	b510      	push	{r4, lr}
 8004e60:	460c      	mov	r4, r1
 8004e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e66:	f000 f829 	bl	8004ebc <_lseek_r>
 8004e6a:	1c43      	adds	r3, r0, #1
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	bf15      	itete	ne
 8004e70:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e7a:	81a3      	strheq	r3, [r4, #12]
 8004e7c:	bf18      	it	ne
 8004e7e:	81a3      	strhne	r3, [r4, #12]
 8004e80:	bd10      	pop	{r4, pc}

08004e82 <__sclose>:
 8004e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e86:	f000 b809 	b.w	8004e9c <_close_r>

08004e8a <memset>:
 8004e8a:	4402      	add	r2, r0
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d100      	bne.n	8004e94 <memset+0xa>
 8004e92:	4770      	bx	lr
 8004e94:	f803 1b01 	strb.w	r1, [r3], #1
 8004e98:	e7f9      	b.n	8004e8e <memset+0x4>
	...

08004e9c <_close_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	4d06      	ldr	r5, [pc, #24]	; (8004eb8 <_close_r+0x1c>)
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	4608      	mov	r0, r1
 8004ea6:	602b      	str	r3, [r5, #0]
 8004ea8:	f7fc f877 	bl	8000f9a <_close>
 8004eac:	1c43      	adds	r3, r0, #1
 8004eae:	d102      	bne.n	8004eb6 <_close_r+0x1a>
 8004eb0:	682b      	ldr	r3, [r5, #0]
 8004eb2:	b103      	cbz	r3, 8004eb6 <_close_r+0x1a>
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	bd38      	pop	{r3, r4, r5, pc}
 8004eb8:	20000a00 	.word	0x20000a00

08004ebc <_lseek_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	4d07      	ldr	r5, [pc, #28]	; (8004edc <_lseek_r+0x20>)
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	4608      	mov	r0, r1
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	602a      	str	r2, [r5, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f7fc f88c 	bl	8000fe8 <_lseek>
 8004ed0:	1c43      	adds	r3, r0, #1
 8004ed2:	d102      	bne.n	8004eda <_lseek_r+0x1e>
 8004ed4:	682b      	ldr	r3, [r5, #0]
 8004ed6:	b103      	cbz	r3, 8004eda <_lseek_r+0x1e>
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	bd38      	pop	{r3, r4, r5, pc}
 8004edc:	20000a00 	.word	0x20000a00

08004ee0 <_read_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4d07      	ldr	r5, [pc, #28]	; (8004f00 <_read_r+0x20>)
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	4608      	mov	r0, r1
 8004ee8:	4611      	mov	r1, r2
 8004eea:	2200      	movs	r2, #0
 8004eec:	602a      	str	r2, [r5, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f7fc f81a 	bl	8000f28 <_read>
 8004ef4:	1c43      	adds	r3, r0, #1
 8004ef6:	d102      	bne.n	8004efe <_read_r+0x1e>
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	b103      	cbz	r3, 8004efe <_read_r+0x1e>
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	bd38      	pop	{r3, r4, r5, pc}
 8004f00:	20000a00 	.word	0x20000a00

08004f04 <_write_r>:
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	4d07      	ldr	r5, [pc, #28]	; (8004f24 <_write_r+0x20>)
 8004f08:	4604      	mov	r4, r0
 8004f0a:	4608      	mov	r0, r1
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	2200      	movs	r2, #0
 8004f10:	602a      	str	r2, [r5, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	f7fc f825 	bl	8000f62 <_write>
 8004f18:	1c43      	adds	r3, r0, #1
 8004f1a:	d102      	bne.n	8004f22 <_write_r+0x1e>
 8004f1c:	682b      	ldr	r3, [r5, #0]
 8004f1e:	b103      	cbz	r3, 8004f22 <_write_r+0x1e>
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	bd38      	pop	{r3, r4, r5, pc}
 8004f24:	20000a00 	.word	0x20000a00

08004f28 <__errno>:
 8004f28:	4b01      	ldr	r3, [pc, #4]	; (8004f30 <__errno+0x8>)
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	200002f4 	.word	0x200002f4

08004f34 <__libc_init_array>:
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	4d0d      	ldr	r5, [pc, #52]	; (8004f6c <__libc_init_array+0x38>)
 8004f38:	4c0d      	ldr	r4, [pc, #52]	; (8004f70 <__libc_init_array+0x3c>)
 8004f3a:	1b64      	subs	r4, r4, r5
 8004f3c:	10a4      	asrs	r4, r4, #2
 8004f3e:	2600      	movs	r6, #0
 8004f40:	42a6      	cmp	r6, r4
 8004f42:	d109      	bne.n	8004f58 <__libc_init_array+0x24>
 8004f44:	4d0b      	ldr	r5, [pc, #44]	; (8004f74 <__libc_init_array+0x40>)
 8004f46:	4c0c      	ldr	r4, [pc, #48]	; (8004f78 <__libc_init_array+0x44>)
 8004f48:	f001 f802 	bl	8005f50 <_init>
 8004f4c:	1b64      	subs	r4, r4, r5
 8004f4e:	10a4      	asrs	r4, r4, #2
 8004f50:	2600      	movs	r6, #0
 8004f52:	42a6      	cmp	r6, r4
 8004f54:	d105      	bne.n	8004f62 <__libc_init_array+0x2e>
 8004f56:	bd70      	pop	{r4, r5, r6, pc}
 8004f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5c:	4798      	blx	r3
 8004f5e:	3601      	adds	r6, #1
 8004f60:	e7ee      	b.n	8004f40 <__libc_init_array+0xc>
 8004f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f66:	4798      	blx	r3
 8004f68:	3601      	adds	r6, #1
 8004f6a:	e7f2      	b.n	8004f52 <__libc_init_array+0x1e>
 8004f6c:	080065c4 	.word	0x080065c4
 8004f70:	080065c4 	.word	0x080065c4
 8004f74:	080065c4 	.word	0x080065c4
 8004f78:	080065c8 	.word	0x080065c8

08004f7c <__retarget_lock_init_recursive>:
 8004f7c:	4770      	bx	lr

08004f7e <__retarget_lock_acquire_recursive>:
 8004f7e:	4770      	bx	lr

08004f80 <__retarget_lock_release_recursive>:
 8004f80:	4770      	bx	lr

08004f82 <strcpy>:
 8004f82:	4603      	mov	r3, r0
 8004f84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f88:	f803 2b01 	strb.w	r2, [r3], #1
 8004f8c:	2a00      	cmp	r2, #0
 8004f8e:	d1f9      	bne.n	8004f84 <strcpy+0x2>
 8004f90:	4770      	bx	lr

08004f92 <memcpy>:
 8004f92:	440a      	add	r2, r1
 8004f94:	4291      	cmp	r1, r2
 8004f96:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f9a:	d100      	bne.n	8004f9e <memcpy+0xc>
 8004f9c:	4770      	bx	lr
 8004f9e:	b510      	push	{r4, lr}
 8004fa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fa8:	4291      	cmp	r1, r2
 8004faa:	d1f9      	bne.n	8004fa0 <memcpy+0xe>
 8004fac:	bd10      	pop	{r4, pc}
	...

08004fb0 <__assert_func>:
 8004fb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004fb2:	4614      	mov	r4, r2
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <__assert_func+0x2c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4605      	mov	r5, r0
 8004fbc:	68d8      	ldr	r0, [r3, #12]
 8004fbe:	b14c      	cbz	r4, 8004fd4 <__assert_func+0x24>
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <__assert_func+0x30>)
 8004fc2:	9100      	str	r1, [sp, #0]
 8004fc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004fc8:	4906      	ldr	r1, [pc, #24]	; (8004fe4 <__assert_func+0x34>)
 8004fca:	462b      	mov	r3, r5
 8004fcc:	f000 fca4 	bl	8005918 <fiprintf>
 8004fd0:	f000 fcde 	bl	8005990 <abort>
 8004fd4:	4b04      	ldr	r3, [pc, #16]	; (8004fe8 <__assert_func+0x38>)
 8004fd6:	461c      	mov	r4, r3
 8004fd8:	e7f3      	b.n	8004fc2 <__assert_func+0x12>
 8004fda:	bf00      	nop
 8004fdc:	200002f4 	.word	0x200002f4
 8004fe0:	08006553 	.word	0x08006553
 8004fe4:	08006560 	.word	0x08006560
 8004fe8:	0800658e 	.word	0x0800658e

08004fec <_free_r>:
 8004fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fee:	2900      	cmp	r1, #0
 8004ff0:	d044      	beq.n	800507c <_free_r+0x90>
 8004ff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ff6:	9001      	str	r0, [sp, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f1a1 0404 	sub.w	r4, r1, #4
 8004ffe:	bfb8      	it	lt
 8005000:	18e4      	addlt	r4, r4, r3
 8005002:	f000 f8e7 	bl	80051d4 <__malloc_lock>
 8005006:	4a1e      	ldr	r2, [pc, #120]	; (8005080 <_free_r+0x94>)
 8005008:	9801      	ldr	r0, [sp, #4]
 800500a:	6813      	ldr	r3, [r2, #0]
 800500c:	b933      	cbnz	r3, 800501c <_free_r+0x30>
 800500e:	6063      	str	r3, [r4, #4]
 8005010:	6014      	str	r4, [r2, #0]
 8005012:	b003      	add	sp, #12
 8005014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005018:	f000 b8e2 	b.w	80051e0 <__malloc_unlock>
 800501c:	42a3      	cmp	r3, r4
 800501e:	d908      	bls.n	8005032 <_free_r+0x46>
 8005020:	6825      	ldr	r5, [r4, #0]
 8005022:	1961      	adds	r1, r4, r5
 8005024:	428b      	cmp	r3, r1
 8005026:	bf01      	itttt	eq
 8005028:	6819      	ldreq	r1, [r3, #0]
 800502a:	685b      	ldreq	r3, [r3, #4]
 800502c:	1949      	addeq	r1, r1, r5
 800502e:	6021      	streq	r1, [r4, #0]
 8005030:	e7ed      	b.n	800500e <_free_r+0x22>
 8005032:	461a      	mov	r2, r3
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	b10b      	cbz	r3, 800503c <_free_r+0x50>
 8005038:	42a3      	cmp	r3, r4
 800503a:	d9fa      	bls.n	8005032 <_free_r+0x46>
 800503c:	6811      	ldr	r1, [r2, #0]
 800503e:	1855      	adds	r5, r2, r1
 8005040:	42a5      	cmp	r5, r4
 8005042:	d10b      	bne.n	800505c <_free_r+0x70>
 8005044:	6824      	ldr	r4, [r4, #0]
 8005046:	4421      	add	r1, r4
 8005048:	1854      	adds	r4, r2, r1
 800504a:	42a3      	cmp	r3, r4
 800504c:	6011      	str	r1, [r2, #0]
 800504e:	d1e0      	bne.n	8005012 <_free_r+0x26>
 8005050:	681c      	ldr	r4, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	6053      	str	r3, [r2, #4]
 8005056:	440c      	add	r4, r1
 8005058:	6014      	str	r4, [r2, #0]
 800505a:	e7da      	b.n	8005012 <_free_r+0x26>
 800505c:	d902      	bls.n	8005064 <_free_r+0x78>
 800505e:	230c      	movs	r3, #12
 8005060:	6003      	str	r3, [r0, #0]
 8005062:	e7d6      	b.n	8005012 <_free_r+0x26>
 8005064:	6825      	ldr	r5, [r4, #0]
 8005066:	1961      	adds	r1, r4, r5
 8005068:	428b      	cmp	r3, r1
 800506a:	bf04      	itt	eq
 800506c:	6819      	ldreq	r1, [r3, #0]
 800506e:	685b      	ldreq	r3, [r3, #4]
 8005070:	6063      	str	r3, [r4, #4]
 8005072:	bf04      	itt	eq
 8005074:	1949      	addeq	r1, r1, r5
 8005076:	6021      	streq	r1, [r4, #0]
 8005078:	6054      	str	r4, [r2, #4]
 800507a:	e7ca      	b.n	8005012 <_free_r+0x26>
 800507c:	b003      	add	sp, #12
 800507e:	bd30      	pop	{r4, r5, pc}
 8005080:	20000a08 	.word	0x20000a08

08005084 <malloc>:
 8005084:	4b02      	ldr	r3, [pc, #8]	; (8005090 <malloc+0xc>)
 8005086:	4601      	mov	r1, r0
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	f000 b823 	b.w	80050d4 <_malloc_r>
 800508e:	bf00      	nop
 8005090:	200002f4 	.word	0x200002f4

08005094 <sbrk_aligned>:
 8005094:	b570      	push	{r4, r5, r6, lr}
 8005096:	4e0e      	ldr	r6, [pc, #56]	; (80050d0 <sbrk_aligned+0x3c>)
 8005098:	460c      	mov	r4, r1
 800509a:	6831      	ldr	r1, [r6, #0]
 800509c:	4605      	mov	r5, r0
 800509e:	b911      	cbnz	r1, 80050a6 <sbrk_aligned+0x12>
 80050a0:	f000 fc66 	bl	8005970 <_sbrk_r>
 80050a4:	6030      	str	r0, [r6, #0]
 80050a6:	4621      	mov	r1, r4
 80050a8:	4628      	mov	r0, r5
 80050aa:	f000 fc61 	bl	8005970 <_sbrk_r>
 80050ae:	1c43      	adds	r3, r0, #1
 80050b0:	d00a      	beq.n	80050c8 <sbrk_aligned+0x34>
 80050b2:	1cc4      	adds	r4, r0, #3
 80050b4:	f024 0403 	bic.w	r4, r4, #3
 80050b8:	42a0      	cmp	r0, r4
 80050ba:	d007      	beq.n	80050cc <sbrk_aligned+0x38>
 80050bc:	1a21      	subs	r1, r4, r0
 80050be:	4628      	mov	r0, r5
 80050c0:	f000 fc56 	bl	8005970 <_sbrk_r>
 80050c4:	3001      	adds	r0, #1
 80050c6:	d101      	bne.n	80050cc <sbrk_aligned+0x38>
 80050c8:	f04f 34ff 	mov.w	r4, #4294967295
 80050cc:	4620      	mov	r0, r4
 80050ce:	bd70      	pop	{r4, r5, r6, pc}
 80050d0:	20000a0c 	.word	0x20000a0c

080050d4 <_malloc_r>:
 80050d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050d8:	1ccd      	adds	r5, r1, #3
 80050da:	f025 0503 	bic.w	r5, r5, #3
 80050de:	3508      	adds	r5, #8
 80050e0:	2d0c      	cmp	r5, #12
 80050e2:	bf38      	it	cc
 80050e4:	250c      	movcc	r5, #12
 80050e6:	2d00      	cmp	r5, #0
 80050e8:	4607      	mov	r7, r0
 80050ea:	db01      	blt.n	80050f0 <_malloc_r+0x1c>
 80050ec:	42a9      	cmp	r1, r5
 80050ee:	d905      	bls.n	80050fc <_malloc_r+0x28>
 80050f0:	230c      	movs	r3, #12
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	2600      	movs	r6, #0
 80050f6:	4630      	mov	r0, r6
 80050f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80051d0 <_malloc_r+0xfc>
 8005100:	f000 f868 	bl	80051d4 <__malloc_lock>
 8005104:	f8d8 3000 	ldr.w	r3, [r8]
 8005108:	461c      	mov	r4, r3
 800510a:	bb5c      	cbnz	r4, 8005164 <_malloc_r+0x90>
 800510c:	4629      	mov	r1, r5
 800510e:	4638      	mov	r0, r7
 8005110:	f7ff ffc0 	bl	8005094 <sbrk_aligned>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	4604      	mov	r4, r0
 8005118:	d155      	bne.n	80051c6 <_malloc_r+0xf2>
 800511a:	f8d8 4000 	ldr.w	r4, [r8]
 800511e:	4626      	mov	r6, r4
 8005120:	2e00      	cmp	r6, #0
 8005122:	d145      	bne.n	80051b0 <_malloc_r+0xdc>
 8005124:	2c00      	cmp	r4, #0
 8005126:	d048      	beq.n	80051ba <_malloc_r+0xe6>
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	4631      	mov	r1, r6
 800512c:	4638      	mov	r0, r7
 800512e:	eb04 0903 	add.w	r9, r4, r3
 8005132:	f000 fc1d 	bl	8005970 <_sbrk_r>
 8005136:	4581      	cmp	r9, r0
 8005138:	d13f      	bne.n	80051ba <_malloc_r+0xe6>
 800513a:	6821      	ldr	r1, [r4, #0]
 800513c:	1a6d      	subs	r5, r5, r1
 800513e:	4629      	mov	r1, r5
 8005140:	4638      	mov	r0, r7
 8005142:	f7ff ffa7 	bl	8005094 <sbrk_aligned>
 8005146:	3001      	adds	r0, #1
 8005148:	d037      	beq.n	80051ba <_malloc_r+0xe6>
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	442b      	add	r3, r5
 800514e:	6023      	str	r3, [r4, #0]
 8005150:	f8d8 3000 	ldr.w	r3, [r8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d038      	beq.n	80051ca <_malloc_r+0xf6>
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	42a2      	cmp	r2, r4
 800515c:	d12b      	bne.n	80051b6 <_malloc_r+0xe2>
 800515e:	2200      	movs	r2, #0
 8005160:	605a      	str	r2, [r3, #4]
 8005162:	e00f      	b.n	8005184 <_malloc_r+0xb0>
 8005164:	6822      	ldr	r2, [r4, #0]
 8005166:	1b52      	subs	r2, r2, r5
 8005168:	d41f      	bmi.n	80051aa <_malloc_r+0xd6>
 800516a:	2a0b      	cmp	r2, #11
 800516c:	d917      	bls.n	800519e <_malloc_r+0xca>
 800516e:	1961      	adds	r1, r4, r5
 8005170:	42a3      	cmp	r3, r4
 8005172:	6025      	str	r5, [r4, #0]
 8005174:	bf18      	it	ne
 8005176:	6059      	strne	r1, [r3, #4]
 8005178:	6863      	ldr	r3, [r4, #4]
 800517a:	bf08      	it	eq
 800517c:	f8c8 1000 	streq.w	r1, [r8]
 8005180:	5162      	str	r2, [r4, r5]
 8005182:	604b      	str	r3, [r1, #4]
 8005184:	4638      	mov	r0, r7
 8005186:	f104 060b 	add.w	r6, r4, #11
 800518a:	f000 f829 	bl	80051e0 <__malloc_unlock>
 800518e:	f026 0607 	bic.w	r6, r6, #7
 8005192:	1d23      	adds	r3, r4, #4
 8005194:	1af2      	subs	r2, r6, r3
 8005196:	d0ae      	beq.n	80050f6 <_malloc_r+0x22>
 8005198:	1b9b      	subs	r3, r3, r6
 800519a:	50a3      	str	r3, [r4, r2]
 800519c:	e7ab      	b.n	80050f6 <_malloc_r+0x22>
 800519e:	42a3      	cmp	r3, r4
 80051a0:	6862      	ldr	r2, [r4, #4]
 80051a2:	d1dd      	bne.n	8005160 <_malloc_r+0x8c>
 80051a4:	f8c8 2000 	str.w	r2, [r8]
 80051a8:	e7ec      	b.n	8005184 <_malloc_r+0xb0>
 80051aa:	4623      	mov	r3, r4
 80051ac:	6864      	ldr	r4, [r4, #4]
 80051ae:	e7ac      	b.n	800510a <_malloc_r+0x36>
 80051b0:	4634      	mov	r4, r6
 80051b2:	6876      	ldr	r6, [r6, #4]
 80051b4:	e7b4      	b.n	8005120 <_malloc_r+0x4c>
 80051b6:	4613      	mov	r3, r2
 80051b8:	e7cc      	b.n	8005154 <_malloc_r+0x80>
 80051ba:	230c      	movs	r3, #12
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	4638      	mov	r0, r7
 80051c0:	f000 f80e 	bl	80051e0 <__malloc_unlock>
 80051c4:	e797      	b.n	80050f6 <_malloc_r+0x22>
 80051c6:	6025      	str	r5, [r4, #0]
 80051c8:	e7dc      	b.n	8005184 <_malloc_r+0xb0>
 80051ca:	605b      	str	r3, [r3, #4]
 80051cc:	deff      	udf	#255	; 0xff
 80051ce:	bf00      	nop
 80051d0:	20000a08 	.word	0x20000a08

080051d4 <__malloc_lock>:
 80051d4:	4801      	ldr	r0, [pc, #4]	; (80051dc <__malloc_lock+0x8>)
 80051d6:	f7ff bed2 	b.w	8004f7e <__retarget_lock_acquire_recursive>
 80051da:	bf00      	nop
 80051dc:	20000a04 	.word	0x20000a04

080051e0 <__malloc_unlock>:
 80051e0:	4801      	ldr	r0, [pc, #4]	; (80051e8 <__malloc_unlock+0x8>)
 80051e2:	f7ff becd 	b.w	8004f80 <__retarget_lock_release_recursive>
 80051e6:	bf00      	nop
 80051e8:	20000a04 	.word	0x20000a04

080051ec <__ssputs_r>:
 80051ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051f0:	688e      	ldr	r6, [r1, #8]
 80051f2:	461f      	mov	r7, r3
 80051f4:	42be      	cmp	r6, r7
 80051f6:	680b      	ldr	r3, [r1, #0]
 80051f8:	4682      	mov	sl, r0
 80051fa:	460c      	mov	r4, r1
 80051fc:	4690      	mov	r8, r2
 80051fe:	d82c      	bhi.n	800525a <__ssputs_r+0x6e>
 8005200:	898a      	ldrh	r2, [r1, #12]
 8005202:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005206:	d026      	beq.n	8005256 <__ssputs_r+0x6a>
 8005208:	6965      	ldr	r5, [r4, #20]
 800520a:	6909      	ldr	r1, [r1, #16]
 800520c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005210:	eba3 0901 	sub.w	r9, r3, r1
 8005214:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005218:	1c7b      	adds	r3, r7, #1
 800521a:	444b      	add	r3, r9
 800521c:	106d      	asrs	r5, r5, #1
 800521e:	429d      	cmp	r5, r3
 8005220:	bf38      	it	cc
 8005222:	461d      	movcc	r5, r3
 8005224:	0553      	lsls	r3, r2, #21
 8005226:	d527      	bpl.n	8005278 <__ssputs_r+0x8c>
 8005228:	4629      	mov	r1, r5
 800522a:	f7ff ff53 	bl	80050d4 <_malloc_r>
 800522e:	4606      	mov	r6, r0
 8005230:	b360      	cbz	r0, 800528c <__ssputs_r+0xa0>
 8005232:	6921      	ldr	r1, [r4, #16]
 8005234:	464a      	mov	r2, r9
 8005236:	f7ff feac 	bl	8004f92 <memcpy>
 800523a:	89a3      	ldrh	r3, [r4, #12]
 800523c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005244:	81a3      	strh	r3, [r4, #12]
 8005246:	6126      	str	r6, [r4, #16]
 8005248:	6165      	str	r5, [r4, #20]
 800524a:	444e      	add	r6, r9
 800524c:	eba5 0509 	sub.w	r5, r5, r9
 8005250:	6026      	str	r6, [r4, #0]
 8005252:	60a5      	str	r5, [r4, #8]
 8005254:	463e      	mov	r6, r7
 8005256:	42be      	cmp	r6, r7
 8005258:	d900      	bls.n	800525c <__ssputs_r+0x70>
 800525a:	463e      	mov	r6, r7
 800525c:	6820      	ldr	r0, [r4, #0]
 800525e:	4632      	mov	r2, r6
 8005260:	4641      	mov	r1, r8
 8005262:	f000 fb6b 	bl	800593c <memmove>
 8005266:	68a3      	ldr	r3, [r4, #8]
 8005268:	1b9b      	subs	r3, r3, r6
 800526a:	60a3      	str	r3, [r4, #8]
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	4433      	add	r3, r6
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	2000      	movs	r0, #0
 8005274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005278:	462a      	mov	r2, r5
 800527a:	f000 fb90 	bl	800599e <_realloc_r>
 800527e:	4606      	mov	r6, r0
 8005280:	2800      	cmp	r0, #0
 8005282:	d1e0      	bne.n	8005246 <__ssputs_r+0x5a>
 8005284:	6921      	ldr	r1, [r4, #16]
 8005286:	4650      	mov	r0, sl
 8005288:	f7ff feb0 	bl	8004fec <_free_r>
 800528c:	230c      	movs	r3, #12
 800528e:	f8ca 3000 	str.w	r3, [sl]
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005298:	81a3      	strh	r3, [r4, #12]
 800529a:	f04f 30ff 	mov.w	r0, #4294967295
 800529e:	e7e9      	b.n	8005274 <__ssputs_r+0x88>

080052a0 <_svfiprintf_r>:
 80052a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a4:	4698      	mov	r8, r3
 80052a6:	898b      	ldrh	r3, [r1, #12]
 80052a8:	061b      	lsls	r3, r3, #24
 80052aa:	b09d      	sub	sp, #116	; 0x74
 80052ac:	4607      	mov	r7, r0
 80052ae:	460d      	mov	r5, r1
 80052b0:	4614      	mov	r4, r2
 80052b2:	d50e      	bpl.n	80052d2 <_svfiprintf_r+0x32>
 80052b4:	690b      	ldr	r3, [r1, #16]
 80052b6:	b963      	cbnz	r3, 80052d2 <_svfiprintf_r+0x32>
 80052b8:	2140      	movs	r1, #64	; 0x40
 80052ba:	f7ff ff0b 	bl	80050d4 <_malloc_r>
 80052be:	6028      	str	r0, [r5, #0]
 80052c0:	6128      	str	r0, [r5, #16]
 80052c2:	b920      	cbnz	r0, 80052ce <_svfiprintf_r+0x2e>
 80052c4:	230c      	movs	r3, #12
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295
 80052cc:	e0d0      	b.n	8005470 <_svfiprintf_r+0x1d0>
 80052ce:	2340      	movs	r3, #64	; 0x40
 80052d0:	616b      	str	r3, [r5, #20]
 80052d2:	2300      	movs	r3, #0
 80052d4:	9309      	str	r3, [sp, #36]	; 0x24
 80052d6:	2320      	movs	r3, #32
 80052d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80052e0:	2330      	movs	r3, #48	; 0x30
 80052e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005488 <_svfiprintf_r+0x1e8>
 80052e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052ea:	f04f 0901 	mov.w	r9, #1
 80052ee:	4623      	mov	r3, r4
 80052f0:	469a      	mov	sl, r3
 80052f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052f6:	b10a      	cbz	r2, 80052fc <_svfiprintf_r+0x5c>
 80052f8:	2a25      	cmp	r2, #37	; 0x25
 80052fa:	d1f9      	bne.n	80052f0 <_svfiprintf_r+0x50>
 80052fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005300:	d00b      	beq.n	800531a <_svfiprintf_r+0x7a>
 8005302:	465b      	mov	r3, fp
 8005304:	4622      	mov	r2, r4
 8005306:	4629      	mov	r1, r5
 8005308:	4638      	mov	r0, r7
 800530a:	f7ff ff6f 	bl	80051ec <__ssputs_r>
 800530e:	3001      	adds	r0, #1
 8005310:	f000 80a9 	beq.w	8005466 <_svfiprintf_r+0x1c6>
 8005314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005316:	445a      	add	r2, fp
 8005318:	9209      	str	r2, [sp, #36]	; 0x24
 800531a:	f89a 3000 	ldrb.w	r3, [sl]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 80a1 	beq.w	8005466 <_svfiprintf_r+0x1c6>
 8005324:	2300      	movs	r3, #0
 8005326:	f04f 32ff 	mov.w	r2, #4294967295
 800532a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800532e:	f10a 0a01 	add.w	sl, sl, #1
 8005332:	9304      	str	r3, [sp, #16]
 8005334:	9307      	str	r3, [sp, #28]
 8005336:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800533a:	931a      	str	r3, [sp, #104]	; 0x68
 800533c:	4654      	mov	r4, sl
 800533e:	2205      	movs	r2, #5
 8005340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005344:	4850      	ldr	r0, [pc, #320]	; (8005488 <_svfiprintf_r+0x1e8>)
 8005346:	f7fa ff43 	bl	80001d0 <memchr>
 800534a:	9a04      	ldr	r2, [sp, #16]
 800534c:	b9d8      	cbnz	r0, 8005386 <_svfiprintf_r+0xe6>
 800534e:	06d0      	lsls	r0, r2, #27
 8005350:	bf44      	itt	mi
 8005352:	2320      	movmi	r3, #32
 8005354:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005358:	0711      	lsls	r1, r2, #28
 800535a:	bf44      	itt	mi
 800535c:	232b      	movmi	r3, #43	; 0x2b
 800535e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005362:	f89a 3000 	ldrb.w	r3, [sl]
 8005366:	2b2a      	cmp	r3, #42	; 0x2a
 8005368:	d015      	beq.n	8005396 <_svfiprintf_r+0xf6>
 800536a:	9a07      	ldr	r2, [sp, #28]
 800536c:	4654      	mov	r4, sl
 800536e:	2000      	movs	r0, #0
 8005370:	f04f 0c0a 	mov.w	ip, #10
 8005374:	4621      	mov	r1, r4
 8005376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800537a:	3b30      	subs	r3, #48	; 0x30
 800537c:	2b09      	cmp	r3, #9
 800537e:	d94d      	bls.n	800541c <_svfiprintf_r+0x17c>
 8005380:	b1b0      	cbz	r0, 80053b0 <_svfiprintf_r+0x110>
 8005382:	9207      	str	r2, [sp, #28]
 8005384:	e014      	b.n	80053b0 <_svfiprintf_r+0x110>
 8005386:	eba0 0308 	sub.w	r3, r0, r8
 800538a:	fa09 f303 	lsl.w	r3, r9, r3
 800538e:	4313      	orrs	r3, r2
 8005390:	9304      	str	r3, [sp, #16]
 8005392:	46a2      	mov	sl, r4
 8005394:	e7d2      	b.n	800533c <_svfiprintf_r+0x9c>
 8005396:	9b03      	ldr	r3, [sp, #12]
 8005398:	1d19      	adds	r1, r3, #4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	9103      	str	r1, [sp, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	bfbb      	ittet	lt
 80053a2:	425b      	neglt	r3, r3
 80053a4:	f042 0202 	orrlt.w	r2, r2, #2
 80053a8:	9307      	strge	r3, [sp, #28]
 80053aa:	9307      	strlt	r3, [sp, #28]
 80053ac:	bfb8      	it	lt
 80053ae:	9204      	strlt	r2, [sp, #16]
 80053b0:	7823      	ldrb	r3, [r4, #0]
 80053b2:	2b2e      	cmp	r3, #46	; 0x2e
 80053b4:	d10c      	bne.n	80053d0 <_svfiprintf_r+0x130>
 80053b6:	7863      	ldrb	r3, [r4, #1]
 80053b8:	2b2a      	cmp	r3, #42	; 0x2a
 80053ba:	d134      	bne.n	8005426 <_svfiprintf_r+0x186>
 80053bc:	9b03      	ldr	r3, [sp, #12]
 80053be:	1d1a      	adds	r2, r3, #4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	9203      	str	r2, [sp, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	bfb8      	it	lt
 80053c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80053cc:	3402      	adds	r4, #2
 80053ce:	9305      	str	r3, [sp, #20]
 80053d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005498 <_svfiprintf_r+0x1f8>
 80053d4:	7821      	ldrb	r1, [r4, #0]
 80053d6:	2203      	movs	r2, #3
 80053d8:	4650      	mov	r0, sl
 80053da:	f7fa fef9 	bl	80001d0 <memchr>
 80053de:	b138      	cbz	r0, 80053f0 <_svfiprintf_r+0x150>
 80053e0:	9b04      	ldr	r3, [sp, #16]
 80053e2:	eba0 000a 	sub.w	r0, r0, sl
 80053e6:	2240      	movs	r2, #64	; 0x40
 80053e8:	4082      	lsls	r2, r0
 80053ea:	4313      	orrs	r3, r2
 80053ec:	3401      	adds	r4, #1
 80053ee:	9304      	str	r3, [sp, #16]
 80053f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f4:	4825      	ldr	r0, [pc, #148]	; (800548c <_svfiprintf_r+0x1ec>)
 80053f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053fa:	2206      	movs	r2, #6
 80053fc:	f7fa fee8 	bl	80001d0 <memchr>
 8005400:	2800      	cmp	r0, #0
 8005402:	d038      	beq.n	8005476 <_svfiprintf_r+0x1d6>
 8005404:	4b22      	ldr	r3, [pc, #136]	; (8005490 <_svfiprintf_r+0x1f0>)
 8005406:	bb1b      	cbnz	r3, 8005450 <_svfiprintf_r+0x1b0>
 8005408:	9b03      	ldr	r3, [sp, #12]
 800540a:	3307      	adds	r3, #7
 800540c:	f023 0307 	bic.w	r3, r3, #7
 8005410:	3308      	adds	r3, #8
 8005412:	9303      	str	r3, [sp, #12]
 8005414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005416:	4433      	add	r3, r6
 8005418:	9309      	str	r3, [sp, #36]	; 0x24
 800541a:	e768      	b.n	80052ee <_svfiprintf_r+0x4e>
 800541c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005420:	460c      	mov	r4, r1
 8005422:	2001      	movs	r0, #1
 8005424:	e7a6      	b.n	8005374 <_svfiprintf_r+0xd4>
 8005426:	2300      	movs	r3, #0
 8005428:	3401      	adds	r4, #1
 800542a:	9305      	str	r3, [sp, #20]
 800542c:	4619      	mov	r1, r3
 800542e:	f04f 0c0a 	mov.w	ip, #10
 8005432:	4620      	mov	r0, r4
 8005434:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005438:	3a30      	subs	r2, #48	; 0x30
 800543a:	2a09      	cmp	r2, #9
 800543c:	d903      	bls.n	8005446 <_svfiprintf_r+0x1a6>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0c6      	beq.n	80053d0 <_svfiprintf_r+0x130>
 8005442:	9105      	str	r1, [sp, #20]
 8005444:	e7c4      	b.n	80053d0 <_svfiprintf_r+0x130>
 8005446:	fb0c 2101 	mla	r1, ip, r1, r2
 800544a:	4604      	mov	r4, r0
 800544c:	2301      	movs	r3, #1
 800544e:	e7f0      	b.n	8005432 <_svfiprintf_r+0x192>
 8005450:	ab03      	add	r3, sp, #12
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	462a      	mov	r2, r5
 8005456:	4b0f      	ldr	r3, [pc, #60]	; (8005494 <_svfiprintf_r+0x1f4>)
 8005458:	a904      	add	r1, sp, #16
 800545a:	4638      	mov	r0, r7
 800545c:	f3af 8000 	nop.w
 8005460:	1c42      	adds	r2, r0, #1
 8005462:	4606      	mov	r6, r0
 8005464:	d1d6      	bne.n	8005414 <_svfiprintf_r+0x174>
 8005466:	89ab      	ldrh	r3, [r5, #12]
 8005468:	065b      	lsls	r3, r3, #25
 800546a:	f53f af2d 	bmi.w	80052c8 <_svfiprintf_r+0x28>
 800546e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005470:	b01d      	add	sp, #116	; 0x74
 8005472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005476:	ab03      	add	r3, sp, #12
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	462a      	mov	r2, r5
 800547c:	4b05      	ldr	r3, [pc, #20]	; (8005494 <_svfiprintf_r+0x1f4>)
 800547e:	a904      	add	r1, sp, #16
 8005480:	4638      	mov	r0, r7
 8005482:	f000 f879 	bl	8005578 <_printf_i>
 8005486:	e7eb      	b.n	8005460 <_svfiprintf_r+0x1c0>
 8005488:	0800658f 	.word	0x0800658f
 800548c:	08006599 	.word	0x08006599
 8005490:	00000000 	.word	0x00000000
 8005494:	080051ed 	.word	0x080051ed
 8005498:	08006595 	.word	0x08006595

0800549c <_printf_common>:
 800549c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a0:	4616      	mov	r6, r2
 80054a2:	4699      	mov	r9, r3
 80054a4:	688a      	ldr	r2, [r1, #8]
 80054a6:	690b      	ldr	r3, [r1, #16]
 80054a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054ac:	4293      	cmp	r3, r2
 80054ae:	bfb8      	it	lt
 80054b0:	4613      	movlt	r3, r2
 80054b2:	6033      	str	r3, [r6, #0]
 80054b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054b8:	4607      	mov	r7, r0
 80054ba:	460c      	mov	r4, r1
 80054bc:	b10a      	cbz	r2, 80054c2 <_printf_common+0x26>
 80054be:	3301      	adds	r3, #1
 80054c0:	6033      	str	r3, [r6, #0]
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	0699      	lsls	r1, r3, #26
 80054c6:	bf42      	ittt	mi
 80054c8:	6833      	ldrmi	r3, [r6, #0]
 80054ca:	3302      	addmi	r3, #2
 80054cc:	6033      	strmi	r3, [r6, #0]
 80054ce:	6825      	ldr	r5, [r4, #0]
 80054d0:	f015 0506 	ands.w	r5, r5, #6
 80054d4:	d106      	bne.n	80054e4 <_printf_common+0x48>
 80054d6:	f104 0a19 	add.w	sl, r4, #25
 80054da:	68e3      	ldr	r3, [r4, #12]
 80054dc:	6832      	ldr	r2, [r6, #0]
 80054de:	1a9b      	subs	r3, r3, r2
 80054e0:	42ab      	cmp	r3, r5
 80054e2:	dc26      	bgt.n	8005532 <_printf_common+0x96>
 80054e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054e8:	1e13      	subs	r3, r2, #0
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	bf18      	it	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	0692      	lsls	r2, r2, #26
 80054f2:	d42b      	bmi.n	800554c <_printf_common+0xb0>
 80054f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054f8:	4649      	mov	r1, r9
 80054fa:	4638      	mov	r0, r7
 80054fc:	47c0      	blx	r8
 80054fe:	3001      	adds	r0, #1
 8005500:	d01e      	beq.n	8005540 <_printf_common+0xa4>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	6922      	ldr	r2, [r4, #16]
 8005506:	f003 0306 	and.w	r3, r3, #6
 800550a:	2b04      	cmp	r3, #4
 800550c:	bf02      	ittt	eq
 800550e:	68e5      	ldreq	r5, [r4, #12]
 8005510:	6833      	ldreq	r3, [r6, #0]
 8005512:	1aed      	subeq	r5, r5, r3
 8005514:	68a3      	ldr	r3, [r4, #8]
 8005516:	bf0c      	ite	eq
 8005518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800551c:	2500      	movne	r5, #0
 800551e:	4293      	cmp	r3, r2
 8005520:	bfc4      	itt	gt
 8005522:	1a9b      	subgt	r3, r3, r2
 8005524:	18ed      	addgt	r5, r5, r3
 8005526:	2600      	movs	r6, #0
 8005528:	341a      	adds	r4, #26
 800552a:	42b5      	cmp	r5, r6
 800552c:	d11a      	bne.n	8005564 <_printf_common+0xc8>
 800552e:	2000      	movs	r0, #0
 8005530:	e008      	b.n	8005544 <_printf_common+0xa8>
 8005532:	2301      	movs	r3, #1
 8005534:	4652      	mov	r2, sl
 8005536:	4649      	mov	r1, r9
 8005538:	4638      	mov	r0, r7
 800553a:	47c0      	blx	r8
 800553c:	3001      	adds	r0, #1
 800553e:	d103      	bne.n	8005548 <_printf_common+0xac>
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005548:	3501      	adds	r5, #1
 800554a:	e7c6      	b.n	80054da <_printf_common+0x3e>
 800554c:	18e1      	adds	r1, r4, r3
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	2030      	movs	r0, #48	; 0x30
 8005552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005556:	4422      	add	r2, r4
 8005558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800555c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005560:	3302      	adds	r3, #2
 8005562:	e7c7      	b.n	80054f4 <_printf_common+0x58>
 8005564:	2301      	movs	r3, #1
 8005566:	4622      	mov	r2, r4
 8005568:	4649      	mov	r1, r9
 800556a:	4638      	mov	r0, r7
 800556c:	47c0      	blx	r8
 800556e:	3001      	adds	r0, #1
 8005570:	d0e6      	beq.n	8005540 <_printf_common+0xa4>
 8005572:	3601      	adds	r6, #1
 8005574:	e7d9      	b.n	800552a <_printf_common+0x8e>
	...

08005578 <_printf_i>:
 8005578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800557c:	7e0f      	ldrb	r7, [r1, #24]
 800557e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005580:	2f78      	cmp	r7, #120	; 0x78
 8005582:	4691      	mov	r9, r2
 8005584:	4680      	mov	r8, r0
 8005586:	460c      	mov	r4, r1
 8005588:	469a      	mov	sl, r3
 800558a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800558e:	d807      	bhi.n	80055a0 <_printf_i+0x28>
 8005590:	2f62      	cmp	r7, #98	; 0x62
 8005592:	d80a      	bhi.n	80055aa <_printf_i+0x32>
 8005594:	2f00      	cmp	r7, #0
 8005596:	f000 80d4 	beq.w	8005742 <_printf_i+0x1ca>
 800559a:	2f58      	cmp	r7, #88	; 0x58
 800559c:	f000 80c0 	beq.w	8005720 <_printf_i+0x1a8>
 80055a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055a8:	e03a      	b.n	8005620 <_printf_i+0xa8>
 80055aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055ae:	2b15      	cmp	r3, #21
 80055b0:	d8f6      	bhi.n	80055a0 <_printf_i+0x28>
 80055b2:	a101      	add	r1, pc, #4	; (adr r1, 80055b8 <_printf_i+0x40>)
 80055b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055b8:	08005611 	.word	0x08005611
 80055bc:	08005625 	.word	0x08005625
 80055c0:	080055a1 	.word	0x080055a1
 80055c4:	080055a1 	.word	0x080055a1
 80055c8:	080055a1 	.word	0x080055a1
 80055cc:	080055a1 	.word	0x080055a1
 80055d0:	08005625 	.word	0x08005625
 80055d4:	080055a1 	.word	0x080055a1
 80055d8:	080055a1 	.word	0x080055a1
 80055dc:	080055a1 	.word	0x080055a1
 80055e0:	080055a1 	.word	0x080055a1
 80055e4:	08005729 	.word	0x08005729
 80055e8:	08005651 	.word	0x08005651
 80055ec:	080056e3 	.word	0x080056e3
 80055f0:	080055a1 	.word	0x080055a1
 80055f4:	080055a1 	.word	0x080055a1
 80055f8:	0800574b 	.word	0x0800574b
 80055fc:	080055a1 	.word	0x080055a1
 8005600:	08005651 	.word	0x08005651
 8005604:	080055a1 	.word	0x080055a1
 8005608:	080055a1 	.word	0x080055a1
 800560c:	080056eb 	.word	0x080056eb
 8005610:	682b      	ldr	r3, [r5, #0]
 8005612:	1d1a      	adds	r2, r3, #4
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	602a      	str	r2, [r5, #0]
 8005618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800561c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005620:	2301      	movs	r3, #1
 8005622:	e09f      	b.n	8005764 <_printf_i+0x1ec>
 8005624:	6820      	ldr	r0, [r4, #0]
 8005626:	682b      	ldr	r3, [r5, #0]
 8005628:	0607      	lsls	r7, r0, #24
 800562a:	f103 0104 	add.w	r1, r3, #4
 800562e:	6029      	str	r1, [r5, #0]
 8005630:	d501      	bpl.n	8005636 <_printf_i+0xbe>
 8005632:	681e      	ldr	r6, [r3, #0]
 8005634:	e003      	b.n	800563e <_printf_i+0xc6>
 8005636:	0646      	lsls	r6, r0, #25
 8005638:	d5fb      	bpl.n	8005632 <_printf_i+0xba>
 800563a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800563e:	2e00      	cmp	r6, #0
 8005640:	da03      	bge.n	800564a <_printf_i+0xd2>
 8005642:	232d      	movs	r3, #45	; 0x2d
 8005644:	4276      	negs	r6, r6
 8005646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800564a:	485a      	ldr	r0, [pc, #360]	; (80057b4 <_printf_i+0x23c>)
 800564c:	230a      	movs	r3, #10
 800564e:	e012      	b.n	8005676 <_printf_i+0xfe>
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	6820      	ldr	r0, [r4, #0]
 8005654:	1d19      	adds	r1, r3, #4
 8005656:	6029      	str	r1, [r5, #0]
 8005658:	0605      	lsls	r5, r0, #24
 800565a:	d501      	bpl.n	8005660 <_printf_i+0xe8>
 800565c:	681e      	ldr	r6, [r3, #0]
 800565e:	e002      	b.n	8005666 <_printf_i+0xee>
 8005660:	0641      	lsls	r1, r0, #25
 8005662:	d5fb      	bpl.n	800565c <_printf_i+0xe4>
 8005664:	881e      	ldrh	r6, [r3, #0]
 8005666:	4853      	ldr	r0, [pc, #332]	; (80057b4 <_printf_i+0x23c>)
 8005668:	2f6f      	cmp	r7, #111	; 0x6f
 800566a:	bf0c      	ite	eq
 800566c:	2308      	moveq	r3, #8
 800566e:	230a      	movne	r3, #10
 8005670:	2100      	movs	r1, #0
 8005672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005676:	6865      	ldr	r5, [r4, #4]
 8005678:	60a5      	str	r5, [r4, #8]
 800567a:	2d00      	cmp	r5, #0
 800567c:	bfa2      	ittt	ge
 800567e:	6821      	ldrge	r1, [r4, #0]
 8005680:	f021 0104 	bicge.w	r1, r1, #4
 8005684:	6021      	strge	r1, [r4, #0]
 8005686:	b90e      	cbnz	r6, 800568c <_printf_i+0x114>
 8005688:	2d00      	cmp	r5, #0
 800568a:	d04b      	beq.n	8005724 <_printf_i+0x1ac>
 800568c:	4615      	mov	r5, r2
 800568e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005692:	fb03 6711 	mls	r7, r3, r1, r6
 8005696:	5dc7      	ldrb	r7, [r0, r7]
 8005698:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800569c:	4637      	mov	r7, r6
 800569e:	42bb      	cmp	r3, r7
 80056a0:	460e      	mov	r6, r1
 80056a2:	d9f4      	bls.n	800568e <_printf_i+0x116>
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d10b      	bne.n	80056c0 <_printf_i+0x148>
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	07de      	lsls	r6, r3, #31
 80056ac:	d508      	bpl.n	80056c0 <_printf_i+0x148>
 80056ae:	6923      	ldr	r3, [r4, #16]
 80056b0:	6861      	ldr	r1, [r4, #4]
 80056b2:	4299      	cmp	r1, r3
 80056b4:	bfde      	ittt	le
 80056b6:	2330      	movle	r3, #48	; 0x30
 80056b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056c0:	1b52      	subs	r2, r2, r5
 80056c2:	6122      	str	r2, [r4, #16]
 80056c4:	f8cd a000 	str.w	sl, [sp]
 80056c8:	464b      	mov	r3, r9
 80056ca:	aa03      	add	r2, sp, #12
 80056cc:	4621      	mov	r1, r4
 80056ce:	4640      	mov	r0, r8
 80056d0:	f7ff fee4 	bl	800549c <_printf_common>
 80056d4:	3001      	adds	r0, #1
 80056d6:	d14a      	bne.n	800576e <_printf_i+0x1f6>
 80056d8:	f04f 30ff 	mov.w	r0, #4294967295
 80056dc:	b004      	add	sp, #16
 80056de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	f043 0320 	orr.w	r3, r3, #32
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	4833      	ldr	r0, [pc, #204]	; (80057b8 <_printf_i+0x240>)
 80056ec:	2778      	movs	r7, #120	; 0x78
 80056ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	6829      	ldr	r1, [r5, #0]
 80056f6:	061f      	lsls	r7, r3, #24
 80056f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80056fc:	d402      	bmi.n	8005704 <_printf_i+0x18c>
 80056fe:	065f      	lsls	r7, r3, #25
 8005700:	bf48      	it	mi
 8005702:	b2b6      	uxthmi	r6, r6
 8005704:	07df      	lsls	r7, r3, #31
 8005706:	bf48      	it	mi
 8005708:	f043 0320 	orrmi.w	r3, r3, #32
 800570c:	6029      	str	r1, [r5, #0]
 800570e:	bf48      	it	mi
 8005710:	6023      	strmi	r3, [r4, #0]
 8005712:	b91e      	cbnz	r6, 800571c <_printf_i+0x1a4>
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	f023 0320 	bic.w	r3, r3, #32
 800571a:	6023      	str	r3, [r4, #0]
 800571c:	2310      	movs	r3, #16
 800571e:	e7a7      	b.n	8005670 <_printf_i+0xf8>
 8005720:	4824      	ldr	r0, [pc, #144]	; (80057b4 <_printf_i+0x23c>)
 8005722:	e7e4      	b.n	80056ee <_printf_i+0x176>
 8005724:	4615      	mov	r5, r2
 8005726:	e7bd      	b.n	80056a4 <_printf_i+0x12c>
 8005728:	682b      	ldr	r3, [r5, #0]
 800572a:	6826      	ldr	r6, [r4, #0]
 800572c:	6961      	ldr	r1, [r4, #20]
 800572e:	1d18      	adds	r0, r3, #4
 8005730:	6028      	str	r0, [r5, #0]
 8005732:	0635      	lsls	r5, r6, #24
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	d501      	bpl.n	800573c <_printf_i+0x1c4>
 8005738:	6019      	str	r1, [r3, #0]
 800573a:	e002      	b.n	8005742 <_printf_i+0x1ca>
 800573c:	0670      	lsls	r0, r6, #25
 800573e:	d5fb      	bpl.n	8005738 <_printf_i+0x1c0>
 8005740:	8019      	strh	r1, [r3, #0]
 8005742:	2300      	movs	r3, #0
 8005744:	6123      	str	r3, [r4, #16]
 8005746:	4615      	mov	r5, r2
 8005748:	e7bc      	b.n	80056c4 <_printf_i+0x14c>
 800574a:	682b      	ldr	r3, [r5, #0]
 800574c:	1d1a      	adds	r2, r3, #4
 800574e:	602a      	str	r2, [r5, #0]
 8005750:	681d      	ldr	r5, [r3, #0]
 8005752:	6862      	ldr	r2, [r4, #4]
 8005754:	2100      	movs	r1, #0
 8005756:	4628      	mov	r0, r5
 8005758:	f7fa fd3a 	bl	80001d0 <memchr>
 800575c:	b108      	cbz	r0, 8005762 <_printf_i+0x1ea>
 800575e:	1b40      	subs	r0, r0, r5
 8005760:	6060      	str	r0, [r4, #4]
 8005762:	6863      	ldr	r3, [r4, #4]
 8005764:	6123      	str	r3, [r4, #16]
 8005766:	2300      	movs	r3, #0
 8005768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800576c:	e7aa      	b.n	80056c4 <_printf_i+0x14c>
 800576e:	6923      	ldr	r3, [r4, #16]
 8005770:	462a      	mov	r2, r5
 8005772:	4649      	mov	r1, r9
 8005774:	4640      	mov	r0, r8
 8005776:	47d0      	blx	sl
 8005778:	3001      	adds	r0, #1
 800577a:	d0ad      	beq.n	80056d8 <_printf_i+0x160>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	079b      	lsls	r3, r3, #30
 8005780:	d413      	bmi.n	80057aa <_printf_i+0x232>
 8005782:	68e0      	ldr	r0, [r4, #12]
 8005784:	9b03      	ldr	r3, [sp, #12]
 8005786:	4298      	cmp	r0, r3
 8005788:	bfb8      	it	lt
 800578a:	4618      	movlt	r0, r3
 800578c:	e7a6      	b.n	80056dc <_printf_i+0x164>
 800578e:	2301      	movs	r3, #1
 8005790:	4632      	mov	r2, r6
 8005792:	4649      	mov	r1, r9
 8005794:	4640      	mov	r0, r8
 8005796:	47d0      	blx	sl
 8005798:	3001      	adds	r0, #1
 800579a:	d09d      	beq.n	80056d8 <_printf_i+0x160>
 800579c:	3501      	adds	r5, #1
 800579e:	68e3      	ldr	r3, [r4, #12]
 80057a0:	9903      	ldr	r1, [sp, #12]
 80057a2:	1a5b      	subs	r3, r3, r1
 80057a4:	42ab      	cmp	r3, r5
 80057a6:	dcf2      	bgt.n	800578e <_printf_i+0x216>
 80057a8:	e7eb      	b.n	8005782 <_printf_i+0x20a>
 80057aa:	2500      	movs	r5, #0
 80057ac:	f104 0619 	add.w	r6, r4, #25
 80057b0:	e7f5      	b.n	800579e <_printf_i+0x226>
 80057b2:	bf00      	nop
 80057b4:	080065a0 	.word	0x080065a0
 80057b8:	080065b1 	.word	0x080065b1

080057bc <__sflush_r>:
 80057bc:	898a      	ldrh	r2, [r1, #12]
 80057be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c2:	4605      	mov	r5, r0
 80057c4:	0710      	lsls	r0, r2, #28
 80057c6:	460c      	mov	r4, r1
 80057c8:	d458      	bmi.n	800587c <__sflush_r+0xc0>
 80057ca:	684b      	ldr	r3, [r1, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	dc05      	bgt.n	80057dc <__sflush_r+0x20>
 80057d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	dc02      	bgt.n	80057dc <__sflush_r+0x20>
 80057d6:	2000      	movs	r0, #0
 80057d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057de:	2e00      	cmp	r6, #0
 80057e0:	d0f9      	beq.n	80057d6 <__sflush_r+0x1a>
 80057e2:	2300      	movs	r3, #0
 80057e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057e8:	682f      	ldr	r7, [r5, #0]
 80057ea:	6a21      	ldr	r1, [r4, #32]
 80057ec:	602b      	str	r3, [r5, #0]
 80057ee:	d032      	beq.n	8005856 <__sflush_r+0x9a>
 80057f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057f2:	89a3      	ldrh	r3, [r4, #12]
 80057f4:	075a      	lsls	r2, r3, #29
 80057f6:	d505      	bpl.n	8005804 <__sflush_r+0x48>
 80057f8:	6863      	ldr	r3, [r4, #4]
 80057fa:	1ac0      	subs	r0, r0, r3
 80057fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057fe:	b10b      	cbz	r3, 8005804 <__sflush_r+0x48>
 8005800:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005802:	1ac0      	subs	r0, r0, r3
 8005804:	2300      	movs	r3, #0
 8005806:	4602      	mov	r2, r0
 8005808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800580a:	6a21      	ldr	r1, [r4, #32]
 800580c:	4628      	mov	r0, r5
 800580e:	47b0      	blx	r6
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	89a3      	ldrh	r3, [r4, #12]
 8005814:	d106      	bne.n	8005824 <__sflush_r+0x68>
 8005816:	6829      	ldr	r1, [r5, #0]
 8005818:	291d      	cmp	r1, #29
 800581a:	d82b      	bhi.n	8005874 <__sflush_r+0xb8>
 800581c:	4a29      	ldr	r2, [pc, #164]	; (80058c4 <__sflush_r+0x108>)
 800581e:	410a      	asrs	r2, r1
 8005820:	07d6      	lsls	r6, r2, #31
 8005822:	d427      	bmi.n	8005874 <__sflush_r+0xb8>
 8005824:	2200      	movs	r2, #0
 8005826:	6062      	str	r2, [r4, #4]
 8005828:	04d9      	lsls	r1, r3, #19
 800582a:	6922      	ldr	r2, [r4, #16]
 800582c:	6022      	str	r2, [r4, #0]
 800582e:	d504      	bpl.n	800583a <__sflush_r+0x7e>
 8005830:	1c42      	adds	r2, r0, #1
 8005832:	d101      	bne.n	8005838 <__sflush_r+0x7c>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	b903      	cbnz	r3, 800583a <__sflush_r+0x7e>
 8005838:	6560      	str	r0, [r4, #84]	; 0x54
 800583a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800583c:	602f      	str	r7, [r5, #0]
 800583e:	2900      	cmp	r1, #0
 8005840:	d0c9      	beq.n	80057d6 <__sflush_r+0x1a>
 8005842:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005846:	4299      	cmp	r1, r3
 8005848:	d002      	beq.n	8005850 <__sflush_r+0x94>
 800584a:	4628      	mov	r0, r5
 800584c:	f7ff fbce 	bl	8004fec <_free_r>
 8005850:	2000      	movs	r0, #0
 8005852:	6360      	str	r0, [r4, #52]	; 0x34
 8005854:	e7c0      	b.n	80057d8 <__sflush_r+0x1c>
 8005856:	2301      	movs	r3, #1
 8005858:	4628      	mov	r0, r5
 800585a:	47b0      	blx	r6
 800585c:	1c41      	adds	r1, r0, #1
 800585e:	d1c8      	bne.n	80057f2 <__sflush_r+0x36>
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0c5      	beq.n	80057f2 <__sflush_r+0x36>
 8005866:	2b1d      	cmp	r3, #29
 8005868:	d001      	beq.n	800586e <__sflush_r+0xb2>
 800586a:	2b16      	cmp	r3, #22
 800586c:	d101      	bne.n	8005872 <__sflush_r+0xb6>
 800586e:	602f      	str	r7, [r5, #0]
 8005870:	e7b1      	b.n	80057d6 <__sflush_r+0x1a>
 8005872:	89a3      	ldrh	r3, [r4, #12]
 8005874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005878:	81a3      	strh	r3, [r4, #12]
 800587a:	e7ad      	b.n	80057d8 <__sflush_r+0x1c>
 800587c:	690f      	ldr	r7, [r1, #16]
 800587e:	2f00      	cmp	r7, #0
 8005880:	d0a9      	beq.n	80057d6 <__sflush_r+0x1a>
 8005882:	0793      	lsls	r3, r2, #30
 8005884:	680e      	ldr	r6, [r1, #0]
 8005886:	bf08      	it	eq
 8005888:	694b      	ldreq	r3, [r1, #20]
 800588a:	600f      	str	r7, [r1, #0]
 800588c:	bf18      	it	ne
 800588e:	2300      	movne	r3, #0
 8005890:	eba6 0807 	sub.w	r8, r6, r7
 8005894:	608b      	str	r3, [r1, #8]
 8005896:	f1b8 0f00 	cmp.w	r8, #0
 800589a:	dd9c      	ble.n	80057d6 <__sflush_r+0x1a>
 800589c:	6a21      	ldr	r1, [r4, #32]
 800589e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058a0:	4643      	mov	r3, r8
 80058a2:	463a      	mov	r2, r7
 80058a4:	4628      	mov	r0, r5
 80058a6:	47b0      	blx	r6
 80058a8:	2800      	cmp	r0, #0
 80058aa:	dc06      	bgt.n	80058ba <__sflush_r+0xfe>
 80058ac:	89a3      	ldrh	r3, [r4, #12]
 80058ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b2:	81a3      	strh	r3, [r4, #12]
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295
 80058b8:	e78e      	b.n	80057d8 <__sflush_r+0x1c>
 80058ba:	4407      	add	r7, r0
 80058bc:	eba8 0800 	sub.w	r8, r8, r0
 80058c0:	e7e9      	b.n	8005896 <__sflush_r+0xda>
 80058c2:	bf00      	nop
 80058c4:	dfbffffe 	.word	0xdfbffffe

080058c8 <_fflush_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	690b      	ldr	r3, [r1, #16]
 80058cc:	4605      	mov	r5, r0
 80058ce:	460c      	mov	r4, r1
 80058d0:	b913      	cbnz	r3, 80058d8 <_fflush_r+0x10>
 80058d2:	2500      	movs	r5, #0
 80058d4:	4628      	mov	r0, r5
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	b118      	cbz	r0, 80058e2 <_fflush_r+0x1a>
 80058da:	6a03      	ldr	r3, [r0, #32]
 80058dc:	b90b      	cbnz	r3, 80058e2 <_fflush_r+0x1a>
 80058de:	f7ff fa3b 	bl	8004d58 <__sinit>
 80058e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f3      	beq.n	80058d2 <_fflush_r+0xa>
 80058ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058ec:	07d0      	lsls	r0, r2, #31
 80058ee:	d404      	bmi.n	80058fa <_fflush_r+0x32>
 80058f0:	0599      	lsls	r1, r3, #22
 80058f2:	d402      	bmi.n	80058fa <_fflush_r+0x32>
 80058f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058f6:	f7ff fb42 	bl	8004f7e <__retarget_lock_acquire_recursive>
 80058fa:	4628      	mov	r0, r5
 80058fc:	4621      	mov	r1, r4
 80058fe:	f7ff ff5d 	bl	80057bc <__sflush_r>
 8005902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005904:	07da      	lsls	r2, r3, #31
 8005906:	4605      	mov	r5, r0
 8005908:	d4e4      	bmi.n	80058d4 <_fflush_r+0xc>
 800590a:	89a3      	ldrh	r3, [r4, #12]
 800590c:	059b      	lsls	r3, r3, #22
 800590e:	d4e1      	bmi.n	80058d4 <_fflush_r+0xc>
 8005910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005912:	f7ff fb35 	bl	8004f80 <__retarget_lock_release_recursive>
 8005916:	e7dd      	b.n	80058d4 <_fflush_r+0xc>

08005918 <fiprintf>:
 8005918:	b40e      	push	{r1, r2, r3}
 800591a:	b503      	push	{r0, r1, lr}
 800591c:	4601      	mov	r1, r0
 800591e:	ab03      	add	r3, sp, #12
 8005920:	4805      	ldr	r0, [pc, #20]	; (8005938 <fiprintf+0x20>)
 8005922:	f853 2b04 	ldr.w	r2, [r3], #4
 8005926:	6800      	ldr	r0, [r0, #0]
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	f000 f891 	bl	8005a50 <_vfiprintf_r>
 800592e:	b002      	add	sp, #8
 8005930:	f85d eb04 	ldr.w	lr, [sp], #4
 8005934:	b003      	add	sp, #12
 8005936:	4770      	bx	lr
 8005938:	200002f4 	.word	0x200002f4

0800593c <memmove>:
 800593c:	4288      	cmp	r0, r1
 800593e:	b510      	push	{r4, lr}
 8005940:	eb01 0402 	add.w	r4, r1, r2
 8005944:	d902      	bls.n	800594c <memmove+0x10>
 8005946:	4284      	cmp	r4, r0
 8005948:	4623      	mov	r3, r4
 800594a:	d807      	bhi.n	800595c <memmove+0x20>
 800594c:	1e43      	subs	r3, r0, #1
 800594e:	42a1      	cmp	r1, r4
 8005950:	d008      	beq.n	8005964 <memmove+0x28>
 8005952:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005956:	f803 2f01 	strb.w	r2, [r3, #1]!
 800595a:	e7f8      	b.n	800594e <memmove+0x12>
 800595c:	4402      	add	r2, r0
 800595e:	4601      	mov	r1, r0
 8005960:	428a      	cmp	r2, r1
 8005962:	d100      	bne.n	8005966 <memmove+0x2a>
 8005964:	bd10      	pop	{r4, pc}
 8005966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800596a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800596e:	e7f7      	b.n	8005960 <memmove+0x24>

08005970 <_sbrk_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4d06      	ldr	r5, [pc, #24]	; (800598c <_sbrk_r+0x1c>)
 8005974:	2300      	movs	r3, #0
 8005976:	4604      	mov	r4, r0
 8005978:	4608      	mov	r0, r1
 800597a:	602b      	str	r3, [r5, #0]
 800597c:	f7fb fb42 	bl	8001004 <_sbrk>
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	d102      	bne.n	800598a <_sbrk_r+0x1a>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	b103      	cbz	r3, 800598a <_sbrk_r+0x1a>
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	bd38      	pop	{r3, r4, r5, pc}
 800598c:	20000a00 	.word	0x20000a00

08005990 <abort>:
 8005990:	b508      	push	{r3, lr}
 8005992:	2006      	movs	r0, #6
 8005994:	f000 fa34 	bl	8005e00 <raise>
 8005998:	2001      	movs	r0, #1
 800599a:	f7fb fabb 	bl	8000f14 <_exit>

0800599e <_realloc_r>:
 800599e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a2:	4680      	mov	r8, r0
 80059a4:	4614      	mov	r4, r2
 80059a6:	460e      	mov	r6, r1
 80059a8:	b921      	cbnz	r1, 80059b4 <_realloc_r+0x16>
 80059aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059ae:	4611      	mov	r1, r2
 80059b0:	f7ff bb90 	b.w	80050d4 <_malloc_r>
 80059b4:	b92a      	cbnz	r2, 80059c2 <_realloc_r+0x24>
 80059b6:	f7ff fb19 	bl	8004fec <_free_r>
 80059ba:	4625      	mov	r5, r4
 80059bc:	4628      	mov	r0, r5
 80059be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059c2:	f000 fa39 	bl	8005e38 <_malloc_usable_size_r>
 80059c6:	4284      	cmp	r4, r0
 80059c8:	4607      	mov	r7, r0
 80059ca:	d802      	bhi.n	80059d2 <_realloc_r+0x34>
 80059cc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059d0:	d812      	bhi.n	80059f8 <_realloc_r+0x5a>
 80059d2:	4621      	mov	r1, r4
 80059d4:	4640      	mov	r0, r8
 80059d6:	f7ff fb7d 	bl	80050d4 <_malloc_r>
 80059da:	4605      	mov	r5, r0
 80059dc:	2800      	cmp	r0, #0
 80059de:	d0ed      	beq.n	80059bc <_realloc_r+0x1e>
 80059e0:	42bc      	cmp	r4, r7
 80059e2:	4622      	mov	r2, r4
 80059e4:	4631      	mov	r1, r6
 80059e6:	bf28      	it	cs
 80059e8:	463a      	movcs	r2, r7
 80059ea:	f7ff fad2 	bl	8004f92 <memcpy>
 80059ee:	4631      	mov	r1, r6
 80059f0:	4640      	mov	r0, r8
 80059f2:	f7ff fafb 	bl	8004fec <_free_r>
 80059f6:	e7e1      	b.n	80059bc <_realloc_r+0x1e>
 80059f8:	4635      	mov	r5, r6
 80059fa:	e7df      	b.n	80059bc <_realloc_r+0x1e>

080059fc <__sfputc_r>:
 80059fc:	6893      	ldr	r3, [r2, #8]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	b410      	push	{r4}
 8005a04:	6093      	str	r3, [r2, #8]
 8005a06:	da08      	bge.n	8005a1a <__sfputc_r+0x1e>
 8005a08:	6994      	ldr	r4, [r2, #24]
 8005a0a:	42a3      	cmp	r3, r4
 8005a0c:	db01      	blt.n	8005a12 <__sfputc_r+0x16>
 8005a0e:	290a      	cmp	r1, #10
 8005a10:	d103      	bne.n	8005a1a <__sfputc_r+0x1e>
 8005a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a16:	f000 b935 	b.w	8005c84 <__swbuf_r>
 8005a1a:	6813      	ldr	r3, [r2, #0]
 8005a1c:	1c58      	adds	r0, r3, #1
 8005a1e:	6010      	str	r0, [r2, #0]
 8005a20:	7019      	strb	r1, [r3, #0]
 8005a22:	4608      	mov	r0, r1
 8005a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <__sfputs_r>:
 8005a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	460f      	mov	r7, r1
 8005a30:	4614      	mov	r4, r2
 8005a32:	18d5      	adds	r5, r2, r3
 8005a34:	42ac      	cmp	r4, r5
 8005a36:	d101      	bne.n	8005a3c <__sfputs_r+0x12>
 8005a38:	2000      	movs	r0, #0
 8005a3a:	e007      	b.n	8005a4c <__sfputs_r+0x22>
 8005a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a40:	463a      	mov	r2, r7
 8005a42:	4630      	mov	r0, r6
 8005a44:	f7ff ffda 	bl	80059fc <__sfputc_r>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d1f3      	bne.n	8005a34 <__sfputs_r+0xa>
 8005a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a50 <_vfiprintf_r>:
 8005a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	460d      	mov	r5, r1
 8005a56:	b09d      	sub	sp, #116	; 0x74
 8005a58:	4614      	mov	r4, r2
 8005a5a:	4698      	mov	r8, r3
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	b118      	cbz	r0, 8005a68 <_vfiprintf_r+0x18>
 8005a60:	6a03      	ldr	r3, [r0, #32]
 8005a62:	b90b      	cbnz	r3, 8005a68 <_vfiprintf_r+0x18>
 8005a64:	f7ff f978 	bl	8004d58 <__sinit>
 8005a68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a6a:	07d9      	lsls	r1, r3, #31
 8005a6c:	d405      	bmi.n	8005a7a <_vfiprintf_r+0x2a>
 8005a6e:	89ab      	ldrh	r3, [r5, #12]
 8005a70:	059a      	lsls	r2, r3, #22
 8005a72:	d402      	bmi.n	8005a7a <_vfiprintf_r+0x2a>
 8005a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a76:	f7ff fa82 	bl	8004f7e <__retarget_lock_acquire_recursive>
 8005a7a:	89ab      	ldrh	r3, [r5, #12]
 8005a7c:	071b      	lsls	r3, r3, #28
 8005a7e:	d501      	bpl.n	8005a84 <_vfiprintf_r+0x34>
 8005a80:	692b      	ldr	r3, [r5, #16]
 8005a82:	b99b      	cbnz	r3, 8005aac <_vfiprintf_r+0x5c>
 8005a84:	4629      	mov	r1, r5
 8005a86:	4630      	mov	r0, r6
 8005a88:	f000 f93a 	bl	8005d00 <__swsetup_r>
 8005a8c:	b170      	cbz	r0, 8005aac <_vfiprintf_r+0x5c>
 8005a8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a90:	07dc      	lsls	r4, r3, #31
 8005a92:	d504      	bpl.n	8005a9e <_vfiprintf_r+0x4e>
 8005a94:	f04f 30ff 	mov.w	r0, #4294967295
 8005a98:	b01d      	add	sp, #116	; 0x74
 8005a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9e:	89ab      	ldrh	r3, [r5, #12]
 8005aa0:	0598      	lsls	r0, r3, #22
 8005aa2:	d4f7      	bmi.n	8005a94 <_vfiprintf_r+0x44>
 8005aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005aa6:	f7ff fa6b 	bl	8004f80 <__retarget_lock_release_recursive>
 8005aaa:	e7f3      	b.n	8005a94 <_vfiprintf_r+0x44>
 8005aac:	2300      	movs	r3, #0
 8005aae:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab0:	2320      	movs	r3, #32
 8005ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ab6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aba:	2330      	movs	r3, #48	; 0x30
 8005abc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005c70 <_vfiprintf_r+0x220>
 8005ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ac4:	f04f 0901 	mov.w	r9, #1
 8005ac8:	4623      	mov	r3, r4
 8005aca:	469a      	mov	sl, r3
 8005acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ad0:	b10a      	cbz	r2, 8005ad6 <_vfiprintf_r+0x86>
 8005ad2:	2a25      	cmp	r2, #37	; 0x25
 8005ad4:	d1f9      	bne.n	8005aca <_vfiprintf_r+0x7a>
 8005ad6:	ebba 0b04 	subs.w	fp, sl, r4
 8005ada:	d00b      	beq.n	8005af4 <_vfiprintf_r+0xa4>
 8005adc:	465b      	mov	r3, fp
 8005ade:	4622      	mov	r2, r4
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	f7ff ffa1 	bl	8005a2a <__sfputs_r>
 8005ae8:	3001      	adds	r0, #1
 8005aea:	f000 80a9 	beq.w	8005c40 <_vfiprintf_r+0x1f0>
 8005aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005af0:	445a      	add	r2, fp
 8005af2:	9209      	str	r2, [sp, #36]	; 0x24
 8005af4:	f89a 3000 	ldrb.w	r3, [sl]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 80a1 	beq.w	8005c40 <_vfiprintf_r+0x1f0>
 8005afe:	2300      	movs	r3, #0
 8005b00:	f04f 32ff 	mov.w	r2, #4294967295
 8005b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b08:	f10a 0a01 	add.w	sl, sl, #1
 8005b0c:	9304      	str	r3, [sp, #16]
 8005b0e:	9307      	str	r3, [sp, #28]
 8005b10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b14:	931a      	str	r3, [sp, #104]	; 0x68
 8005b16:	4654      	mov	r4, sl
 8005b18:	2205      	movs	r2, #5
 8005b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b1e:	4854      	ldr	r0, [pc, #336]	; (8005c70 <_vfiprintf_r+0x220>)
 8005b20:	f7fa fb56 	bl	80001d0 <memchr>
 8005b24:	9a04      	ldr	r2, [sp, #16]
 8005b26:	b9d8      	cbnz	r0, 8005b60 <_vfiprintf_r+0x110>
 8005b28:	06d1      	lsls	r1, r2, #27
 8005b2a:	bf44      	itt	mi
 8005b2c:	2320      	movmi	r3, #32
 8005b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b32:	0713      	lsls	r3, r2, #28
 8005b34:	bf44      	itt	mi
 8005b36:	232b      	movmi	r3, #43	; 0x2b
 8005b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b40:	2b2a      	cmp	r3, #42	; 0x2a
 8005b42:	d015      	beq.n	8005b70 <_vfiprintf_r+0x120>
 8005b44:	9a07      	ldr	r2, [sp, #28]
 8005b46:	4654      	mov	r4, sl
 8005b48:	2000      	movs	r0, #0
 8005b4a:	f04f 0c0a 	mov.w	ip, #10
 8005b4e:	4621      	mov	r1, r4
 8005b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b54:	3b30      	subs	r3, #48	; 0x30
 8005b56:	2b09      	cmp	r3, #9
 8005b58:	d94d      	bls.n	8005bf6 <_vfiprintf_r+0x1a6>
 8005b5a:	b1b0      	cbz	r0, 8005b8a <_vfiprintf_r+0x13a>
 8005b5c:	9207      	str	r2, [sp, #28]
 8005b5e:	e014      	b.n	8005b8a <_vfiprintf_r+0x13a>
 8005b60:	eba0 0308 	sub.w	r3, r0, r8
 8005b64:	fa09 f303 	lsl.w	r3, r9, r3
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	9304      	str	r3, [sp, #16]
 8005b6c:	46a2      	mov	sl, r4
 8005b6e:	e7d2      	b.n	8005b16 <_vfiprintf_r+0xc6>
 8005b70:	9b03      	ldr	r3, [sp, #12]
 8005b72:	1d19      	adds	r1, r3, #4
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	9103      	str	r1, [sp, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	bfbb      	ittet	lt
 8005b7c:	425b      	neglt	r3, r3
 8005b7e:	f042 0202 	orrlt.w	r2, r2, #2
 8005b82:	9307      	strge	r3, [sp, #28]
 8005b84:	9307      	strlt	r3, [sp, #28]
 8005b86:	bfb8      	it	lt
 8005b88:	9204      	strlt	r2, [sp, #16]
 8005b8a:	7823      	ldrb	r3, [r4, #0]
 8005b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8005b8e:	d10c      	bne.n	8005baa <_vfiprintf_r+0x15a>
 8005b90:	7863      	ldrb	r3, [r4, #1]
 8005b92:	2b2a      	cmp	r3, #42	; 0x2a
 8005b94:	d134      	bne.n	8005c00 <_vfiprintf_r+0x1b0>
 8005b96:	9b03      	ldr	r3, [sp, #12]
 8005b98:	1d1a      	adds	r2, r3, #4
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	9203      	str	r2, [sp, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	bfb8      	it	lt
 8005ba2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ba6:	3402      	adds	r4, #2
 8005ba8:	9305      	str	r3, [sp, #20]
 8005baa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c80 <_vfiprintf_r+0x230>
 8005bae:	7821      	ldrb	r1, [r4, #0]
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	4650      	mov	r0, sl
 8005bb4:	f7fa fb0c 	bl	80001d0 <memchr>
 8005bb8:	b138      	cbz	r0, 8005bca <_vfiprintf_r+0x17a>
 8005bba:	9b04      	ldr	r3, [sp, #16]
 8005bbc:	eba0 000a 	sub.w	r0, r0, sl
 8005bc0:	2240      	movs	r2, #64	; 0x40
 8005bc2:	4082      	lsls	r2, r0
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	3401      	adds	r4, #1
 8005bc8:	9304      	str	r3, [sp, #16]
 8005bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bce:	4829      	ldr	r0, [pc, #164]	; (8005c74 <_vfiprintf_r+0x224>)
 8005bd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bd4:	2206      	movs	r2, #6
 8005bd6:	f7fa fafb 	bl	80001d0 <memchr>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d03f      	beq.n	8005c5e <_vfiprintf_r+0x20e>
 8005bde:	4b26      	ldr	r3, [pc, #152]	; (8005c78 <_vfiprintf_r+0x228>)
 8005be0:	bb1b      	cbnz	r3, 8005c2a <_vfiprintf_r+0x1da>
 8005be2:	9b03      	ldr	r3, [sp, #12]
 8005be4:	3307      	adds	r3, #7
 8005be6:	f023 0307 	bic.w	r3, r3, #7
 8005bea:	3308      	adds	r3, #8
 8005bec:	9303      	str	r3, [sp, #12]
 8005bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf0:	443b      	add	r3, r7
 8005bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8005bf4:	e768      	b.n	8005ac8 <_vfiprintf_r+0x78>
 8005bf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	2001      	movs	r0, #1
 8005bfe:	e7a6      	b.n	8005b4e <_vfiprintf_r+0xfe>
 8005c00:	2300      	movs	r3, #0
 8005c02:	3401      	adds	r4, #1
 8005c04:	9305      	str	r3, [sp, #20]
 8005c06:	4619      	mov	r1, r3
 8005c08:	f04f 0c0a 	mov.w	ip, #10
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c12:	3a30      	subs	r2, #48	; 0x30
 8005c14:	2a09      	cmp	r2, #9
 8005c16:	d903      	bls.n	8005c20 <_vfiprintf_r+0x1d0>
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0c6      	beq.n	8005baa <_vfiprintf_r+0x15a>
 8005c1c:	9105      	str	r1, [sp, #20]
 8005c1e:	e7c4      	b.n	8005baa <_vfiprintf_r+0x15a>
 8005c20:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c24:	4604      	mov	r4, r0
 8005c26:	2301      	movs	r3, #1
 8005c28:	e7f0      	b.n	8005c0c <_vfiprintf_r+0x1bc>
 8005c2a:	ab03      	add	r3, sp, #12
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	462a      	mov	r2, r5
 8005c30:	4b12      	ldr	r3, [pc, #72]	; (8005c7c <_vfiprintf_r+0x22c>)
 8005c32:	a904      	add	r1, sp, #16
 8005c34:	4630      	mov	r0, r6
 8005c36:	f3af 8000 	nop.w
 8005c3a:	4607      	mov	r7, r0
 8005c3c:	1c78      	adds	r0, r7, #1
 8005c3e:	d1d6      	bne.n	8005bee <_vfiprintf_r+0x19e>
 8005c40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c42:	07d9      	lsls	r1, r3, #31
 8005c44:	d405      	bmi.n	8005c52 <_vfiprintf_r+0x202>
 8005c46:	89ab      	ldrh	r3, [r5, #12]
 8005c48:	059a      	lsls	r2, r3, #22
 8005c4a:	d402      	bmi.n	8005c52 <_vfiprintf_r+0x202>
 8005c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c4e:	f7ff f997 	bl	8004f80 <__retarget_lock_release_recursive>
 8005c52:	89ab      	ldrh	r3, [r5, #12]
 8005c54:	065b      	lsls	r3, r3, #25
 8005c56:	f53f af1d 	bmi.w	8005a94 <_vfiprintf_r+0x44>
 8005c5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c5c:	e71c      	b.n	8005a98 <_vfiprintf_r+0x48>
 8005c5e:	ab03      	add	r3, sp, #12
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	462a      	mov	r2, r5
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <_vfiprintf_r+0x22c>)
 8005c66:	a904      	add	r1, sp, #16
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f7ff fc85 	bl	8005578 <_printf_i>
 8005c6e:	e7e4      	b.n	8005c3a <_vfiprintf_r+0x1ea>
 8005c70:	0800658f 	.word	0x0800658f
 8005c74:	08006599 	.word	0x08006599
 8005c78:	00000000 	.word	0x00000000
 8005c7c:	08005a2b 	.word	0x08005a2b
 8005c80:	08006595 	.word	0x08006595

08005c84 <__swbuf_r>:
 8005c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c86:	460e      	mov	r6, r1
 8005c88:	4614      	mov	r4, r2
 8005c8a:	4605      	mov	r5, r0
 8005c8c:	b118      	cbz	r0, 8005c96 <__swbuf_r+0x12>
 8005c8e:	6a03      	ldr	r3, [r0, #32]
 8005c90:	b90b      	cbnz	r3, 8005c96 <__swbuf_r+0x12>
 8005c92:	f7ff f861 	bl	8004d58 <__sinit>
 8005c96:	69a3      	ldr	r3, [r4, #24]
 8005c98:	60a3      	str	r3, [r4, #8]
 8005c9a:	89a3      	ldrh	r3, [r4, #12]
 8005c9c:	071a      	lsls	r2, r3, #28
 8005c9e:	d525      	bpl.n	8005cec <__swbuf_r+0x68>
 8005ca0:	6923      	ldr	r3, [r4, #16]
 8005ca2:	b31b      	cbz	r3, 8005cec <__swbuf_r+0x68>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	6922      	ldr	r2, [r4, #16]
 8005ca8:	1a98      	subs	r0, r3, r2
 8005caa:	6963      	ldr	r3, [r4, #20]
 8005cac:	b2f6      	uxtb	r6, r6
 8005cae:	4283      	cmp	r3, r0
 8005cb0:	4637      	mov	r7, r6
 8005cb2:	dc04      	bgt.n	8005cbe <__swbuf_r+0x3a>
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f7ff fe06 	bl	80058c8 <_fflush_r>
 8005cbc:	b9e0      	cbnz	r0, 8005cf8 <__swbuf_r+0x74>
 8005cbe:	68a3      	ldr	r3, [r4, #8]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	60a3      	str	r3, [r4, #8]
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	6022      	str	r2, [r4, #0]
 8005cca:	701e      	strb	r6, [r3, #0]
 8005ccc:	6962      	ldr	r2, [r4, #20]
 8005cce:	1c43      	adds	r3, r0, #1
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d004      	beq.n	8005cde <__swbuf_r+0x5a>
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	07db      	lsls	r3, r3, #31
 8005cd8:	d506      	bpl.n	8005ce8 <__swbuf_r+0x64>
 8005cda:	2e0a      	cmp	r6, #10
 8005cdc:	d104      	bne.n	8005ce8 <__swbuf_r+0x64>
 8005cde:	4621      	mov	r1, r4
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	f7ff fdf1 	bl	80058c8 <_fflush_r>
 8005ce6:	b938      	cbnz	r0, 8005cf8 <__swbuf_r+0x74>
 8005ce8:	4638      	mov	r0, r7
 8005cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cec:	4621      	mov	r1, r4
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f000 f806 	bl	8005d00 <__swsetup_r>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d0d5      	beq.n	8005ca4 <__swbuf_r+0x20>
 8005cf8:	f04f 37ff 	mov.w	r7, #4294967295
 8005cfc:	e7f4      	b.n	8005ce8 <__swbuf_r+0x64>
	...

08005d00 <__swsetup_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <__swsetup_r+0xac>)
 8005d04:	4605      	mov	r5, r0
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	460c      	mov	r4, r1
 8005d0a:	b118      	cbz	r0, 8005d14 <__swsetup_r+0x14>
 8005d0c:	6a03      	ldr	r3, [r0, #32]
 8005d0e:	b90b      	cbnz	r3, 8005d14 <__swsetup_r+0x14>
 8005d10:	f7ff f822 	bl	8004d58 <__sinit>
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d1a:	0718      	lsls	r0, r3, #28
 8005d1c:	d422      	bmi.n	8005d64 <__swsetup_r+0x64>
 8005d1e:	06d9      	lsls	r1, r3, #27
 8005d20:	d407      	bmi.n	8005d32 <__swsetup_r+0x32>
 8005d22:	2309      	movs	r3, #9
 8005d24:	602b      	str	r3, [r5, #0]
 8005d26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d2a:	81a3      	strh	r3, [r4, #12]
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	e034      	b.n	8005d9c <__swsetup_r+0x9c>
 8005d32:	0758      	lsls	r0, r3, #29
 8005d34:	d512      	bpl.n	8005d5c <__swsetup_r+0x5c>
 8005d36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d38:	b141      	cbz	r1, 8005d4c <__swsetup_r+0x4c>
 8005d3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d3e:	4299      	cmp	r1, r3
 8005d40:	d002      	beq.n	8005d48 <__swsetup_r+0x48>
 8005d42:	4628      	mov	r0, r5
 8005d44:	f7ff f952 	bl	8004fec <_free_r>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6363      	str	r3, [r4, #52]	; 0x34
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d52:	81a3      	strh	r3, [r4, #12]
 8005d54:	2300      	movs	r3, #0
 8005d56:	6063      	str	r3, [r4, #4]
 8005d58:	6923      	ldr	r3, [r4, #16]
 8005d5a:	6023      	str	r3, [r4, #0]
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	f043 0308 	orr.w	r3, r3, #8
 8005d62:	81a3      	strh	r3, [r4, #12]
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	b94b      	cbnz	r3, 8005d7c <__swsetup_r+0x7c>
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d72:	d003      	beq.n	8005d7c <__swsetup_r+0x7c>
 8005d74:	4621      	mov	r1, r4
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 f88c 	bl	8005e94 <__smakebuf_r>
 8005d7c:	89a0      	ldrh	r0, [r4, #12]
 8005d7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d82:	f010 0301 	ands.w	r3, r0, #1
 8005d86:	d00a      	beq.n	8005d9e <__swsetup_r+0x9e>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60a3      	str	r3, [r4, #8]
 8005d8c:	6963      	ldr	r3, [r4, #20]
 8005d8e:	425b      	negs	r3, r3
 8005d90:	61a3      	str	r3, [r4, #24]
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	b943      	cbnz	r3, 8005da8 <__swsetup_r+0xa8>
 8005d96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d9a:	d1c4      	bne.n	8005d26 <__swsetup_r+0x26>
 8005d9c:	bd38      	pop	{r3, r4, r5, pc}
 8005d9e:	0781      	lsls	r1, r0, #30
 8005da0:	bf58      	it	pl
 8005da2:	6963      	ldrpl	r3, [r4, #20]
 8005da4:	60a3      	str	r3, [r4, #8]
 8005da6:	e7f4      	b.n	8005d92 <__swsetup_r+0x92>
 8005da8:	2000      	movs	r0, #0
 8005daa:	e7f7      	b.n	8005d9c <__swsetup_r+0x9c>
 8005dac:	200002f4 	.word	0x200002f4

08005db0 <_raise_r>:
 8005db0:	291f      	cmp	r1, #31
 8005db2:	b538      	push	{r3, r4, r5, lr}
 8005db4:	4604      	mov	r4, r0
 8005db6:	460d      	mov	r5, r1
 8005db8:	d904      	bls.n	8005dc4 <_raise_r+0x14>
 8005dba:	2316      	movs	r3, #22
 8005dbc:	6003      	str	r3, [r0, #0]
 8005dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc2:	bd38      	pop	{r3, r4, r5, pc}
 8005dc4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005dc6:	b112      	cbz	r2, 8005dce <_raise_r+0x1e>
 8005dc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005dcc:	b94b      	cbnz	r3, 8005de2 <_raise_r+0x32>
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f000 f830 	bl	8005e34 <_getpid_r>
 8005dd4:	462a      	mov	r2, r5
 8005dd6:	4601      	mov	r1, r0
 8005dd8:	4620      	mov	r0, r4
 8005dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dde:	f000 b817 	b.w	8005e10 <_kill_r>
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d00a      	beq.n	8005dfc <_raise_r+0x4c>
 8005de6:	1c59      	adds	r1, r3, #1
 8005de8:	d103      	bne.n	8005df2 <_raise_r+0x42>
 8005dea:	2316      	movs	r3, #22
 8005dec:	6003      	str	r3, [r0, #0]
 8005dee:	2001      	movs	r0, #1
 8005df0:	e7e7      	b.n	8005dc2 <_raise_r+0x12>
 8005df2:	2400      	movs	r4, #0
 8005df4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005df8:	4628      	mov	r0, r5
 8005dfa:	4798      	blx	r3
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	e7e0      	b.n	8005dc2 <_raise_r+0x12>

08005e00 <raise>:
 8005e00:	4b02      	ldr	r3, [pc, #8]	; (8005e0c <raise+0xc>)
 8005e02:	4601      	mov	r1, r0
 8005e04:	6818      	ldr	r0, [r3, #0]
 8005e06:	f7ff bfd3 	b.w	8005db0 <_raise_r>
 8005e0a:	bf00      	nop
 8005e0c:	200002f4 	.word	0x200002f4

08005e10 <_kill_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	4d07      	ldr	r5, [pc, #28]	; (8005e30 <_kill_r+0x20>)
 8005e14:	2300      	movs	r3, #0
 8005e16:	4604      	mov	r4, r0
 8005e18:	4608      	mov	r0, r1
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	602b      	str	r3, [r5, #0]
 8005e1e:	f7fb f869 	bl	8000ef4 <_kill>
 8005e22:	1c43      	adds	r3, r0, #1
 8005e24:	d102      	bne.n	8005e2c <_kill_r+0x1c>
 8005e26:	682b      	ldr	r3, [r5, #0]
 8005e28:	b103      	cbz	r3, 8005e2c <_kill_r+0x1c>
 8005e2a:	6023      	str	r3, [r4, #0]
 8005e2c:	bd38      	pop	{r3, r4, r5, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000a00 	.word	0x20000a00

08005e34 <_getpid_r>:
 8005e34:	f7fb b856 	b.w	8000ee4 <_getpid>

08005e38 <_malloc_usable_size_r>:
 8005e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e3c:	1f18      	subs	r0, r3, #4
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	bfbc      	itt	lt
 8005e42:	580b      	ldrlt	r3, [r1, r0]
 8005e44:	18c0      	addlt	r0, r0, r3
 8005e46:	4770      	bx	lr

08005e48 <__swhatbuf_r>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e50:	2900      	cmp	r1, #0
 8005e52:	b096      	sub	sp, #88	; 0x58
 8005e54:	4615      	mov	r5, r2
 8005e56:	461e      	mov	r6, r3
 8005e58:	da0d      	bge.n	8005e76 <__swhatbuf_r+0x2e>
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e60:	f04f 0100 	mov.w	r1, #0
 8005e64:	bf0c      	ite	eq
 8005e66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005e6a:	2340      	movne	r3, #64	; 0x40
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	6031      	str	r1, [r6, #0]
 8005e70:	602b      	str	r3, [r5, #0]
 8005e72:	b016      	add	sp, #88	; 0x58
 8005e74:	bd70      	pop	{r4, r5, r6, pc}
 8005e76:	466a      	mov	r2, sp
 8005e78:	f000 f848 	bl	8005f0c <_fstat_r>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	dbec      	blt.n	8005e5a <__swhatbuf_r+0x12>
 8005e80:	9901      	ldr	r1, [sp, #4]
 8005e82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e8a:	4259      	negs	r1, r3
 8005e8c:	4159      	adcs	r1, r3
 8005e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e92:	e7eb      	b.n	8005e6c <__swhatbuf_r+0x24>

08005e94 <__smakebuf_r>:
 8005e94:	898b      	ldrh	r3, [r1, #12]
 8005e96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e98:	079d      	lsls	r5, r3, #30
 8005e9a:	4606      	mov	r6, r0
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	d507      	bpl.n	8005eb0 <__smakebuf_r+0x1c>
 8005ea0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	6123      	str	r3, [r4, #16]
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	6163      	str	r3, [r4, #20]
 8005eac:	b002      	add	sp, #8
 8005eae:	bd70      	pop	{r4, r5, r6, pc}
 8005eb0:	ab01      	add	r3, sp, #4
 8005eb2:	466a      	mov	r2, sp
 8005eb4:	f7ff ffc8 	bl	8005e48 <__swhatbuf_r>
 8005eb8:	9900      	ldr	r1, [sp, #0]
 8005eba:	4605      	mov	r5, r0
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	f7ff f909 	bl	80050d4 <_malloc_r>
 8005ec2:	b948      	cbnz	r0, 8005ed8 <__smakebuf_r+0x44>
 8005ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ec8:	059a      	lsls	r2, r3, #22
 8005eca:	d4ef      	bmi.n	8005eac <__smakebuf_r+0x18>
 8005ecc:	f023 0303 	bic.w	r3, r3, #3
 8005ed0:	f043 0302 	orr.w	r3, r3, #2
 8005ed4:	81a3      	strh	r3, [r4, #12]
 8005ed6:	e7e3      	b.n	8005ea0 <__smakebuf_r+0xc>
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	6020      	str	r0, [r4, #0]
 8005edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee0:	81a3      	strh	r3, [r4, #12]
 8005ee2:	9b00      	ldr	r3, [sp, #0]
 8005ee4:	6163      	str	r3, [r4, #20]
 8005ee6:	9b01      	ldr	r3, [sp, #4]
 8005ee8:	6120      	str	r0, [r4, #16]
 8005eea:	b15b      	cbz	r3, 8005f04 <__smakebuf_r+0x70>
 8005eec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	f000 f81d 	bl	8005f30 <_isatty_r>
 8005ef6:	b128      	cbz	r0, 8005f04 <__smakebuf_r+0x70>
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	f023 0303 	bic.w	r3, r3, #3
 8005efe:	f043 0301 	orr.w	r3, r3, #1
 8005f02:	81a3      	strh	r3, [r4, #12]
 8005f04:	89a3      	ldrh	r3, [r4, #12]
 8005f06:	431d      	orrs	r5, r3
 8005f08:	81a5      	strh	r5, [r4, #12]
 8005f0a:	e7cf      	b.n	8005eac <__smakebuf_r+0x18>

08005f0c <_fstat_r>:
 8005f0c:	b538      	push	{r3, r4, r5, lr}
 8005f0e:	4d07      	ldr	r5, [pc, #28]	; (8005f2c <_fstat_r+0x20>)
 8005f10:	2300      	movs	r3, #0
 8005f12:	4604      	mov	r4, r0
 8005f14:	4608      	mov	r0, r1
 8005f16:	4611      	mov	r1, r2
 8005f18:	602b      	str	r3, [r5, #0]
 8005f1a:	f7fb f84a 	bl	8000fb2 <_fstat>
 8005f1e:	1c43      	adds	r3, r0, #1
 8005f20:	d102      	bne.n	8005f28 <_fstat_r+0x1c>
 8005f22:	682b      	ldr	r3, [r5, #0]
 8005f24:	b103      	cbz	r3, 8005f28 <_fstat_r+0x1c>
 8005f26:	6023      	str	r3, [r4, #0]
 8005f28:	bd38      	pop	{r3, r4, r5, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000a00 	.word	0x20000a00

08005f30 <_isatty_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4d06      	ldr	r5, [pc, #24]	; (8005f4c <_isatty_r+0x1c>)
 8005f34:	2300      	movs	r3, #0
 8005f36:	4604      	mov	r4, r0
 8005f38:	4608      	mov	r0, r1
 8005f3a:	602b      	str	r3, [r5, #0]
 8005f3c:	f7fb f849 	bl	8000fd2 <_isatty>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d102      	bne.n	8005f4a <_isatty_r+0x1a>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	b103      	cbz	r3, 8005f4a <_isatty_r+0x1a>
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
 8005f4c:	20000a00 	.word	0x20000a00

08005f50 <_init>:
 8005f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f52:	bf00      	nop
 8005f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f56:	bc08      	pop	{r3}
 8005f58:	469e      	mov	lr, r3
 8005f5a:	4770      	bx	lr

08005f5c <_fini>:
 8005f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5e:	bf00      	nop
 8005f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f62:	bc08      	pop	{r3}
 8005f64:	469e      	mov	lr, r3
 8005f66:	4770      	bx	lr
