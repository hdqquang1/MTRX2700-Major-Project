
Major Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  08005fd8  08005fd8  00015fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067fc  080067fc  00020114  2**0
                  CONTENTS
  4 .ARM          00000000  080067fc  080067fc  00020114  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067fc  080067fc  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067fc  080067fc  000167fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006800  08006800  00016800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000114  20000000  08006804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020114  2**0
                  CONTENTS
 10 .bss          000008a8  20000114  20000114  00020114  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009bc  200009bc  00020114  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010bec  00000000  00000000  00020187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003032  00000000  00000000  00030d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ef8  00000000  00000000  00033da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b49  00000000  00000000  00034ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d527  00000000  00000000  000357e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015300  00000000  00000000  00072d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7b5c  00000000  00000000  00088010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004704  00000000  00000000  0016fb6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  00174270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000114 	.word	0x20000114
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fc0 	.word	0x08005fc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000118 	.word	0x20000118
 80001cc:	08005fc0 	.word	0x08005fc0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <randomWord>:
#include <stdlib.h>
#include <time.h>

#define NUM_WORDS 100 // Total number of words in the array

char* randomWord() {
 8000270:	b580      	push	{r7, lr}
 8000272:	b0ec      	sub	sp, #432	; 0x1b0
 8000274:	af00      	add	r7, sp, #0
    static char* words[NUM_WORDS]; // Static array to store words
    static int usedIndices[NUM_WORDS] = {0}; // Static array to track used indices
    static int wordsCount = 0; // Count of words added to the array

    // Check if all words have been used, reset if needed
    if (wordsCount == NUM_WORDS) {
 8000276:	4b29      	ldr	r3, [pc, #164]	; (800031c <randomWord+0xac>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	2b64      	cmp	r3, #100	; 0x64
 800027c:	d108      	bne.n	8000290 <randomWord+0x20>
        wordsCount = 0;
 800027e:	4b27      	ldr	r3, [pc, #156]	; (800031c <randomWord+0xac>)
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
        memset(usedIndices, 0, sizeof(usedIndices));
 8000284:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000288:	2100      	movs	r1, #0
 800028a:	4825      	ldr	r0, [pc, #148]	; (8000320 <randomWord+0xb0>)
 800028c:	f004 fe01 	bl	8004e92 <memset>
    }

	char *allWords[] = {
 8000290:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000294:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000298:	4a22      	ldr	r2, [pc, #136]	; (8000324 <randomWord+0xb4>)
 800029a:	4618      	mov	r0, r3
 800029c:	4611      	mov	r1, r2
 800029e:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80002a2:	461a      	mov	r2, r3
 80002a4:	f004 fea5 	bl	8004ff2 <memcpy>
	        "Drinking", "Typing", "Eating", "Having a snowball fight", "Playing the guitar",
	        "Surfing", "Yawning", "Playing golf", "Praying", "Brushing teeth",
	        "Showering", "Meditating", "Singing"
	};

    int numWords = sizeof(allWords) / sizeof(allWords[0]); // Calculate the number of words in the array
 80002a8:	2369      	movs	r3, #105	; 0x69
 80002aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

    int randomIndex;
    do {
        randomIndex = rand() % numWords; // Generate a random index within the bounds of the array
 80002ae:	f004 fc8d 	bl	8004bcc <rand>
 80002b2:	4603      	mov	r3, r0
 80002b4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80002b8:	fb93 f2f2 	sdiv	r2, r3, r2
 80002bc:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 80002c0:	fb01 f202 	mul.w	r2, r1, r2
 80002c4:	1a9b      	subs	r3, r3, r2
 80002c6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    } while (usedIndices[randomIndex]); // Check if the word at this index has been used
 80002ca:	4a15      	ldr	r2, [pc, #84]	; (8000320 <randomWord+0xb0>)
 80002cc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80002d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d1ea      	bne.n	80002ae <randomWord+0x3e>

    usedIndices[randomIndex] = 1; // Mark this index as used
 80002d8:	4a11      	ldr	r2, [pc, #68]	; (8000320 <randomWord+0xb0>)
 80002da:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80002de:	2101      	movs	r1, #1
 80002e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    words[wordsCount++] = allWords[randomIndex]; // Add the word to the array
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <randomWord+0xac>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	1c5a      	adds	r2, r3, #1
 80002ea:	490c      	ldr	r1, [pc, #48]	; (800031c <randomWord+0xac>)
 80002ec:	600a      	str	r2, [r1, #0]
 80002ee:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80002f2:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 80002f6:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 80002fa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80002fe:	490a      	ldr	r1, [pc, #40]	; (8000328 <randomWord+0xb8>)
 8000300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return words[wordsCount - 1]; // Return the last added word
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <randomWord+0xac>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3b01      	subs	r3, #1
 800030a:	4a07      	ldr	r2, [pc, #28]	; (8000328 <randomWord+0xb8>)
 800030c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000310:	4618      	mov	r0, r3
 8000312:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000130 	.word	0x20000130
 8000320:	20000134 	.word	0x20000134
 8000324:	080063dc 	.word	0x080063dc
 8000328:	200002c4 	.word	0x200002c4

0800032c <initialise_board>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_USB_PCD_Init(void);

void initialise_board() {
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000332:	f000 ffcb 	bl	80012cc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000336:	f000 f831 	bl	800039c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800033a:	f000 f931 	bl	80005a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800033e:	f000 f88f 	bl	8000460 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000342:	f000 f8cd 	bl	80004e0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000346:	f000 f909 	bl	800055c <MX_USB_PCD_Init>
  
  BSP_GYRO_Init();
 800034a:	f003 fe0d 	bl	8003f68 <BSP_GYRO_Init>

  RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 800034e:	4b10      	ldr	r3, [pc, #64]	; (8000390 <initialise_board+0x64>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a0f      	ldr	r2, [pc, #60]	; (8000390 <initialise_board+0x64>)
 8000354:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000358:	6153      	str	r3, [r2, #20]

  RCC->APB1ENR |=  RCC_APB1ENR_TIM2EN;
 800035a:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <initialise_board+0x64>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	4a0c      	ldr	r2, [pc, #48]	; (8000390 <initialise_board+0x64>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	61d3      	str	r3, [r2, #28]
  RCC->APB1ENR |=  RCC_APB1ENR_TIM3EN;
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <initialise_board+0x64>)
 8000368:	69db      	ldr	r3, [r3, #28]
 800036a:	4a09      	ldr	r2, [pc, #36]	; (8000390 <initialise_board+0x64>)
 800036c:	f043 0302 	orr.w	r3, r3, #2
 8000370:	61d3      	str	r3, [r2, #28]

  SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000372:	2200      	movs	r2, #0
 8000374:	4907      	ldr	r1, [pc, #28]	; (8000394 <initialise_board+0x68>)
 8000376:	2004      	movs	r0, #4
 8000378:	f000 fbdc 	bl	8000b34 <SerialInitialise>

  uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <initialise_board+0x6c>)
 800037e:	607b      	str	r3, [r7, #4]
  *led_output_registers = 0x5555;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	f245 5255 	movw	r2, #21845	; 0x5555
 8000386:	801a      	strh	r2, [r3, #0]
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000
 8000394:	20000000 	.word	0x20000000
 8000398:	48001002 	.word	0x48001002

0800039c <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b09e      	sub	sp, #120	; 0x78
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003a6:	2228      	movs	r2, #40	; 0x28
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f004 fd71 	bl	8004e92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c0:	463b      	mov	r3, r7
 80003c2:	223c      	movs	r2, #60	; 0x3c
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f004 fd63 	bl	8004e92 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80003cc:	2303      	movs	r3, #3
 80003ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003da:	2301      	movs	r3, #1
 80003dc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003de:	2310      	movs	r3, #16
 80003e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e2:	2302      	movs	r3, #2
 80003e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ea:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003f0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 fd3e 	bl	8001e78 <HAL_RCC_OscConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000402:	f000 f94b 	bl	800069c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000406:	230f      	movs	r3, #15
 8000408:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040a:	2302      	movs	r3, #2
 800040c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000416:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800041c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000420:	2101      	movs	r1, #1
 8000422:	4618      	mov	r0, r3
 8000424:	f002 fd66 	bl	8002ef4 <HAL_RCC_ClockConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800042e:	f000 f935 	bl	800069c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <SystemClock_Config+0xc0>)
 8000434:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800043a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800043e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000440:	463b      	mov	r3, r7
 8000442:	4618      	mov	r0, r3
 8000444:	f002 ff3c 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800044e:	f000 f925 	bl	800069c <Error_Handler>
  }
}
 8000452:	bf00      	nop
 8000454:	3778      	adds	r7, #120	; 0x78
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	00020020 	.word	0x00020020

08000460 <MX_I2C1_Init>:

// I2C1 Initialization Function
static void MX_I2C1_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <MX_I2C1_Init+0x74>)
 8000466:	4a1c      	ldr	r2, [pc, #112]	; (80004d8 <MX_I2C1_Init+0x78>)
 8000468:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800046a:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <MX_I2C1_Init+0x74>)
 800046c:	4a1b      	ldr	r2, [pc, #108]	; (80004dc <MX_I2C1_Init+0x7c>)
 800046e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000470:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <MX_I2C1_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000476:	4b17      	ldr	r3, [pc, #92]	; (80004d4 <MX_I2C1_Init+0x74>)
 8000478:	2201      	movs	r2, #1
 800047a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <MX_I2C1_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000482:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <MX_I2C1_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <MX_I2C1_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <MX_I2C1_Init+0x74>)
 8000490:	2200      	movs	r2, #0
 8000492:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <MX_I2C1_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800049a:	480e      	ldr	r0, [pc, #56]	; (80004d4 <MX_I2C1_Init+0x74>)
 800049c:	f001 faf4 	bl	8001a88 <HAL_I2C_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004a6:	f000 f8f9 	bl	800069c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004aa:	2100      	movs	r1, #0
 80004ac:	4809      	ldr	r0, [pc, #36]	; (80004d4 <MX_I2C1_Init+0x74>)
 80004ae:	f001 fb7a 	bl	8001ba6 <HAL_I2CEx_ConfigAnalogFilter>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004b8:	f000 f8f0 	bl	800069c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004bc:	2100      	movs	r1, #0
 80004be:	4805      	ldr	r0, [pc, #20]	; (80004d4 <MX_I2C1_Init+0x74>)
 80004c0:	f001 fbbc 	bl	8001c3c <HAL_I2CEx_ConfigDigitalFilter>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004ca:	f000 f8e7 	bl	800069c <Error_Handler>
  }
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000454 	.word	0x20000454
 80004d8:	40005400 	.word	0x40005400
 80004dc:	2000090e 	.word	0x2000090e

080004e0 <MX_SPI1_Init>:

// SPI1 Initialization Function
static void MX_SPI1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <MX_SPI1_Init+0x74>)
 80004e6:	4a1c      	ldr	r2, [pc, #112]	; (8000558 <MX_SPI1_Init+0x78>)
 80004e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <MX_SPI1_Init+0x74>)
 80004ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004f2:	4b18      	ldr	r3, [pc, #96]	; (8000554 <MX_SPI1_Init+0x74>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004f8:	4b16      	ldr	r3, [pc, #88]	; (8000554 <MX_SPI1_Init+0x74>)
 80004fa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80004fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <MX_SPI1_Init+0x74>)
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000506:	4b13      	ldr	r3, [pc, #76]	; (8000554 <MX_SPI1_Init+0x74>)
 8000508:	2200      	movs	r2, #0
 800050a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <MX_SPI1_Init+0x74>)
 800050e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000512:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <MX_SPI1_Init+0x74>)
 8000516:	2208      	movs	r2, #8
 8000518:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <MX_SPI1_Init+0x74>)
 800051c:	2200      	movs	r2, #0
 800051e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <MX_SPI1_Init+0x74>)
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <MX_SPI1_Init+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_SPI1_Init+0x74>)
 800052e:	2207      	movs	r2, #7
 8000530:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <MX_SPI1_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_SPI1_Init+0x74>)
 800053a:	2208      	movs	r2, #8
 800053c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <MX_SPI1_Init+0x74>)
 8000540:	f003 f86e 	bl	8003620 <HAL_SPI_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800054a:	f000 f8a7 	bl	800069c <Error_Handler>
  }
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200004a8 	.word	0x200004a8
 8000558:	40013000 	.word	0x40013000

0800055c <MX_USB_PCD_Init>:

// USB Initialization Function
static void MX_USB_PCD_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  hpcd_USB_FS.Instance = USB;
 8000560:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <MX_USB_PCD_Init+0x3c>)
 8000562:	4a0e      	ldr	r2, [pc, #56]	; (800059c <MX_USB_PCD_Init+0x40>)
 8000564:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_USB_PCD_Init+0x3c>)
 8000568:	2208      	movs	r2, #8
 800056a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <MX_USB_PCD_Init+0x3c>)
 800056e:	2202      	movs	r2, #2
 8000570:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_USB_PCD_Init+0x3c>)
 8000574:	2202      	movs	r2, #2
 8000576:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <MX_USB_PCD_Init+0x3c>)
 800057a:	2200      	movs	r2, #0
 800057c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_USB_PCD_Init+0x3c>)
 8000580:	2200      	movs	r2, #0
 8000582:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000584:	4804      	ldr	r0, [pc, #16]	; (8000598 <MX_USB_PCD_Init+0x3c>)
 8000586:	f001 fba5 	bl	8001cd4 <HAL_PCD_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000590:	f000 f884 	bl	800069c <Error_Handler>
  }
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	2000050c 	.word	0x2000050c
 800059c:	40005c00 	.word	0x40005c00

080005a0 <MX_GPIO_Init>:

// GPIO Initialization Function
static void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005b6:	4b37      	ldr	r3, [pc, #220]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a36      	ldr	r2, [pc, #216]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b34      	ldr	r3, [pc, #208]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	4b31      	ldr	r3, [pc, #196]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a30      	ldr	r2, [pc, #192]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e6:	4b2b      	ldr	r3, [pc, #172]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a2a      	ldr	r2, [pc, #168]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b28      	ldr	r3, [pc, #160]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b25      	ldr	r3, [pc, #148]	; (8000694 <MX_GPIO_Init+0xf4>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a24      	ldr	r2, [pc, #144]	; (8000694 <MX_GPIO_Init+0xf4>)
 8000604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b22      	ldr	r3, [pc, #136]	; (8000694 <MX_GPIO_Init+0xf4>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_GPIO_Init+0xf4>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a1e      	ldr	r2, [pc, #120]	; (8000694 <MX_GPIO_Init+0xf4>)
 800061c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_GPIO_Init+0xf4>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800062e:	2200      	movs	r2, #0
 8000630:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000634:	4818      	ldr	r0, [pc, #96]	; (8000698 <MX_GPIO_Init+0xf8>)
 8000636:	f001 fa0f 	bl	8001a58 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800063a:	2337      	movs	r3, #55	; 0x37
 800063c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800063e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	4812      	ldr	r0, [pc, #72]	; (8000698 <MX_GPIO_Init+0xf8>)
 8000650:	f000 ffac 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000654:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000658:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	480a      	ldr	r0, [pc, #40]	; (8000698 <MX_GPIO_Init+0xf8>)
 800066e:	f000 ff9d 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000672:	2301      	movs	r3, #1
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000688:	f000 ff90 	bl	80015ac <HAL_GPIO_Init>
}
 800068c:	bf00      	nop
 800068e:	3728      	adds	r7, #40	; 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40021000 	.word	0x40021000
 8000698:	48001000 	.word	0x48001000

0800069c <Error_Handler>:

// This function is executed in case of error occurrence.
void Error_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <Error_Handler+0x8>
	...

080006a8 <flash_leds>:
	*led_output_registers = 0x5555;
}


// Function to flash LEDs for 1 second
void flash_leds() {
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
    // Turn on LEDs
    GPIOE->ODR = 0xFFFF;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <flash_leds+0x34>)
 80006b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006b4:	615a      	str	r2, [r3, #20]

    // Delay for 1 second (adjust delay according to system clock)
    for (volatile int i = 0; i < 2000000; i++);
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	e002      	b.n	80006c2 <flash_leds+0x1a>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	3301      	adds	r3, #1
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <flash_leds+0x38>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	ddf8      	ble.n	80006bc <flash_leds+0x14>

    // Turn off LEDs
    GPIOE->ODR = 0x0000;
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <flash_leds+0x34>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	48001000 	.word	0x48001000
 80006e0:	001e847f 	.word	0x001e847f

080006e4 <set_timesUp>:
#include "headsUp.h"
/* USER CODE END Includes */

uint8_t timesUp = 0;

void set_timesUp(){
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
    if (timesUp == 0) {
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <set_timesUp+0x24>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d103      	bne.n	80006f8 <set_timesUp+0x14>
        timesUp = 1;
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <set_timesUp+0x24>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
    }
    else {
        timesUp = 0;
    }
}
 80006f6:	e002      	b.n	80006fe <set_timesUp+0x1a>
        timesUp = 0;
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <set_timesUp+0x24>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	200007f8 	.word	0x200007f8

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b5b0      	push	{r4, r5, r7, lr}
 800070e:	b0a2      	sub	sp, #136	; 0x88
 8000710:	af00      	add	r7, sp, #0
	initialise_board();
 8000712:	f7ff fe0b 	bl	800032c <initialise_board>
	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000716:	2200      	movs	r2, #0
 8000718:	49be      	ldr	r1, [pc, #760]	; (8000a14 <main+0x308>)
 800071a:	2004      	movs	r0, #4
 800071c:	f000 fa0a 	bl	8000b34 <SerialInitialise>
	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000720:	4bbd      	ldr	r3, [pc, #756]	; (8000a18 <main+0x30c>)
 8000722:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000726:	461d      	mov	r5, r3
 8000728:	6828      	ldr	r0, [r5, #0]
 800072a:	6869      	ldr	r1, [r5, #4]
 800072c:	68aa      	ldr	r2, [r5, #8]
 800072e:	68eb      	ldr	r3, [r5, #12]
 8000730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000732:	6928      	ldr	r0, [r5, #16]
 8000734:	6020      	str	r0, [r4, #0]
 8000736:	7d2b      	ldrb	r3, [r5, #20]
 8000738:	7123      	strb	r3, [r4, #4]
 800073a:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 800073e:	222b      	movs	r2, #43	; 0x2b
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f004 fba5 	bl	8004e92 <memset>

	float gyro_values[3];

	uint8_t rounds = 1;
 8000748:	2301      	movs	r3, #1
 800074a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	uint8_t winner;
	uint8_t multiplier;
	uint8_t P1leaderboard;
	uint8_t P2leaderboard;

	srand(time(NULL));  // Seed the random number generator once
 800074e:	2000      	movs	r0, #0
 8000750:	f004 fba8 	bl	8004ea4 <time>
 8000754:	4602      	mov	r2, r0
 8000756:	460b      	mov	r3, r1
 8000758:	4613      	mov	r3, r2
 800075a:	4618      	mov	r0, r3
 800075c:	f004 fa08 	bl	8004b70 <srand>

	while (rounds <= 3){
 8000760:	e1ab      	b.n	8000aba <main+0x3ae>

		uint8_t P1score = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		uint8_t P2score = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81

		trigger_oneshot(30000, &set_timesUp);
 800076e:	49ab      	ldr	r1, [pc, #684]	; (8000a1c <main+0x310>)
 8000770:	f247 5030 	movw	r0, #30000	; 0x7530
 8000774:	f000 fd1a 	bl	80011ac <trigger_oneshot>
		sprintf(string_to_send, "Player 1 your timer starts now!\r\n");
 8000778:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800077c:	49a8      	ldr	r1, [pc, #672]	; (8000a20 <main+0x314>)
 800077e:	4618      	mov	r0, r3
 8000780:	f004 fb24 	bl	8004dcc <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000784:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000788:	49a2      	ldr	r1, [pc, #648]	; (8000a14 <main+0x308>)
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fa5f 	bl	8000c4e <SerialOutputString>

		while (timesUp == 0) {
 8000790:	e072      	b.n	8000878 <main+0x16c>
			outcome = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

			uint8_t guessWord[20];
			char* random = randomWord();
 8000798:	f7ff fd6a 	bl	8000270 <randomWord>
 800079c:	67b8      	str	r0, [r7, #120]	; 0x78
			strcpy((char*)guessWord, random);
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80007a4:	4618      	mov	r0, r3
 80007a6:	f004 fc1c 	bl	8004fe2 <strcpy>
			sprintf(string_to_send, "%s\r\n", (char*)guessWord);
 80007aa:	f107 0218 	add.w	r2, r7, #24
 80007ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007b2:	499c      	ldr	r1, [pc, #624]	; (8000a24 <main+0x318>)
 80007b4:	4618      	mov	r0, r3
 80007b6:	f004 fb09 	bl	8004dcc <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 80007ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007be:	4995      	ldr	r1, [pc, #596]	; (8000a14 <main+0x308>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fa44 	bl	8000c4e <SerialOutputString>

			while (!outcome){
 80007c6:	e027      	b.n	8000818 <main+0x10c>
				BSP_GYRO_GetXYZ(&gyro_values[0]);
 80007c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fc81 	bl	80040d4 <BSP_GYRO_GetXYZ>
				if (gyro_values[1]/20000 >= 25){
 80007d2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80007d6:	eddf 6a94 	vldr	s13, [pc, #592]	; 8000a28 <main+0x31c>
 80007da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007de:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80007e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ea:	db02      	blt.n	80007f2 <main+0xe6>
					outcome = 1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
				}
				if (gyro_values[1]/20000 <= -25){
 80007f2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80007f6:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8000a28 <main+0x31c>
 80007fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007fe:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
 8000802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d802      	bhi.n	8000812 <main+0x106>
					outcome = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
				}
				HAL_Delay(100);
 8000812:	2064      	movs	r0, #100	; 0x64
 8000814:	f000 fdc0 	bl	8001398 <HAL_Delay>
			while (!outcome){
 8000818:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800081c:	2b00      	cmp	r3, #0
 800081e:	d0d3      	beq.n	80007c8 <main+0xbc>
			}

			if (outcome == 1){
 8000820:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000824:	2b01      	cmp	r3, #1
 8000826:	d113      	bne.n	8000850 <main+0x144>
				P1score++;
 8000828:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800082c:	3301      	adds	r3, #1
 800082e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
				sprintf(string_to_send, "Correct!\r\n");
 8000832:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000836:	497d      	ldr	r1, [pc, #500]	; (8000a2c <main+0x320>)
 8000838:	4618      	mov	r0, r3
 800083a:	f004 fac7 	bl	8004dcc <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 800083e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000842:	4974      	ldr	r1, [pc, #464]	; (8000a14 <main+0x308>)
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fa02 	bl	8000c4e <SerialOutputString>
				flash_leds();
 800084a:	f7ff ff2d 	bl	80006a8 <flash_leds>
 800084e:	e00f      	b.n	8000870 <main+0x164>
			}
			else if (outcome == 2){
 8000850:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000854:	2b02      	cmp	r3, #2
 8000856:	d10b      	bne.n	8000870 <main+0x164>
				sprintf(string_to_send, "Pass!\r\n");
 8000858:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800085c:	4974      	ldr	r1, [pc, #464]	; (8000a30 <main+0x324>)
 800085e:	4618      	mov	r0, r3
 8000860:	f004 fab4 	bl	8004dcc <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 8000864:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000868:	496a      	ldr	r1, [pc, #424]	; (8000a14 <main+0x308>)
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f9ef 	bl	8000c4e <SerialOutputString>
			}
			HAL_Delay(750);
 8000870:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000874:	f000 fd90 	bl	8001398 <HAL_Delay>
		while (timesUp == 0) {
 8000878:	4b6e      	ldr	r3, [pc, #440]	; (8000a34 <main+0x328>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d088      	beq.n	8000792 <main+0x86>
		}
		sprintf(string_to_send, "Time's Up! Player 1's score is %d!\r\n", P1score);
 8000880:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8000884:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000888:	496b      	ldr	r1, [pc, #428]	; (8000a38 <main+0x32c>)
 800088a:	4618      	mov	r0, r3
 800088c:	f004 fa9e 	bl	8004dcc <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000890:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000894:	495f      	ldr	r1, [pc, #380]	; (8000a14 <main+0x308>)
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f9d9 	bl	8000c4e <SerialOutputString>
		set_timesUp();
 800089c:	f7ff ff22 	bl	80006e4 <set_timesUp>

		// Player 2 plays heads up
		trigger_oneshot(30000, &set_timesUp);
 80008a0:	495e      	ldr	r1, [pc, #376]	; (8000a1c <main+0x310>)
 80008a2:	f247 5030 	movw	r0, #30000	; 0x7530
 80008a6:	f000 fc81 	bl	80011ac <trigger_oneshot>
		sprintf(string_to_send, "Player 2 your timer starts now!\r\n");
 80008aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008ae:	4963      	ldr	r1, [pc, #396]	; (8000a3c <main+0x330>)
 80008b0:	4618      	mov	r0, r3
 80008b2:	f004 fa8b 	bl	8004dcc <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 80008b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008ba:	4956      	ldr	r1, [pc, #344]	; (8000a14 <main+0x308>)
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f9c6 	bl	8000c4e <SerialOutputString>

		while (timesUp == 0) {
 80008c2:	e070      	b.n	80009a6 <main+0x29a>
			outcome = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

			uint8_t guessWord[20];
			char* random = randomWord();
 80008ca:	f7ff fcd1 	bl	8000270 <randomWord>
 80008ce:	67f8      	str	r0, [r7, #124]	; 0x7c
			strcpy((char*)guessWord, random);
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80008d4:	4618      	mov	r0, r3
 80008d6:	f004 fb84 	bl	8004fe2 <strcpy>
			sprintf(string_to_send, "%s\r\n", (char*)guessWord);
 80008da:	1d3a      	adds	r2, r7, #4
 80008dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008e0:	4950      	ldr	r1, [pc, #320]	; (8000a24 <main+0x318>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f004 fa72 	bl	8004dcc <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 80008e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008ec:	4949      	ldr	r1, [pc, #292]	; (8000a14 <main+0x308>)
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f9ad 	bl	8000c4e <SerialOutputString>

			while (!outcome){
 80008f4:	e027      	b.n	8000946 <main+0x23a>
				BSP_GYRO_GetXYZ(&gyro_values[0]);
 80008f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 fbea 	bl	80040d4 <BSP_GYRO_GetXYZ>
				if (gyro_values[1]/20000 >= 25){
 8000900:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000904:	eddf 6a48 	vldr	s13, [pc, #288]	; 8000a28 <main+0x31c>
 8000908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800090c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000918:	db02      	blt.n	8000920 <main+0x214>
					outcome = 1;
 800091a:	2301      	movs	r3, #1
 800091c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
				}
				if (gyro_values[1]/20000 <= -25){
 8000920:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000924:	eddf 6a40 	vldr	s13, [pc, #256]	; 8000a28 <main+0x31c>
 8000928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800092c:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
 8000930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000938:	d802      	bhi.n	8000940 <main+0x234>
					outcome = 2;
 800093a:	2302      	movs	r3, #2
 800093c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
				}
				HAL_Delay(100);
 8000940:	2064      	movs	r0, #100	; 0x64
 8000942:	f000 fd29 	bl	8001398 <HAL_Delay>
			while (!outcome){
 8000946:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800094a:	2b00      	cmp	r3, #0
 800094c:	d0d3      	beq.n	80008f6 <main+0x1ea>
			}

			if (outcome == 1){
 800094e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000952:	2b01      	cmp	r3, #1
 8000954:	d113      	bne.n	800097e <main+0x272>
				P2score++;
 8000956:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800095a:	3301      	adds	r3, #1
 800095c:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
				sprintf(string_to_send, "Correct!\r\n");
 8000960:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000964:	4931      	ldr	r1, [pc, #196]	; (8000a2c <main+0x320>)
 8000966:	4618      	mov	r0, r3
 8000968:	f004 fa30 	bl	8004dcc <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 800096c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000970:	4928      	ldr	r1, [pc, #160]	; (8000a14 <main+0x308>)
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f96b 	bl	8000c4e <SerialOutputString>
				flash_leds();
 8000978:	f7ff fe96 	bl	80006a8 <flash_leds>
 800097c:	e00f      	b.n	800099e <main+0x292>
			}
			else if (outcome == 2){
 800097e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000982:	2b02      	cmp	r3, #2
 8000984:	d10b      	bne.n	800099e <main+0x292>
				sprintf(string_to_send, "Pass!\r\n");
 8000986:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800098a:	4929      	ldr	r1, [pc, #164]	; (8000a30 <main+0x324>)
 800098c:	4618      	mov	r0, r3
 800098e:	f004 fa1d 	bl	8004dcc <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 8000992:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000996:	491f      	ldr	r1, [pc, #124]	; (8000a14 <main+0x308>)
 8000998:	4618      	mov	r0, r3
 800099a:	f000 f958 	bl	8000c4e <SerialOutputString>
			}
			HAL_Delay(750);
 800099e:	f240 20ee 	movw	r0, #750	; 0x2ee
 80009a2:	f000 fcf9 	bl	8001398 <HAL_Delay>
		while (timesUp == 0) {
 80009a6:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <main+0x328>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d08a      	beq.n	80008c4 <main+0x1b8>
		}
		sprintf(string_to_send, "Time's Up! Player 2's score is %d!\r\n", P2score);
 80009ae:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 80009b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009b6:	4922      	ldr	r1, [pc, #136]	; (8000a40 <main+0x334>)
 80009b8:	4618      	mov	r0, r3
 80009ba:	f004 fa07 	bl	8004dcc <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 80009be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009c2:	4914      	ldr	r1, [pc, #80]	; (8000a14 <main+0x308>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f942 	bl	8000c4e <SerialOutputString>
		set_timesUp();
 80009ca:	f7ff fe8b 	bl	80006e4 <set_timesUp>


		// Winner determined
		if (P1score > P2score){
 80009ce:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80009d2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d903      	bls.n	80009e2 <main+0x2d6>
			// player 1 will play wavelength
			winner = 1;
 80009da:	2301      	movs	r3, #1
 80009dc:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 80009e0:	e008      	b.n	80009f4 <main+0x2e8>
		}
		else if (P2score > P1score){
 80009e2:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 80009e6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d902      	bls.n	80009f4 <main+0x2e8>
			// player 2 will play wavelength
			winner = 2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		}

		// Multiplier
		multiplier = 2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

		// Wavelength multiplier
		if (winner == 1){
 80009fa:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d120      	bne.n	8000a44 <main+0x338>
			P1score = P1score * multiplier;
 8000a02:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8000a06:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8000a0a:	fb12 f303 	smulbb	r3, r2, r3
 8000a0e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8000a12:	e023      	b.n	8000a5c <main+0x350>
 8000a14:	20000000 	.word	0x20000000
 8000a18:	080066d4 	.word	0x080066d4
 8000a1c:	080006e5 	.word	0x080006e5
 8000a20:	08006580 	.word	0x08006580
 8000a24:	080065a4 	.word	0x080065a4
 8000a28:	469c4000 	.word	0x469c4000
 8000a2c:	080065ac 	.word	0x080065ac
 8000a30:	080065b8 	.word	0x080065b8
 8000a34:	200007f8 	.word	0x200007f8
 8000a38:	080065c0 	.word	0x080065c0
 8000a3c:	080065e8 	.word	0x080065e8
 8000a40:	0800660c 	.word	0x0800660c
		}
		else if (winner == 2){
 8000a44:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d107      	bne.n	8000a5c <main+0x350>
			P2score = P2score * multiplier;
 8000a4c:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 8000a50:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8000a54:	fb12 f303 	smulbb	r3, r2, r3
 8000a58:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
		}

		// Update leaderboard
		P1leaderboard = P1leaderboard + P1score;
 8000a5c:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8000a60:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8000a64:	4413      	add	r3, r2
 8000a66:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
		P2leaderboard = P2leaderboard + P2score;
 8000a6a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8000a6e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8000a72:	4413      	add	r3, r2
 8000a74:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		sprintf(string_to_send, "Player 1 your total score is %d!\r\n", P1leaderboard);
 8000a78:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8000a7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a80:	4927      	ldr	r1, [pc, #156]	; (8000b20 <main+0x414>)
 8000a82:	4618      	mov	r0, r3
 8000a84:	f004 f9a2 	bl	8004dcc <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000a88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a8c:	4925      	ldr	r1, [pc, #148]	; (8000b24 <main+0x418>)
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f8dd 	bl	8000c4e <SerialOutputString>
		sprintf(string_to_send, "Player 2 your total score is %d!\r\n", P2leaderboard);
 8000a94:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8000a98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a9c:	4922      	ldr	r1, [pc, #136]	; (8000b28 <main+0x41c>)
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f004 f994 	bl	8004dcc <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000aa4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aa8:	491e      	ldr	r1, [pc, #120]	; (8000b24 <main+0x418>)
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f8cf 	bl	8000c4e <SerialOutputString>

		rounds++;
 8000ab0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	while (rounds <= 3){
 8000aba:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	f67f ae4f 	bls.w	8000762 <main+0x56>
	}

	// Final winner announced
	if (P1leaderboard > P2leaderboard){
 8000ac4:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8000ac8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d90e      	bls.n	8000aee <main+0x3e2>
		sprintf(string_to_send, "Player 1 Wins with a final score of %d!\r\n", P1leaderboard);
 8000ad0:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8000ad4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ad8:	4914      	ldr	r1, [pc, #80]	; (8000b2c <main+0x420>)
 8000ada:	4618      	mov	r0, r3
 8000adc:	f004 f976 	bl	8004dcc <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000ae0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ae4:	490f      	ldr	r1, [pc, #60]	; (8000b24 <main+0x418>)
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f8b1 	bl	8000c4e <SerialOutputString>
 8000aec:	e013      	b.n	8000b16 <main+0x40a>
	}
	else if (P2leaderboard > P1leaderboard){
 8000aee:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8000af2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d90d      	bls.n	8000b16 <main+0x40a>
		sprintf(string_to_send, "Player 2 Wins with a final score of %d!\r\n", P2leaderboard);
 8000afa:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8000afe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b02:	490b      	ldr	r1, [pc, #44]	; (8000b30 <main+0x424>)
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 f961 	bl	8004dcc <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000b0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b0e:	4905      	ldr	r1, [pc, #20]	; (8000b24 <main+0x418>)
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f89c 	bl	8000c4e <SerialOutputString>
 8000b16:	2300      	movs	r3, #0
	}
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3788      	adds	r7, #136	; 0x88
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b20:	08006634 	.word	0x08006634
 8000b24:	20000000 	.word	0x20000000
 8000b28:	08006658 	.word	0x08006658
 8000b2c:	0800667c 	.word	0x0800667c
 8000b30:	080066a8 	.word	0x080066a8

08000b34 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000b34:	b480      	push	{r7}
 8000b36:	b087      	sub	sp, #28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	63da      	str	r2, [r3, #60]	; 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000b46:	4b34      	ldr	r3, [pc, #208]	; (8000c18 <SerialInitialise+0xe4>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4a33      	ldr	r2, [pc, #204]	; (8000c18 <SerialInitialise+0xe4>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000b52:	4b31      	ldr	r3, [pc, #196]	; (8000c18 <SerialInitialise+0xe4>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	4a30      	ldr	r2, [pc, #192]	; (8000c18 <SerialInitialise+0xe4>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	6a1b      	ldr	r3, [r3, #32]
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d106      	bne.n	8000b74 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000b66:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <SerialInitialise+0xe4>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	4a2b      	ldr	r2, [pc, #172]	; (8000c18 <SerialInitialise+0xe4>)
 8000b6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b70:	6153      	str	r3, [r2, #20]
		break;
 8000b72:	e000      	b.n	8000b76 <SerialInitialise+0x42>
	default:
		break;
 8000b74:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000b7e:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b84:	68ba      	ldr	r2, [r7, #8]
 8000b86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000b88:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	69d9      	ldr	r1, [r3, #28]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d821      	bhi.n	8000bfa <SerialInitialise+0xc6>
 8000bb6:	a201      	add	r2, pc, #4	; (adr r2, 8000bbc <SerialInitialise+0x88>)
 8000bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbc:	08000bd1 	.word	0x08000bd1
 8000bc0:	08000bd9 	.word	0x08000bd9
 8000bc4:	08000be1 	.word	0x08000be1
 8000bc8:	08000be9 	.word	0x08000be9
 8000bcc:	08000bf1 	.word	0x08000bf1
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	2246      	movs	r2, #70	; 0x46
 8000bd4:	801a      	strh	r2, [r3, #0]
		break;
 8000bd6:	e010      	b.n	8000bfa <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	2246      	movs	r2, #70	; 0x46
 8000bdc:	801a      	strh	r2, [r3, #0]
		break;
 8000bde:	e00c      	b.n	8000bfa <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	2246      	movs	r2, #70	; 0x46
 8000be4:	801a      	strh	r2, [r3, #0]
		break;
 8000be6:	e008      	b.n	8000bfa <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	2246      	movs	r2, #70	; 0x46
 8000bec:	801a      	strh	r2, [r3, #0]
		break;
 8000bee:	e004      	b.n	8000bfa <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000bf6:	801a      	strh	r2, [r3, #0]
		break;
 8000bf8:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f042 020d 	orr.w	r2, r2, #13
 8000c08:	601a      	str	r2, [r3, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	371c      	adds	r7, #28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000

08000c1c <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8000c28:	bf00      	nop
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0f8      	beq.n	8000c2a <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	79fa      	ldrb	r2, [r7, #7]
 8000c3e:	b292      	uxth	r2, r2
 8000c40:	801a      	strh	r2, [r3, #0]
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b084      	sub	sp, #16
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8000c5c:	e00b      	b.n	8000c76 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	6839      	ldr	r1, [r7, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ffd9 	bl	8000c1c <SerialOutputChar>
		counter++;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
		pt++;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3301      	adds	r3, #1
 8000c74:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1ef      	bne.n	8000c5e <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	4798      	blx	r3
}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_MspInit+0x44>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <HAL_MspInit+0x44>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6193      	str	r3, [r2, #24]
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_MspInit+0x44>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_MspInit+0x44>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_MspInit+0x44>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	61d3      	str	r3, [r2, #28]
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_MspInit+0x44>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cce:	2007      	movs	r0, #7
 8000cd0:	f000 fc38 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a17      	ldr	r2, [pc, #92]	; (8000d5c <HAL_I2C_MspInit+0x7c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d127      	bne.n	8000d52 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_I2C_MspInit+0x80>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	4a16      	ldr	r2, [pc, #88]	; (8000d60 <HAL_I2C_MspInit+0x80>)
 8000d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d0c:	6153      	str	r3, [r2, #20]
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_I2C_MspInit+0x80>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d1a:	23c0      	movs	r3, #192	; 0xc0
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1e:	2312      	movs	r3, #18
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	480b      	ldr	r0, [pc, #44]	; (8000d64 <HAL_I2C_MspInit+0x84>)
 8000d36:	f000 fc39 	bl	80015ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_I2C_MspInit+0x80>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_I2C_MspInit+0x80>)
 8000d40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d44:	61d3      	str	r3, [r2, #28]
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_I2C_MspInit+0x80>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40005400 	.word	0x40005400
 8000d60:	40021000 	.word	0x40021000
 8000d64:	48000400 	.word	0x48000400

08000d68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <HAL_SPI_MspInit+0x7c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d128      	bne.n	8000ddc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <HAL_SPI_MspInit+0x80>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	4a16      	ldr	r2, [pc, #88]	; (8000de8 <HAL_SPI_MspInit+0x80>)
 8000d90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d94:	6193      	str	r3, [r2, #24]
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <HAL_SPI_MspInit+0x80>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_SPI_MspInit+0x80>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <HAL_SPI_MspInit+0x80>)
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	6153      	str	r3, [r2, #20]
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_SPI_MspInit+0x80>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000dba:	23e0      	movs	r3, #224	; 0xe0
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dca:	2305      	movs	r3, #5
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f000 fbe8 	bl	80015ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	; 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40013000 	.word	0x40013000
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_SPI_MspDeInit+0x30>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10a      	bne.n	8000e14 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_SPI_MspDeInit+0x34>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_SPI_MspDeInit+0x34>)
 8000e04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e08:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 8000e0a:	21e0      	movs	r1, #224	; 0xe0
 8000e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e10:	f000 fd46 	bl	80018a0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40013000 	.word	0x40013000
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a18      	ldr	r2, [pc, #96]	; (8000ea4 <HAL_PCD_MspInit+0x80>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d129      	bne.n	8000e9a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_PCD_MspInit+0x84>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <HAL_PCD_MspInit+0x84>)
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	6153      	str	r3, [r2, #20]
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_PCD_MspInit+0x84>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000e5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000e70:	230e      	movs	r3, #14
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7e:	f000 fb95 	bl	80015ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_PCD_MspInit+0x84>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <HAL_PCD_MspInit+0x84>)
 8000e88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_PCD_MspInit+0x84>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40005c00 	.word	0x40005c00
 8000ea8:	40021000 	.word	0x40021000

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler+0x4>

08000ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef8:	f000 fa2e 	bl	8001358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
	return 1;
 8000f04:	2301      	movs	r3, #1
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_kill>:

int _kill(int pid, int sig)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f1a:	f004 f835 	bl	8004f88 <__errno>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2216      	movs	r2, #22
 8000f22:	601a      	str	r2, [r3, #0]
	return -1;
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_exit>:

void _exit (int status)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ffe7 	bl	8000f10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f42:	e7fe      	b.n	8000f42 <_exit+0x12>

08000f44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	e00a      	b.n	8000f6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f56:	f3af 8000 	nop.w
 8000f5a:	4601      	mov	r1, r0
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	60ba      	str	r2, [r7, #8]
 8000f62:	b2ca      	uxtb	r2, r1
 8000f64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dbf0      	blt.n	8000f56 <_read+0x12>
	}

return len;
 8000f74:	687b      	ldr	r3, [r7, #4]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e009      	b.n	8000fa4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	60ba      	str	r2, [r7, #8]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dbf1      	blt.n	8000f90 <_write+0x12>
	}
	return len;
 8000fac:	687b      	ldr	r3, [r7, #4]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_close>:

int _close(int file)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
	return -1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fde:	605a      	str	r2, [r3, #4]
	return 0;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_isatty>:

int _isatty(int file)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
	return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001028:	4a14      	ldr	r2, [pc, #80]	; (800107c <_sbrk+0x5c>)
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <_sbrk+0x60>)
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <_sbrk+0x64>)
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <_sbrk+0x68>)
 8001040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	429a      	cmp	r2, r3
 800104e:	d207      	bcs.n	8001060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001050:	f003 ff9a 	bl	8004f88 <__errno>
 8001054:	4603      	mov	r3, r0
 8001056:	220c      	movs	r2, #12
 8001058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	e009      	b.n	8001074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <_sbrk+0x64>)
 8001070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001072:	68fb      	ldr	r3, [r7, #12]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2000a000 	.word	0x2000a000
 8001080:	00000400 	.word	0x00000400
 8001084:	200007fc 	.word	0x200007fc
 8001088:	200009c0 	.word	0x200009c0

0800108c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <SystemInit+0x20>)
 8001092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <SystemInit+0x20>)
 8001098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800109c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4907      	ldr	r1, [pc, #28]	; (80010e8 <__NVIC_EnableIRQ+0x38>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	; (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <enable_interrupt>:
#define HAL_MULTIPLY_FACTOR 6

// pointer to callback function for oneshot timer
void (*oneshot_callback_function)();

void enable_interrupt(IRQn_Type IRQn, uint32_t priority) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Tell the NVIC module that TIM2 interrupts should be handled
	NVIC_SetPriority(IRQn, priority);  // Set Priority
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	6839      	ldr	r1, [r7, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ffc8 	bl	80010ec <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQn);
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ffa5 	bl	80010b0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001166:	b662      	cpsie	i
}
 8001168:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
// run the oneshot timer interrupt handler
	if (TIM2->SR & TIM_SR_UIF) {
 8001178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00e      	beq.n	80011a4 <TIM2_IRQHandler+0x30>
		// clear oneshot timer interrupt
		TIM2->SR &= ~TIM_SR_UIF;
 8001186:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	6113      	str	r3, [r2, #16]

		if (oneshot_callback_function != NULL)
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <TIM2_IRQHandler+0x34>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d002      	beq.n	80011a4 <TIM2_IRQHandler+0x30>
		{
			oneshot_callback_function();
 800119e:	4b02      	ldr	r3, [pc, #8]	; (80011a8 <TIM2_IRQHandler+0x34>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4798      	blx	r3
		}

	}

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000800 	.word	0x20000800

080011ac <trigger_oneshot>:

void trigger_oneshot(uint16_t delay, void (*callback_function)()) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	80fb      	strh	r3, [r7, #6]

	// reset CR1
	TIM2->CR1 = 0x00;
 80011b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]

	// set the prescaler to 999, slower than the default clock 1000 times
	TIM2->PSC = PRESCALER; // 1 millisecond or 1 millisecond per count
 80011c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28

	// set the auto reload according to the prescaler
	TIM2->ARR = 0x01; // 8 - 1 millisecond
 80011ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ce:	2201      	movs	r2, #1
 80011d0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->ARR = TIM2->ARR * delay * HAL_MULTIPLY_FACTOR; // delay in millisecond
 80011d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	88fa      	ldrh	r2, [r7, #6]
 80011da:	fb03 f202 	mul.w	r2, r3, r2
 80011de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	62cb      	str	r3, [r1, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // enable auto reload buffering
 80011ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fa:	6013      	str	r3, [r2, #0]

	// set to only counter overflow raises interrupt flag
	TIM2->CR1 |= TIM_CR1_URS;
 80011fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6013      	str	r3, [r2, #0]

	// set to one-pulse mode
	TIM2->CR1 |= TIM_CR1_OPM;
 800120c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	6013      	str	r3, [r2, #0]

	// re-initialise the counter and generates an update of the registers
	TIM2->EGR |= TIM_EGR_UG;
 800121c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6153      	str	r3, [r2, #20]

	// enable the update interrupt
	TIM2->DIER |= TIM_DIER_UIE;
 800122c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	60d3      	str	r3, [r2, #12]

	// clear the interrupt
	TIM2->SR &= ~TIM_SR_UIF;
 800123c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	6113      	str	r3, [r2, #16]

	oneshot_callback_function = callback_function;
 800124c:	4a09      	ldr	r2, [pc, #36]	; (8001274 <trigger_oneshot+0xc8>)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	6013      	str	r3, [r2, #0]

	enable_interrupt(TIM2_IRQn, 0);
 8001252:	2100      	movs	r1, #0
 8001254:	201c      	movs	r0, #28
 8001256:	f7ff ff73 	bl	8001140 <enable_interrupt>

	// enable counter
	TIM2->CR1 |= TIM_CR1_CEN;
 800125a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6013      	str	r3, [r2, #0]

}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000800 	.word	0x20000800

08001278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800127c:	f7ff ff06 	bl	800108c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001282:	490d      	ldr	r1, [pc, #52]	; (80012b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <LoopForever+0xe>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001298:	4c0a      	ldr	r4, [pc, #40]	; (80012c4 <LoopForever+0x16>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a6:	f003 fe75 	bl	8004f94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012aa:	f7ff fa2f 	bl	800070c <main>

080012ae <LoopForever>:

LoopForever:
    b LoopForever
 80012ae:	e7fe      	b.n	80012ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012b0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 80012bc:	08006804 	.word	0x08006804
  ldr r2, =_sbss
 80012c0:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 80012c4:	200009bc 	.word	0x200009bc

080012c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC1_2_IRQHandler>
	...

080012cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_Init+0x28>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_Init+0x28>)
 80012d6:	f043 0310 	orr.w	r3, r3, #16
 80012da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f931 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 f808 	bl	80012f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e8:	f7ff fcd6 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40022000 	.word	0x40022000

080012f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x54>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x58>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f93b 	bl	8001592 <HAL_SYSTICK_Config>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e00e      	b.n	8001344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d80a      	bhi.n	8001342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132c:	2200      	movs	r2, #0
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f000 f911 	bl	800155a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001338:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_InitTick+0x5c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e000      	b.n	8001344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000040 	.word	0x20000040
 8001350:	20000048 	.word	0x20000048
 8001354:	20000044 	.word	0x20000044

08001358 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x20>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x24>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_IncTick+0x24>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000048 	.word	0x20000048
 800137c:	20000804 	.word	0x20000804

08001380 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;  
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000804 	.word	0x20000804

08001398 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff ffee 	bl	8001380 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_Delay+0x44>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffde 	bl	8001380 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000048 	.word	0x20000048

080013e0 <__NVIC_SetPriorityGrouping>:
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	60d3      	str	r3, [r2, #12]
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_GetPriorityGrouping>:
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <__NVIC_GetPriorityGrouping+0x18>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	f003 0307 	and.w	r3, r3, #7
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_SetPriority>:
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db0a      	blt.n	800146e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <__NVIC_SetPriority+0x4c>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	0112      	lsls	r2, r2, #4
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	440b      	add	r3, r1
 8001468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800146c:	e00a      	b.n	8001484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4908      	ldr	r1, [pc, #32]	; (8001494 <__NVIC_SetPriority+0x50>)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	3b04      	subs	r3, #4
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	440b      	add	r3, r1
 8001482:	761a      	strb	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f1c3 0307 	rsb	r3, r3, #7
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	bf28      	it	cs
 80014b6:	2304      	movcs	r3, #4
 80014b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3304      	adds	r3, #4
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d902      	bls.n	80014c8 <NVIC_EncodePriority+0x30>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3b03      	subs	r3, #3
 80014c6:	e000      	b.n	80014ca <NVIC_EncodePriority+0x32>
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43d9      	mvns	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	4313      	orrs	r3, r2
         );
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001510:	d301      	bcc.n	8001516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001512:	2301      	movs	r3, #1
 8001514:	e00f      	b.n	8001536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <SysTick_Config+0x40>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151e:	210f      	movs	r1, #15
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f7ff ff8e 	bl	8001444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <SysTick_Config+0x40>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <SysTick_Config+0x40>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	e000e010 	.word	0xe000e010

08001544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ff47 	bl	80013e0 <__NVIC_SetPriorityGrouping>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800156c:	f7ff ff5c 	bl	8001428 <__NVIC_GetPriorityGrouping>
 8001570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	6978      	ldr	r0, [r7, #20]
 8001578:	f7ff ff8e 	bl	8001498 <NVIC_EncodePriority>
 800157c:	4602      	mov	r2, r0
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff5d 	bl	8001444 <__NVIC_SetPriority>
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ffb0 	bl	8001500 <SysTick_Config>
 80015a0:	4603      	mov	r3, r0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ba:	e154      	b.n	8001866 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2101      	movs	r1, #1
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	fa01 f303 	lsl.w	r3, r1, r3
 80015c8:	4013      	ands	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 8146 	beq.w	8001860 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d005      	beq.n	80015ec <HAL_GPIO_Init+0x40>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d130      	bne.n	800164e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	2203      	movs	r2, #3
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001622:	2201      	movs	r2, #1
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	091b      	lsrs	r3, r3, #4
 8001638:	f003 0201 	and.w	r2, r3, #1
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	2b03      	cmp	r3, #3
 8001658:	d017      	beq.n	800168a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	2203      	movs	r2, #3
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d123      	bne.n	80016de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	08da      	lsrs	r2, r3, #3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3208      	adds	r2, #8
 800169e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	220f      	movs	r2, #15
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	691a      	ldr	r2, [r3, #16]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	08da      	lsrs	r2, r3, #3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3208      	adds	r2, #8
 80016d8:	6939      	ldr	r1, [r7, #16]
 80016da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	2203      	movs	r2, #3
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 0203 	and.w	r2, r3, #3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 80a0 	beq.w	8001860 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001720:	4b58      	ldr	r3, [pc, #352]	; (8001884 <HAL_GPIO_Init+0x2d8>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a57      	ldr	r2, [pc, #348]	; (8001884 <HAL_GPIO_Init+0x2d8>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b55      	ldr	r3, [pc, #340]	; (8001884 <HAL_GPIO_Init+0x2d8>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001738:	4a53      	ldr	r2, [pc, #332]	; (8001888 <HAL_GPIO_Init+0x2dc>)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	089b      	lsrs	r3, r3, #2
 800173e:	3302      	adds	r3, #2
 8001740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	220f      	movs	r2, #15
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001762:	d019      	beq.n	8001798 <HAL_GPIO_Init+0x1ec>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a49      	ldr	r2, [pc, #292]	; (800188c <HAL_GPIO_Init+0x2e0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d013      	beq.n	8001794 <HAL_GPIO_Init+0x1e8>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a48      	ldr	r2, [pc, #288]	; (8001890 <HAL_GPIO_Init+0x2e4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d00d      	beq.n	8001790 <HAL_GPIO_Init+0x1e4>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a47      	ldr	r2, [pc, #284]	; (8001894 <HAL_GPIO_Init+0x2e8>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d007      	beq.n	800178c <HAL_GPIO_Init+0x1e0>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a46      	ldr	r2, [pc, #280]	; (8001898 <HAL_GPIO_Init+0x2ec>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d101      	bne.n	8001788 <HAL_GPIO_Init+0x1dc>
 8001784:	2304      	movs	r3, #4
 8001786:	e008      	b.n	800179a <HAL_GPIO_Init+0x1ee>
 8001788:	2305      	movs	r3, #5
 800178a:	e006      	b.n	800179a <HAL_GPIO_Init+0x1ee>
 800178c:	2303      	movs	r3, #3
 800178e:	e004      	b.n	800179a <HAL_GPIO_Init+0x1ee>
 8001790:	2302      	movs	r3, #2
 8001792:	e002      	b.n	800179a <HAL_GPIO_Init+0x1ee>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_GPIO_Init+0x1ee>
 8001798:	2300      	movs	r3, #0
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	f002 0203 	and.w	r2, r2, #3
 80017a0:	0092      	lsls	r2, r2, #2
 80017a2:	4093      	lsls	r3, r2
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017aa:	4937      	ldr	r1, [pc, #220]	; (8001888 <HAL_GPIO_Init+0x2dc>)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017b8:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_GPIO_Init+0x2f0>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017dc:	4a2f      	ldr	r2, [pc, #188]	; (800189c <HAL_GPIO_Init+0x2f0>)
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e2:	4b2e      	ldr	r3, [pc, #184]	; (800189c <HAL_GPIO_Init+0x2f0>)
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001806:	4a25      	ldr	r2, [pc, #148]	; (800189c <HAL_GPIO_Init+0x2f0>)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <HAL_GPIO_Init+0x2f0>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001830:	4a1a      	ldr	r2, [pc, #104]	; (800189c <HAL_GPIO_Init+0x2f0>)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_GPIO_Init+0x2f0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800185a:	4a10      	ldr	r2, [pc, #64]	; (800189c <HAL_GPIO_Init+0x2f0>)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3301      	adds	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	fa22 f303 	lsr.w	r3, r2, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	f47f aea3 	bne.w	80015bc <HAL_GPIO_Init+0x10>
  }
}
 8001876:	bf00      	nop
 8001878:	bf00      	nop
 800187a:	371c      	adds	r7, #28
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40021000 	.word	0x40021000
 8001888:	40010000 	.word	0x40010000
 800188c:	48000400 	.word	0x48000400
 8001890:	48000800 	.word	0x48000800
 8001894:	48000c00 	.word	0x48000c00
 8001898:	48001000 	.word	0x48001000
 800189c:	40010400 	.word	0x40010400

080018a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80018ae:	e0b8      	b.n	8001a22 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80018b0:	2201      	movs	r2, #1
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80ab 	beq.w	8001a1c <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80018c6:	4a5e      	ldr	r2, [pc, #376]	; (8001a40 <HAL_GPIO_DeInit+0x1a0>)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	220f      	movs	r2, #15
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018ee:	d019      	beq.n	8001924 <HAL_GPIO_DeInit+0x84>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a54      	ldr	r2, [pc, #336]	; (8001a44 <HAL_GPIO_DeInit+0x1a4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d013      	beq.n	8001920 <HAL_GPIO_DeInit+0x80>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a53      	ldr	r2, [pc, #332]	; (8001a48 <HAL_GPIO_DeInit+0x1a8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d00d      	beq.n	800191c <HAL_GPIO_DeInit+0x7c>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a52      	ldr	r2, [pc, #328]	; (8001a4c <HAL_GPIO_DeInit+0x1ac>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d007      	beq.n	8001918 <HAL_GPIO_DeInit+0x78>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a51      	ldr	r2, [pc, #324]	; (8001a50 <HAL_GPIO_DeInit+0x1b0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d101      	bne.n	8001914 <HAL_GPIO_DeInit+0x74>
 8001910:	2304      	movs	r3, #4
 8001912:	e008      	b.n	8001926 <HAL_GPIO_DeInit+0x86>
 8001914:	2305      	movs	r3, #5
 8001916:	e006      	b.n	8001926 <HAL_GPIO_DeInit+0x86>
 8001918:	2303      	movs	r3, #3
 800191a:	e004      	b.n	8001926 <HAL_GPIO_DeInit+0x86>
 800191c:	2302      	movs	r3, #2
 800191e:	e002      	b.n	8001926 <HAL_GPIO_DeInit+0x86>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <HAL_GPIO_DeInit+0x86>
 8001924:	2300      	movs	r3, #0
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	f002 0203 	and.w	r2, r2, #3
 800192c:	0092      	lsls	r2, r2, #2
 800192e:	4093      	lsls	r3, r2
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	429a      	cmp	r2, r3
 8001934:	d132      	bne.n	800199c <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001936:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_GPIO_DeInit+0x1b4>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	43db      	mvns	r3, r3
 800193e:	4945      	ldr	r1, [pc, #276]	; (8001a54 <HAL_GPIO_DeInit+0x1b4>)
 8001940:	4013      	ands	r3, r2
 8001942:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001944:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <HAL_GPIO_DeInit+0x1b4>)
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	43db      	mvns	r3, r3
 800194c:	4941      	ldr	r1, [pc, #260]	; (8001a54 <HAL_GPIO_DeInit+0x1b4>)
 800194e:	4013      	ands	r3, r2
 8001950:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001952:	4b40      	ldr	r3, [pc, #256]	; (8001a54 <HAL_GPIO_DeInit+0x1b4>)
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	43db      	mvns	r3, r3
 800195a:	493e      	ldr	r1, [pc, #248]	; (8001a54 <HAL_GPIO_DeInit+0x1b4>)
 800195c:	4013      	ands	r3, r2
 800195e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001960:	4b3c      	ldr	r3, [pc, #240]	; (8001a54 <HAL_GPIO_DeInit+0x1b4>)
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	493a      	ldr	r1, [pc, #232]	; (8001a54 <HAL_GPIO_DeInit+0x1b4>)
 800196a:	4013      	ands	r3, r2
 800196c:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800197e:	4a30      	ldr	r2, [pc, #192]	; (8001a40 <HAL_GPIO_DeInit+0x1a0>)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	3302      	adds	r3, #2
 8001986:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43da      	mvns	r2, r3
 800198e:	482c      	ldr	r0, [pc, #176]	; (8001a40 <HAL_GPIO_DeInit+0x1a0>)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	400a      	ands	r2, r1
 8001996:	3302      	adds	r3, #2
 8001998:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2103      	movs	r1, #3
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	401a      	ands	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	08da      	lsrs	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3208      	adds	r2, #8
 80019ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	220f      	movs	r2, #15
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	08d2      	lsrs	r2, r2, #3
 80019d2:	4019      	ands	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3208      	adds	r2, #8
 80019d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2103      	movs	r1, #3
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	401a      	ands	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	2101      	movs	r1, #1
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	401a      	ands	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2103      	movs	r1, #3
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	401a      	ands	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f47f af40 	bne.w	80018b0 <HAL_GPIO_DeInit+0x10>
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	371c      	adds	r7, #28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40010000 	.word	0x40010000
 8001a44:	48000400 	.word	0x48000400
 8001a48:	48000800 	.word	0x48000800
 8001a4c:	48000c00 	.word	0x48000c00
 8001a50:	48001000 	.word	0x48001000
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e081      	b.n	8001b9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d106      	bne.n	8001ab4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff f916 	bl	8000ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2224      	movs	r2, #36	; 0x24
 8001ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0201 	bic.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ad8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ae8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d107      	bne.n	8001b02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	e006      	b.n	8001b10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d104      	bne.n	8001b22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69d9      	ldr	r1, [r3, #28]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1a      	ldr	r2, [r3, #32]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b20      	cmp	r3, #32
 8001bba:	d138      	bne.n	8001c2e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e032      	b.n	8001c30 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2224      	movs	r2, #36	; 0x24
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0201 	bic.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bf8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6819      	ldr	r1, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c2e:	2302      	movs	r3, #2
  }
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	d139      	bne.n	8001cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e033      	b.n	8001cc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2224      	movs	r2, #36	; 0x24
 8001c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e000      	b.n	8001cc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cc6:	2302      	movs	r3, #2
  }
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd6:	b08b      	sub	sp, #44	; 0x2c
 8001cd8:	af06      	add	r7, sp, #24
 8001cda:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e0c4      	b.n	8001e70 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff f892 	bl	8000e24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2203      	movs	r2, #3
 8001d04:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f002 f8ef 	bl	8003ef0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	73fb      	strb	r3, [r7, #15]
 8001d16:	e040      	b.n	8001d9a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	440b      	add	r3, r1
 8001d28:	3301      	adds	r3, #1
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	3303      	adds	r3, #3
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	440b      	add	r3, r1
 8001d66:	3338      	adds	r3, #56	; 0x38
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	440b      	add	r3, r1
 8001d7a:	333c      	adds	r3, #60	; 0x3c
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3340      	adds	r3, #64	; 0x40
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	3301      	adds	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d3b9      	bcc.n	8001d18 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	e044      	b.n	8001e34 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	440b      	add	r3, r1
 8001db8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	440b      	add	r3, r1
 8001dce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	440b      	add	r3, r1
 8001dfa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	440b      	add	r3, r1
 8001e10:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	440b      	add	r3, r1
 8001e26:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	3301      	adds	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d3b5      	bcc.n	8001daa <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	687e      	ldr	r6, [r7, #4]
 8001e46:	466d      	mov	r5, sp
 8001e48:	f106 0410 	add.w	r4, r6, #16
 8001e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e50:	6823      	ldr	r3, [r4, #0]
 8001e52:	602b      	str	r3, [r5, #0]
 8001e54:	1d33      	adds	r3, r6, #4
 8001e56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e58:	6838      	ldr	r0, [r7, #0]
 8001e5a:	f002 f864 	bl	8003f26 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e88:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f001 b823 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 817d 	beq.w	80021ae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001eb4:	4bbc      	ldr	r3, [pc, #752]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d00c      	beq.n	8001eda <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ec0:	4bb9      	ldr	r3, [pc, #740]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d15c      	bne.n	8001f86 <HAL_RCC_OscConfig+0x10e>
 8001ecc:	4bb6      	ldr	r3, [pc, #728]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed8:	d155      	bne.n	8001f86 <HAL_RCC_OscConfig+0x10e>
 8001eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ede:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d102      	bne.n	8001f0c <HAL_RCC_OscConfig+0x94>
 8001f06:	4ba8      	ldr	r3, [pc, #672]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	e015      	b.n	8001f38 <HAL_RCC_OscConfig+0xc0>
 8001f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f10:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f24:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f28:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001f2c:	fa93 f3a3 	rbit	r3, r3
 8001f30:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001f34:	4b9c      	ldr	r3, [pc, #624]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f3c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001f40:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f44:	fa92 f2a2 	rbit	r2, r2
 8001f48:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001f4c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f50:	fab2 f282 	clz	r2, r2
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	f042 0220 	orr.w	r2, r2, #32
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	f002 021f 	and.w	r2, r2, #31
 8001f60:	2101      	movs	r1, #1
 8001f62:	fa01 f202 	lsl.w	r2, r1, r2
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 811f 	beq.w	80021ac <HAL_RCC_OscConfig+0x334>
 8001f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f040 8116 	bne.w	80021ac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f000 bfaf 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x12e>
 8001f98:	4b83      	ldr	r3, [pc, #524]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a82      	ldr	r2, [pc, #520]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	e036      	b.n	8002014 <HAL_RCC_OscConfig+0x19c>
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x158>
 8001fb6:	4b7c      	ldr	r3, [pc, #496]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a7b      	ldr	r2, [pc, #492]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b79      	ldr	r3, [pc, #484]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a78      	ldr	r2, [pc, #480]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e021      	b.n	8002014 <HAL_RCC_OscConfig+0x19c>
 8001fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x184>
 8001fe2:	4b71      	ldr	r3, [pc, #452]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a70      	ldr	r2, [pc, #448]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b6e      	ldr	r3, [pc, #440]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a6d      	ldr	r2, [pc, #436]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0x19c>
 8001ffc:	4b6a      	ldr	r3, [pc, #424]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a69      	ldr	r2, [pc, #420]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b67      	ldr	r3, [pc, #412]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a66      	ldr	r2, [pc, #408]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002012:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002014:	4b64      	ldr	r3, [pc, #400]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	f023 020f 	bic.w	r2, r3, #15
 800201c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002020:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	495f      	ldr	r1, [pc, #380]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 800202a:	4313      	orrs	r3, r2
 800202c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800202e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002032:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d059      	beq.n	80020f2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7ff f99f 	bl	8001380 <HAL_GetTick>
 8002042:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	e00a      	b.n	800205e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002048:	f7ff f99a 	bl	8001380 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b64      	cmp	r3, #100	; 0x64
 8002056:	d902      	bls.n	800205e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	f000 bf43 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>
 800205e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002062:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002072:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	095b      	lsrs	r3, r3, #5
 800207e:	b2db      	uxtb	r3, r3
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d102      	bne.n	8002090 <HAL_RCC_OscConfig+0x218>
 800208a:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	e015      	b.n	80020bc <HAL_RCC_OscConfig+0x244>
 8002090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002094:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80020a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020a8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80020ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80020b8:	4b3b      	ldr	r3, [pc, #236]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020c0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80020c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80020c8:	fa92 f2a2 	rbit	r2, r2
 80020cc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80020d0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80020d4:	fab2 f282 	clz	r2, r2
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	f042 0220 	orr.w	r2, r2, #32
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	f002 021f 	and.w	r2, r2, #31
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ab      	beq.n	8002048 <HAL_RCC_OscConfig+0x1d0>
 80020f0:	e05d      	b.n	80021ae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7ff f945 	bl	8001380 <HAL_GetTick>
 80020f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020fc:	f7ff f940 	bl	8001380 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b64      	cmp	r3, #100	; 0x64
 800210a:	d902      	bls.n	8002112 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	f000 bee9 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>
 8002112:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002116:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002126:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b01      	cmp	r3, #1
 800213c:	d102      	bne.n	8002144 <HAL_RCC_OscConfig+0x2cc>
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	e015      	b.n	8002170 <HAL_RCC_OscConfig+0x2f8>
 8002144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002148:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800215c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002160:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_RCC_OscConfig+0x330>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002174:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002178:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800217c:	fa92 f2a2 	rbit	r2, r2
 8002180:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002184:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002188:	fab2 f282 	clz	r2, r2
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	f042 0220 	orr.w	r2, r2, #32
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	f002 021f 	and.w	r2, r2, #31
 8002198:	2101      	movs	r1, #1
 800219a:	fa01 f202 	lsl.w	r2, r1, r2
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1ab      	bne.n	80020fc <HAL_RCC_OscConfig+0x284>
 80021a4:	e003      	b.n	80021ae <HAL_RCC_OscConfig+0x336>
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 817d 	beq.w	80024be <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021c4:	4ba6      	ldr	r3, [pc, #664]	; (8002460 <HAL_RCC_OscConfig+0x5e8>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00b      	beq.n	80021e8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021d0:	4ba3      	ldr	r3, [pc, #652]	; (8002460 <HAL_RCC_OscConfig+0x5e8>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d172      	bne.n	80022c2 <HAL_RCC_OscConfig+0x44a>
 80021dc:	4ba0      	ldr	r3, [pc, #640]	; (8002460 <HAL_RCC_OscConfig+0x5e8>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d16c      	bne.n	80022c2 <HAL_RCC_OscConfig+0x44a>
 80021e8:	2302      	movs	r3, #2
 80021ea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80021fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <HAL_RCC_OscConfig+0x3a0>
 8002212:	4b93      	ldr	r3, [pc, #588]	; (8002460 <HAL_RCC_OscConfig+0x5e8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	e013      	b.n	8002240 <HAL_RCC_OscConfig+0x3c8>
 8002218:	2302      	movs	r3, #2
 800221a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800222a:	2302      	movs	r3, #2
 800222c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002230:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800223c:	4b88      	ldr	r3, [pc, #544]	; (8002460 <HAL_RCC_OscConfig+0x5e8>)
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	2202      	movs	r2, #2
 8002242:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002246:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800224a:	fa92 f2a2 	rbit	r2, r2
 800224e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002252:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002256:	fab2 f282 	clz	r2, r2
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	f042 0220 	orr.w	r2, r2, #32
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f002 021f 	and.w	r2, r2, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f202 	lsl.w	r2, r1, r2
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCC_OscConfig+0x410>
 8002272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002276:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d002      	beq.n	8002288 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	f000 be2e 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002288:	4b75      	ldr	r3, [pc, #468]	; (8002460 <HAL_RCC_OscConfig+0x5e8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002294:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	21f8      	movs	r1, #248	; 0xf8
 800229e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80022a6:	fa91 f1a1 	rbit	r1, r1
 80022aa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80022ae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80022b2:	fab1 f181 	clz	r1, r1
 80022b6:	b2c9      	uxtb	r1, r1
 80022b8:	408b      	lsls	r3, r1
 80022ba:	4969      	ldr	r1, [pc, #420]	; (8002460 <HAL_RCC_OscConfig+0x5e8>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c0:	e0fd      	b.n	80024be <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8088 	beq.w	80023e4 <HAL_RCC_OscConfig+0x56c>
 80022d4:	2301      	movs	r3, #1
 80022d6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80022e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	461a      	mov	r2, r3
 80022fc:	2301      	movs	r3, #1
 80022fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7ff f83e 	bl	8001380 <HAL_GetTick>
 8002304:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002308:	e00a      	b.n	8002320 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800230a:	f7ff f839 	bl	8001380 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d902      	bls.n	8002320 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	f000 bde2 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>
 8002320:	2302      	movs	r3, #2
 8002322:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002332:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d102      	bne.n	8002350 <HAL_RCC_OscConfig+0x4d8>
 800234a:	4b45      	ldr	r3, [pc, #276]	; (8002460 <HAL_RCC_OscConfig+0x5e8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	e013      	b.n	8002378 <HAL_RCC_OscConfig+0x500>
 8002350:	2302      	movs	r3, #2
 8002352:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002362:	2302      	movs	r3, #2
 8002364:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002368:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002374:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <HAL_RCC_OscConfig+0x5e8>)
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	2202      	movs	r2, #2
 800237a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800237e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002382:	fa92 f2a2 	rbit	r2, r2
 8002386:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800238a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800238e:	fab2 f282 	clz	r2, r2
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	f042 0220 	orr.w	r2, r2, #32
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f002 021f 	and.w	r2, r2, #31
 800239e:	2101      	movs	r1, #1
 80023a0:	fa01 f202 	lsl.w	r2, r1, r2
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0af      	beq.n	800230a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <HAL_RCC_OscConfig+0x5e8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	21f8      	movs	r1, #248	; 0xf8
 80023c0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80023c8:	fa91 f1a1 	rbit	r1, r1
 80023cc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80023d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80023d4:	fab1 f181 	clz	r1, r1
 80023d8:	b2c9      	uxtb	r1, r1
 80023da:	408b      	lsls	r3, r1
 80023dc:	4920      	ldr	r1, [pc, #128]	; (8002460 <HAL_RCC_OscConfig+0x5e8>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]
 80023e2:	e06c      	b.n	80024be <HAL_RCC_OscConfig+0x646>
 80023e4:	2301      	movs	r3, #1
 80023e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80023f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002404:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	461a      	mov	r2, r3
 800240c:	2300      	movs	r3, #0
 800240e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7fe ffb6 	bl	8001380 <HAL_GetTick>
 8002414:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002418:	e00a      	b.n	8002430 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800241a:	f7fe ffb1 	bl	8001380 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d902      	bls.n	8002430 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	f000 bd5a 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>
 8002430:	2302      	movs	r3, #2
 8002432:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d104      	bne.n	8002464 <HAL_RCC_OscConfig+0x5ec>
 800245a:	4b01      	ldr	r3, [pc, #4]	; (8002460 <HAL_RCC_OscConfig+0x5e8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	e015      	b.n	800248c <HAL_RCC_OscConfig+0x614>
 8002460:	40021000 	.word	0x40021000
 8002464:	2302      	movs	r3, #2
 8002466:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002476:	2302      	movs	r3, #2
 8002478:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800247c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002488:	4bc8      	ldr	r3, [pc, #800]	; (80027ac <HAL_RCC_OscConfig+0x934>)
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	2202      	movs	r2, #2
 800248e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002492:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002496:	fa92 f2a2 	rbit	r2, r2
 800249a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800249e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80024a2:	fab2 f282 	clz	r2, r2
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	f042 0220 	orr.w	r2, r2, #32
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f002 021f 	and.w	r2, r2, #31
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f202 	lsl.w	r2, r1, r2
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1ad      	bne.n	800241a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8110 	beq.w	80026f4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d079      	beq.n	80025d8 <HAL_RCC_OscConfig+0x760>
 80024e4:	2301      	movs	r3, #1
 80024e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80024f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	4bab      	ldr	r3, [pc, #684]	; (80027b0 <HAL_RCC_OscConfig+0x938>)
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	461a      	mov	r2, r3
 800250a:	2301      	movs	r3, #1
 800250c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7fe ff37 	bl	8001380 <HAL_GetTick>
 8002512:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002516:	e00a      	b.n	800252e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002518:	f7fe ff32 	bl	8001380 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d902      	bls.n	800252e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	f000 bcdb 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>
 800252e:	2302      	movs	r3, #2
 8002530:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002544:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002548:	2202      	movs	r2, #2
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	fa93 f2a3 	rbit	r2, r3
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800256c:	2202      	movs	r2, #2
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	fa93 f2a3 	rbit	r2, r3
 800257e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002582:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002586:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002588:	4b88      	ldr	r3, [pc, #544]	; (80027ac <HAL_RCC_OscConfig+0x934>)
 800258a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800258c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002590:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002594:	2102      	movs	r1, #2
 8002596:	6019      	str	r1, [r3, #0]
 8002598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	fa93 f1a3 	rbit	r1, r3
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025ae:	6019      	str	r1, [r3, #0]
  return result;
 80025b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0a0      	beq.n	8002518 <HAL_RCC_OscConfig+0x6a0>
 80025d6:	e08d      	b.n	80026f4 <HAL_RCC_OscConfig+0x87c>
 80025d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	fa93 f2a3 	rbit	r2, r3
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025fa:	601a      	str	r2, [r3, #0]
  return result;
 80025fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002600:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002604:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	4b68      	ldr	r3, [pc, #416]	; (80027b0 <HAL_RCC_OscConfig+0x938>)
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	461a      	mov	r2, r3
 8002616:	2300      	movs	r3, #0
 8002618:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261a:	f7fe feb1 	bl	8001380 <HAL_GetTick>
 800261e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002622:	e00a      	b.n	800263a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002624:	f7fe feac 	bl	8001380 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d902      	bls.n	800263a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	f000 bc55 	b.w	8002ee4 <HAL_RCC_OscConfig+0x106c>
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002642:	2202      	movs	r2, #2
 8002644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	fa93 f2a3 	rbit	r2, r3
 8002654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002658:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002662:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002666:	2202      	movs	r2, #2
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	fa93 f2a3 	rbit	r2, r3
 8002678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800268a:	2202      	movs	r2, #2
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80026a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a6:	4b41      	ldr	r3, [pc, #260]	; (80027ac <HAL_RCC_OscConfig+0x934>)
 80026a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80026b2:	2102      	movs	r1, #2
 80026b4:	6019      	str	r1, [r3, #0]
 80026b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	fa93 f1a3 	rbit	r1, r3
 80026c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80026cc:	6019      	str	r1, [r3, #0]
  return result;
 80026ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	fab3 f383 	clz	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d197      	bne.n	8002624 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 81a1 	beq.w	8002a4c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002710:	4b26      	ldr	r3, [pc, #152]	; (80027ac <HAL_RCC_OscConfig+0x934>)
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d116      	bne.n	800274a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271c:	4b23      	ldr	r3, [pc, #140]	; (80027ac <HAL_RCC_OscConfig+0x934>)
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	4a22      	ldr	r2, [pc, #136]	; (80027ac <HAL_RCC_OscConfig+0x934>)
 8002722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002726:	61d3      	str	r3, [r2, #28]
 8002728:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_RCC_OscConfig+0x934>)
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002742:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274a:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <HAL_RCC_OscConfig+0x93c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11a      	bne.n	800278c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002756:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <HAL_RCC_OscConfig+0x93c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a16      	ldr	r2, [pc, #88]	; (80027b4 <HAL_RCC_OscConfig+0x93c>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002760:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002762:	f7fe fe0d 	bl	8001380 <HAL_GetTick>
 8002766:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	e009      	b.n	8002780 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276c:	f7fe fe08 	bl	8001380 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b64      	cmp	r3, #100	; 0x64
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e3b1      	b.n	8002ee4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <HAL_RCC_OscConfig+0x93c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0ef      	beq.n	800276c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d10d      	bne.n	80027b8 <HAL_RCC_OscConfig+0x940>
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <HAL_RCC_OscConfig+0x934>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4a02      	ldr	r2, [pc, #8]	; (80027ac <HAL_RCC_OscConfig+0x934>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6213      	str	r3, [r2, #32]
 80027a8:	e03c      	b.n	8002824 <HAL_RCC_OscConfig+0x9ac>
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000
 80027b0:	10908120 	.word	0x10908120
 80027b4:	40007000 	.word	0x40007000
 80027b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10c      	bne.n	80027e2 <HAL_RCC_OscConfig+0x96a>
 80027c8:	4bc1      	ldr	r3, [pc, #772]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	4ac0      	ldr	r2, [pc, #768]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	6213      	str	r3, [r2, #32]
 80027d4:	4bbe      	ldr	r3, [pc, #760]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4abd      	ldr	r2, [pc, #756]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80027da:	f023 0304 	bic.w	r3, r3, #4
 80027de:	6213      	str	r3, [r2, #32]
 80027e0:	e020      	b.n	8002824 <HAL_RCC_OscConfig+0x9ac>
 80027e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b05      	cmp	r3, #5
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0x994>
 80027f2:	4bb7      	ldr	r3, [pc, #732]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4ab6      	ldr	r2, [pc, #728]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	6213      	str	r3, [r2, #32]
 80027fe:	4bb4      	ldr	r3, [pc, #720]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4ab3      	ldr	r2, [pc, #716]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6213      	str	r3, [r2, #32]
 800280a:	e00b      	b.n	8002824 <HAL_RCC_OscConfig+0x9ac>
 800280c:	4bb0      	ldr	r3, [pc, #704]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4aaf      	ldr	r2, [pc, #700]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	6213      	str	r3, [r2, #32]
 8002818:	4bad      	ldr	r3, [pc, #692]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4aac      	ldr	r2, [pc, #688]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 800281e:	f023 0304 	bic.w	r3, r3, #4
 8002822:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002828:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8081 	beq.w	8002938 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002836:	f7fe fda3 	bl	8001380 <HAL_GetTick>
 800283a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe fd9e 	bl	8001380 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e345      	b.n	8002ee4 <HAL_RCC_OscConfig+0x106c>
 8002858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002860:	2202      	movs	r2, #2
 8002862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002868:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	fa93 f2a3 	rbit	r2, r3
 8002872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002876:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002880:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002884:	2202      	movs	r2, #2
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	fa93 f2a3 	rbit	r2, r3
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800289e:	601a      	str	r2, [r3, #0]
  return result;
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d102      	bne.n	80028c4 <HAL_RCC_OscConfig+0xa4c>
 80028be:	4b84      	ldr	r3, [pc, #528]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	e013      	b.n	80028ec <HAL_RCC_OscConfig+0xa74>
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028cc:	2202      	movs	r2, #2
 80028ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	fa93 f2a3 	rbit	r2, r3
 80028de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	4b79      	ldr	r3, [pc, #484]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80028f4:	2102      	movs	r1, #2
 80028f6:	6011      	str	r1, [r2, #0]
 80028f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	fa92 f1a2 	rbit	r1, r2
 8002906:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800290a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800290e:	6011      	str	r1, [r2, #0]
  return result;
 8002910:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002914:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	fab2 f282 	clz	r2, r2
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f002 021f 	and.w	r2, r2, #31
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d084      	beq.n	8002840 <HAL_RCC_OscConfig+0x9c8>
 8002936:	e07f      	b.n	8002a38 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002938:	f7fe fd22 	bl	8001380 <HAL_GetTick>
 800293c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002940:	e00b      	b.n	800295a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002942:	f7fe fd1d 	bl	8001380 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e2c4      	b.n	8002ee4 <HAL_RCC_OscConfig+0x106c>
 800295a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002962:	2202      	movs	r2, #2
 8002964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	fa93 f2a3 	rbit	r2, r3
 8002974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002978:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002982:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002986:	2202      	movs	r2, #2
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	fa93 f2a3 	rbit	r2, r3
 8002998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029a0:	601a      	str	r2, [r3, #0]
  return result;
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f043 0302 	orr.w	r3, r3, #2
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d102      	bne.n	80029c6 <HAL_RCC_OscConfig+0xb4e>
 80029c0:	4b43      	ldr	r3, [pc, #268]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	e013      	b.n	80029ee <HAL_RCC_OscConfig+0xb76>
 80029c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029ce:	2202      	movs	r2, #2
 80029d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	fa93 f2a3 	rbit	r2, r3
 80029e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80029f6:	2102      	movs	r1, #2
 80029f8:	6011      	str	r1, [r2, #0]
 80029fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	fa92 f1a2 	rbit	r1, r2
 8002a08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a0c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a10:	6011      	str	r1, [r2, #0]
  return result;
 8002a12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a16:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	fab2 f282 	clz	r2, r2
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f002 021f 	and.w	r2, r2, #31
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d184      	bne.n	8002942 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a38:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a40:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	4a22      	ldr	r2, [pc, #136]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 8002a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8242 	beq.w	8002ee2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <HAL_RCC_OscConfig+0xc58>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	f000 8213 	beq.w	8002e92 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	f040 8162 	bne.w	8002d42 <HAL_RCC_OscConfig+0xeca>
 8002a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a82:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	fa93 f2a3 	rbit	r2, r3
 8002a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002aa2:	601a      	str	r2, [r3, #0]
  return result;
 8002aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002aac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aae:	fab3 f383 	clz	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ab8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fc5c 	bl	8001380 <HAL_GetTick>
 8002ac8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002acc:	e00c      	b.n	8002ae8 <HAL_RCC_OscConfig+0xc70>
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fe fc54 	bl	8001380 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e1fd      	b.n	8002ee4 <HAL_RCC_OscConfig+0x106c>
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002af0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	fa93 f2a3 	rbit	r2, r3
 8002b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b08:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b0c:	601a      	str	r2, [r3, #0]
  return result;
 8002b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b12:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b16:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b18:	fab3 f383 	clz	r3, r3
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d102      	bne.n	8002b32 <HAL_RCC_OscConfig+0xcba>
 8002b2c:	4bb0      	ldr	r3, [pc, #704]	; (8002df0 <HAL_RCC_OscConfig+0xf78>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	e027      	b.n	8002b82 <HAL_RCC_OscConfig+0xd0a>
 8002b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b36:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b44:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	fa93 f2a3 	rbit	r2, r3
 8002b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b52:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	fa93 f2a3 	rbit	r2, r3
 8002b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b78:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	4b9c      	ldr	r3, [pc, #624]	; (8002df0 <HAL_RCC_OscConfig+0xf78>)
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b86:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b8a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b8e:	6011      	str	r1, [r2, #0]
 8002b90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b94:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	fa92 f1a2 	rbit	r1, r2
 8002b9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ba2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ba6:	6011      	str	r1, [r2, #0]
  return result;
 8002ba8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	fab2 f282 	clz	r2, r2
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	f042 0220 	orr.w	r2, r2, #32
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	f002 021f 	and.w	r2, r2, #31
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d182      	bne.n	8002ad4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bce:	4b88      	ldr	r3, [pc, #544]	; (8002df0 <HAL_RCC_OscConfig+0xf78>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	497f      	ldr	r1, [pc, #508]	; (8002df0 <HAL_RCC_OscConfig+0xf78>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
 8002bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002bfe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c08:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	fa93 f2a3 	rbit	r2, r3
 8002c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c16:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c1a:	601a      	str	r2, [r3, #0]
  return result;
 8002c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c20:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c24:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	461a      	mov	r2, r3
 8002c38:	2301      	movs	r3, #1
 8002c3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fba0 	bl	8001380 <HAL_GetTick>
 8002c40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c44:	e009      	b.n	8002c5a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c46:	f7fe fb9b 	bl	8001380 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e144      	b.n	8002ee4 <HAL_RCC_OscConfig+0x106c>
 8002c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	fa93 f2a3 	rbit	r2, r3
 8002c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c7e:	601a      	str	r2, [r3, #0]
  return result;
 8002c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c84:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d102      	bne.n	8002ca4 <HAL_RCC_OscConfig+0xe2c>
 8002c9e:	4b54      	ldr	r3, [pc, #336]	; (8002df0 <HAL_RCC_OscConfig+0xf78>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	e027      	b.n	8002cf4 <HAL_RCC_OscConfig+0xe7c>
 8002ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	fa93 f2a3 	rbit	r2, r3
 8002cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002cd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cdc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	fa93 f2a3 	rbit	r2, r3
 8002ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <HAL_RCC_OscConfig+0xf78>)
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cf8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002cfc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d00:	6011      	str	r1, [r2, #0]
 8002d02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d06:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	fa92 f1a2 	rbit	r1, r2
 8002d10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d14:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d18:	6011      	str	r1, [r2, #0]
  return result;
 8002d1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d1e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	fab2 f282 	clz	r2, r2
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	f042 0220 	orr.w	r2, r2, #32
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	f002 021f 	and.w	r2, r2, #31
 8002d34:	2101      	movs	r1, #1
 8002d36:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d082      	beq.n	8002c46 <HAL_RCC_OscConfig+0xdce>
 8002d40:	e0cf      	b.n	8002ee2 <HAL_RCC_OscConfig+0x106a>
 8002d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d46:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d54:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	fa93 f2a3 	rbit	r2, r3
 8002d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d62:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d66:	601a      	str	r2, [r3, #0]
  return result;
 8002d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d70:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	461a      	mov	r2, r3
 8002d84:	2300      	movs	r3, #0
 8002d86:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe fafa 	bl	8001380 <HAL_GetTick>
 8002d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d90:	e009      	b.n	8002da6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fe faf5 	bl	8001380 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e09e      	b.n	8002ee4 <HAL_RCC_OscConfig+0x106c>
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002dae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	fa93 f2a3 	rbit	r2, r3
 8002dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002dca:	601a      	str	r2, [r3, #0]
  return result;
 8002dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002dd4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d104      	bne.n	8002df4 <HAL_RCC_OscConfig+0xf7c>
 8002dea:	4b01      	ldr	r3, [pc, #4]	; (8002df0 <HAL_RCC_OscConfig+0xf78>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	e029      	b.n	8002e44 <HAL_RCC_OscConfig+0xfcc>
 8002df0:	40021000 	.word	0x40021000
 8002df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002dfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e06:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	fa93 f2a3 	rbit	r2, r3
 8002e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e14:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	fa93 f2a3 	rbit	r2, r3
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	4b2b      	ldr	r3, [pc, #172]	; (8002ef0 <HAL_RCC_OscConfig+0x1078>)
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e48:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e50:	6011      	str	r1, [r2, #0]
 8002e52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e56:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	fa92 f1a2 	rbit	r1, r2
 8002e60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e64:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e68:	6011      	str	r1, [r2, #0]
  return result;
 8002e6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e6e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	fab2 f282 	clz	r2, r2
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	f042 0220 	orr.w	r2, r2, #32
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	f002 021f 	and.w	r2, r2, #31
 8002e84:	2101      	movs	r1, #1
 8002e86:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d180      	bne.n	8002d92 <HAL_RCC_OscConfig+0xf1a>
 8002e90:	e027      	b.n	8002ee2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e01e      	b.n	8002ee4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ea6:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_RCC_OscConfig+0x1078>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002eae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002eb2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d10b      	bne.n	8002ede <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ec6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002eca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d001      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b09e      	sub	sp, #120	; 0x78
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e162      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b90      	ldr	r3, [pc, #576]	; (8003150 <HAL_RCC_ClockConfig+0x25c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d910      	bls.n	8002f3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b8d      	ldr	r3, [pc, #564]	; (8003150 <HAL_RCC_ClockConfig+0x25c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 0207 	bic.w	r2, r3, #7
 8002f22:	498b      	ldr	r1, [pc, #556]	; (8003150 <HAL_RCC_ClockConfig+0x25c>)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2a:	4b89      	ldr	r3, [pc, #548]	; (8003150 <HAL_RCC_ClockConfig+0x25c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e14a      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f48:	4b82      	ldr	r3, [pc, #520]	; (8003154 <HAL_RCC_ClockConfig+0x260>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	497f      	ldr	r1, [pc, #508]	; (8003154 <HAL_RCC_ClockConfig+0x260>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80dc 	beq.w	8003120 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d13c      	bne.n	8002fea <HAL_RCC_ClockConfig+0xf6>
 8002f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d102      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xa6>
 8002f94:	4b6f      	ldr	r3, [pc, #444]	; (8003154 <HAL_RCC_ClockConfig+0x260>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	e00f      	b.n	8002fba <HAL_RCC_ClockConfig+0xc6>
 8002f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	667b      	str	r3, [r7, #100]	; 0x64
 8002fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fac:	663b      	str	r3, [r7, #96]	; 0x60
 8002fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fb0:	fa93 f3a3 	rbit	r3, r3
 8002fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fb6:	4b67      	ldr	r3, [pc, #412]	; (8003154 <HAL_RCC_ClockConfig+0x260>)
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fc2:	fa92 f2a2 	rbit	r2, r2
 8002fc6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002fc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fca:	fab2 f282 	clz	r2, r2
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	f042 0220 	orr.w	r2, r2, #32
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	f002 021f 	and.w	r2, r2, #31
 8002fda:	2101      	movs	r1, #1
 8002fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d17b      	bne.n	80030de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e0f3      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d13c      	bne.n	800306c <HAL_RCC_ClockConfig+0x178>
 8002ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ff6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d102      	bne.n	800301c <HAL_RCC_ClockConfig+0x128>
 8003016:	4b4f      	ldr	r3, [pc, #316]	; (8003154 <HAL_RCC_ClockConfig+0x260>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	e00f      	b.n	800303c <HAL_RCC_ClockConfig+0x148>
 800301c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003020:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	647b      	str	r3, [r7, #68]	; 0x44
 800302a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800302e:	643b      	str	r3, [r7, #64]	; 0x40
 8003030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003038:	4b46      	ldr	r3, [pc, #280]	; (8003154 <HAL_RCC_ClockConfig+0x260>)
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003040:	63ba      	str	r2, [r7, #56]	; 0x38
 8003042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003044:	fa92 f2a2 	rbit	r2, r2
 8003048:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800304a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800304c:	fab2 f282 	clz	r2, r2
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	f042 0220 	orr.w	r2, r2, #32
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	f002 021f 	and.w	r2, r2, #31
 800305c:	2101      	movs	r1, #1
 800305e:	fa01 f202 	lsl.w	r2, r1, r2
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d13a      	bne.n	80030de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0b2      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2de>
 800306c:	2302      	movs	r3, #2
 800306e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d102      	bne.n	8003094 <HAL_RCC_ClockConfig+0x1a0>
 800308e:	4b31      	ldr	r3, [pc, #196]	; (8003154 <HAL_RCC_ClockConfig+0x260>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	e00d      	b.n	80030b0 <HAL_RCC_ClockConfig+0x1bc>
 8003094:	2302      	movs	r3, #2
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	fa93 f3a3 	rbit	r3, r3
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
 80030a0:	2302      	movs	r3, #2
 80030a2:	623b      	str	r3, [r7, #32]
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	4b29      	ldr	r3, [pc, #164]	; (8003154 <HAL_RCC_ClockConfig+0x260>)
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	2202      	movs	r2, #2
 80030b2:	61ba      	str	r2, [r7, #24]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	fa92 f2a2 	rbit	r2, r2
 80030ba:	617a      	str	r2, [r7, #20]
  return result;
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	fab2 f282 	clz	r2, r2
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	f042 0220 	orr.w	r2, r2, #32
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	f002 021f 	and.w	r2, r2, #31
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f202 	lsl.w	r2, r1, r2
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e079      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030de:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <HAL_RCC_ClockConfig+0x260>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f023 0203 	bic.w	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	491a      	ldr	r1, [pc, #104]	; (8003154 <HAL_RCC_ClockConfig+0x260>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f0:	f7fe f946 	bl	8001380 <HAL_GetTick>
 80030f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	e00a      	b.n	800310e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f8:	f7fe f942 	bl	8001380 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	; 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e061      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <HAL_RCC_ClockConfig+0x260>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 020c 	and.w	r2, r3, #12
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	429a      	cmp	r2, r3
 800311e:	d1eb      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_RCC_ClockConfig+0x25c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d214      	bcs.n	8003158 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <HAL_RCC_ClockConfig+0x25c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 0207 	bic.w	r2, r3, #7
 8003136:	4906      	ldr	r1, [pc, #24]	; (8003150 <HAL_RCC_ClockConfig+0x25c>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b04      	ldr	r3, [pc, #16]	; (8003150 <HAL_RCC_ClockConfig+0x25c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d005      	beq.n	8003158 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e040      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2de>
 8003150:	40022000 	.word	0x40022000
 8003154:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <HAL_RCC_ClockConfig+0x2e8>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	491a      	ldr	r1, [pc, #104]	; (80031dc <HAL_RCC_ClockConfig+0x2e8>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003182:	4b16      	ldr	r3, [pc, #88]	; (80031dc <HAL_RCC_ClockConfig+0x2e8>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4912      	ldr	r1, [pc, #72]	; (80031dc <HAL_RCC_ClockConfig+0x2e8>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003196:	f000 f829 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 800319a:	4601      	mov	r1, r0
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <HAL_RCC_ClockConfig+0x2e8>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031a4:	22f0      	movs	r2, #240	; 0xf0
 80031a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	fa92 f2a2 	rbit	r2, r2
 80031ae:	60fa      	str	r2, [r7, #12]
  return result;
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	fab2 f282 	clz	r2, r2
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	40d3      	lsrs	r3, r2
 80031ba:	4a09      	ldr	r2, [pc, #36]	; (80031e0 <HAL_RCC_ClockConfig+0x2ec>)
 80031bc:	5cd3      	ldrb	r3, [r2, r3]
 80031be:	fa21 f303 	lsr.w	r3, r1, r3
 80031c2:	4a08      	ldr	r2, [pc, #32]	; (80031e4 <HAL_RCC_ClockConfig+0x2f0>)
 80031c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80031c6:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_RCC_ClockConfig+0x2f4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe f894 	bl	80012f8 <HAL_InitTick>
  
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3778      	adds	r7, #120	; 0x78
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	080066ec 	.word	0x080066ec
 80031e4:	20000040 	.word	0x20000040
 80031e8:	20000044 	.word	0x20000044

080031ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b08b      	sub	sp, #44	; 0x2c
 80031f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	2300      	movs	r3, #0
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003206:	4b29      	ldr	r3, [pc, #164]	; (80032ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b04      	cmp	r3, #4
 8003214:	d002      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0x30>
 8003216:	2b08      	cmp	r3, #8
 8003218:	d003      	beq.n	8003222 <HAL_RCC_GetSysClockFreq+0x36>
 800321a:	e03c      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800321c:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800321e:	623b      	str	r3, [r7, #32]
      break;
 8003220:	e03c      	b.n	800329c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003228:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800322c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	fa92 f2a2 	rbit	r2, r2
 8003234:	607a      	str	r2, [r7, #4]
  return result;
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	fab2 f282 	clz	r2, r2
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	40d3      	lsrs	r3, r2
 8003240:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003242:	5cd3      	ldrb	r3, [r2, r3]
 8003244:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003246:	4b19      	ldr	r3, [pc, #100]	; (80032ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	220f      	movs	r2, #15
 8003250:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	fa92 f2a2 	rbit	r2, r2
 8003258:	60fa      	str	r2, [r7, #12]
  return result;
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	fab2 f282 	clz	r2, r2
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	40d3      	lsrs	r3, r2
 8003264:	4a14      	ldr	r2, [pc, #80]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003266:	5cd3      	ldrb	r3, [r2, r3]
 8003268:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003274:	4a0e      	ldr	r2, [pc, #56]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	fbb2 f2f3 	udiv	r2, r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
 8003284:	e004      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	4a0c      	ldr	r2, [pc, #48]	; (80032bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	623b      	str	r3, [r7, #32]
      break;
 8003294:	e002      	b.n	800329c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003298:	623b      	str	r3, [r7, #32]
      break;
 800329a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800329c:	6a3b      	ldr	r3, [r7, #32]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	372c      	adds	r7, #44	; 0x2c
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000
 80032b0:	007a1200 	.word	0x007a1200
 80032b4:	080066fc 	.word	0x080066fc
 80032b8:	0800670c 	.word	0x0800670c
 80032bc:	003d0900 	.word	0x003d0900

080032c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b092      	sub	sp, #72	; 0x48
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80032d0:	2300      	movs	r3, #0
 80032d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 80d4 	beq.w	800348c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032e4:	4b4e      	ldr	r3, [pc, #312]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10e      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f0:	4b4b      	ldr	r3, [pc, #300]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	4a4a      	ldr	r2, [pc, #296]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fa:	61d3      	str	r3, [r2, #28]
 80032fc:	4b48      	ldr	r3, [pc, #288]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330e:	4b45      	ldr	r3, [pc, #276]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003316:	2b00      	cmp	r3, #0
 8003318:	d118      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800331a:	4b42      	ldr	r3, [pc, #264]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a41      	ldr	r2, [pc, #260]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003324:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003326:	f7fe f82b 	bl	8001380 <HAL_GetTick>
 800332a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332c:	e008      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800332e:	f7fe f827 	bl	8001380 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b64      	cmp	r3, #100	; 0x64
 800333a:	d901      	bls.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e169      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003340:	4b38      	ldr	r3, [pc, #224]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800334c:	4b34      	ldr	r3, [pc, #208]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003354:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8084 	beq.w	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003368:	429a      	cmp	r2, r3
 800336a:	d07c      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800336c:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800337a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	461a      	mov	r2, r3
 800338e:	4b26      	ldr	r3, [pc, #152]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	461a      	mov	r2, r3
 8003396:	2301      	movs	r3, #1
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800339e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	461a      	mov	r2, r3
 80033ba:	2300      	movs	r3, #0
 80033bc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033be:	4a18      	ldr	r2, [pc, #96]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d04b      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fd ffd7 	bl	8001380 <HAL_GetTick>
 80033d2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	e00a      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fd ffd3 	bl	8001380 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e113      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80033ec:	2302      	movs	r3, #2
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
 80033f8:	2302      	movs	r3, #2
 80033fa:	623b      	str	r3, [r7, #32]
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	61fb      	str	r3, [r7, #28]
  return result;
 8003404:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f043 0302 	orr.w	r3, r3, #2
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d108      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800341a:	4b01      	ldr	r3, [pc, #4]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	e00d      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003420:	40021000 	.word	0x40021000
 8003424:	40007000 	.word	0x40007000
 8003428:	10908100 	.word	0x10908100
 800342c:	2302      	movs	r3, #2
 800342e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	4b78      	ldr	r3, [pc, #480]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	2202      	movs	r2, #2
 800343e:	613a      	str	r2, [r7, #16]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	fa92 f2a2 	rbit	r2, r2
 8003446:	60fa      	str	r2, [r7, #12]
  return result;
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	fab2 f282 	clz	r2, r2
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	f002 021f 	and.w	r2, r2, #31
 800345a:	2101      	movs	r1, #1
 800345c:	fa01 f202 	lsl.w	r2, r1, r2
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0b7      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003466:	4b6d      	ldr	r3, [pc, #436]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	496a      	ldr	r1, [pc, #424]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003474:	4313      	orrs	r3, r2
 8003476:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003478:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800347c:	2b01      	cmp	r3, #1
 800347e:	d105      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003480:	4b66      	ldr	r3, [pc, #408]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	4a65      	ldr	r2, [pc, #404]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800348a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003498:	4b60      	ldr	r3, [pc, #384]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	f023 0203 	bic.w	r2, r3, #3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	495d      	ldr	r1, [pc, #372]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034b6:	4b59      	ldr	r3, [pc, #356]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	4956      	ldr	r1, [pc, #344]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034d4:	4b51      	ldr	r3, [pc, #324]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	494e      	ldr	r1, [pc, #312]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034f2:	4b4a      	ldr	r3, [pc, #296]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	f023 0210 	bic.w	r2, r3, #16
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	4947      	ldr	r1, [pc, #284]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003500:	4313      	orrs	r3, r2
 8003502:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003510:	4b42      	ldr	r3, [pc, #264]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	493f      	ldr	r1, [pc, #252]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800351e:	4313      	orrs	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800352e:	4b3b      	ldr	r3, [pc, #236]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	f023 0220 	bic.w	r2, r3, #32
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4938      	ldr	r1, [pc, #224]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800353c:	4313      	orrs	r3, r2
 800353e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800354c:	4b33      	ldr	r3, [pc, #204]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	4930      	ldr	r1, [pc, #192]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800355a:	4313      	orrs	r3, r2
 800355c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0310 	and.w	r3, r3, #16
 8003566:	2b00      	cmp	r3, #0
 8003568:	d008      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800356a:	4b2c      	ldr	r3, [pc, #176]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	4929      	ldr	r1, [pc, #164]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003578:	4313      	orrs	r3, r2
 800357a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003588:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	4921      	ldr	r1, [pc, #132]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003596:	4313      	orrs	r3, r2
 8003598:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035a6:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	491a      	ldr	r1, [pc, #104]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80035c4:	4b15      	ldr	r3, [pc, #84]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	4912      	ldr	r1, [pc, #72]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80035e2:	4b0e      	ldr	r3, [pc, #56]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	490b      	ldr	r1, [pc, #44]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003600:	4b06      	ldr	r3, [pc, #24]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360c:	4903      	ldr	r1, [pc, #12]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800360e:	4313      	orrs	r3, r2
 8003610:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3748      	adds	r7, #72	; 0x48
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40021000 	.word	0x40021000

08003620 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e09d      	b.n	800376e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003642:	d009      	beq.n	8003658 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	61da      	str	r2, [r3, #28]
 800364a:	e005      	b.n	8003658 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd fb78 	bl	8000d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800368e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003698:	d902      	bls.n	80036a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e002      	b.n	80036a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80036ae:	d007      	beq.n	80036c0 <HAL_SPI_Init+0xa0>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036b8:	d002      	beq.n	80036c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003702:	ea42 0103 	orr.w	r1, r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	0c1b      	lsrs	r3, r3, #16
 800371c:	f003 0204 	and.w	r2, r3, #4
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800373c:	ea42 0103 	orr.w	r1, r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800375c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e01a      	b.n	80037be <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800379e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7fd fb23 	bl	8000dec <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b08a      	sub	sp, #40	; 0x28
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
 80037d2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037d4:	2301      	movs	r3, #1
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_SPI_TransmitReceive+0x26>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e20a      	b.n	8003c02 <HAL_SPI_TransmitReceive+0x43c>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037f4:	f7fd fdc4 	bl	8001380 <HAL_GetTick>
 80037f8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003800:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003808:	887b      	ldrh	r3, [r7, #2]
 800380a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800380c:	887b      	ldrh	r3, [r7, #2]
 800380e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003810:	7efb      	ldrb	r3, [r7, #27]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d00e      	beq.n	8003834 <HAL_SPI_TransmitReceive+0x6e>
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800381c:	d106      	bne.n	800382c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d102      	bne.n	800382c <HAL_SPI_TransmitReceive+0x66>
 8003826:	7efb      	ldrb	r3, [r7, #27]
 8003828:	2b04      	cmp	r3, #4
 800382a:	d003      	beq.n	8003834 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800382c:	2302      	movs	r3, #2
 800382e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003832:	e1e0      	b.n	8003bf6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_SPI_TransmitReceive+0x80>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <HAL_SPI_TransmitReceive+0x80>
 8003840:	887b      	ldrh	r3, [r7, #2]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d103      	bne.n	800384e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800384c:	e1d3      	b.n	8003bf6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b04      	cmp	r3, #4
 8003858:	d003      	beq.n	8003862 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2205      	movs	r2, #5
 800385e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	887a      	ldrh	r2, [r7, #2]
 8003872:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	887a      	ldrh	r2, [r7, #2]
 800387a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	887a      	ldrh	r2, [r7, #2]
 8003888:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	887a      	ldrh	r2, [r7, #2]
 800388e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038a4:	d802      	bhi.n	80038ac <HAL_SPI_TransmitReceive+0xe6>
 80038a6:	8a3b      	ldrh	r3, [r7, #16]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d908      	bls.n	80038be <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038ba:	605a      	str	r2, [r3, #4]
 80038bc:	e007      	b.n	80038ce <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038cc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d8:	2b40      	cmp	r3, #64	; 0x40
 80038da:	d007      	beq.n	80038ec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038f4:	f240 8081 	bls.w	80039fa <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_SPI_TransmitReceive+0x140>
 8003900:	8a7b      	ldrh	r3, [r7, #18]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d16d      	bne.n	80039e2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	881a      	ldrh	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	1c9a      	adds	r2, r3, #2
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800392a:	e05a      	b.n	80039e2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b02      	cmp	r3, #2
 8003938:	d11b      	bne.n	8003972 <HAL_SPI_TransmitReceive+0x1ac>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d016      	beq.n	8003972 <HAL_SPI_TransmitReceive+0x1ac>
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	2b01      	cmp	r3, #1
 8003948:	d113      	bne.n	8003972 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	881a      	ldrh	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	1c9a      	adds	r2, r3, #2
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d11c      	bne.n	80039ba <HAL_SPI_TransmitReceive+0x1f4>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d016      	beq.n	80039ba <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	b292      	uxth	r2, r2
 8003998:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	1c9a      	adds	r2, r3, #2
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039b6:	2301      	movs	r3, #1
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039ba:	f7fd fce1 	bl	8001380 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d80b      	bhi.n	80039e2 <HAL_SPI_TransmitReceive+0x21c>
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d007      	beq.n	80039e2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80039e0:	e109      	b.n	8003bf6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d19f      	bne.n	800392c <HAL_SPI_TransmitReceive+0x166>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d199      	bne.n	800392c <HAL_SPI_TransmitReceive+0x166>
 80039f8:	e0e3      	b.n	8003bc2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_SPI_TransmitReceive+0x244>
 8003a02:	8a7b      	ldrh	r3, [r7, #18]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	f040 80cf 	bne.w	8003ba8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d912      	bls.n	8003a3a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	881a      	ldrh	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	1c9a      	adds	r2, r3, #2
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b02      	subs	r3, #2
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a38:	e0b6      	b.n	8003ba8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	7812      	ldrb	r2, [r2, #0]
 8003a46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a60:	e0a2      	b.n	8003ba8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d134      	bne.n	8003ada <HAL_SPI_TransmitReceive+0x314>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d02f      	beq.n	8003ada <HAL_SPI_TransmitReceive+0x314>
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d12c      	bne.n	8003ada <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d912      	bls.n	8003ab0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8e:	881a      	ldrh	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9a:	1c9a      	adds	r2, r3, #2
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b02      	subs	r3, #2
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003aae:	e012      	b.n	8003ad6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	7812      	ldrb	r2, [r2, #0]
 8003abc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d148      	bne.n	8003b7a <HAL_SPI_TransmitReceive+0x3b4>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d042      	beq.n	8003b7a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d923      	bls.n	8003b48 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	b292      	uxth	r2, r2
 8003b0c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	1c9a      	adds	r2, r3, #2
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b02      	subs	r3, #2
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d81f      	bhi.n	8003b76 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	e016      	b.n	8003b76 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f103 020c 	add.w	r2, r3, #12
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	7812      	ldrb	r2, [r2, #0]
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b76:	2301      	movs	r3, #1
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b7a:	f7fd fc01 	bl	8001380 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d803      	bhi.n	8003b92 <HAL_SPI_TransmitReceive+0x3cc>
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d102      	bne.n	8003b98 <HAL_SPI_TransmitReceive+0x3d2>
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d107      	bne.n	8003ba8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003ba6:	e026      	b.n	8003bf6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f47f af57 	bne.w	8003a62 <HAL_SPI_TransmitReceive+0x29c>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f47f af50 	bne.w	8003a62 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f94c 	bl	8003e64 <SPI_EndRxTxTransaction>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bec:	e003      	b.n	8003bf6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003bfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3728      	adds	r7, #40	; 0x28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c18:	b2db      	uxtb	r3, r3
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c38:	f7fd fba2 	bl	8001380 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	4413      	add	r3, r2
 8003c46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c48:	f7fd fb9a 	bl	8001380 <HAL_GetTick>
 8003c4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c4e:	4b39      	ldr	r3, [pc, #228]	; (8003d34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	015b      	lsls	r3, r3, #5
 8003c54:	0d1b      	lsrs	r3, r3, #20
 8003c56:	69fa      	ldr	r2, [r7, #28]
 8003c58:	fb02 f303 	mul.w	r3, r2, r3
 8003c5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c5e:	e054      	b.n	8003d0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c66:	d050      	beq.n	8003d0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c68:	f7fd fb8a 	bl	8001380 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d902      	bls.n	8003c7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d13d      	bne.n	8003cfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c96:	d111      	bne.n	8003cbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca0:	d004      	beq.n	8003cac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003caa:	d107      	bne.n	8003cbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc4:	d10f      	bne.n	8003ce6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ce4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e017      	b.n	8003d2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4013      	ands	r3, r2
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	bf0c      	ite	eq
 8003d1a:	2301      	moveq	r3, #1
 8003d1c:	2300      	movne	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d19b      	bne.n	8003c60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3720      	adds	r7, #32
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000040 	.word	0x20000040

08003d38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	; 0x28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d4a:	f7fd fb19 	bl	8001380 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	4413      	add	r3, r2
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003d5a:	f7fd fb11 	bl	8001380 <HAL_GetTick>
 8003d5e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d68:	4b3d      	ldr	r3, [pc, #244]	; (8003e60 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	00da      	lsls	r2, r3, #3
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	0d1b      	lsrs	r3, r3, #20
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	fb02 f303 	mul.w	r3, r2, r3
 8003d7e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d80:	e060      	b.n	8003e44 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d88:	d107      	bne.n	8003d9a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d104      	bne.n	8003d9a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d050      	beq.n	8003e44 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003da2:	f7fd faed 	bl	8001380 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d902      	bls.n	8003db8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d13d      	bne.n	8003e34 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dc6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd0:	d111      	bne.n	8003df6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dda:	d004      	beq.n	8003de6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de4:	d107      	bne.n	8003df6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dfe:	d10f      	bne.n	8003e20 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e010      	b.n	8003e56 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d196      	bne.n	8003d82 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3728      	adds	r7, #40	; 0x28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000040 	.word	0x20000040

08003e64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff ff5b 	bl	8003d38 <SPI_WaitFifoStateUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d007      	beq.n	8003e98 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e027      	b.n	8003ee8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2180      	movs	r1, #128	; 0x80
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f7ff fec0 	bl	8003c28 <SPI_WaitFlagStateUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d007      	beq.n	8003ebe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb2:	f043 0220 	orr.w	r2, r3, #32
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e014      	b.n	8003ee8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f7ff ff34 	bl	8003d38 <SPI_WaitFifoStateUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eda:	f043 0220 	orr.w	r2, r3, #32
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e000      	b.n	8003ee8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ef8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003efc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	4013      	ands	r3, r2
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f26:	b084      	sub	sp, #16
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	f107 0014 	add.w	r0, r7, #20
 8003f34:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	b004      	add	sp, #16
 8003f66:	4770      	bx	lr

08003f68 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003f72:	2300      	movs	r3, #0
 8003f74:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8003f76:	2300      	movs	r3, #0
 8003f78:	703b      	strb	r3, [r7, #0]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8003f7e:	4b52      	ldr	r3, [pc, #328]	; (80040c8 <BSP_GYRO_Init+0x160>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	4798      	blx	r3
 8003f84:	4603      	mov	r3, r0
 8003f86:	2bd4      	cmp	r3, #212	; 0xd4
 8003f88:	d005      	beq.n	8003f96 <BSP_GYRO_Init+0x2e>
 8003f8a:	4b4f      	ldr	r3, [pc, #316]	; (80040c8 <BSP_GYRO_Init+0x160>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	4798      	blx	r3
 8003f90:	4603      	mov	r3, r0
 8003f92:	2bd5      	cmp	r3, #213	; 0xd5
 8003f94:	d146      	bne.n	8004024 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8003f96:	4b4d      	ldr	r3, [pc, #308]	; (80040cc <BSP_GYRO_Init+0x164>)
 8003f98:	4a4b      	ldr	r2, [pc, #300]	; (80040c8 <BSP_GYRO_Init+0x160>)
 8003f9a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8003f9c:	2308      	movs	r3, #8
 8003f9e:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8003fa4:	2307      	movs	r3, #7
 8003fa6:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8003fa8:	2330      	movs	r3, #48	; 0x30
 8003faa:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8003fac:	2300      	movs	r3, #0
 8003fae:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003fb8:	793a      	ldrb	r2, [r7, #4]
 8003fba:	797b      	ldrb	r3, [r7, #5]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003fc0:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003fce:	7a3a      	ldrb	r2, [r7, #8]
 8003fd0:	7a7b      	ldrb	r3, [r7, #9]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8003fd6:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	89bb      	ldrh	r3, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8003fe8:	4b38      	ldr	r3, [pc, #224]	; (80040cc <BSP_GYRO_Init+0x164>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	89ba      	ldrh	r2, [r7, #12]
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003ffc:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8003ffe:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8004000:	4313      	orrs	r3, r2
 8004002:	b2db      	uxtb	r3, r3
 8004004:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8004006:	4b31      	ldr	r3, [pc, #196]	; (80040cc <BSP_GYRO_Init+0x164>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	89ba      	ldrh	r2, [r7, #12]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	4610      	mov	r0, r2
 8004012:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8004014:	4b2d      	ldr	r3, [pc, #180]	; (80040cc <BSP_GYRO_Init+0x164>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	2010      	movs	r0, #16
 800401c:	4798      	blx	r3

    ret = GYRO_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	73fb      	strb	r3, [r7, #15]
 8004022:	e04b      	b.n	80040bc <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 8004024:	4b2a      	ldr	r3, [pc, #168]	; (80040d0 <BSP_GYRO_Init+0x168>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4798      	blx	r3
 800402a:	4603      	mov	r3, r0
 800402c:	2bd3      	cmp	r3, #211	; 0xd3
 800402e:	d145      	bne.n	80040bc <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8004030:	4b26      	ldr	r3, [pc, #152]	; (80040cc <BSP_GYRO_Init+0x164>)
 8004032:	4a27      	ldr	r2, [pc, #156]	; (80040d0 <BSP_GYRO_Init+0x168>)
 8004034:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 8004036:	2308      	movs	r3, #8
 8004038:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 800403a:	2300      	movs	r3, #0
 800403c:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 800403e:	2307      	movs	r3, #7
 8004040:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 8004042:	2330      	movs	r3, #48	; 0x30
 8004044:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8004046:	2300      	movs	r3, #0
 8004048:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 800404a:	2300      	movs	r3, #0
 800404c:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 800404e:	2310      	movs	r3, #16
 8004050:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004052:	793a      	ldrb	r2, [r7, #4]
 8004054:	797b      	ldrb	r3, [r7, #5]
 8004056:	4313      	orrs	r3, r2
 8004058:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800405a:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800405c:	4313      	orrs	r3, r2
 800405e:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004060:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004062:	4313      	orrs	r3, r2
 8004064:	b2db      	uxtb	r3, r3
 8004066:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004068:	7a3a      	ldrb	r2, [r7, #8]
 800406a:	7a7b      	ldrb	r3, [r7, #9]
 800406c:	4313      	orrs	r3, r2
 800406e:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8004070:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004072:	4313      	orrs	r3, r2
 8004074:	b2db      	uxtb	r3, r3
 8004076:	b29b      	uxth	r3, r3
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	b29a      	uxth	r2, r3
 800407c:	89bb      	ldrh	r3, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8004082:	4b12      	ldr	r3, [pc, #72]	; (80040cc <BSP_GYRO_Init+0x164>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	89ba      	ldrh	r2, [r7, #12]
 800408a:	4610      	mov	r0, r2
 800408c:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 800408e:	2300      	movs	r3, #0
 8004090:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 8004092:	2300      	movs	r3, #0
 8004094:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8004096:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8004098:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800409a:	4313      	orrs	r3, r2
 800409c:	b2db      	uxtb	r3, r3
 800409e:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 80040a0:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <BSP_GYRO_Init+0x164>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	89ba      	ldrh	r2, [r7, #12]
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	4610      	mov	r0, r2
 80040ac:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 80040ae:	4b07      	ldr	r3, [pc, #28]	; (80040cc <BSP_GYRO_Init+0x164>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	2010      	movs	r0, #16
 80040b6:	4798      	blx	r3

    ret = GYRO_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20000080 	.word	0x20000080
 80040cc:	20000808 	.word	0x20000808
 80040d0:	2000004c 	.word	0x2000004c

080040d4 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <BSP_GYRO_GetXYZ+0x24>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d004      	beq.n	80040f0 <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 80040e6:	4b04      	ldr	r3, [pc, #16]	; (80040f8 <BSP_GYRO_GetXYZ+0x24>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
  }
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20000808 	.word	0x20000808

080040fc <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004106:	2300      	movs	r3, #0
 8004108:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 800410a:	f000 fc7f 	bl	8004a0c <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8004114:	f107 030f 	add.w	r3, r7, #15
 8004118:	2201      	movs	r2, #1
 800411a:	2120      	movs	r1, #32
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fcbb 	bl	8004a98 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	0a1b      	lsrs	r3, r3, #8
 8004126:	b29b      	uxth	r3, r3
 8004128:	b2db      	uxtb	r3, r3
 800412a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 800412c:	f107 030f 	add.w	r3, r7, #15
 8004130:	2201      	movs	r2, #1
 8004132:	2123      	movs	r1, #35	; 0x23
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fcaf 	bl	8004a98 <GYRO_IO_Write>
}
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8004142:	b480      	push	{r7}
 8004144:	af00      	add	r7, sp, #0
}
 8004146:	bf00      	nop
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8004156:	f000 fc59 	bl	8004a0c <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 800415a:	1dfb      	adds	r3, r7, #7
 800415c:	2201      	movs	r2, #1
 800415e:	210f      	movs	r1, #15
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fccb 	bl	8004afc <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8004166:	79fb      	ldrb	r3, [r7, #7]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8004176:	1dfb      	adds	r3, r7, #7
 8004178:	2201      	movs	r2, #1
 800417a:	2124      	movs	r1, #36	; 0x24
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fcbd 	bl	8004afc <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004188:	b2db      	uxtb	r3, r3
 800418a:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800418c:	1dfb      	adds	r3, r7, #7
 800418e:	2201      	movs	r2, #1
 8004190:	2124      	movs	r1, #36	; 0x24
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fc80 	bl	8004a98 <GYRO_IO_Write>
}
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80041aa:	2300      	movs	r3, #0
 80041ac:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 80041b4:	f107 030f 	add.w	r3, r7, #15
 80041b8:	2201      	movs	r2, #1
 80041ba:	2120      	movs	r1, #32
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fc6b 	bl	8004a98 <GYRO_IO_Write>
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	4603      	mov	r3, r0
 80041d2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80041d4:	2300      	movs	r3, #0
 80041d6:	73fb      	strb	r3, [r7, #15]
 80041d8:	2300      	movs	r3, #0
 80041da:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 80041dc:	f107 030f 	add.w	r3, r7, #15
 80041e0:	2201      	movs	r2, #1
 80041e2:	2130      	movs	r1, #48	; 0x30
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fc89 	bl	8004afc <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 80041ea:	f107 030e 	add.w	r3, r7, #14
 80041ee:	2201      	movs	r2, #1
 80041f0:	2122      	movs	r1, #34	; 0x22
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fc82 	bl	8004afc <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	b2db      	uxtb	r3, r3
 8004206:	121b      	asrs	r3, r3, #8
 8004208:	b25a      	sxtb	r2, r3
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	b25b      	sxtb	r3, r3
 800420e:	4313      	orrs	r3, r2
 8004210:	b25b      	sxtb	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8004216:	7bbb      	ldrb	r3, [r7, #14]
 8004218:	f023 0320 	bic.w	r3, r3, #32
 800421c:	b2db      	uxtb	r3, r3
 800421e:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8004220:	88fb      	ldrh	r3, [r7, #6]
 8004222:	b2da      	uxtb	r2, r3
 8004224:	7bbb      	ldrb	r3, [r7, #14]
 8004226:	4313      	orrs	r3, r2
 8004228:	b2db      	uxtb	r3, r3
 800422a:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800422c:	f107 030f 	add.w	r3, r7, #15
 8004230:	2201      	movs	r2, #1
 8004232:	2130      	movs	r1, #48	; 0x30
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fc2f 	bl	8004a98 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800423a:	f107 030e 	add.w	r3, r7, #14
 800423e:	2201      	movs	r2, #1
 8004240:	2122      	movs	r1, #34	; 0x22
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fc28 	bl	8004a98 <GYRO_IO_Write>
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800425a:	f107 030f 	add.w	r3, r7, #15
 800425e:	2201      	movs	r2, #1
 8004260:	2122      	movs	r1, #34	; 0x22
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fc4a 	bl	8004afc <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10a      	bne.n	8004284 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004274:	b2db      	uxtb	r3, r3
 8004276:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800427e:	b2db      	uxtb	r3, r3
 8004280:	73fb      	strb	r3, [r7, #15]
 8004282:	e00c      	b.n	800429e <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d109      	bne.n	800429e <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	f023 0308 	bic.w	r3, r3, #8
 8004290:	b2db      	uxtb	r3, r3
 8004292:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	f043 0308 	orr.w	r3, r3, #8
 800429a:	b2db      	uxtb	r3, r3
 800429c:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800429e:	f107 030f 	add.w	r3, r7, #15
 80042a2:	2201      	movs	r2, #1
 80042a4:	2122      	movs	r1, #34	; 0x22
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fbf6 	bl	8004a98 <GYRO_IO_Write>
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80042be:	f107 030f 	add.w	r3, r7, #15
 80042c2:	2201      	movs	r2, #1
 80042c4:	2122      	movs	r1, #34	; 0x22
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fc18 	bl	8004afc <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d107      	bne.n	80042e2 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	73fb      	strb	r3, [r7, #15]
 80042e0:	e009      	b.n	80042f6 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d106      	bne.n	80042f6 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	f023 0308 	bic.w	r3, r3, #8
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80042f6:	f107 030f 	add.w	r3, r7, #15
 80042fa:	2201      	movs	r2, #1
 80042fc:	2122      	movs	r1, #34	; 0x22
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fbca 	bl	8004a98 <GYRO_IO_Write>
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8004316:	f107 030f 	add.w	r3, r7, #15
 800431a:	2201      	movs	r2, #1
 800431c:	2121      	movs	r1, #33	; 0x21
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fbec 	bl	8004afc <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800432a:	b2db      	uxtb	r3, r3
 800432c:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	4313      	orrs	r3, r2
 8004334:	b2db      	uxtb	r3, r3
 8004336:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8004338:	f107 030f 	add.w	r3, r7, #15
 800433c:	2201      	movs	r2, #1
 800433e:	2121      	movs	r1, #33	; 0x21
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fba9 	bl	8004a98 <GYRO_IO_Write>
}
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	4603      	mov	r3, r0
 8004356:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8004358:	f107 030f 	add.w	r3, r7, #15
 800435c:	2201      	movs	r2, #1
 800435e:	2124      	movs	r1, #36	; 0x24
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fbcb 	bl	8004afc <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	f023 0310 	bic.w	r3, r3, #16
 800436c:	b2db      	uxtb	r3, r3
 800436e:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8004370:	7bfa      	ldrb	r2, [r7, #15]
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	4313      	orrs	r3, r2
 8004376:	b2db      	uxtb	r3, r3
 8004378:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800437a:	f107 030f 	add.w	r3, r7, #15
 800437e:	2201      	movs	r2, #1
 8004380:	2124      	movs	r1, #36	; 0x24
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fb88 	bl	8004a98 <GYRO_IO_Write>
}
 8004388:	bf00      	nop
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08a      	sub	sp, #40	; 0x28
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8004398:	2300      	movs	r3, #0
 800439a:	61bb      	str	r3, [r7, #24]
 800439c:	2300      	movs	r3, #0
 800439e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 80043a0:	f107 0310 	add.w	r3, r7, #16
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 80043b8:	f107 030f 	add.w	r3, r7, #15
 80043bc:	2201      	movs	r2, #1
 80043be:	2123      	movs	r1, #35	; 0x23
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fb9b 	bl	8004afc <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 80043c6:	f107 0318 	add.w	r3, r7, #24
 80043ca:	2206      	movs	r2, #6
 80043cc:	2128      	movs	r1, #40	; 0x28
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fb94 	bl	8004afc <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d123      	bne.n	8004426 <I3G4250D_ReadXYZAngRate+0x96>
  {
    for (i = 0; i < 3; i++)
 80043de:	2300      	movs	r3, #0
 80043e0:	623b      	str	r3, [r7, #32]
 80043e2:	e01c      	b.n	800441e <I3G4250D_ReadXYZAngRate+0x8e>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	3301      	adds	r3, #1
 80043ea:	3328      	adds	r3, #40	; 0x28
 80043ec:	443b      	add	r3, r7
 80043ee:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	021b      	lsls	r3, r3, #8
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	3328      	adds	r3, #40	; 0x28
 80043fe:	443b      	add	r3, r7
 8004400:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004404:	b29b      	uxth	r3, r3
 8004406:	4413      	add	r3, r2
 8004408:	b29b      	uxth	r3, r3
 800440a:	b21a      	sxth	r2, r3
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	3328      	adds	r3, #40	; 0x28
 8004412:	443b      	add	r3, r7
 8004414:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	3301      	adds	r3, #1
 800441c:	623b      	str	r3, [r7, #32]
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	2b02      	cmp	r3, #2
 8004422:	dddf      	ble.n	80043e4 <I3G4250D_ReadXYZAngRate+0x54>
 8004424:	e022      	b.n	800446c <I3G4250D_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 8004426:	2300      	movs	r3, #0
 8004428:	623b      	str	r3, [r7, #32]
 800442a:	e01c      	b.n	8004466 <I3G4250D_ReadXYZAngRate+0xd6>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	3328      	adds	r3, #40	; 0x28
 8004432:	443b      	add	r3, r7
 8004434:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004438:	b29b      	uxth	r3, r3
 800443a:	021b      	lsls	r3, r3, #8
 800443c:	b29a      	uxth	r2, r3
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	3301      	adds	r3, #1
 8004444:	3328      	adds	r3, #40	; 0x28
 8004446:	443b      	add	r3, r7
 8004448:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800444c:	b29b      	uxth	r3, r3
 800444e:	4413      	add	r3, r2
 8004450:	b29b      	uxth	r3, r3
 8004452:	b21a      	sxth	r2, r3
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	3328      	adds	r3, #40	; 0x28
 800445a:	443b      	add	r3, r7
 800445c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	3301      	adds	r3, #1
 8004464:	623b      	str	r3, [r7, #32]
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	2b02      	cmp	r3, #2
 800446a:	dddf      	ble.n	800442c <I3G4250D_ReadXYZAngRate+0x9c>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004472:	2b20      	cmp	r3, #32
 8004474:	d00c      	beq.n	8004490 <I3G4250D_ReadXYZAngRate+0x100>
 8004476:	2b20      	cmp	r3, #32
 8004478:	dc0d      	bgt.n	8004496 <I3G4250D_ReadXYZAngRate+0x106>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <I3G4250D_ReadXYZAngRate+0xf4>
 800447e:	2b10      	cmp	r3, #16
 8004480:	d003      	beq.n	800448a <I3G4250D_ReadXYZAngRate+0xfa>
 8004482:	e008      	b.n	8004496 <I3G4250D_ReadXYZAngRate+0x106>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8004484:	4b15      	ldr	r3, [pc, #84]	; (80044dc <I3G4250D_ReadXYZAngRate+0x14c>)
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004488:	e005      	b.n	8004496 <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 800448a:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <I3G4250D_ReadXYZAngRate+0x150>)
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800448e:	e002      	b.n	8004496 <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8004490:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <I3G4250D_ReadXYZAngRate+0x154>)
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004494:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 8004496:	2300      	movs	r3, #0
 8004498:	623b      	str	r3, [r7, #32]
 800449a:	e016      	b.n	80044ca <I3G4250D_ReadXYZAngRate+0x13a>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	3328      	adds	r3, #40	; 0x28
 80044a2:	443b      	add	r3, r7
 80044a4:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80044a8:	ee07 3a90 	vmov	s15, r3
 80044ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	4413      	add	r3, r2
 80044b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80044bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	3301      	adds	r3, #1
 80044c8:	623b      	str	r3, [r7, #32]
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	dde5      	ble.n	800449c <I3G4250D_ReadXYZAngRate+0x10c>
  }
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	3728      	adds	r7, #40	; 0x28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	410c0000 	.word	0x410c0000
 80044e0:	418c0000 	.word	0x418c0000
 80044e4:	428c0000 	.word	0x428c0000

080044e8 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80044f2:	2300      	movs	r3, #0
 80044f4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80044f6:	f000 fa89 	bl	8004a0c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8004500:	f107 030f 	add.w	r3, r7, #15
 8004504:	2201      	movs	r2, #1
 8004506:	2120      	movs	r1, #32
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fac5 	bl	8004a98 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	0a1b      	lsrs	r3, r3, #8
 8004512:	b29b      	uxth	r3, r3
 8004514:	b2db      	uxtb	r3, r3
 8004516:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8004518:	f107 030f 	add.w	r3, r7, #15
 800451c:	2201      	movs	r2, #1
 800451e:	2123      	movs	r1, #35	; 0x23
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fab9 	bl	8004a98 <GYRO_IO_Write>
}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 800452e:	b480      	push	{r7}
 8004530:	af00      	add	r7, sp, #0
}
 8004532:	bf00      	nop
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8004542:	f000 fa63 	bl	8004a0c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8004546:	1dfb      	adds	r3, r7, #7
 8004548:	2201      	movs	r2, #1
 800454a:	210f      	movs	r1, #15
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fad5 	bl	8004afc <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8004552:	79fb      	ldrb	r3, [r7, #7]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004562:	1dfb      	adds	r3, r7, #7
 8004564:	2201      	movs	r2, #1
 8004566:	2124      	movs	r1, #36	; 0x24
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fac7 	bl	8004afc <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004574:	b2db      	uxtb	r3, r3
 8004576:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004578:	1dfb      	adds	r3, r7, #7
 800457a:	2201      	movs	r2, #1
 800457c:	2124      	movs	r1, #36	; 0x24
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fa8a 	bl	8004a98 <GYRO_IO_Write>
}
 8004584:	bf00      	nop
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004596:	2300      	movs	r3, #0
 8004598:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80045a0:	f107 030f 	add.w	r3, r7, #15
 80045a4:	2201      	movs	r2, #1
 80045a6:	2120      	movs	r1, #32
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fa75 	bl	8004a98 <GYRO_IO_Write>
}
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	4603      	mov	r3, r0
 80045be:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80045c0:	2300      	movs	r3, #0
 80045c2:	73fb      	strb	r3, [r7, #15]
 80045c4:	2300      	movs	r3, #0
 80045c6:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80045c8:	f107 030f 	add.w	r3, r7, #15
 80045cc:	2201      	movs	r2, #1
 80045ce:	2130      	movs	r1, #48	; 0x30
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 fa93 	bl	8004afc <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80045d6:	f107 030e 	add.w	r3, r7, #14
 80045da:	2201      	movs	r2, #1
 80045dc:	2122      	movs	r1, #34	; 0x22
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fa8c 	bl	8004afc <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	121b      	asrs	r3, r3, #8
 80045f4:	b25a      	sxtb	r2, r3
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	b25b      	sxtb	r3, r3
 80045fa:	4313      	orrs	r3, r2
 80045fc:	b25b      	sxtb	r3, r3
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8004602:	7bbb      	ldrb	r3, [r7, #14]
 8004604:	f023 0320 	bic.w	r3, r3, #32
 8004608:	b2db      	uxtb	r3, r3
 800460a:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	b2da      	uxtb	r2, r3
 8004610:	7bbb      	ldrb	r3, [r7, #14]
 8004612:	4313      	orrs	r3, r2
 8004614:	b2db      	uxtb	r3, r3
 8004616:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8004618:	f107 030f 	add.w	r3, r7, #15
 800461c:	2201      	movs	r2, #1
 800461e:	2130      	movs	r1, #48	; 0x30
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fa39 	bl	8004a98 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8004626:	f107 030e 	add.w	r3, r7, #14
 800462a:	2201      	movs	r2, #1
 800462c:	2122      	movs	r1, #34	; 0x22
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fa32 	bl	8004a98 <GYRO_IO_Write>
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004646:	f107 030f 	add.w	r3, r7, #15
 800464a:	2201      	movs	r2, #1
 800464c:	2122      	movs	r1, #34	; 0x22
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fa54 	bl	8004afc <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10a      	bne.n	8004670 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004660:	b2db      	uxtb	r3, r3
 8004662:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800466a:	b2db      	uxtb	r3, r3
 800466c:	73fb      	strb	r3, [r7, #15]
 800466e:	e00c      	b.n	800468a <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d109      	bne.n	800468a <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	f023 0308 	bic.w	r3, r3, #8
 800467c:	b2db      	uxtb	r3, r3
 800467e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	f043 0308 	orr.w	r3, r3, #8
 8004686:	b2db      	uxtb	r3, r3
 8004688:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800468a:	f107 030f 	add.w	r3, r7, #15
 800468e:	2201      	movs	r2, #1
 8004690:	2122      	movs	r1, #34	; 0x22
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fa00 	bl	8004a98 <GYRO_IO_Write>
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80046aa:	f107 030f 	add.w	r3, r7, #15
 80046ae:	2201      	movs	r2, #1
 80046b0:	2122      	movs	r1, #34	; 0x22
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fa22 	bl	8004afc <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80046b8:	79fb      	ldrb	r3, [r7, #7]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d107      	bne.n	80046ce <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	73fb      	strb	r3, [r7, #15]
 80046cc:	e009      	b.n	80046e2 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d106      	bne.n	80046e2 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	f023 0308 	bic.w	r3, r3, #8
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80046e2:	f107 030f 	add.w	r3, r7, #15
 80046e6:	2201      	movs	r2, #1
 80046e8:	2122      	movs	r1, #34	; 0x22
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 f9d4 	bl	8004a98 <GYRO_IO_Write>
}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8004702:	f107 030f 	add.w	r3, r7, #15
 8004706:	2201      	movs	r2, #1
 8004708:	2121      	movs	r1, #33	; 0x21
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f9f6 	bl	8004afc <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004716:	b2db      	uxtb	r3, r3
 8004718:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800471a:	7bfa      	ldrb	r2, [r7, #15]
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	4313      	orrs	r3, r2
 8004720:	b2db      	uxtb	r3, r3
 8004722:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8004724:	f107 030f 	add.w	r3, r7, #15
 8004728:	2201      	movs	r2, #1
 800472a:	2121      	movs	r1, #33	; 0x21
 800472c:	4618      	mov	r0, r3
 800472e:	f000 f9b3 	bl	8004a98 <GYRO_IO_Write>
}
 8004732:	bf00      	nop
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	4603      	mov	r3, r0
 8004742:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004744:	f107 030f 	add.w	r3, r7, #15
 8004748:	2201      	movs	r2, #1
 800474a:	2124      	movs	r1, #36	; 0x24
 800474c:	4618      	mov	r0, r3
 800474e:	f000 f9d5 	bl	8004afc <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	f023 0310 	bic.w	r3, r3, #16
 8004758:	b2db      	uxtb	r3, r3
 800475a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800475c:	7bfa      	ldrb	r2, [r7, #15]
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	4313      	orrs	r3, r2
 8004762:	b2db      	uxtb	r3, r3
 8004764:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004766:	f107 030f 	add.w	r3, r7, #15
 800476a:	2201      	movs	r2, #1
 800476c:	2124      	movs	r1, #36	; 0x24
 800476e:	4618      	mov	r0, r3
 8004770:	f000 f992 	bl	8004a98 <GYRO_IO_Write>
}
 8004774:	bf00      	nop
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8004784:	2300      	movs	r3, #0
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	2300      	movs	r3, #0
 800478a:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 800478c:	f107 0310 	add.w	r3, r7, #16
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8004796:	2300      	movs	r3, #0
 8004798:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 80047a4:	f107 030f 	add.w	r3, r7, #15
 80047a8:	2201      	movs	r2, #1
 80047aa:	2123      	movs	r1, #35	; 0x23
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 f9a5 	bl	8004afc <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 80047b2:	f107 0318 	add.w	r3, r7, #24
 80047b6:	2206      	movs	r2, #6
 80047b8:	2128      	movs	r1, #40	; 0x28
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 f99e 	bl	8004afc <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d123      	bne.n	8004812 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	623b      	str	r3, [r7, #32]
 80047ce:	e01c      	b.n	800480a <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	3301      	adds	r3, #1
 80047d6:	3328      	adds	r3, #40	; 0x28
 80047d8:	443b      	add	r3, r7
 80047da:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	3328      	adds	r3, #40	; 0x28
 80047ea:	443b      	add	r3, r7
 80047ec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	4413      	add	r3, r2
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	b21a      	sxth	r2, r3
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	3328      	adds	r3, #40	; 0x28
 80047fe:	443b      	add	r3, r7
 8004800:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	3301      	adds	r3, #1
 8004808:	623b      	str	r3, [r7, #32]
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	2b02      	cmp	r3, #2
 800480e:	dddf      	ble.n	80047d0 <L3GD20_ReadXYZAngRate+0x54>
 8004810:	e022      	b.n	8004858 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8004812:	2300      	movs	r3, #0
 8004814:	623b      	str	r3, [r7, #32]
 8004816:	e01c      	b.n	8004852 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	3328      	adds	r3, #40	; 0x28
 800481e:	443b      	add	r3, r7
 8004820:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004824:	b29b      	uxth	r3, r3
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	b29a      	uxth	r2, r3
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	3301      	adds	r3, #1
 8004830:	3328      	adds	r3, #40	; 0x28
 8004832:	443b      	add	r3, r7
 8004834:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004838:	b29b      	uxth	r3, r3
 800483a:	4413      	add	r3, r2
 800483c:	b29b      	uxth	r3, r3
 800483e:	b21a      	sxth	r2, r3
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	3328      	adds	r3, #40	; 0x28
 8004846:	443b      	add	r3, r7
 8004848:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	3301      	adds	r3, #1
 8004850:	623b      	str	r3, [r7, #32]
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	2b02      	cmp	r3, #2
 8004856:	dddf      	ble.n	8004818 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800485e:	2b20      	cmp	r3, #32
 8004860:	d00c      	beq.n	800487c <L3GD20_ReadXYZAngRate+0x100>
 8004862:	2b20      	cmp	r3, #32
 8004864:	dc0d      	bgt.n	8004882 <L3GD20_ReadXYZAngRate+0x106>
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <L3GD20_ReadXYZAngRate+0xf4>
 800486a:	2b10      	cmp	r3, #16
 800486c:	d003      	beq.n	8004876 <L3GD20_ReadXYZAngRate+0xfa>
 800486e:	e008      	b.n	8004882 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8004870:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <L3GD20_ReadXYZAngRate+0x14c>)
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8004874:	e005      	b.n	8004882 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8004876:	4b15      	ldr	r3, [pc, #84]	; (80048cc <L3GD20_ReadXYZAngRate+0x150>)
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800487a:	e002      	b.n	8004882 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 800487c:	4b14      	ldr	r3, [pc, #80]	; (80048d0 <L3GD20_ReadXYZAngRate+0x154>)
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8004880:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8004882:	2300      	movs	r3, #0
 8004884:	623b      	str	r3, [r7, #32]
 8004886:	e016      	b.n	80048b6 <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	3328      	adds	r3, #40	; 0x28
 800488e:	443b      	add	r3, r7
 8004890:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8004894:	ee07 3a90 	vmov	s15, r3
 8004898:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	4413      	add	r3, r2
 80048a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80048a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ac:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	3301      	adds	r3, #1
 80048b4:	623b      	str	r3, [r7, #32]
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	dde5      	ble.n	8004888 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 80048bc:	bf00      	nop
 80048be:	bf00      	nop
 80048c0:	3728      	adds	r7, #40	; 0x28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	410c0000 	.word	0x410c0000
 80048cc:	418c0000 	.word	0x418c0000
 80048d0:	428c0000 	.word	0x428c0000

080048d4 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80048d8:	481a      	ldr	r0, [pc, #104]	; (8004944 <SPIx_Init+0x70>)
 80048da:	f7ff f996 	bl	8003c0a <HAL_SPI_GetState>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d12c      	bne.n	800493e <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80048e4:	4b17      	ldr	r3, [pc, #92]	; (8004944 <SPIx_Init+0x70>)
 80048e6:	4a18      	ldr	r2, [pc, #96]	; (8004948 <SPIx_Init+0x74>)
 80048e8:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80048ea:	4b16      	ldr	r3, [pc, #88]	; (8004944 <SPIx_Init+0x70>)
 80048ec:	2218      	movs	r2, #24
 80048ee:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 80048f0:	4b14      	ldr	r3, [pc, #80]	; (8004944 <SPIx_Init+0x70>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048f6:	4b13      	ldr	r3, [pc, #76]	; (8004944 <SPIx_Init+0x70>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80048fc:	4b11      	ldr	r3, [pc, #68]	; (8004944 <SPIx_Init+0x70>)
 80048fe:	2200      	movs	r2, #0
 8004900:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004902:	4b10      	ldr	r3, [pc, #64]	; (8004944 <SPIx_Init+0x70>)
 8004904:	2200      	movs	r2, #0
 8004906:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8004908:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <SPIx_Init+0x70>)
 800490a:	2207      	movs	r2, #7
 800490c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800490e:	4b0d      	ldr	r3, [pc, #52]	; (8004944 <SPIx_Init+0x70>)
 8004910:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004914:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004916:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <SPIx_Init+0x70>)
 8004918:	2200      	movs	r2, #0
 800491a:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800491c:	4b09      	ldr	r3, [pc, #36]	; (8004944 <SPIx_Init+0x70>)
 800491e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004922:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8004924:	4b07      	ldr	r3, [pc, #28]	; (8004944 <SPIx_Init+0x70>)
 8004926:	2200      	movs	r2, #0
 8004928:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800492a:	4b06      	ldr	r3, [pc, #24]	; (8004944 <SPIx_Init+0x70>)
 800492c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004930:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8004932:	4804      	ldr	r0, [pc, #16]	; (8004944 <SPIx_Init+0x70>)
 8004934:	f000 f836 	bl	80049a4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8004938:	4802      	ldr	r0, [pc, #8]	; (8004944 <SPIx_Init+0x70>)
 800493a:	f7fe fe71 	bl	8003620 <HAL_SPI_Init>
  }
}
 800493e:	bf00      	nop
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	2000080c 	.word	0x2000080c
 8004948:	40013000 	.word	0x40013000

0800494c <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af02      	add	r7, sp, #8
 8004952:	4603      	mov	r3, r0
 8004954:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800495a:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <SPIx_WriteRead+0x38>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f107 020f 	add.w	r2, r7, #15
 8004962:	1df9      	adds	r1, r7, #7
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	2301      	movs	r3, #1
 8004968:	4807      	ldr	r0, [pc, #28]	; (8004988 <SPIx_WriteRead+0x3c>)
 800496a:	f7fe ff2c 	bl	80037c6 <HAL_SPI_TransmitReceive>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8004974:	f000 f80a 	bl	800498c <SPIx_Error>
  }
  
  return receivedbyte;
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	200000b4 	.word	0x200000b4
 8004988:	2000080c 	.word	0x2000080c

0800498c <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8004990:	4803      	ldr	r0, [pc, #12]	; (80049a0 <SPIx_Error+0x14>)
 8004992:	f7fe fef0 	bl	8003776 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8004996:	f7ff ff9d 	bl	80048d4 <SPIx_Init>
}
 800499a:	bf00      	nop
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	2000080c 	.word	0x2000080c

080049a4 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08a      	sub	sp, #40	; 0x28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 80049ac:	4b16      	ldr	r3, [pc, #88]	; (8004a08 <SPIx_MspInit+0x64>)
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	4a15      	ldr	r2, [pc, #84]	; (8004a08 <SPIx_MspInit+0x64>)
 80049b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049b6:	6193      	str	r3, [r2, #24]
 80049b8:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <SPIx_MspInit+0x64>)
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80049c4:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <SPIx_MspInit+0x64>)
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	4a0f      	ldr	r2, [pc, #60]	; (8004a08 <SPIx_MspInit+0x64>)
 80049ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ce:	6153      	str	r3, [r2, #20]
 80049d0:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <SPIx_MspInit+0x64>)
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80049dc:	23e0      	movs	r3, #224	; 0xe0
 80049de:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80049e0:	2302      	movs	r3, #2
 80049e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80049e8:	2303      	movs	r3, #3
 80049ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80049ec:	2305      	movs	r3, #5
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80049f0:	f107 0314 	add.w	r3, r7, #20
 80049f4:	4619      	mov	r1, r3
 80049f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049fa:	f7fc fdd7 	bl	80015ac <HAL_GPIO_Init>
}
 80049fe:	bf00      	nop
 8004a00:	3728      	adds	r7, #40	; 0x28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40021000 	.word	0x40021000

08004a0c <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8004a12:	4b1f      	ldr	r3, [pc, #124]	; (8004a90 <GYRO_IO_Init+0x84>)
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	4a1e      	ldr	r2, [pc, #120]	; (8004a90 <GYRO_IO_Init+0x84>)
 8004a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a1c:	6153      	str	r3, [r2, #20]
 8004a1e:	4b1c      	ldr	r3, [pc, #112]	; (8004a90 <GYRO_IO_Init+0x84>)
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a26:	60bb      	str	r3, [r7, #8]
 8004a28:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8004a2a:	2308      	movs	r3, #8
 8004a2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a36:	2303      	movs	r3, #3
 8004a38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8004a3a:	f107 030c 	add.w	r3, r7, #12
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4814      	ldr	r0, [pc, #80]	; (8004a94 <GYRO_IO_Init+0x88>)
 8004a42:	f7fc fdb3 	bl	80015ac <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8004a46:	2201      	movs	r2, #1
 8004a48:	2108      	movs	r1, #8
 8004a4a:	4812      	ldr	r0, [pc, #72]	; (8004a94 <GYRO_IO_Init+0x88>)
 8004a4c:	f7fd f804 	bl	8001a58 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8004a50:	4b0f      	ldr	r3, [pc, #60]	; (8004a90 <GYRO_IO_Init+0x84>)
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	4a0e      	ldr	r2, [pc, #56]	; (8004a90 <GYRO_IO_Init+0x84>)
 8004a56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a5a:	6153      	str	r3, [r2, #20]
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <GYRO_IO_Init+0x84>)
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a64:	607b      	str	r3, [r7, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a70:	2303      	movs	r3, #3
 8004a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004a78:	f107 030c 	add.w	r3, r7, #12
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4805      	ldr	r0, [pc, #20]	; (8004a94 <GYRO_IO_Init+0x88>)
 8004a80:	f7fc fd94 	bl	80015ac <HAL_GPIO_Init>
  
  SPIx_Init();
 8004a84:	f7ff ff26 	bl	80048d4 <SPIx_Init>
}
 8004a88:	bf00      	nop
 8004a8a:	3720      	adds	r7, #32
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40021000 	.word	0x40021000
 8004a94:	48001000 	.word	0x48001000

08004a98 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8004aa8:	883b      	ldrh	r3, [r7, #0]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d903      	bls.n	8004ab6 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab4:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2108      	movs	r1, #8
 8004aba:	480f      	ldr	r0, [pc, #60]	; (8004af8 <GYRO_IO_Write+0x60>)
 8004abc:	f7fc ffcc 	bl	8001a58 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff ff42 	bl	800494c <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8004ac8:	e00a      	b.n	8004ae0 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff ff3c 	bl	800494c <SPIx_WriteRead>
    NumByteToWrite--;
 8004ad4:	883b      	ldrh	r3, [r7, #0]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3301      	adds	r3, #1
 8004ade:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8004ae0:	883b      	ldrh	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f1      	bne.n	8004aca <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	2108      	movs	r1, #8
 8004aea:	4803      	ldr	r0, [pc, #12]	; (8004af8 <GYRO_IO_Write+0x60>)
 8004aec:	f7fc ffb4 	bl	8001a58 <HAL_GPIO_WritePin>
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	48001000 	.word	0x48001000

08004afc <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	70fb      	strb	r3, [r7, #3]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8004b0c:	883b      	ldrh	r3, [r7, #0]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d904      	bls.n	8004b1c <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004b18:	70fb      	strb	r3, [r7, #3]
 8004b1a:	e003      	b.n	8004b24 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b22:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004b24:	2200      	movs	r2, #0
 8004b26:	2108      	movs	r1, #8
 8004b28:	4810      	ldr	r0, [pc, #64]	; (8004b6c <GYRO_IO_Read+0x70>)
 8004b2a:	f7fc ff95 	bl	8001a58 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8004b2e:	78fb      	ldrb	r3, [r7, #3]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff ff0b 	bl	800494c <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8004b36:	e00c      	b.n	8004b52 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8004b38:	2000      	movs	r0, #0
 8004b3a:	f7ff ff07 	bl	800494c <SPIx_WriteRead>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	461a      	mov	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8004b46:	883b      	ldrh	r3, [r7, #0]
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8004b52:	883b      	ldrh	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1ef      	bne.n	8004b38 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004b58:	2201      	movs	r2, #1
 8004b5a:	2108      	movs	r1, #8
 8004b5c:	4803      	ldr	r0, [pc, #12]	; (8004b6c <GYRO_IO_Read+0x70>)
 8004b5e:	f7fc ff7b 	bl	8001a58 <HAL_GPIO_WritePin>
}  
 8004b62:	bf00      	nop
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	48001000 	.word	0x48001000

08004b70 <srand>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	4b10      	ldr	r3, [pc, #64]	; (8004bb4 <srand+0x44>)
 8004b74:	681d      	ldr	r5, [r3, #0]
 8004b76:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004b78:	4604      	mov	r4, r0
 8004b7a:	b9b3      	cbnz	r3, 8004baa <srand+0x3a>
 8004b7c:	2018      	movs	r0, #24
 8004b7e:	f000 fab1 	bl	80050e4 <malloc>
 8004b82:	4602      	mov	r2, r0
 8004b84:	6328      	str	r0, [r5, #48]	; 0x30
 8004b86:	b920      	cbnz	r0, 8004b92 <srand+0x22>
 8004b88:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <srand+0x48>)
 8004b8a:	480c      	ldr	r0, [pc, #48]	; (8004bbc <srand+0x4c>)
 8004b8c:	2146      	movs	r1, #70	; 0x46
 8004b8e:	f000 fa3f 	bl	8005010 <__assert_func>
 8004b92:	490b      	ldr	r1, [pc, #44]	; (8004bc0 <srand+0x50>)
 8004b94:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <srand+0x54>)
 8004b96:	e9c0 1300 	strd	r1, r3, [r0]
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <srand+0x58>)
 8004b9c:	6083      	str	r3, [r0, #8]
 8004b9e:	230b      	movs	r3, #11
 8004ba0:	8183      	strh	r3, [r0, #12]
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004baa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004bac:	2200      	movs	r2, #0
 8004bae:	611c      	str	r4, [r3, #16]
 8004bb0:	615a      	str	r2, [r3, #20]
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
 8004bb4:	20000110 	.word	0x20000110
 8004bb8:	0800671c 	.word	0x0800671c
 8004bbc:	08006733 	.word	0x08006733
 8004bc0:	abcd330e 	.word	0xabcd330e
 8004bc4:	e66d1234 	.word	0xe66d1234
 8004bc8:	0005deec 	.word	0x0005deec

08004bcc <rand>:
 8004bcc:	4b16      	ldr	r3, [pc, #88]	; (8004c28 <rand+0x5c>)
 8004bce:	b510      	push	{r4, lr}
 8004bd0:	681c      	ldr	r4, [r3, #0]
 8004bd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004bd4:	b9b3      	cbnz	r3, 8004c04 <rand+0x38>
 8004bd6:	2018      	movs	r0, #24
 8004bd8:	f000 fa84 	bl	80050e4 <malloc>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	6320      	str	r0, [r4, #48]	; 0x30
 8004be0:	b920      	cbnz	r0, 8004bec <rand+0x20>
 8004be2:	4b12      	ldr	r3, [pc, #72]	; (8004c2c <rand+0x60>)
 8004be4:	4812      	ldr	r0, [pc, #72]	; (8004c30 <rand+0x64>)
 8004be6:	2152      	movs	r1, #82	; 0x52
 8004be8:	f000 fa12 	bl	8005010 <__assert_func>
 8004bec:	4911      	ldr	r1, [pc, #68]	; (8004c34 <rand+0x68>)
 8004bee:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <rand+0x6c>)
 8004bf0:	e9c0 1300 	strd	r1, r3, [r0]
 8004bf4:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <rand+0x70>)
 8004bf6:	6083      	str	r3, [r0, #8]
 8004bf8:	230b      	movs	r3, #11
 8004bfa:	8183      	strh	r3, [r0, #12]
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	2001      	movs	r0, #1
 8004c00:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004c04:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004c06:	480e      	ldr	r0, [pc, #56]	; (8004c40 <rand+0x74>)
 8004c08:	690b      	ldr	r3, [r1, #16]
 8004c0a:	694c      	ldr	r4, [r1, #20]
 8004c0c:	4a0d      	ldr	r2, [pc, #52]	; (8004c44 <rand+0x78>)
 8004c0e:	4358      	muls	r0, r3
 8004c10:	fb02 0004 	mla	r0, r2, r4, r0
 8004c14:	fba3 3202 	umull	r3, r2, r3, r2
 8004c18:	3301      	adds	r3, #1
 8004c1a:	eb40 0002 	adc.w	r0, r0, r2
 8004c1e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004c22:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004c26:	bd10      	pop	{r4, pc}
 8004c28:	20000110 	.word	0x20000110
 8004c2c:	0800671c 	.word	0x0800671c
 8004c30:	08006733 	.word	0x08006733
 8004c34:	abcd330e 	.word	0xabcd330e
 8004c38:	e66d1234 	.word	0xe66d1234
 8004c3c:	0005deec 	.word	0x0005deec
 8004c40:	5851f42d 	.word	0x5851f42d
 8004c44:	4c957f2d 	.word	0x4c957f2d

08004c48 <std>:
 8004c48:	2300      	movs	r3, #0
 8004c4a:	b510      	push	{r4, lr}
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8004c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c56:	6083      	str	r3, [r0, #8]
 8004c58:	8181      	strh	r1, [r0, #12]
 8004c5a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c5c:	81c2      	strh	r2, [r0, #14]
 8004c5e:	6183      	str	r3, [r0, #24]
 8004c60:	4619      	mov	r1, r3
 8004c62:	2208      	movs	r2, #8
 8004c64:	305c      	adds	r0, #92	; 0x5c
 8004c66:	f000 f914 	bl	8004e92 <memset>
 8004c6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <std+0x58>)
 8004c6c:	6263      	str	r3, [r4, #36]	; 0x24
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <std+0x5c>)
 8004c70:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c72:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <std+0x60>)
 8004c74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c76:	4b0d      	ldr	r3, [pc, #52]	; (8004cac <std+0x64>)
 8004c78:	6323      	str	r3, [r4, #48]	; 0x30
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <std+0x68>)
 8004c7c:	6224      	str	r4, [r4, #32]
 8004c7e:	429c      	cmp	r4, r3
 8004c80:	d006      	beq.n	8004c90 <std+0x48>
 8004c82:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004c86:	4294      	cmp	r4, r2
 8004c88:	d002      	beq.n	8004c90 <std+0x48>
 8004c8a:	33d0      	adds	r3, #208	; 0xd0
 8004c8c:	429c      	cmp	r4, r3
 8004c8e:	d105      	bne.n	8004c9c <std+0x54>
 8004c90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c98:	f000 b9a0 	b.w	8004fdc <__retarget_lock_init_recursive>
 8004c9c:	bd10      	pop	{r4, pc}
 8004c9e:	bf00      	nop
 8004ca0:	08004e0d 	.word	0x08004e0d
 8004ca4:	08004e2f 	.word	0x08004e2f
 8004ca8:	08004e67 	.word	0x08004e67
 8004cac:	08004e8b 	.word	0x08004e8b
 8004cb0:	20000870 	.word	0x20000870

08004cb4 <stdio_exit_handler>:
 8004cb4:	4a02      	ldr	r2, [pc, #8]	; (8004cc0 <stdio_exit_handler+0xc>)
 8004cb6:	4903      	ldr	r1, [pc, #12]	; (8004cc4 <stdio_exit_handler+0x10>)
 8004cb8:	4803      	ldr	r0, [pc, #12]	; (8004cc8 <stdio_exit_handler+0x14>)
 8004cba:	f000 b869 	b.w	8004d90 <_fwalk_sglue>
 8004cbe:	bf00      	nop
 8004cc0:	200000b8 	.word	0x200000b8
 8004cc4:	08005929 	.word	0x08005929
 8004cc8:	200000c4 	.word	0x200000c4

08004ccc <cleanup_stdio>:
 8004ccc:	6841      	ldr	r1, [r0, #4]
 8004cce:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <cleanup_stdio+0x34>)
 8004cd0:	4299      	cmp	r1, r3
 8004cd2:	b510      	push	{r4, lr}
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	d001      	beq.n	8004cdc <cleanup_stdio+0x10>
 8004cd8:	f000 fe26 	bl	8005928 <_fflush_r>
 8004cdc:	68a1      	ldr	r1, [r4, #8]
 8004cde:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <cleanup_stdio+0x38>)
 8004ce0:	4299      	cmp	r1, r3
 8004ce2:	d002      	beq.n	8004cea <cleanup_stdio+0x1e>
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	f000 fe1f 	bl	8005928 <_fflush_r>
 8004cea:	68e1      	ldr	r1, [r4, #12]
 8004cec:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <cleanup_stdio+0x3c>)
 8004cee:	4299      	cmp	r1, r3
 8004cf0:	d004      	beq.n	8004cfc <cleanup_stdio+0x30>
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf8:	f000 be16 	b.w	8005928 <_fflush_r>
 8004cfc:	bd10      	pop	{r4, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000870 	.word	0x20000870
 8004d04:	200008d8 	.word	0x200008d8
 8004d08:	20000940 	.word	0x20000940

08004d0c <global_stdio_init.part.0>:
 8004d0c:	b510      	push	{r4, lr}
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <global_stdio_init.part.0+0x30>)
 8004d10:	4c0b      	ldr	r4, [pc, #44]	; (8004d40 <global_stdio_init.part.0+0x34>)
 8004d12:	4a0c      	ldr	r2, [pc, #48]	; (8004d44 <global_stdio_init.part.0+0x38>)
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	4620      	mov	r0, r4
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2104      	movs	r1, #4
 8004d1c:	f7ff ff94 	bl	8004c48 <std>
 8004d20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004d24:	2201      	movs	r2, #1
 8004d26:	2109      	movs	r1, #9
 8004d28:	f7ff ff8e 	bl	8004c48 <std>
 8004d2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d30:	2202      	movs	r2, #2
 8004d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d36:	2112      	movs	r1, #18
 8004d38:	f7ff bf86 	b.w	8004c48 <std>
 8004d3c:	200009a8 	.word	0x200009a8
 8004d40:	20000870 	.word	0x20000870
 8004d44:	08004cb5 	.word	0x08004cb5

08004d48 <__sfp_lock_acquire>:
 8004d48:	4801      	ldr	r0, [pc, #4]	; (8004d50 <__sfp_lock_acquire+0x8>)
 8004d4a:	f000 b948 	b.w	8004fde <__retarget_lock_acquire_recursive>
 8004d4e:	bf00      	nop
 8004d50:	200009b1 	.word	0x200009b1

08004d54 <__sfp_lock_release>:
 8004d54:	4801      	ldr	r0, [pc, #4]	; (8004d5c <__sfp_lock_release+0x8>)
 8004d56:	f000 b943 	b.w	8004fe0 <__retarget_lock_release_recursive>
 8004d5a:	bf00      	nop
 8004d5c:	200009b1 	.word	0x200009b1

08004d60 <__sinit>:
 8004d60:	b510      	push	{r4, lr}
 8004d62:	4604      	mov	r4, r0
 8004d64:	f7ff fff0 	bl	8004d48 <__sfp_lock_acquire>
 8004d68:	6a23      	ldr	r3, [r4, #32]
 8004d6a:	b11b      	cbz	r3, 8004d74 <__sinit+0x14>
 8004d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d70:	f7ff bff0 	b.w	8004d54 <__sfp_lock_release>
 8004d74:	4b04      	ldr	r3, [pc, #16]	; (8004d88 <__sinit+0x28>)
 8004d76:	6223      	str	r3, [r4, #32]
 8004d78:	4b04      	ldr	r3, [pc, #16]	; (8004d8c <__sinit+0x2c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f5      	bne.n	8004d6c <__sinit+0xc>
 8004d80:	f7ff ffc4 	bl	8004d0c <global_stdio_init.part.0>
 8004d84:	e7f2      	b.n	8004d6c <__sinit+0xc>
 8004d86:	bf00      	nop
 8004d88:	08004ccd 	.word	0x08004ccd
 8004d8c:	200009a8 	.word	0x200009a8

08004d90 <_fwalk_sglue>:
 8004d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d94:	4607      	mov	r7, r0
 8004d96:	4688      	mov	r8, r1
 8004d98:	4614      	mov	r4, r2
 8004d9a:	2600      	movs	r6, #0
 8004d9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004da0:	f1b9 0901 	subs.w	r9, r9, #1
 8004da4:	d505      	bpl.n	8004db2 <_fwalk_sglue+0x22>
 8004da6:	6824      	ldr	r4, [r4, #0]
 8004da8:	2c00      	cmp	r4, #0
 8004daa:	d1f7      	bne.n	8004d9c <_fwalk_sglue+0xc>
 8004dac:	4630      	mov	r0, r6
 8004dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004db2:	89ab      	ldrh	r3, [r5, #12]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d907      	bls.n	8004dc8 <_fwalk_sglue+0x38>
 8004db8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	d003      	beq.n	8004dc8 <_fwalk_sglue+0x38>
 8004dc0:	4629      	mov	r1, r5
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	47c0      	blx	r8
 8004dc6:	4306      	orrs	r6, r0
 8004dc8:	3568      	adds	r5, #104	; 0x68
 8004dca:	e7e9      	b.n	8004da0 <_fwalk_sglue+0x10>

08004dcc <siprintf>:
 8004dcc:	b40e      	push	{r1, r2, r3}
 8004dce:	b500      	push	{lr}
 8004dd0:	b09c      	sub	sp, #112	; 0x70
 8004dd2:	ab1d      	add	r3, sp, #116	; 0x74
 8004dd4:	9002      	str	r0, [sp, #8]
 8004dd6:	9006      	str	r0, [sp, #24]
 8004dd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ddc:	4809      	ldr	r0, [pc, #36]	; (8004e04 <siprintf+0x38>)
 8004dde:	9107      	str	r1, [sp, #28]
 8004de0:	9104      	str	r1, [sp, #16]
 8004de2:	4909      	ldr	r1, [pc, #36]	; (8004e08 <siprintf+0x3c>)
 8004de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004de8:	9105      	str	r1, [sp, #20]
 8004dea:	6800      	ldr	r0, [r0, #0]
 8004dec:	9301      	str	r3, [sp, #4]
 8004dee:	a902      	add	r1, sp, #8
 8004df0:	f000 fa86 	bl	8005300 <_svfiprintf_r>
 8004df4:	9b02      	ldr	r3, [sp, #8]
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	b01c      	add	sp, #112	; 0x70
 8004dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e00:	b003      	add	sp, #12
 8004e02:	4770      	bx	lr
 8004e04:	20000110 	.word	0x20000110
 8004e08:	ffff0208 	.word	0xffff0208

08004e0c <__sread>:
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	460c      	mov	r4, r1
 8004e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e14:	f000 f894 	bl	8004f40 <_read_r>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	bfab      	itete	ge
 8004e1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e20:	181b      	addge	r3, r3, r0
 8004e22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e26:	bfac      	ite	ge
 8004e28:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e2a:	81a3      	strhlt	r3, [r4, #12]
 8004e2c:	bd10      	pop	{r4, pc}

08004e2e <__swrite>:
 8004e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e32:	461f      	mov	r7, r3
 8004e34:	898b      	ldrh	r3, [r1, #12]
 8004e36:	05db      	lsls	r3, r3, #23
 8004e38:	4605      	mov	r5, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	4616      	mov	r6, r2
 8004e3e:	d505      	bpl.n	8004e4c <__swrite+0x1e>
 8004e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e44:	2302      	movs	r3, #2
 8004e46:	2200      	movs	r2, #0
 8004e48:	f000 f868 	bl	8004f1c <_lseek_r>
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e56:	81a3      	strh	r3, [r4, #12]
 8004e58:	4632      	mov	r2, r6
 8004e5a:	463b      	mov	r3, r7
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e62:	f000 b87f 	b.w	8004f64 <_write_r>

08004e66 <__sseek>:
 8004e66:	b510      	push	{r4, lr}
 8004e68:	460c      	mov	r4, r1
 8004e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e6e:	f000 f855 	bl	8004f1c <_lseek_r>
 8004e72:	1c43      	adds	r3, r0, #1
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	bf15      	itete	ne
 8004e78:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e82:	81a3      	strheq	r3, [r4, #12]
 8004e84:	bf18      	it	ne
 8004e86:	81a3      	strhne	r3, [r4, #12]
 8004e88:	bd10      	pop	{r4, pc}

08004e8a <__sclose>:
 8004e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e8e:	f000 b823 	b.w	8004ed8 <_close_r>

08004e92 <memset>:
 8004e92:	4402      	add	r2, r0
 8004e94:	4603      	mov	r3, r0
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d100      	bne.n	8004e9c <memset+0xa>
 8004e9a:	4770      	bx	lr
 8004e9c:	f803 1b01 	strb.w	r1, [r3], #1
 8004ea0:	e7f9      	b.n	8004e96 <memset+0x4>
	...

08004ea4 <time>:
 8004ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <time+0x30>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	4669      	mov	r1, sp
 8004eac:	4604      	mov	r4, r0
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	f000 f822 	bl	8004ef8 <_gettimeofday_r>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	bfbe      	ittt	lt
 8004eb8:	f04f 32ff 	movlt.w	r2, #4294967295
 8004ebc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ec0:	e9cd 2300 	strdlt	r2, r3, [sp]
 8004ec4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ec8:	b10c      	cbz	r4, 8004ece <time+0x2a>
 8004eca:	e9c4 0100 	strd	r0, r1, [r4]
 8004ece:	b004      	add	sp, #16
 8004ed0:	bd10      	pop	{r4, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000110 	.word	0x20000110

08004ed8 <_close_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	4d06      	ldr	r5, [pc, #24]	; (8004ef4 <_close_r+0x1c>)
 8004edc:	2300      	movs	r3, #0
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	602b      	str	r3, [r5, #0]
 8004ee4:	f7fc f867 	bl	8000fb6 <_close>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d102      	bne.n	8004ef2 <_close_r+0x1a>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	b103      	cbz	r3, 8004ef2 <_close_r+0x1a>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	200009ac 	.word	0x200009ac

08004ef8 <_gettimeofday_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4d07      	ldr	r5, [pc, #28]	; (8004f18 <_gettimeofday_r+0x20>)
 8004efc:	2300      	movs	r3, #0
 8004efe:	4604      	mov	r4, r0
 8004f00:	4608      	mov	r0, r1
 8004f02:	4611      	mov	r1, r2
 8004f04:	602b      	str	r3, [r5, #0]
 8004f06:	f001 f853 	bl	8005fb0 <_gettimeofday>
 8004f0a:	1c43      	adds	r3, r0, #1
 8004f0c:	d102      	bne.n	8004f14 <_gettimeofday_r+0x1c>
 8004f0e:	682b      	ldr	r3, [r5, #0]
 8004f10:	b103      	cbz	r3, 8004f14 <_gettimeofday_r+0x1c>
 8004f12:	6023      	str	r3, [r4, #0]
 8004f14:	bd38      	pop	{r3, r4, r5, pc}
 8004f16:	bf00      	nop
 8004f18:	200009ac 	.word	0x200009ac

08004f1c <_lseek_r>:
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4d07      	ldr	r5, [pc, #28]	; (8004f3c <_lseek_r+0x20>)
 8004f20:	4604      	mov	r4, r0
 8004f22:	4608      	mov	r0, r1
 8004f24:	4611      	mov	r1, r2
 8004f26:	2200      	movs	r2, #0
 8004f28:	602a      	str	r2, [r5, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f7fc f86a 	bl	8001004 <_lseek>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d102      	bne.n	8004f3a <_lseek_r+0x1e>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	b103      	cbz	r3, 8004f3a <_lseek_r+0x1e>
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	200009ac 	.word	0x200009ac

08004f40 <_read_r>:
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	4d07      	ldr	r5, [pc, #28]	; (8004f60 <_read_r+0x20>)
 8004f44:	4604      	mov	r4, r0
 8004f46:	4608      	mov	r0, r1
 8004f48:	4611      	mov	r1, r2
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	602a      	str	r2, [r5, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f7fb fff8 	bl	8000f44 <_read>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	d102      	bne.n	8004f5e <_read_r+0x1e>
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	b103      	cbz	r3, 8004f5e <_read_r+0x1e>
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	bd38      	pop	{r3, r4, r5, pc}
 8004f60:	200009ac 	.word	0x200009ac

08004f64 <_write_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	4d07      	ldr	r5, [pc, #28]	; (8004f84 <_write_r+0x20>)
 8004f68:	4604      	mov	r4, r0
 8004f6a:	4608      	mov	r0, r1
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	2200      	movs	r2, #0
 8004f70:	602a      	str	r2, [r5, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	f7fc f803 	bl	8000f7e <_write>
 8004f78:	1c43      	adds	r3, r0, #1
 8004f7a:	d102      	bne.n	8004f82 <_write_r+0x1e>
 8004f7c:	682b      	ldr	r3, [r5, #0]
 8004f7e:	b103      	cbz	r3, 8004f82 <_write_r+0x1e>
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	bd38      	pop	{r3, r4, r5, pc}
 8004f84:	200009ac 	.word	0x200009ac

08004f88 <__errno>:
 8004f88:	4b01      	ldr	r3, [pc, #4]	; (8004f90 <__errno+0x8>)
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	20000110 	.word	0x20000110

08004f94 <__libc_init_array>:
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	4d0d      	ldr	r5, [pc, #52]	; (8004fcc <__libc_init_array+0x38>)
 8004f98:	4c0d      	ldr	r4, [pc, #52]	; (8004fd0 <__libc_init_array+0x3c>)
 8004f9a:	1b64      	subs	r4, r4, r5
 8004f9c:	10a4      	asrs	r4, r4, #2
 8004f9e:	2600      	movs	r6, #0
 8004fa0:	42a6      	cmp	r6, r4
 8004fa2:	d109      	bne.n	8004fb8 <__libc_init_array+0x24>
 8004fa4:	4d0b      	ldr	r5, [pc, #44]	; (8004fd4 <__libc_init_array+0x40>)
 8004fa6:	4c0c      	ldr	r4, [pc, #48]	; (8004fd8 <__libc_init_array+0x44>)
 8004fa8:	f001 f80a 	bl	8005fc0 <_init>
 8004fac:	1b64      	subs	r4, r4, r5
 8004fae:	10a4      	asrs	r4, r4, #2
 8004fb0:	2600      	movs	r6, #0
 8004fb2:	42a6      	cmp	r6, r4
 8004fb4:	d105      	bne.n	8004fc2 <__libc_init_array+0x2e>
 8004fb6:	bd70      	pop	{r4, r5, r6, pc}
 8004fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fbc:	4798      	blx	r3
 8004fbe:	3601      	adds	r6, #1
 8004fc0:	e7ee      	b.n	8004fa0 <__libc_init_array+0xc>
 8004fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc6:	4798      	blx	r3
 8004fc8:	3601      	adds	r6, #1
 8004fca:	e7f2      	b.n	8004fb2 <__libc_init_array+0x1e>
 8004fcc:	080067fc 	.word	0x080067fc
 8004fd0:	080067fc 	.word	0x080067fc
 8004fd4:	080067fc 	.word	0x080067fc
 8004fd8:	08006800 	.word	0x08006800

08004fdc <__retarget_lock_init_recursive>:
 8004fdc:	4770      	bx	lr

08004fde <__retarget_lock_acquire_recursive>:
 8004fde:	4770      	bx	lr

08004fe0 <__retarget_lock_release_recursive>:
 8004fe0:	4770      	bx	lr

08004fe2 <strcpy>:
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fe8:	f803 2b01 	strb.w	r2, [r3], #1
 8004fec:	2a00      	cmp	r2, #0
 8004fee:	d1f9      	bne.n	8004fe4 <strcpy+0x2>
 8004ff0:	4770      	bx	lr

08004ff2 <memcpy>:
 8004ff2:	440a      	add	r2, r1
 8004ff4:	4291      	cmp	r1, r2
 8004ff6:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ffa:	d100      	bne.n	8004ffe <memcpy+0xc>
 8004ffc:	4770      	bx	lr
 8004ffe:	b510      	push	{r4, lr}
 8005000:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005004:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005008:	4291      	cmp	r1, r2
 800500a:	d1f9      	bne.n	8005000 <memcpy+0xe>
 800500c:	bd10      	pop	{r4, pc}
	...

08005010 <__assert_func>:
 8005010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005012:	4614      	mov	r4, r2
 8005014:	461a      	mov	r2, r3
 8005016:	4b09      	ldr	r3, [pc, #36]	; (800503c <__assert_func+0x2c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4605      	mov	r5, r0
 800501c:	68d8      	ldr	r0, [r3, #12]
 800501e:	b14c      	cbz	r4, 8005034 <__assert_func+0x24>
 8005020:	4b07      	ldr	r3, [pc, #28]	; (8005040 <__assert_func+0x30>)
 8005022:	9100      	str	r1, [sp, #0]
 8005024:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005028:	4906      	ldr	r1, [pc, #24]	; (8005044 <__assert_func+0x34>)
 800502a:	462b      	mov	r3, r5
 800502c:	f000 fca4 	bl	8005978 <fiprintf>
 8005030:	f000 fcde 	bl	80059f0 <abort>
 8005034:	4b04      	ldr	r3, [pc, #16]	; (8005048 <__assert_func+0x38>)
 8005036:	461c      	mov	r4, r3
 8005038:	e7f3      	b.n	8005022 <__assert_func+0x12>
 800503a:	bf00      	nop
 800503c:	20000110 	.word	0x20000110
 8005040:	0800678b 	.word	0x0800678b
 8005044:	08006798 	.word	0x08006798
 8005048:	080067c6 	.word	0x080067c6

0800504c <_free_r>:
 800504c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800504e:	2900      	cmp	r1, #0
 8005050:	d044      	beq.n	80050dc <_free_r+0x90>
 8005052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005056:	9001      	str	r0, [sp, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f1a1 0404 	sub.w	r4, r1, #4
 800505e:	bfb8      	it	lt
 8005060:	18e4      	addlt	r4, r4, r3
 8005062:	f000 f8e7 	bl	8005234 <__malloc_lock>
 8005066:	4a1e      	ldr	r2, [pc, #120]	; (80050e0 <_free_r+0x94>)
 8005068:	9801      	ldr	r0, [sp, #4]
 800506a:	6813      	ldr	r3, [r2, #0]
 800506c:	b933      	cbnz	r3, 800507c <_free_r+0x30>
 800506e:	6063      	str	r3, [r4, #4]
 8005070:	6014      	str	r4, [r2, #0]
 8005072:	b003      	add	sp, #12
 8005074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005078:	f000 b8e2 	b.w	8005240 <__malloc_unlock>
 800507c:	42a3      	cmp	r3, r4
 800507e:	d908      	bls.n	8005092 <_free_r+0x46>
 8005080:	6825      	ldr	r5, [r4, #0]
 8005082:	1961      	adds	r1, r4, r5
 8005084:	428b      	cmp	r3, r1
 8005086:	bf01      	itttt	eq
 8005088:	6819      	ldreq	r1, [r3, #0]
 800508a:	685b      	ldreq	r3, [r3, #4]
 800508c:	1949      	addeq	r1, r1, r5
 800508e:	6021      	streq	r1, [r4, #0]
 8005090:	e7ed      	b.n	800506e <_free_r+0x22>
 8005092:	461a      	mov	r2, r3
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	b10b      	cbz	r3, 800509c <_free_r+0x50>
 8005098:	42a3      	cmp	r3, r4
 800509a:	d9fa      	bls.n	8005092 <_free_r+0x46>
 800509c:	6811      	ldr	r1, [r2, #0]
 800509e:	1855      	adds	r5, r2, r1
 80050a0:	42a5      	cmp	r5, r4
 80050a2:	d10b      	bne.n	80050bc <_free_r+0x70>
 80050a4:	6824      	ldr	r4, [r4, #0]
 80050a6:	4421      	add	r1, r4
 80050a8:	1854      	adds	r4, r2, r1
 80050aa:	42a3      	cmp	r3, r4
 80050ac:	6011      	str	r1, [r2, #0]
 80050ae:	d1e0      	bne.n	8005072 <_free_r+0x26>
 80050b0:	681c      	ldr	r4, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	6053      	str	r3, [r2, #4]
 80050b6:	440c      	add	r4, r1
 80050b8:	6014      	str	r4, [r2, #0]
 80050ba:	e7da      	b.n	8005072 <_free_r+0x26>
 80050bc:	d902      	bls.n	80050c4 <_free_r+0x78>
 80050be:	230c      	movs	r3, #12
 80050c0:	6003      	str	r3, [r0, #0]
 80050c2:	e7d6      	b.n	8005072 <_free_r+0x26>
 80050c4:	6825      	ldr	r5, [r4, #0]
 80050c6:	1961      	adds	r1, r4, r5
 80050c8:	428b      	cmp	r3, r1
 80050ca:	bf04      	itt	eq
 80050cc:	6819      	ldreq	r1, [r3, #0]
 80050ce:	685b      	ldreq	r3, [r3, #4]
 80050d0:	6063      	str	r3, [r4, #4]
 80050d2:	bf04      	itt	eq
 80050d4:	1949      	addeq	r1, r1, r5
 80050d6:	6021      	streq	r1, [r4, #0]
 80050d8:	6054      	str	r4, [r2, #4]
 80050da:	e7ca      	b.n	8005072 <_free_r+0x26>
 80050dc:	b003      	add	sp, #12
 80050de:	bd30      	pop	{r4, r5, pc}
 80050e0:	200009b4 	.word	0x200009b4

080050e4 <malloc>:
 80050e4:	4b02      	ldr	r3, [pc, #8]	; (80050f0 <malloc+0xc>)
 80050e6:	4601      	mov	r1, r0
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	f000 b823 	b.w	8005134 <_malloc_r>
 80050ee:	bf00      	nop
 80050f0:	20000110 	.word	0x20000110

080050f4 <sbrk_aligned>:
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	4e0e      	ldr	r6, [pc, #56]	; (8005130 <sbrk_aligned+0x3c>)
 80050f8:	460c      	mov	r4, r1
 80050fa:	6831      	ldr	r1, [r6, #0]
 80050fc:	4605      	mov	r5, r0
 80050fe:	b911      	cbnz	r1, 8005106 <sbrk_aligned+0x12>
 8005100:	f000 fc66 	bl	80059d0 <_sbrk_r>
 8005104:	6030      	str	r0, [r6, #0]
 8005106:	4621      	mov	r1, r4
 8005108:	4628      	mov	r0, r5
 800510a:	f000 fc61 	bl	80059d0 <_sbrk_r>
 800510e:	1c43      	adds	r3, r0, #1
 8005110:	d00a      	beq.n	8005128 <sbrk_aligned+0x34>
 8005112:	1cc4      	adds	r4, r0, #3
 8005114:	f024 0403 	bic.w	r4, r4, #3
 8005118:	42a0      	cmp	r0, r4
 800511a:	d007      	beq.n	800512c <sbrk_aligned+0x38>
 800511c:	1a21      	subs	r1, r4, r0
 800511e:	4628      	mov	r0, r5
 8005120:	f000 fc56 	bl	80059d0 <_sbrk_r>
 8005124:	3001      	adds	r0, #1
 8005126:	d101      	bne.n	800512c <sbrk_aligned+0x38>
 8005128:	f04f 34ff 	mov.w	r4, #4294967295
 800512c:	4620      	mov	r0, r4
 800512e:	bd70      	pop	{r4, r5, r6, pc}
 8005130:	200009b8 	.word	0x200009b8

08005134 <_malloc_r>:
 8005134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005138:	1ccd      	adds	r5, r1, #3
 800513a:	f025 0503 	bic.w	r5, r5, #3
 800513e:	3508      	adds	r5, #8
 8005140:	2d0c      	cmp	r5, #12
 8005142:	bf38      	it	cc
 8005144:	250c      	movcc	r5, #12
 8005146:	2d00      	cmp	r5, #0
 8005148:	4607      	mov	r7, r0
 800514a:	db01      	blt.n	8005150 <_malloc_r+0x1c>
 800514c:	42a9      	cmp	r1, r5
 800514e:	d905      	bls.n	800515c <_malloc_r+0x28>
 8005150:	230c      	movs	r3, #12
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	2600      	movs	r6, #0
 8005156:	4630      	mov	r0, r6
 8005158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800515c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005230 <_malloc_r+0xfc>
 8005160:	f000 f868 	bl	8005234 <__malloc_lock>
 8005164:	f8d8 3000 	ldr.w	r3, [r8]
 8005168:	461c      	mov	r4, r3
 800516a:	bb5c      	cbnz	r4, 80051c4 <_malloc_r+0x90>
 800516c:	4629      	mov	r1, r5
 800516e:	4638      	mov	r0, r7
 8005170:	f7ff ffc0 	bl	80050f4 <sbrk_aligned>
 8005174:	1c43      	adds	r3, r0, #1
 8005176:	4604      	mov	r4, r0
 8005178:	d155      	bne.n	8005226 <_malloc_r+0xf2>
 800517a:	f8d8 4000 	ldr.w	r4, [r8]
 800517e:	4626      	mov	r6, r4
 8005180:	2e00      	cmp	r6, #0
 8005182:	d145      	bne.n	8005210 <_malloc_r+0xdc>
 8005184:	2c00      	cmp	r4, #0
 8005186:	d048      	beq.n	800521a <_malloc_r+0xe6>
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	4631      	mov	r1, r6
 800518c:	4638      	mov	r0, r7
 800518e:	eb04 0903 	add.w	r9, r4, r3
 8005192:	f000 fc1d 	bl	80059d0 <_sbrk_r>
 8005196:	4581      	cmp	r9, r0
 8005198:	d13f      	bne.n	800521a <_malloc_r+0xe6>
 800519a:	6821      	ldr	r1, [r4, #0]
 800519c:	1a6d      	subs	r5, r5, r1
 800519e:	4629      	mov	r1, r5
 80051a0:	4638      	mov	r0, r7
 80051a2:	f7ff ffa7 	bl	80050f4 <sbrk_aligned>
 80051a6:	3001      	adds	r0, #1
 80051a8:	d037      	beq.n	800521a <_malloc_r+0xe6>
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	442b      	add	r3, r5
 80051ae:	6023      	str	r3, [r4, #0]
 80051b0:	f8d8 3000 	ldr.w	r3, [r8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d038      	beq.n	800522a <_malloc_r+0xf6>
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	42a2      	cmp	r2, r4
 80051bc:	d12b      	bne.n	8005216 <_malloc_r+0xe2>
 80051be:	2200      	movs	r2, #0
 80051c0:	605a      	str	r2, [r3, #4]
 80051c2:	e00f      	b.n	80051e4 <_malloc_r+0xb0>
 80051c4:	6822      	ldr	r2, [r4, #0]
 80051c6:	1b52      	subs	r2, r2, r5
 80051c8:	d41f      	bmi.n	800520a <_malloc_r+0xd6>
 80051ca:	2a0b      	cmp	r2, #11
 80051cc:	d917      	bls.n	80051fe <_malloc_r+0xca>
 80051ce:	1961      	adds	r1, r4, r5
 80051d0:	42a3      	cmp	r3, r4
 80051d2:	6025      	str	r5, [r4, #0]
 80051d4:	bf18      	it	ne
 80051d6:	6059      	strne	r1, [r3, #4]
 80051d8:	6863      	ldr	r3, [r4, #4]
 80051da:	bf08      	it	eq
 80051dc:	f8c8 1000 	streq.w	r1, [r8]
 80051e0:	5162      	str	r2, [r4, r5]
 80051e2:	604b      	str	r3, [r1, #4]
 80051e4:	4638      	mov	r0, r7
 80051e6:	f104 060b 	add.w	r6, r4, #11
 80051ea:	f000 f829 	bl	8005240 <__malloc_unlock>
 80051ee:	f026 0607 	bic.w	r6, r6, #7
 80051f2:	1d23      	adds	r3, r4, #4
 80051f4:	1af2      	subs	r2, r6, r3
 80051f6:	d0ae      	beq.n	8005156 <_malloc_r+0x22>
 80051f8:	1b9b      	subs	r3, r3, r6
 80051fa:	50a3      	str	r3, [r4, r2]
 80051fc:	e7ab      	b.n	8005156 <_malloc_r+0x22>
 80051fe:	42a3      	cmp	r3, r4
 8005200:	6862      	ldr	r2, [r4, #4]
 8005202:	d1dd      	bne.n	80051c0 <_malloc_r+0x8c>
 8005204:	f8c8 2000 	str.w	r2, [r8]
 8005208:	e7ec      	b.n	80051e4 <_malloc_r+0xb0>
 800520a:	4623      	mov	r3, r4
 800520c:	6864      	ldr	r4, [r4, #4]
 800520e:	e7ac      	b.n	800516a <_malloc_r+0x36>
 8005210:	4634      	mov	r4, r6
 8005212:	6876      	ldr	r6, [r6, #4]
 8005214:	e7b4      	b.n	8005180 <_malloc_r+0x4c>
 8005216:	4613      	mov	r3, r2
 8005218:	e7cc      	b.n	80051b4 <_malloc_r+0x80>
 800521a:	230c      	movs	r3, #12
 800521c:	603b      	str	r3, [r7, #0]
 800521e:	4638      	mov	r0, r7
 8005220:	f000 f80e 	bl	8005240 <__malloc_unlock>
 8005224:	e797      	b.n	8005156 <_malloc_r+0x22>
 8005226:	6025      	str	r5, [r4, #0]
 8005228:	e7dc      	b.n	80051e4 <_malloc_r+0xb0>
 800522a:	605b      	str	r3, [r3, #4]
 800522c:	deff      	udf	#255	; 0xff
 800522e:	bf00      	nop
 8005230:	200009b4 	.word	0x200009b4

08005234 <__malloc_lock>:
 8005234:	4801      	ldr	r0, [pc, #4]	; (800523c <__malloc_lock+0x8>)
 8005236:	f7ff bed2 	b.w	8004fde <__retarget_lock_acquire_recursive>
 800523a:	bf00      	nop
 800523c:	200009b0 	.word	0x200009b0

08005240 <__malloc_unlock>:
 8005240:	4801      	ldr	r0, [pc, #4]	; (8005248 <__malloc_unlock+0x8>)
 8005242:	f7ff becd 	b.w	8004fe0 <__retarget_lock_release_recursive>
 8005246:	bf00      	nop
 8005248:	200009b0 	.word	0x200009b0

0800524c <__ssputs_r>:
 800524c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005250:	688e      	ldr	r6, [r1, #8]
 8005252:	461f      	mov	r7, r3
 8005254:	42be      	cmp	r6, r7
 8005256:	680b      	ldr	r3, [r1, #0]
 8005258:	4682      	mov	sl, r0
 800525a:	460c      	mov	r4, r1
 800525c:	4690      	mov	r8, r2
 800525e:	d82c      	bhi.n	80052ba <__ssputs_r+0x6e>
 8005260:	898a      	ldrh	r2, [r1, #12]
 8005262:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005266:	d026      	beq.n	80052b6 <__ssputs_r+0x6a>
 8005268:	6965      	ldr	r5, [r4, #20]
 800526a:	6909      	ldr	r1, [r1, #16]
 800526c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005270:	eba3 0901 	sub.w	r9, r3, r1
 8005274:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005278:	1c7b      	adds	r3, r7, #1
 800527a:	444b      	add	r3, r9
 800527c:	106d      	asrs	r5, r5, #1
 800527e:	429d      	cmp	r5, r3
 8005280:	bf38      	it	cc
 8005282:	461d      	movcc	r5, r3
 8005284:	0553      	lsls	r3, r2, #21
 8005286:	d527      	bpl.n	80052d8 <__ssputs_r+0x8c>
 8005288:	4629      	mov	r1, r5
 800528a:	f7ff ff53 	bl	8005134 <_malloc_r>
 800528e:	4606      	mov	r6, r0
 8005290:	b360      	cbz	r0, 80052ec <__ssputs_r+0xa0>
 8005292:	6921      	ldr	r1, [r4, #16]
 8005294:	464a      	mov	r2, r9
 8005296:	f7ff feac 	bl	8004ff2 <memcpy>
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a4:	81a3      	strh	r3, [r4, #12]
 80052a6:	6126      	str	r6, [r4, #16]
 80052a8:	6165      	str	r5, [r4, #20]
 80052aa:	444e      	add	r6, r9
 80052ac:	eba5 0509 	sub.w	r5, r5, r9
 80052b0:	6026      	str	r6, [r4, #0]
 80052b2:	60a5      	str	r5, [r4, #8]
 80052b4:	463e      	mov	r6, r7
 80052b6:	42be      	cmp	r6, r7
 80052b8:	d900      	bls.n	80052bc <__ssputs_r+0x70>
 80052ba:	463e      	mov	r6, r7
 80052bc:	6820      	ldr	r0, [r4, #0]
 80052be:	4632      	mov	r2, r6
 80052c0:	4641      	mov	r1, r8
 80052c2:	f000 fb6b 	bl	800599c <memmove>
 80052c6:	68a3      	ldr	r3, [r4, #8]
 80052c8:	1b9b      	subs	r3, r3, r6
 80052ca:	60a3      	str	r3, [r4, #8]
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	4433      	add	r3, r6
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	2000      	movs	r0, #0
 80052d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d8:	462a      	mov	r2, r5
 80052da:	f000 fb90 	bl	80059fe <_realloc_r>
 80052de:	4606      	mov	r6, r0
 80052e0:	2800      	cmp	r0, #0
 80052e2:	d1e0      	bne.n	80052a6 <__ssputs_r+0x5a>
 80052e4:	6921      	ldr	r1, [r4, #16]
 80052e6:	4650      	mov	r0, sl
 80052e8:	f7ff feb0 	bl	800504c <_free_r>
 80052ec:	230c      	movs	r3, #12
 80052ee:	f8ca 3000 	str.w	r3, [sl]
 80052f2:	89a3      	ldrh	r3, [r4, #12]
 80052f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052f8:	81a3      	strh	r3, [r4, #12]
 80052fa:	f04f 30ff 	mov.w	r0, #4294967295
 80052fe:	e7e9      	b.n	80052d4 <__ssputs_r+0x88>

08005300 <_svfiprintf_r>:
 8005300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005304:	4698      	mov	r8, r3
 8005306:	898b      	ldrh	r3, [r1, #12]
 8005308:	061b      	lsls	r3, r3, #24
 800530a:	b09d      	sub	sp, #116	; 0x74
 800530c:	4607      	mov	r7, r0
 800530e:	460d      	mov	r5, r1
 8005310:	4614      	mov	r4, r2
 8005312:	d50e      	bpl.n	8005332 <_svfiprintf_r+0x32>
 8005314:	690b      	ldr	r3, [r1, #16]
 8005316:	b963      	cbnz	r3, 8005332 <_svfiprintf_r+0x32>
 8005318:	2140      	movs	r1, #64	; 0x40
 800531a:	f7ff ff0b 	bl	8005134 <_malloc_r>
 800531e:	6028      	str	r0, [r5, #0]
 8005320:	6128      	str	r0, [r5, #16]
 8005322:	b920      	cbnz	r0, 800532e <_svfiprintf_r+0x2e>
 8005324:	230c      	movs	r3, #12
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	f04f 30ff 	mov.w	r0, #4294967295
 800532c:	e0d0      	b.n	80054d0 <_svfiprintf_r+0x1d0>
 800532e:	2340      	movs	r3, #64	; 0x40
 8005330:	616b      	str	r3, [r5, #20]
 8005332:	2300      	movs	r3, #0
 8005334:	9309      	str	r3, [sp, #36]	; 0x24
 8005336:	2320      	movs	r3, #32
 8005338:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800533c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005340:	2330      	movs	r3, #48	; 0x30
 8005342:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80054e8 <_svfiprintf_r+0x1e8>
 8005346:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800534a:	f04f 0901 	mov.w	r9, #1
 800534e:	4623      	mov	r3, r4
 8005350:	469a      	mov	sl, r3
 8005352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005356:	b10a      	cbz	r2, 800535c <_svfiprintf_r+0x5c>
 8005358:	2a25      	cmp	r2, #37	; 0x25
 800535a:	d1f9      	bne.n	8005350 <_svfiprintf_r+0x50>
 800535c:	ebba 0b04 	subs.w	fp, sl, r4
 8005360:	d00b      	beq.n	800537a <_svfiprintf_r+0x7a>
 8005362:	465b      	mov	r3, fp
 8005364:	4622      	mov	r2, r4
 8005366:	4629      	mov	r1, r5
 8005368:	4638      	mov	r0, r7
 800536a:	f7ff ff6f 	bl	800524c <__ssputs_r>
 800536e:	3001      	adds	r0, #1
 8005370:	f000 80a9 	beq.w	80054c6 <_svfiprintf_r+0x1c6>
 8005374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005376:	445a      	add	r2, fp
 8005378:	9209      	str	r2, [sp, #36]	; 0x24
 800537a:	f89a 3000 	ldrb.w	r3, [sl]
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 80a1 	beq.w	80054c6 <_svfiprintf_r+0x1c6>
 8005384:	2300      	movs	r3, #0
 8005386:	f04f 32ff 	mov.w	r2, #4294967295
 800538a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800538e:	f10a 0a01 	add.w	sl, sl, #1
 8005392:	9304      	str	r3, [sp, #16]
 8005394:	9307      	str	r3, [sp, #28]
 8005396:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800539a:	931a      	str	r3, [sp, #104]	; 0x68
 800539c:	4654      	mov	r4, sl
 800539e:	2205      	movs	r2, #5
 80053a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a4:	4850      	ldr	r0, [pc, #320]	; (80054e8 <_svfiprintf_r+0x1e8>)
 80053a6:	f7fa ff13 	bl	80001d0 <memchr>
 80053aa:	9a04      	ldr	r2, [sp, #16]
 80053ac:	b9d8      	cbnz	r0, 80053e6 <_svfiprintf_r+0xe6>
 80053ae:	06d0      	lsls	r0, r2, #27
 80053b0:	bf44      	itt	mi
 80053b2:	2320      	movmi	r3, #32
 80053b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053b8:	0711      	lsls	r1, r2, #28
 80053ba:	bf44      	itt	mi
 80053bc:	232b      	movmi	r3, #43	; 0x2b
 80053be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053c2:	f89a 3000 	ldrb.w	r3, [sl]
 80053c6:	2b2a      	cmp	r3, #42	; 0x2a
 80053c8:	d015      	beq.n	80053f6 <_svfiprintf_r+0xf6>
 80053ca:	9a07      	ldr	r2, [sp, #28]
 80053cc:	4654      	mov	r4, sl
 80053ce:	2000      	movs	r0, #0
 80053d0:	f04f 0c0a 	mov.w	ip, #10
 80053d4:	4621      	mov	r1, r4
 80053d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053da:	3b30      	subs	r3, #48	; 0x30
 80053dc:	2b09      	cmp	r3, #9
 80053de:	d94d      	bls.n	800547c <_svfiprintf_r+0x17c>
 80053e0:	b1b0      	cbz	r0, 8005410 <_svfiprintf_r+0x110>
 80053e2:	9207      	str	r2, [sp, #28]
 80053e4:	e014      	b.n	8005410 <_svfiprintf_r+0x110>
 80053e6:	eba0 0308 	sub.w	r3, r0, r8
 80053ea:	fa09 f303 	lsl.w	r3, r9, r3
 80053ee:	4313      	orrs	r3, r2
 80053f0:	9304      	str	r3, [sp, #16]
 80053f2:	46a2      	mov	sl, r4
 80053f4:	e7d2      	b.n	800539c <_svfiprintf_r+0x9c>
 80053f6:	9b03      	ldr	r3, [sp, #12]
 80053f8:	1d19      	adds	r1, r3, #4
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	9103      	str	r1, [sp, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	bfbb      	ittet	lt
 8005402:	425b      	neglt	r3, r3
 8005404:	f042 0202 	orrlt.w	r2, r2, #2
 8005408:	9307      	strge	r3, [sp, #28]
 800540a:	9307      	strlt	r3, [sp, #28]
 800540c:	bfb8      	it	lt
 800540e:	9204      	strlt	r2, [sp, #16]
 8005410:	7823      	ldrb	r3, [r4, #0]
 8005412:	2b2e      	cmp	r3, #46	; 0x2e
 8005414:	d10c      	bne.n	8005430 <_svfiprintf_r+0x130>
 8005416:	7863      	ldrb	r3, [r4, #1]
 8005418:	2b2a      	cmp	r3, #42	; 0x2a
 800541a:	d134      	bne.n	8005486 <_svfiprintf_r+0x186>
 800541c:	9b03      	ldr	r3, [sp, #12]
 800541e:	1d1a      	adds	r2, r3, #4
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	9203      	str	r2, [sp, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	bfb8      	it	lt
 8005428:	f04f 33ff 	movlt.w	r3, #4294967295
 800542c:	3402      	adds	r4, #2
 800542e:	9305      	str	r3, [sp, #20]
 8005430:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80054f8 <_svfiprintf_r+0x1f8>
 8005434:	7821      	ldrb	r1, [r4, #0]
 8005436:	2203      	movs	r2, #3
 8005438:	4650      	mov	r0, sl
 800543a:	f7fa fec9 	bl	80001d0 <memchr>
 800543e:	b138      	cbz	r0, 8005450 <_svfiprintf_r+0x150>
 8005440:	9b04      	ldr	r3, [sp, #16]
 8005442:	eba0 000a 	sub.w	r0, r0, sl
 8005446:	2240      	movs	r2, #64	; 0x40
 8005448:	4082      	lsls	r2, r0
 800544a:	4313      	orrs	r3, r2
 800544c:	3401      	adds	r4, #1
 800544e:	9304      	str	r3, [sp, #16]
 8005450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005454:	4825      	ldr	r0, [pc, #148]	; (80054ec <_svfiprintf_r+0x1ec>)
 8005456:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800545a:	2206      	movs	r2, #6
 800545c:	f7fa feb8 	bl	80001d0 <memchr>
 8005460:	2800      	cmp	r0, #0
 8005462:	d038      	beq.n	80054d6 <_svfiprintf_r+0x1d6>
 8005464:	4b22      	ldr	r3, [pc, #136]	; (80054f0 <_svfiprintf_r+0x1f0>)
 8005466:	bb1b      	cbnz	r3, 80054b0 <_svfiprintf_r+0x1b0>
 8005468:	9b03      	ldr	r3, [sp, #12]
 800546a:	3307      	adds	r3, #7
 800546c:	f023 0307 	bic.w	r3, r3, #7
 8005470:	3308      	adds	r3, #8
 8005472:	9303      	str	r3, [sp, #12]
 8005474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005476:	4433      	add	r3, r6
 8005478:	9309      	str	r3, [sp, #36]	; 0x24
 800547a:	e768      	b.n	800534e <_svfiprintf_r+0x4e>
 800547c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005480:	460c      	mov	r4, r1
 8005482:	2001      	movs	r0, #1
 8005484:	e7a6      	b.n	80053d4 <_svfiprintf_r+0xd4>
 8005486:	2300      	movs	r3, #0
 8005488:	3401      	adds	r4, #1
 800548a:	9305      	str	r3, [sp, #20]
 800548c:	4619      	mov	r1, r3
 800548e:	f04f 0c0a 	mov.w	ip, #10
 8005492:	4620      	mov	r0, r4
 8005494:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005498:	3a30      	subs	r2, #48	; 0x30
 800549a:	2a09      	cmp	r2, #9
 800549c:	d903      	bls.n	80054a6 <_svfiprintf_r+0x1a6>
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0c6      	beq.n	8005430 <_svfiprintf_r+0x130>
 80054a2:	9105      	str	r1, [sp, #20]
 80054a4:	e7c4      	b.n	8005430 <_svfiprintf_r+0x130>
 80054a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80054aa:	4604      	mov	r4, r0
 80054ac:	2301      	movs	r3, #1
 80054ae:	e7f0      	b.n	8005492 <_svfiprintf_r+0x192>
 80054b0:	ab03      	add	r3, sp, #12
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	462a      	mov	r2, r5
 80054b6:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <_svfiprintf_r+0x1f4>)
 80054b8:	a904      	add	r1, sp, #16
 80054ba:	4638      	mov	r0, r7
 80054bc:	f3af 8000 	nop.w
 80054c0:	1c42      	adds	r2, r0, #1
 80054c2:	4606      	mov	r6, r0
 80054c4:	d1d6      	bne.n	8005474 <_svfiprintf_r+0x174>
 80054c6:	89ab      	ldrh	r3, [r5, #12]
 80054c8:	065b      	lsls	r3, r3, #25
 80054ca:	f53f af2d 	bmi.w	8005328 <_svfiprintf_r+0x28>
 80054ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054d0:	b01d      	add	sp, #116	; 0x74
 80054d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d6:	ab03      	add	r3, sp, #12
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	462a      	mov	r2, r5
 80054dc:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <_svfiprintf_r+0x1f4>)
 80054de:	a904      	add	r1, sp, #16
 80054e0:	4638      	mov	r0, r7
 80054e2:	f000 f879 	bl	80055d8 <_printf_i>
 80054e6:	e7eb      	b.n	80054c0 <_svfiprintf_r+0x1c0>
 80054e8:	080067c7 	.word	0x080067c7
 80054ec:	080067d1 	.word	0x080067d1
 80054f0:	00000000 	.word	0x00000000
 80054f4:	0800524d 	.word	0x0800524d
 80054f8:	080067cd 	.word	0x080067cd

080054fc <_printf_common>:
 80054fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005500:	4616      	mov	r6, r2
 8005502:	4699      	mov	r9, r3
 8005504:	688a      	ldr	r2, [r1, #8]
 8005506:	690b      	ldr	r3, [r1, #16]
 8005508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800550c:	4293      	cmp	r3, r2
 800550e:	bfb8      	it	lt
 8005510:	4613      	movlt	r3, r2
 8005512:	6033      	str	r3, [r6, #0]
 8005514:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005518:	4607      	mov	r7, r0
 800551a:	460c      	mov	r4, r1
 800551c:	b10a      	cbz	r2, 8005522 <_printf_common+0x26>
 800551e:	3301      	adds	r3, #1
 8005520:	6033      	str	r3, [r6, #0]
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	0699      	lsls	r1, r3, #26
 8005526:	bf42      	ittt	mi
 8005528:	6833      	ldrmi	r3, [r6, #0]
 800552a:	3302      	addmi	r3, #2
 800552c:	6033      	strmi	r3, [r6, #0]
 800552e:	6825      	ldr	r5, [r4, #0]
 8005530:	f015 0506 	ands.w	r5, r5, #6
 8005534:	d106      	bne.n	8005544 <_printf_common+0x48>
 8005536:	f104 0a19 	add.w	sl, r4, #25
 800553a:	68e3      	ldr	r3, [r4, #12]
 800553c:	6832      	ldr	r2, [r6, #0]
 800553e:	1a9b      	subs	r3, r3, r2
 8005540:	42ab      	cmp	r3, r5
 8005542:	dc26      	bgt.n	8005592 <_printf_common+0x96>
 8005544:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005548:	1e13      	subs	r3, r2, #0
 800554a:	6822      	ldr	r2, [r4, #0]
 800554c:	bf18      	it	ne
 800554e:	2301      	movne	r3, #1
 8005550:	0692      	lsls	r2, r2, #26
 8005552:	d42b      	bmi.n	80055ac <_printf_common+0xb0>
 8005554:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005558:	4649      	mov	r1, r9
 800555a:	4638      	mov	r0, r7
 800555c:	47c0      	blx	r8
 800555e:	3001      	adds	r0, #1
 8005560:	d01e      	beq.n	80055a0 <_printf_common+0xa4>
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	6922      	ldr	r2, [r4, #16]
 8005566:	f003 0306 	and.w	r3, r3, #6
 800556a:	2b04      	cmp	r3, #4
 800556c:	bf02      	ittt	eq
 800556e:	68e5      	ldreq	r5, [r4, #12]
 8005570:	6833      	ldreq	r3, [r6, #0]
 8005572:	1aed      	subeq	r5, r5, r3
 8005574:	68a3      	ldr	r3, [r4, #8]
 8005576:	bf0c      	ite	eq
 8005578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800557c:	2500      	movne	r5, #0
 800557e:	4293      	cmp	r3, r2
 8005580:	bfc4      	itt	gt
 8005582:	1a9b      	subgt	r3, r3, r2
 8005584:	18ed      	addgt	r5, r5, r3
 8005586:	2600      	movs	r6, #0
 8005588:	341a      	adds	r4, #26
 800558a:	42b5      	cmp	r5, r6
 800558c:	d11a      	bne.n	80055c4 <_printf_common+0xc8>
 800558e:	2000      	movs	r0, #0
 8005590:	e008      	b.n	80055a4 <_printf_common+0xa8>
 8005592:	2301      	movs	r3, #1
 8005594:	4652      	mov	r2, sl
 8005596:	4649      	mov	r1, r9
 8005598:	4638      	mov	r0, r7
 800559a:	47c0      	blx	r8
 800559c:	3001      	adds	r0, #1
 800559e:	d103      	bne.n	80055a8 <_printf_common+0xac>
 80055a0:	f04f 30ff 	mov.w	r0, #4294967295
 80055a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a8:	3501      	adds	r5, #1
 80055aa:	e7c6      	b.n	800553a <_printf_common+0x3e>
 80055ac:	18e1      	adds	r1, r4, r3
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	2030      	movs	r0, #48	; 0x30
 80055b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055b6:	4422      	add	r2, r4
 80055b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055c0:	3302      	adds	r3, #2
 80055c2:	e7c7      	b.n	8005554 <_printf_common+0x58>
 80055c4:	2301      	movs	r3, #1
 80055c6:	4622      	mov	r2, r4
 80055c8:	4649      	mov	r1, r9
 80055ca:	4638      	mov	r0, r7
 80055cc:	47c0      	blx	r8
 80055ce:	3001      	adds	r0, #1
 80055d0:	d0e6      	beq.n	80055a0 <_printf_common+0xa4>
 80055d2:	3601      	adds	r6, #1
 80055d4:	e7d9      	b.n	800558a <_printf_common+0x8e>
	...

080055d8 <_printf_i>:
 80055d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055dc:	7e0f      	ldrb	r7, [r1, #24]
 80055de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055e0:	2f78      	cmp	r7, #120	; 0x78
 80055e2:	4691      	mov	r9, r2
 80055e4:	4680      	mov	r8, r0
 80055e6:	460c      	mov	r4, r1
 80055e8:	469a      	mov	sl, r3
 80055ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055ee:	d807      	bhi.n	8005600 <_printf_i+0x28>
 80055f0:	2f62      	cmp	r7, #98	; 0x62
 80055f2:	d80a      	bhi.n	800560a <_printf_i+0x32>
 80055f4:	2f00      	cmp	r7, #0
 80055f6:	f000 80d4 	beq.w	80057a2 <_printf_i+0x1ca>
 80055fa:	2f58      	cmp	r7, #88	; 0x58
 80055fc:	f000 80c0 	beq.w	8005780 <_printf_i+0x1a8>
 8005600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005604:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005608:	e03a      	b.n	8005680 <_printf_i+0xa8>
 800560a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800560e:	2b15      	cmp	r3, #21
 8005610:	d8f6      	bhi.n	8005600 <_printf_i+0x28>
 8005612:	a101      	add	r1, pc, #4	; (adr r1, 8005618 <_printf_i+0x40>)
 8005614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005618:	08005671 	.word	0x08005671
 800561c:	08005685 	.word	0x08005685
 8005620:	08005601 	.word	0x08005601
 8005624:	08005601 	.word	0x08005601
 8005628:	08005601 	.word	0x08005601
 800562c:	08005601 	.word	0x08005601
 8005630:	08005685 	.word	0x08005685
 8005634:	08005601 	.word	0x08005601
 8005638:	08005601 	.word	0x08005601
 800563c:	08005601 	.word	0x08005601
 8005640:	08005601 	.word	0x08005601
 8005644:	08005789 	.word	0x08005789
 8005648:	080056b1 	.word	0x080056b1
 800564c:	08005743 	.word	0x08005743
 8005650:	08005601 	.word	0x08005601
 8005654:	08005601 	.word	0x08005601
 8005658:	080057ab 	.word	0x080057ab
 800565c:	08005601 	.word	0x08005601
 8005660:	080056b1 	.word	0x080056b1
 8005664:	08005601 	.word	0x08005601
 8005668:	08005601 	.word	0x08005601
 800566c:	0800574b 	.word	0x0800574b
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	1d1a      	adds	r2, r3, #4
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	602a      	str	r2, [r5, #0]
 8005678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800567c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005680:	2301      	movs	r3, #1
 8005682:	e09f      	b.n	80057c4 <_printf_i+0x1ec>
 8005684:	6820      	ldr	r0, [r4, #0]
 8005686:	682b      	ldr	r3, [r5, #0]
 8005688:	0607      	lsls	r7, r0, #24
 800568a:	f103 0104 	add.w	r1, r3, #4
 800568e:	6029      	str	r1, [r5, #0]
 8005690:	d501      	bpl.n	8005696 <_printf_i+0xbe>
 8005692:	681e      	ldr	r6, [r3, #0]
 8005694:	e003      	b.n	800569e <_printf_i+0xc6>
 8005696:	0646      	lsls	r6, r0, #25
 8005698:	d5fb      	bpl.n	8005692 <_printf_i+0xba>
 800569a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800569e:	2e00      	cmp	r6, #0
 80056a0:	da03      	bge.n	80056aa <_printf_i+0xd2>
 80056a2:	232d      	movs	r3, #45	; 0x2d
 80056a4:	4276      	negs	r6, r6
 80056a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056aa:	485a      	ldr	r0, [pc, #360]	; (8005814 <_printf_i+0x23c>)
 80056ac:	230a      	movs	r3, #10
 80056ae:	e012      	b.n	80056d6 <_printf_i+0xfe>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	6820      	ldr	r0, [r4, #0]
 80056b4:	1d19      	adds	r1, r3, #4
 80056b6:	6029      	str	r1, [r5, #0]
 80056b8:	0605      	lsls	r5, r0, #24
 80056ba:	d501      	bpl.n	80056c0 <_printf_i+0xe8>
 80056bc:	681e      	ldr	r6, [r3, #0]
 80056be:	e002      	b.n	80056c6 <_printf_i+0xee>
 80056c0:	0641      	lsls	r1, r0, #25
 80056c2:	d5fb      	bpl.n	80056bc <_printf_i+0xe4>
 80056c4:	881e      	ldrh	r6, [r3, #0]
 80056c6:	4853      	ldr	r0, [pc, #332]	; (8005814 <_printf_i+0x23c>)
 80056c8:	2f6f      	cmp	r7, #111	; 0x6f
 80056ca:	bf0c      	ite	eq
 80056cc:	2308      	moveq	r3, #8
 80056ce:	230a      	movne	r3, #10
 80056d0:	2100      	movs	r1, #0
 80056d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056d6:	6865      	ldr	r5, [r4, #4]
 80056d8:	60a5      	str	r5, [r4, #8]
 80056da:	2d00      	cmp	r5, #0
 80056dc:	bfa2      	ittt	ge
 80056de:	6821      	ldrge	r1, [r4, #0]
 80056e0:	f021 0104 	bicge.w	r1, r1, #4
 80056e4:	6021      	strge	r1, [r4, #0]
 80056e6:	b90e      	cbnz	r6, 80056ec <_printf_i+0x114>
 80056e8:	2d00      	cmp	r5, #0
 80056ea:	d04b      	beq.n	8005784 <_printf_i+0x1ac>
 80056ec:	4615      	mov	r5, r2
 80056ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80056f2:	fb03 6711 	mls	r7, r3, r1, r6
 80056f6:	5dc7      	ldrb	r7, [r0, r7]
 80056f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056fc:	4637      	mov	r7, r6
 80056fe:	42bb      	cmp	r3, r7
 8005700:	460e      	mov	r6, r1
 8005702:	d9f4      	bls.n	80056ee <_printf_i+0x116>
 8005704:	2b08      	cmp	r3, #8
 8005706:	d10b      	bne.n	8005720 <_printf_i+0x148>
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	07de      	lsls	r6, r3, #31
 800570c:	d508      	bpl.n	8005720 <_printf_i+0x148>
 800570e:	6923      	ldr	r3, [r4, #16]
 8005710:	6861      	ldr	r1, [r4, #4]
 8005712:	4299      	cmp	r1, r3
 8005714:	bfde      	ittt	le
 8005716:	2330      	movle	r3, #48	; 0x30
 8005718:	f805 3c01 	strble.w	r3, [r5, #-1]
 800571c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005720:	1b52      	subs	r2, r2, r5
 8005722:	6122      	str	r2, [r4, #16]
 8005724:	f8cd a000 	str.w	sl, [sp]
 8005728:	464b      	mov	r3, r9
 800572a:	aa03      	add	r2, sp, #12
 800572c:	4621      	mov	r1, r4
 800572e:	4640      	mov	r0, r8
 8005730:	f7ff fee4 	bl	80054fc <_printf_common>
 8005734:	3001      	adds	r0, #1
 8005736:	d14a      	bne.n	80057ce <_printf_i+0x1f6>
 8005738:	f04f 30ff 	mov.w	r0, #4294967295
 800573c:	b004      	add	sp, #16
 800573e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	f043 0320 	orr.w	r3, r3, #32
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	4833      	ldr	r0, [pc, #204]	; (8005818 <_printf_i+0x240>)
 800574c:	2778      	movs	r7, #120	; 0x78
 800574e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	6829      	ldr	r1, [r5, #0]
 8005756:	061f      	lsls	r7, r3, #24
 8005758:	f851 6b04 	ldr.w	r6, [r1], #4
 800575c:	d402      	bmi.n	8005764 <_printf_i+0x18c>
 800575e:	065f      	lsls	r7, r3, #25
 8005760:	bf48      	it	mi
 8005762:	b2b6      	uxthmi	r6, r6
 8005764:	07df      	lsls	r7, r3, #31
 8005766:	bf48      	it	mi
 8005768:	f043 0320 	orrmi.w	r3, r3, #32
 800576c:	6029      	str	r1, [r5, #0]
 800576e:	bf48      	it	mi
 8005770:	6023      	strmi	r3, [r4, #0]
 8005772:	b91e      	cbnz	r6, 800577c <_printf_i+0x1a4>
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	f023 0320 	bic.w	r3, r3, #32
 800577a:	6023      	str	r3, [r4, #0]
 800577c:	2310      	movs	r3, #16
 800577e:	e7a7      	b.n	80056d0 <_printf_i+0xf8>
 8005780:	4824      	ldr	r0, [pc, #144]	; (8005814 <_printf_i+0x23c>)
 8005782:	e7e4      	b.n	800574e <_printf_i+0x176>
 8005784:	4615      	mov	r5, r2
 8005786:	e7bd      	b.n	8005704 <_printf_i+0x12c>
 8005788:	682b      	ldr	r3, [r5, #0]
 800578a:	6826      	ldr	r6, [r4, #0]
 800578c:	6961      	ldr	r1, [r4, #20]
 800578e:	1d18      	adds	r0, r3, #4
 8005790:	6028      	str	r0, [r5, #0]
 8005792:	0635      	lsls	r5, r6, #24
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	d501      	bpl.n	800579c <_printf_i+0x1c4>
 8005798:	6019      	str	r1, [r3, #0]
 800579a:	e002      	b.n	80057a2 <_printf_i+0x1ca>
 800579c:	0670      	lsls	r0, r6, #25
 800579e:	d5fb      	bpl.n	8005798 <_printf_i+0x1c0>
 80057a0:	8019      	strh	r1, [r3, #0]
 80057a2:	2300      	movs	r3, #0
 80057a4:	6123      	str	r3, [r4, #16]
 80057a6:	4615      	mov	r5, r2
 80057a8:	e7bc      	b.n	8005724 <_printf_i+0x14c>
 80057aa:	682b      	ldr	r3, [r5, #0]
 80057ac:	1d1a      	adds	r2, r3, #4
 80057ae:	602a      	str	r2, [r5, #0]
 80057b0:	681d      	ldr	r5, [r3, #0]
 80057b2:	6862      	ldr	r2, [r4, #4]
 80057b4:	2100      	movs	r1, #0
 80057b6:	4628      	mov	r0, r5
 80057b8:	f7fa fd0a 	bl	80001d0 <memchr>
 80057bc:	b108      	cbz	r0, 80057c2 <_printf_i+0x1ea>
 80057be:	1b40      	subs	r0, r0, r5
 80057c0:	6060      	str	r0, [r4, #4]
 80057c2:	6863      	ldr	r3, [r4, #4]
 80057c4:	6123      	str	r3, [r4, #16]
 80057c6:	2300      	movs	r3, #0
 80057c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057cc:	e7aa      	b.n	8005724 <_printf_i+0x14c>
 80057ce:	6923      	ldr	r3, [r4, #16]
 80057d0:	462a      	mov	r2, r5
 80057d2:	4649      	mov	r1, r9
 80057d4:	4640      	mov	r0, r8
 80057d6:	47d0      	blx	sl
 80057d8:	3001      	adds	r0, #1
 80057da:	d0ad      	beq.n	8005738 <_printf_i+0x160>
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	079b      	lsls	r3, r3, #30
 80057e0:	d413      	bmi.n	800580a <_printf_i+0x232>
 80057e2:	68e0      	ldr	r0, [r4, #12]
 80057e4:	9b03      	ldr	r3, [sp, #12]
 80057e6:	4298      	cmp	r0, r3
 80057e8:	bfb8      	it	lt
 80057ea:	4618      	movlt	r0, r3
 80057ec:	e7a6      	b.n	800573c <_printf_i+0x164>
 80057ee:	2301      	movs	r3, #1
 80057f0:	4632      	mov	r2, r6
 80057f2:	4649      	mov	r1, r9
 80057f4:	4640      	mov	r0, r8
 80057f6:	47d0      	blx	sl
 80057f8:	3001      	adds	r0, #1
 80057fa:	d09d      	beq.n	8005738 <_printf_i+0x160>
 80057fc:	3501      	adds	r5, #1
 80057fe:	68e3      	ldr	r3, [r4, #12]
 8005800:	9903      	ldr	r1, [sp, #12]
 8005802:	1a5b      	subs	r3, r3, r1
 8005804:	42ab      	cmp	r3, r5
 8005806:	dcf2      	bgt.n	80057ee <_printf_i+0x216>
 8005808:	e7eb      	b.n	80057e2 <_printf_i+0x20a>
 800580a:	2500      	movs	r5, #0
 800580c:	f104 0619 	add.w	r6, r4, #25
 8005810:	e7f5      	b.n	80057fe <_printf_i+0x226>
 8005812:	bf00      	nop
 8005814:	080067d8 	.word	0x080067d8
 8005818:	080067e9 	.word	0x080067e9

0800581c <__sflush_r>:
 800581c:	898a      	ldrh	r2, [r1, #12]
 800581e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005822:	4605      	mov	r5, r0
 8005824:	0710      	lsls	r0, r2, #28
 8005826:	460c      	mov	r4, r1
 8005828:	d458      	bmi.n	80058dc <__sflush_r+0xc0>
 800582a:	684b      	ldr	r3, [r1, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	dc05      	bgt.n	800583c <__sflush_r+0x20>
 8005830:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005832:	2b00      	cmp	r3, #0
 8005834:	dc02      	bgt.n	800583c <__sflush_r+0x20>
 8005836:	2000      	movs	r0, #0
 8005838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800583c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800583e:	2e00      	cmp	r6, #0
 8005840:	d0f9      	beq.n	8005836 <__sflush_r+0x1a>
 8005842:	2300      	movs	r3, #0
 8005844:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005848:	682f      	ldr	r7, [r5, #0]
 800584a:	6a21      	ldr	r1, [r4, #32]
 800584c:	602b      	str	r3, [r5, #0]
 800584e:	d032      	beq.n	80058b6 <__sflush_r+0x9a>
 8005850:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005852:	89a3      	ldrh	r3, [r4, #12]
 8005854:	075a      	lsls	r2, r3, #29
 8005856:	d505      	bpl.n	8005864 <__sflush_r+0x48>
 8005858:	6863      	ldr	r3, [r4, #4]
 800585a:	1ac0      	subs	r0, r0, r3
 800585c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800585e:	b10b      	cbz	r3, 8005864 <__sflush_r+0x48>
 8005860:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005862:	1ac0      	subs	r0, r0, r3
 8005864:	2300      	movs	r3, #0
 8005866:	4602      	mov	r2, r0
 8005868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800586a:	6a21      	ldr	r1, [r4, #32]
 800586c:	4628      	mov	r0, r5
 800586e:	47b0      	blx	r6
 8005870:	1c43      	adds	r3, r0, #1
 8005872:	89a3      	ldrh	r3, [r4, #12]
 8005874:	d106      	bne.n	8005884 <__sflush_r+0x68>
 8005876:	6829      	ldr	r1, [r5, #0]
 8005878:	291d      	cmp	r1, #29
 800587a:	d82b      	bhi.n	80058d4 <__sflush_r+0xb8>
 800587c:	4a29      	ldr	r2, [pc, #164]	; (8005924 <__sflush_r+0x108>)
 800587e:	410a      	asrs	r2, r1
 8005880:	07d6      	lsls	r6, r2, #31
 8005882:	d427      	bmi.n	80058d4 <__sflush_r+0xb8>
 8005884:	2200      	movs	r2, #0
 8005886:	6062      	str	r2, [r4, #4]
 8005888:	04d9      	lsls	r1, r3, #19
 800588a:	6922      	ldr	r2, [r4, #16]
 800588c:	6022      	str	r2, [r4, #0]
 800588e:	d504      	bpl.n	800589a <__sflush_r+0x7e>
 8005890:	1c42      	adds	r2, r0, #1
 8005892:	d101      	bne.n	8005898 <__sflush_r+0x7c>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	b903      	cbnz	r3, 800589a <__sflush_r+0x7e>
 8005898:	6560      	str	r0, [r4, #84]	; 0x54
 800589a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800589c:	602f      	str	r7, [r5, #0]
 800589e:	2900      	cmp	r1, #0
 80058a0:	d0c9      	beq.n	8005836 <__sflush_r+0x1a>
 80058a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058a6:	4299      	cmp	r1, r3
 80058a8:	d002      	beq.n	80058b0 <__sflush_r+0x94>
 80058aa:	4628      	mov	r0, r5
 80058ac:	f7ff fbce 	bl	800504c <_free_r>
 80058b0:	2000      	movs	r0, #0
 80058b2:	6360      	str	r0, [r4, #52]	; 0x34
 80058b4:	e7c0      	b.n	8005838 <__sflush_r+0x1c>
 80058b6:	2301      	movs	r3, #1
 80058b8:	4628      	mov	r0, r5
 80058ba:	47b0      	blx	r6
 80058bc:	1c41      	adds	r1, r0, #1
 80058be:	d1c8      	bne.n	8005852 <__sflush_r+0x36>
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0c5      	beq.n	8005852 <__sflush_r+0x36>
 80058c6:	2b1d      	cmp	r3, #29
 80058c8:	d001      	beq.n	80058ce <__sflush_r+0xb2>
 80058ca:	2b16      	cmp	r3, #22
 80058cc:	d101      	bne.n	80058d2 <__sflush_r+0xb6>
 80058ce:	602f      	str	r7, [r5, #0]
 80058d0:	e7b1      	b.n	8005836 <__sflush_r+0x1a>
 80058d2:	89a3      	ldrh	r3, [r4, #12]
 80058d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d8:	81a3      	strh	r3, [r4, #12]
 80058da:	e7ad      	b.n	8005838 <__sflush_r+0x1c>
 80058dc:	690f      	ldr	r7, [r1, #16]
 80058de:	2f00      	cmp	r7, #0
 80058e0:	d0a9      	beq.n	8005836 <__sflush_r+0x1a>
 80058e2:	0793      	lsls	r3, r2, #30
 80058e4:	680e      	ldr	r6, [r1, #0]
 80058e6:	bf08      	it	eq
 80058e8:	694b      	ldreq	r3, [r1, #20]
 80058ea:	600f      	str	r7, [r1, #0]
 80058ec:	bf18      	it	ne
 80058ee:	2300      	movne	r3, #0
 80058f0:	eba6 0807 	sub.w	r8, r6, r7
 80058f4:	608b      	str	r3, [r1, #8]
 80058f6:	f1b8 0f00 	cmp.w	r8, #0
 80058fa:	dd9c      	ble.n	8005836 <__sflush_r+0x1a>
 80058fc:	6a21      	ldr	r1, [r4, #32]
 80058fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005900:	4643      	mov	r3, r8
 8005902:	463a      	mov	r2, r7
 8005904:	4628      	mov	r0, r5
 8005906:	47b0      	blx	r6
 8005908:	2800      	cmp	r0, #0
 800590a:	dc06      	bgt.n	800591a <__sflush_r+0xfe>
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005912:	81a3      	strh	r3, [r4, #12]
 8005914:	f04f 30ff 	mov.w	r0, #4294967295
 8005918:	e78e      	b.n	8005838 <__sflush_r+0x1c>
 800591a:	4407      	add	r7, r0
 800591c:	eba8 0800 	sub.w	r8, r8, r0
 8005920:	e7e9      	b.n	80058f6 <__sflush_r+0xda>
 8005922:	bf00      	nop
 8005924:	dfbffffe 	.word	0xdfbffffe

08005928 <_fflush_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	690b      	ldr	r3, [r1, #16]
 800592c:	4605      	mov	r5, r0
 800592e:	460c      	mov	r4, r1
 8005930:	b913      	cbnz	r3, 8005938 <_fflush_r+0x10>
 8005932:	2500      	movs	r5, #0
 8005934:	4628      	mov	r0, r5
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	b118      	cbz	r0, 8005942 <_fflush_r+0x1a>
 800593a:	6a03      	ldr	r3, [r0, #32]
 800593c:	b90b      	cbnz	r3, 8005942 <_fflush_r+0x1a>
 800593e:	f7ff fa0f 	bl	8004d60 <__sinit>
 8005942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f3      	beq.n	8005932 <_fflush_r+0xa>
 800594a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800594c:	07d0      	lsls	r0, r2, #31
 800594e:	d404      	bmi.n	800595a <_fflush_r+0x32>
 8005950:	0599      	lsls	r1, r3, #22
 8005952:	d402      	bmi.n	800595a <_fflush_r+0x32>
 8005954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005956:	f7ff fb42 	bl	8004fde <__retarget_lock_acquire_recursive>
 800595a:	4628      	mov	r0, r5
 800595c:	4621      	mov	r1, r4
 800595e:	f7ff ff5d 	bl	800581c <__sflush_r>
 8005962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005964:	07da      	lsls	r2, r3, #31
 8005966:	4605      	mov	r5, r0
 8005968:	d4e4      	bmi.n	8005934 <_fflush_r+0xc>
 800596a:	89a3      	ldrh	r3, [r4, #12]
 800596c:	059b      	lsls	r3, r3, #22
 800596e:	d4e1      	bmi.n	8005934 <_fflush_r+0xc>
 8005970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005972:	f7ff fb35 	bl	8004fe0 <__retarget_lock_release_recursive>
 8005976:	e7dd      	b.n	8005934 <_fflush_r+0xc>

08005978 <fiprintf>:
 8005978:	b40e      	push	{r1, r2, r3}
 800597a:	b503      	push	{r0, r1, lr}
 800597c:	4601      	mov	r1, r0
 800597e:	ab03      	add	r3, sp, #12
 8005980:	4805      	ldr	r0, [pc, #20]	; (8005998 <fiprintf+0x20>)
 8005982:	f853 2b04 	ldr.w	r2, [r3], #4
 8005986:	6800      	ldr	r0, [r0, #0]
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	f000 f891 	bl	8005ab0 <_vfiprintf_r>
 800598e:	b002      	add	sp, #8
 8005990:	f85d eb04 	ldr.w	lr, [sp], #4
 8005994:	b003      	add	sp, #12
 8005996:	4770      	bx	lr
 8005998:	20000110 	.word	0x20000110

0800599c <memmove>:
 800599c:	4288      	cmp	r0, r1
 800599e:	b510      	push	{r4, lr}
 80059a0:	eb01 0402 	add.w	r4, r1, r2
 80059a4:	d902      	bls.n	80059ac <memmove+0x10>
 80059a6:	4284      	cmp	r4, r0
 80059a8:	4623      	mov	r3, r4
 80059aa:	d807      	bhi.n	80059bc <memmove+0x20>
 80059ac:	1e43      	subs	r3, r0, #1
 80059ae:	42a1      	cmp	r1, r4
 80059b0:	d008      	beq.n	80059c4 <memmove+0x28>
 80059b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059ba:	e7f8      	b.n	80059ae <memmove+0x12>
 80059bc:	4402      	add	r2, r0
 80059be:	4601      	mov	r1, r0
 80059c0:	428a      	cmp	r2, r1
 80059c2:	d100      	bne.n	80059c6 <memmove+0x2a>
 80059c4:	bd10      	pop	{r4, pc}
 80059c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059ce:	e7f7      	b.n	80059c0 <memmove+0x24>

080059d0 <_sbrk_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4d06      	ldr	r5, [pc, #24]	; (80059ec <_sbrk_r+0x1c>)
 80059d4:	2300      	movs	r3, #0
 80059d6:	4604      	mov	r4, r0
 80059d8:	4608      	mov	r0, r1
 80059da:	602b      	str	r3, [r5, #0]
 80059dc:	f7fb fb20 	bl	8001020 <_sbrk>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d102      	bne.n	80059ea <_sbrk_r+0x1a>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	b103      	cbz	r3, 80059ea <_sbrk_r+0x1a>
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	200009ac 	.word	0x200009ac

080059f0 <abort>:
 80059f0:	b508      	push	{r3, lr}
 80059f2:	2006      	movs	r0, #6
 80059f4:	f000 fa34 	bl	8005e60 <raise>
 80059f8:	2001      	movs	r0, #1
 80059fa:	f7fb fa99 	bl	8000f30 <_exit>

080059fe <_realloc_r>:
 80059fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a02:	4680      	mov	r8, r0
 8005a04:	4614      	mov	r4, r2
 8005a06:	460e      	mov	r6, r1
 8005a08:	b921      	cbnz	r1, 8005a14 <_realloc_r+0x16>
 8005a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0e:	4611      	mov	r1, r2
 8005a10:	f7ff bb90 	b.w	8005134 <_malloc_r>
 8005a14:	b92a      	cbnz	r2, 8005a22 <_realloc_r+0x24>
 8005a16:	f7ff fb19 	bl	800504c <_free_r>
 8005a1a:	4625      	mov	r5, r4
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a22:	f000 fa39 	bl	8005e98 <_malloc_usable_size_r>
 8005a26:	4284      	cmp	r4, r0
 8005a28:	4607      	mov	r7, r0
 8005a2a:	d802      	bhi.n	8005a32 <_realloc_r+0x34>
 8005a2c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a30:	d812      	bhi.n	8005a58 <_realloc_r+0x5a>
 8005a32:	4621      	mov	r1, r4
 8005a34:	4640      	mov	r0, r8
 8005a36:	f7ff fb7d 	bl	8005134 <_malloc_r>
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d0ed      	beq.n	8005a1c <_realloc_r+0x1e>
 8005a40:	42bc      	cmp	r4, r7
 8005a42:	4622      	mov	r2, r4
 8005a44:	4631      	mov	r1, r6
 8005a46:	bf28      	it	cs
 8005a48:	463a      	movcs	r2, r7
 8005a4a:	f7ff fad2 	bl	8004ff2 <memcpy>
 8005a4e:	4631      	mov	r1, r6
 8005a50:	4640      	mov	r0, r8
 8005a52:	f7ff fafb 	bl	800504c <_free_r>
 8005a56:	e7e1      	b.n	8005a1c <_realloc_r+0x1e>
 8005a58:	4635      	mov	r5, r6
 8005a5a:	e7df      	b.n	8005a1c <_realloc_r+0x1e>

08005a5c <__sfputc_r>:
 8005a5c:	6893      	ldr	r3, [r2, #8]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	b410      	push	{r4}
 8005a64:	6093      	str	r3, [r2, #8]
 8005a66:	da08      	bge.n	8005a7a <__sfputc_r+0x1e>
 8005a68:	6994      	ldr	r4, [r2, #24]
 8005a6a:	42a3      	cmp	r3, r4
 8005a6c:	db01      	blt.n	8005a72 <__sfputc_r+0x16>
 8005a6e:	290a      	cmp	r1, #10
 8005a70:	d103      	bne.n	8005a7a <__sfputc_r+0x1e>
 8005a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a76:	f000 b935 	b.w	8005ce4 <__swbuf_r>
 8005a7a:	6813      	ldr	r3, [r2, #0]
 8005a7c:	1c58      	adds	r0, r3, #1
 8005a7e:	6010      	str	r0, [r2, #0]
 8005a80:	7019      	strb	r1, [r3, #0]
 8005a82:	4608      	mov	r0, r1
 8005a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <__sfputs_r>:
 8005a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8c:	4606      	mov	r6, r0
 8005a8e:	460f      	mov	r7, r1
 8005a90:	4614      	mov	r4, r2
 8005a92:	18d5      	adds	r5, r2, r3
 8005a94:	42ac      	cmp	r4, r5
 8005a96:	d101      	bne.n	8005a9c <__sfputs_r+0x12>
 8005a98:	2000      	movs	r0, #0
 8005a9a:	e007      	b.n	8005aac <__sfputs_r+0x22>
 8005a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa0:	463a      	mov	r2, r7
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	f7ff ffda 	bl	8005a5c <__sfputc_r>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d1f3      	bne.n	8005a94 <__sfputs_r+0xa>
 8005aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ab0 <_vfiprintf_r>:
 8005ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab4:	460d      	mov	r5, r1
 8005ab6:	b09d      	sub	sp, #116	; 0x74
 8005ab8:	4614      	mov	r4, r2
 8005aba:	4698      	mov	r8, r3
 8005abc:	4606      	mov	r6, r0
 8005abe:	b118      	cbz	r0, 8005ac8 <_vfiprintf_r+0x18>
 8005ac0:	6a03      	ldr	r3, [r0, #32]
 8005ac2:	b90b      	cbnz	r3, 8005ac8 <_vfiprintf_r+0x18>
 8005ac4:	f7ff f94c 	bl	8004d60 <__sinit>
 8005ac8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005aca:	07d9      	lsls	r1, r3, #31
 8005acc:	d405      	bmi.n	8005ada <_vfiprintf_r+0x2a>
 8005ace:	89ab      	ldrh	r3, [r5, #12]
 8005ad0:	059a      	lsls	r2, r3, #22
 8005ad2:	d402      	bmi.n	8005ada <_vfiprintf_r+0x2a>
 8005ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ad6:	f7ff fa82 	bl	8004fde <__retarget_lock_acquire_recursive>
 8005ada:	89ab      	ldrh	r3, [r5, #12]
 8005adc:	071b      	lsls	r3, r3, #28
 8005ade:	d501      	bpl.n	8005ae4 <_vfiprintf_r+0x34>
 8005ae0:	692b      	ldr	r3, [r5, #16]
 8005ae2:	b99b      	cbnz	r3, 8005b0c <_vfiprintf_r+0x5c>
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	f000 f93a 	bl	8005d60 <__swsetup_r>
 8005aec:	b170      	cbz	r0, 8005b0c <_vfiprintf_r+0x5c>
 8005aee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005af0:	07dc      	lsls	r4, r3, #31
 8005af2:	d504      	bpl.n	8005afe <_vfiprintf_r+0x4e>
 8005af4:	f04f 30ff 	mov.w	r0, #4294967295
 8005af8:	b01d      	add	sp, #116	; 0x74
 8005afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005afe:	89ab      	ldrh	r3, [r5, #12]
 8005b00:	0598      	lsls	r0, r3, #22
 8005b02:	d4f7      	bmi.n	8005af4 <_vfiprintf_r+0x44>
 8005b04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b06:	f7ff fa6b 	bl	8004fe0 <__retarget_lock_release_recursive>
 8005b0a:	e7f3      	b.n	8005af4 <_vfiprintf_r+0x44>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b10:	2320      	movs	r3, #32
 8005b12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b16:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b1a:	2330      	movs	r3, #48	; 0x30
 8005b1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005cd0 <_vfiprintf_r+0x220>
 8005b20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b24:	f04f 0901 	mov.w	r9, #1
 8005b28:	4623      	mov	r3, r4
 8005b2a:	469a      	mov	sl, r3
 8005b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b30:	b10a      	cbz	r2, 8005b36 <_vfiprintf_r+0x86>
 8005b32:	2a25      	cmp	r2, #37	; 0x25
 8005b34:	d1f9      	bne.n	8005b2a <_vfiprintf_r+0x7a>
 8005b36:	ebba 0b04 	subs.w	fp, sl, r4
 8005b3a:	d00b      	beq.n	8005b54 <_vfiprintf_r+0xa4>
 8005b3c:	465b      	mov	r3, fp
 8005b3e:	4622      	mov	r2, r4
 8005b40:	4629      	mov	r1, r5
 8005b42:	4630      	mov	r0, r6
 8005b44:	f7ff ffa1 	bl	8005a8a <__sfputs_r>
 8005b48:	3001      	adds	r0, #1
 8005b4a:	f000 80a9 	beq.w	8005ca0 <_vfiprintf_r+0x1f0>
 8005b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b50:	445a      	add	r2, fp
 8005b52:	9209      	str	r2, [sp, #36]	; 0x24
 8005b54:	f89a 3000 	ldrb.w	r3, [sl]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 80a1 	beq.w	8005ca0 <_vfiprintf_r+0x1f0>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f04f 32ff 	mov.w	r2, #4294967295
 8005b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b68:	f10a 0a01 	add.w	sl, sl, #1
 8005b6c:	9304      	str	r3, [sp, #16]
 8005b6e:	9307      	str	r3, [sp, #28]
 8005b70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b74:	931a      	str	r3, [sp, #104]	; 0x68
 8005b76:	4654      	mov	r4, sl
 8005b78:	2205      	movs	r2, #5
 8005b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b7e:	4854      	ldr	r0, [pc, #336]	; (8005cd0 <_vfiprintf_r+0x220>)
 8005b80:	f7fa fb26 	bl	80001d0 <memchr>
 8005b84:	9a04      	ldr	r2, [sp, #16]
 8005b86:	b9d8      	cbnz	r0, 8005bc0 <_vfiprintf_r+0x110>
 8005b88:	06d1      	lsls	r1, r2, #27
 8005b8a:	bf44      	itt	mi
 8005b8c:	2320      	movmi	r3, #32
 8005b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b92:	0713      	lsls	r3, r2, #28
 8005b94:	bf44      	itt	mi
 8005b96:	232b      	movmi	r3, #43	; 0x2b
 8005b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ba2:	d015      	beq.n	8005bd0 <_vfiprintf_r+0x120>
 8005ba4:	9a07      	ldr	r2, [sp, #28]
 8005ba6:	4654      	mov	r4, sl
 8005ba8:	2000      	movs	r0, #0
 8005baa:	f04f 0c0a 	mov.w	ip, #10
 8005bae:	4621      	mov	r1, r4
 8005bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bb4:	3b30      	subs	r3, #48	; 0x30
 8005bb6:	2b09      	cmp	r3, #9
 8005bb8:	d94d      	bls.n	8005c56 <_vfiprintf_r+0x1a6>
 8005bba:	b1b0      	cbz	r0, 8005bea <_vfiprintf_r+0x13a>
 8005bbc:	9207      	str	r2, [sp, #28]
 8005bbe:	e014      	b.n	8005bea <_vfiprintf_r+0x13a>
 8005bc0:	eba0 0308 	sub.w	r3, r0, r8
 8005bc4:	fa09 f303 	lsl.w	r3, r9, r3
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	9304      	str	r3, [sp, #16]
 8005bcc:	46a2      	mov	sl, r4
 8005bce:	e7d2      	b.n	8005b76 <_vfiprintf_r+0xc6>
 8005bd0:	9b03      	ldr	r3, [sp, #12]
 8005bd2:	1d19      	adds	r1, r3, #4
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	9103      	str	r1, [sp, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	bfbb      	ittet	lt
 8005bdc:	425b      	neglt	r3, r3
 8005bde:	f042 0202 	orrlt.w	r2, r2, #2
 8005be2:	9307      	strge	r3, [sp, #28]
 8005be4:	9307      	strlt	r3, [sp, #28]
 8005be6:	bfb8      	it	lt
 8005be8:	9204      	strlt	r2, [sp, #16]
 8005bea:	7823      	ldrb	r3, [r4, #0]
 8005bec:	2b2e      	cmp	r3, #46	; 0x2e
 8005bee:	d10c      	bne.n	8005c0a <_vfiprintf_r+0x15a>
 8005bf0:	7863      	ldrb	r3, [r4, #1]
 8005bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8005bf4:	d134      	bne.n	8005c60 <_vfiprintf_r+0x1b0>
 8005bf6:	9b03      	ldr	r3, [sp, #12]
 8005bf8:	1d1a      	adds	r2, r3, #4
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	9203      	str	r2, [sp, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	bfb8      	it	lt
 8005c02:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c06:	3402      	adds	r4, #2
 8005c08:	9305      	str	r3, [sp, #20]
 8005c0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005ce0 <_vfiprintf_r+0x230>
 8005c0e:	7821      	ldrb	r1, [r4, #0]
 8005c10:	2203      	movs	r2, #3
 8005c12:	4650      	mov	r0, sl
 8005c14:	f7fa fadc 	bl	80001d0 <memchr>
 8005c18:	b138      	cbz	r0, 8005c2a <_vfiprintf_r+0x17a>
 8005c1a:	9b04      	ldr	r3, [sp, #16]
 8005c1c:	eba0 000a 	sub.w	r0, r0, sl
 8005c20:	2240      	movs	r2, #64	; 0x40
 8005c22:	4082      	lsls	r2, r0
 8005c24:	4313      	orrs	r3, r2
 8005c26:	3401      	adds	r4, #1
 8005c28:	9304      	str	r3, [sp, #16]
 8005c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c2e:	4829      	ldr	r0, [pc, #164]	; (8005cd4 <_vfiprintf_r+0x224>)
 8005c30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c34:	2206      	movs	r2, #6
 8005c36:	f7fa facb 	bl	80001d0 <memchr>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d03f      	beq.n	8005cbe <_vfiprintf_r+0x20e>
 8005c3e:	4b26      	ldr	r3, [pc, #152]	; (8005cd8 <_vfiprintf_r+0x228>)
 8005c40:	bb1b      	cbnz	r3, 8005c8a <_vfiprintf_r+0x1da>
 8005c42:	9b03      	ldr	r3, [sp, #12]
 8005c44:	3307      	adds	r3, #7
 8005c46:	f023 0307 	bic.w	r3, r3, #7
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	9303      	str	r3, [sp, #12]
 8005c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c50:	443b      	add	r3, r7
 8005c52:	9309      	str	r3, [sp, #36]	; 0x24
 8005c54:	e768      	b.n	8005b28 <_vfiprintf_r+0x78>
 8005c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	2001      	movs	r0, #1
 8005c5e:	e7a6      	b.n	8005bae <_vfiprintf_r+0xfe>
 8005c60:	2300      	movs	r3, #0
 8005c62:	3401      	adds	r4, #1
 8005c64:	9305      	str	r3, [sp, #20]
 8005c66:	4619      	mov	r1, r3
 8005c68:	f04f 0c0a 	mov.w	ip, #10
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c72:	3a30      	subs	r2, #48	; 0x30
 8005c74:	2a09      	cmp	r2, #9
 8005c76:	d903      	bls.n	8005c80 <_vfiprintf_r+0x1d0>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0c6      	beq.n	8005c0a <_vfiprintf_r+0x15a>
 8005c7c:	9105      	str	r1, [sp, #20]
 8005c7e:	e7c4      	b.n	8005c0a <_vfiprintf_r+0x15a>
 8005c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c84:	4604      	mov	r4, r0
 8005c86:	2301      	movs	r3, #1
 8005c88:	e7f0      	b.n	8005c6c <_vfiprintf_r+0x1bc>
 8005c8a:	ab03      	add	r3, sp, #12
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	462a      	mov	r2, r5
 8005c90:	4b12      	ldr	r3, [pc, #72]	; (8005cdc <_vfiprintf_r+0x22c>)
 8005c92:	a904      	add	r1, sp, #16
 8005c94:	4630      	mov	r0, r6
 8005c96:	f3af 8000 	nop.w
 8005c9a:	4607      	mov	r7, r0
 8005c9c:	1c78      	adds	r0, r7, #1
 8005c9e:	d1d6      	bne.n	8005c4e <_vfiprintf_r+0x19e>
 8005ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ca2:	07d9      	lsls	r1, r3, #31
 8005ca4:	d405      	bmi.n	8005cb2 <_vfiprintf_r+0x202>
 8005ca6:	89ab      	ldrh	r3, [r5, #12]
 8005ca8:	059a      	lsls	r2, r3, #22
 8005caa:	d402      	bmi.n	8005cb2 <_vfiprintf_r+0x202>
 8005cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cae:	f7ff f997 	bl	8004fe0 <__retarget_lock_release_recursive>
 8005cb2:	89ab      	ldrh	r3, [r5, #12]
 8005cb4:	065b      	lsls	r3, r3, #25
 8005cb6:	f53f af1d 	bmi.w	8005af4 <_vfiprintf_r+0x44>
 8005cba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cbc:	e71c      	b.n	8005af8 <_vfiprintf_r+0x48>
 8005cbe:	ab03      	add	r3, sp, #12
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	462a      	mov	r2, r5
 8005cc4:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <_vfiprintf_r+0x22c>)
 8005cc6:	a904      	add	r1, sp, #16
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f7ff fc85 	bl	80055d8 <_printf_i>
 8005cce:	e7e4      	b.n	8005c9a <_vfiprintf_r+0x1ea>
 8005cd0:	080067c7 	.word	0x080067c7
 8005cd4:	080067d1 	.word	0x080067d1
 8005cd8:	00000000 	.word	0x00000000
 8005cdc:	08005a8b 	.word	0x08005a8b
 8005ce0:	080067cd 	.word	0x080067cd

08005ce4 <__swbuf_r>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	460e      	mov	r6, r1
 8005ce8:	4614      	mov	r4, r2
 8005cea:	4605      	mov	r5, r0
 8005cec:	b118      	cbz	r0, 8005cf6 <__swbuf_r+0x12>
 8005cee:	6a03      	ldr	r3, [r0, #32]
 8005cf0:	b90b      	cbnz	r3, 8005cf6 <__swbuf_r+0x12>
 8005cf2:	f7ff f835 	bl	8004d60 <__sinit>
 8005cf6:	69a3      	ldr	r3, [r4, #24]
 8005cf8:	60a3      	str	r3, [r4, #8]
 8005cfa:	89a3      	ldrh	r3, [r4, #12]
 8005cfc:	071a      	lsls	r2, r3, #28
 8005cfe:	d525      	bpl.n	8005d4c <__swbuf_r+0x68>
 8005d00:	6923      	ldr	r3, [r4, #16]
 8005d02:	b31b      	cbz	r3, 8005d4c <__swbuf_r+0x68>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	6922      	ldr	r2, [r4, #16]
 8005d08:	1a98      	subs	r0, r3, r2
 8005d0a:	6963      	ldr	r3, [r4, #20]
 8005d0c:	b2f6      	uxtb	r6, r6
 8005d0e:	4283      	cmp	r3, r0
 8005d10:	4637      	mov	r7, r6
 8005d12:	dc04      	bgt.n	8005d1e <__swbuf_r+0x3a>
 8005d14:	4621      	mov	r1, r4
 8005d16:	4628      	mov	r0, r5
 8005d18:	f7ff fe06 	bl	8005928 <_fflush_r>
 8005d1c:	b9e0      	cbnz	r0, 8005d58 <__swbuf_r+0x74>
 8005d1e:	68a3      	ldr	r3, [r4, #8]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	60a3      	str	r3, [r4, #8]
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	6022      	str	r2, [r4, #0]
 8005d2a:	701e      	strb	r6, [r3, #0]
 8005d2c:	6962      	ldr	r2, [r4, #20]
 8005d2e:	1c43      	adds	r3, r0, #1
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d004      	beq.n	8005d3e <__swbuf_r+0x5a>
 8005d34:	89a3      	ldrh	r3, [r4, #12]
 8005d36:	07db      	lsls	r3, r3, #31
 8005d38:	d506      	bpl.n	8005d48 <__swbuf_r+0x64>
 8005d3a:	2e0a      	cmp	r6, #10
 8005d3c:	d104      	bne.n	8005d48 <__swbuf_r+0x64>
 8005d3e:	4621      	mov	r1, r4
 8005d40:	4628      	mov	r0, r5
 8005d42:	f7ff fdf1 	bl	8005928 <_fflush_r>
 8005d46:	b938      	cbnz	r0, 8005d58 <__swbuf_r+0x74>
 8005d48:	4638      	mov	r0, r7
 8005d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f000 f806 	bl	8005d60 <__swsetup_r>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	d0d5      	beq.n	8005d04 <__swbuf_r+0x20>
 8005d58:	f04f 37ff 	mov.w	r7, #4294967295
 8005d5c:	e7f4      	b.n	8005d48 <__swbuf_r+0x64>
	...

08005d60 <__swsetup_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	4b2a      	ldr	r3, [pc, #168]	; (8005e0c <__swsetup_r+0xac>)
 8005d64:	4605      	mov	r5, r0
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	460c      	mov	r4, r1
 8005d6a:	b118      	cbz	r0, 8005d74 <__swsetup_r+0x14>
 8005d6c:	6a03      	ldr	r3, [r0, #32]
 8005d6e:	b90b      	cbnz	r3, 8005d74 <__swsetup_r+0x14>
 8005d70:	f7fe fff6 	bl	8004d60 <__sinit>
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d7a:	0718      	lsls	r0, r3, #28
 8005d7c:	d422      	bmi.n	8005dc4 <__swsetup_r+0x64>
 8005d7e:	06d9      	lsls	r1, r3, #27
 8005d80:	d407      	bmi.n	8005d92 <__swsetup_r+0x32>
 8005d82:	2309      	movs	r3, #9
 8005d84:	602b      	str	r3, [r5, #0]
 8005d86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d8a:	81a3      	strh	r3, [r4, #12]
 8005d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d90:	e034      	b.n	8005dfc <__swsetup_r+0x9c>
 8005d92:	0758      	lsls	r0, r3, #29
 8005d94:	d512      	bpl.n	8005dbc <__swsetup_r+0x5c>
 8005d96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d98:	b141      	cbz	r1, 8005dac <__swsetup_r+0x4c>
 8005d9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d9e:	4299      	cmp	r1, r3
 8005da0:	d002      	beq.n	8005da8 <__swsetup_r+0x48>
 8005da2:	4628      	mov	r0, r5
 8005da4:	f7ff f952 	bl	800504c <_free_r>
 8005da8:	2300      	movs	r3, #0
 8005daa:	6363      	str	r3, [r4, #52]	; 0x34
 8005dac:	89a3      	ldrh	r3, [r4, #12]
 8005dae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005db2:	81a3      	strh	r3, [r4, #12]
 8005db4:	2300      	movs	r3, #0
 8005db6:	6063      	str	r3, [r4, #4]
 8005db8:	6923      	ldr	r3, [r4, #16]
 8005dba:	6023      	str	r3, [r4, #0]
 8005dbc:	89a3      	ldrh	r3, [r4, #12]
 8005dbe:	f043 0308 	orr.w	r3, r3, #8
 8005dc2:	81a3      	strh	r3, [r4, #12]
 8005dc4:	6923      	ldr	r3, [r4, #16]
 8005dc6:	b94b      	cbnz	r3, 8005ddc <__swsetup_r+0x7c>
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd2:	d003      	beq.n	8005ddc <__swsetup_r+0x7c>
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f000 f88c 	bl	8005ef4 <__smakebuf_r>
 8005ddc:	89a0      	ldrh	r0, [r4, #12]
 8005dde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005de2:	f010 0301 	ands.w	r3, r0, #1
 8005de6:	d00a      	beq.n	8005dfe <__swsetup_r+0x9e>
 8005de8:	2300      	movs	r3, #0
 8005dea:	60a3      	str	r3, [r4, #8]
 8005dec:	6963      	ldr	r3, [r4, #20]
 8005dee:	425b      	negs	r3, r3
 8005df0:	61a3      	str	r3, [r4, #24]
 8005df2:	6923      	ldr	r3, [r4, #16]
 8005df4:	b943      	cbnz	r3, 8005e08 <__swsetup_r+0xa8>
 8005df6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005dfa:	d1c4      	bne.n	8005d86 <__swsetup_r+0x26>
 8005dfc:	bd38      	pop	{r3, r4, r5, pc}
 8005dfe:	0781      	lsls	r1, r0, #30
 8005e00:	bf58      	it	pl
 8005e02:	6963      	ldrpl	r3, [r4, #20]
 8005e04:	60a3      	str	r3, [r4, #8]
 8005e06:	e7f4      	b.n	8005df2 <__swsetup_r+0x92>
 8005e08:	2000      	movs	r0, #0
 8005e0a:	e7f7      	b.n	8005dfc <__swsetup_r+0x9c>
 8005e0c:	20000110 	.word	0x20000110

08005e10 <_raise_r>:
 8005e10:	291f      	cmp	r1, #31
 8005e12:	b538      	push	{r3, r4, r5, lr}
 8005e14:	4604      	mov	r4, r0
 8005e16:	460d      	mov	r5, r1
 8005e18:	d904      	bls.n	8005e24 <_raise_r+0x14>
 8005e1a:	2316      	movs	r3, #22
 8005e1c:	6003      	str	r3, [r0, #0]
 8005e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005e26:	b112      	cbz	r2, 8005e2e <_raise_r+0x1e>
 8005e28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e2c:	b94b      	cbnz	r3, 8005e42 <_raise_r+0x32>
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f000 f830 	bl	8005e94 <_getpid_r>
 8005e34:	462a      	mov	r2, r5
 8005e36:	4601      	mov	r1, r0
 8005e38:	4620      	mov	r0, r4
 8005e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e3e:	f000 b817 	b.w	8005e70 <_kill_r>
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d00a      	beq.n	8005e5c <_raise_r+0x4c>
 8005e46:	1c59      	adds	r1, r3, #1
 8005e48:	d103      	bne.n	8005e52 <_raise_r+0x42>
 8005e4a:	2316      	movs	r3, #22
 8005e4c:	6003      	str	r3, [r0, #0]
 8005e4e:	2001      	movs	r0, #1
 8005e50:	e7e7      	b.n	8005e22 <_raise_r+0x12>
 8005e52:	2400      	movs	r4, #0
 8005e54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e58:	4628      	mov	r0, r5
 8005e5a:	4798      	blx	r3
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	e7e0      	b.n	8005e22 <_raise_r+0x12>

08005e60 <raise>:
 8005e60:	4b02      	ldr	r3, [pc, #8]	; (8005e6c <raise+0xc>)
 8005e62:	4601      	mov	r1, r0
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	f7ff bfd3 	b.w	8005e10 <_raise_r>
 8005e6a:	bf00      	nop
 8005e6c:	20000110 	.word	0x20000110

08005e70 <_kill_r>:
 8005e70:	b538      	push	{r3, r4, r5, lr}
 8005e72:	4d07      	ldr	r5, [pc, #28]	; (8005e90 <_kill_r+0x20>)
 8005e74:	2300      	movs	r3, #0
 8005e76:	4604      	mov	r4, r0
 8005e78:	4608      	mov	r0, r1
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	602b      	str	r3, [r5, #0]
 8005e7e:	f7fb f847 	bl	8000f10 <_kill>
 8005e82:	1c43      	adds	r3, r0, #1
 8005e84:	d102      	bne.n	8005e8c <_kill_r+0x1c>
 8005e86:	682b      	ldr	r3, [r5, #0]
 8005e88:	b103      	cbz	r3, 8005e8c <_kill_r+0x1c>
 8005e8a:	6023      	str	r3, [r4, #0]
 8005e8c:	bd38      	pop	{r3, r4, r5, pc}
 8005e8e:	bf00      	nop
 8005e90:	200009ac 	.word	0x200009ac

08005e94 <_getpid_r>:
 8005e94:	f7fb b834 	b.w	8000f00 <_getpid>

08005e98 <_malloc_usable_size_r>:
 8005e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e9c:	1f18      	subs	r0, r3, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bfbc      	itt	lt
 8005ea2:	580b      	ldrlt	r3, [r1, r0]
 8005ea4:	18c0      	addlt	r0, r0, r3
 8005ea6:	4770      	bx	lr

08005ea8 <__swhatbuf_r>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	460c      	mov	r4, r1
 8005eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb0:	2900      	cmp	r1, #0
 8005eb2:	b096      	sub	sp, #88	; 0x58
 8005eb4:	4615      	mov	r5, r2
 8005eb6:	461e      	mov	r6, r3
 8005eb8:	da0d      	bge.n	8005ed6 <__swhatbuf_r+0x2e>
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ec0:	f04f 0100 	mov.w	r1, #0
 8005ec4:	bf0c      	ite	eq
 8005ec6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005eca:	2340      	movne	r3, #64	; 0x40
 8005ecc:	2000      	movs	r0, #0
 8005ece:	6031      	str	r1, [r6, #0]
 8005ed0:	602b      	str	r3, [r5, #0]
 8005ed2:	b016      	add	sp, #88	; 0x58
 8005ed4:	bd70      	pop	{r4, r5, r6, pc}
 8005ed6:	466a      	mov	r2, sp
 8005ed8:	f000 f848 	bl	8005f6c <_fstat_r>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	dbec      	blt.n	8005eba <__swhatbuf_r+0x12>
 8005ee0:	9901      	ldr	r1, [sp, #4]
 8005ee2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005ee6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005eea:	4259      	negs	r1, r3
 8005eec:	4159      	adcs	r1, r3
 8005eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ef2:	e7eb      	b.n	8005ecc <__swhatbuf_r+0x24>

08005ef4 <__smakebuf_r>:
 8005ef4:	898b      	ldrh	r3, [r1, #12]
 8005ef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ef8:	079d      	lsls	r5, r3, #30
 8005efa:	4606      	mov	r6, r0
 8005efc:	460c      	mov	r4, r1
 8005efe:	d507      	bpl.n	8005f10 <__smakebuf_r+0x1c>
 8005f00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	6123      	str	r3, [r4, #16]
 8005f08:	2301      	movs	r3, #1
 8005f0a:	6163      	str	r3, [r4, #20]
 8005f0c:	b002      	add	sp, #8
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}
 8005f10:	ab01      	add	r3, sp, #4
 8005f12:	466a      	mov	r2, sp
 8005f14:	f7ff ffc8 	bl	8005ea8 <__swhatbuf_r>
 8005f18:	9900      	ldr	r1, [sp, #0]
 8005f1a:	4605      	mov	r5, r0
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f7ff f909 	bl	8005134 <_malloc_r>
 8005f22:	b948      	cbnz	r0, 8005f38 <__smakebuf_r+0x44>
 8005f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f28:	059a      	lsls	r2, r3, #22
 8005f2a:	d4ef      	bmi.n	8005f0c <__smakebuf_r+0x18>
 8005f2c:	f023 0303 	bic.w	r3, r3, #3
 8005f30:	f043 0302 	orr.w	r3, r3, #2
 8005f34:	81a3      	strh	r3, [r4, #12]
 8005f36:	e7e3      	b.n	8005f00 <__smakebuf_r+0xc>
 8005f38:	89a3      	ldrh	r3, [r4, #12]
 8005f3a:	6020      	str	r0, [r4, #0]
 8005f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f40:	81a3      	strh	r3, [r4, #12]
 8005f42:	9b00      	ldr	r3, [sp, #0]
 8005f44:	6163      	str	r3, [r4, #20]
 8005f46:	9b01      	ldr	r3, [sp, #4]
 8005f48:	6120      	str	r0, [r4, #16]
 8005f4a:	b15b      	cbz	r3, 8005f64 <__smakebuf_r+0x70>
 8005f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f50:	4630      	mov	r0, r6
 8005f52:	f000 f81d 	bl	8005f90 <_isatty_r>
 8005f56:	b128      	cbz	r0, 8005f64 <__smakebuf_r+0x70>
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	f023 0303 	bic.w	r3, r3, #3
 8005f5e:	f043 0301 	orr.w	r3, r3, #1
 8005f62:	81a3      	strh	r3, [r4, #12]
 8005f64:	89a3      	ldrh	r3, [r4, #12]
 8005f66:	431d      	orrs	r5, r3
 8005f68:	81a5      	strh	r5, [r4, #12]
 8005f6a:	e7cf      	b.n	8005f0c <__smakebuf_r+0x18>

08005f6c <_fstat_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4d07      	ldr	r5, [pc, #28]	; (8005f8c <_fstat_r+0x20>)
 8005f70:	2300      	movs	r3, #0
 8005f72:	4604      	mov	r4, r0
 8005f74:	4608      	mov	r0, r1
 8005f76:	4611      	mov	r1, r2
 8005f78:	602b      	str	r3, [r5, #0]
 8005f7a:	f7fb f828 	bl	8000fce <_fstat>
 8005f7e:	1c43      	adds	r3, r0, #1
 8005f80:	d102      	bne.n	8005f88 <_fstat_r+0x1c>
 8005f82:	682b      	ldr	r3, [r5, #0]
 8005f84:	b103      	cbz	r3, 8005f88 <_fstat_r+0x1c>
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	bd38      	pop	{r3, r4, r5, pc}
 8005f8a:	bf00      	nop
 8005f8c:	200009ac 	.word	0x200009ac

08005f90 <_isatty_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	4d06      	ldr	r5, [pc, #24]	; (8005fac <_isatty_r+0x1c>)
 8005f94:	2300      	movs	r3, #0
 8005f96:	4604      	mov	r4, r0
 8005f98:	4608      	mov	r0, r1
 8005f9a:	602b      	str	r3, [r5, #0]
 8005f9c:	f7fb f827 	bl	8000fee <_isatty>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d102      	bne.n	8005faa <_isatty_r+0x1a>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	b103      	cbz	r3, 8005faa <_isatty_r+0x1a>
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	bd38      	pop	{r3, r4, r5, pc}
 8005fac:	200009ac 	.word	0x200009ac

08005fb0 <_gettimeofday>:
 8005fb0:	4b02      	ldr	r3, [pc, #8]	; (8005fbc <_gettimeofday+0xc>)
 8005fb2:	2258      	movs	r2, #88	; 0x58
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fba:	4770      	bx	lr
 8005fbc:	200009ac 	.word	0x200009ac

08005fc0 <_init>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	bf00      	nop
 8005fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc6:	bc08      	pop	{r3}
 8005fc8:	469e      	mov	lr, r3
 8005fca:	4770      	bx	lr

08005fcc <_fini>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	bf00      	nop
 8005fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd2:	bc08      	pop	{r3}
 8005fd4:	469e      	mov	lr, r3
 8005fd6:	4770      	bx	lr
