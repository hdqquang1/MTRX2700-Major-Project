
Major Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006420  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c18  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071c8  080071c8  00020154  2**0
                  CONTENTS
  4 .ARM          00000000  080071c8  080071c8  00020154  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071c8  080071c8  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071c8  080071c8  000171c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071cc  080071cc  000171cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000154  20000000  080071d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020154  2**0
                  CONTENTS
 10 .bss          000008f4  20000154  20000154  00020154  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a48  20000a48  00020154  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011139  00000000  00000000  000201c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003375  00000000  00000000  00031300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f58  00000000  00000000  00034678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ba8  00000000  00000000  000355d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003dd15  00000000  00000000  00036178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016a6e  00000000  00000000  00073e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7b4f  00000000  00000000  0008a8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004804  00000000  00000000  0017244c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  00176c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000154 	.word	0x20000154
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006598 	.word	0x08006598

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000158 	.word	0x20000158
 80001cc:	08006598 	.word	0x08006598

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <set_leds>:
#define INCORRECT 0b01010101

// Function set LEDs pattern by binary number
// input: binary led mask pattern
void set_leds(uint8_t led_mask_pattern)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800027a:	4b05      	ldr	r3, [pc, #20]	; (8000290 <set_leds+0x20>)
 800027c:	60fb      	str	r3, [r7, #12]

	if (led_mask_pattern <= 255 && led_mask_pattern >= 0)
	{
		*led_register = led_mask_pattern;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	79fa      	ldrb	r2, [r7, #7]
 8000282:	701a      	strb	r2, [r3, #0]
	}
}
 8000284:	bf00      	nop
 8000286:	3714      	adds	r7, #20
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	48001015 	.word	0x48001015

08000294 <get_leds>:

uint8_t get_leds(void){
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800029a:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <get_leds+0x1c>)
 800029c:	607b      	str	r3, [r7, #4]
	return *led_register;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	781b      	ldrb	r3, [r3, #0]
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	48001015 	.word	0x48001015

080002b4 <correct_leds>:

void correct_leds(void){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
    // Turn on LEDs
    set_leds(CORRECT);
 80002b8:	20ff      	movs	r0, #255	; 0xff
 80002ba:	f7ff ffd9 	bl	8000270 <set_leds>

    // Delay for 1 second (adjust delay according to system clock)
    delay(1000);
 80002be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c2:	f001 fa5b 	bl	800177c <delay>

    // Turn off LEDs
    set_leds(0);
 80002c6:	2000      	movs	r0, #0
 80002c8:	f7ff ffd2 	bl	8000270 <set_leds>
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <incorrect_leds>:

void incorrect_leds(void){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
    // Turn on LEDs
    set_leds(INCORRECT);
 80002d4:	2055      	movs	r0, #85	; 0x55
 80002d6:	f7ff ffcb 	bl	8000270 <set_leds>

    // Delay for 1 second (adjust delay according to system clock)
    delay(1000);
 80002da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002de:	f001 fa4d 	bl	800177c <delay>

    // Turn off LEDs
    set_leds(0);
 80002e2:	2000      	movs	r0, #0
 80002e4:	f7ff ffc4 	bl	8000270 <set_leds>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}

080002ec <end_leds>:

void end_leds(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	 // Turn on LEDs
	set_leds(CORRECT);
 80002f0:	20ff      	movs	r0, #255	; 0xff
 80002f2:	f7ff ffbd 	bl	8000270 <set_leds>

	// Delay for 5 second (adjust delay according to system clock)
	delay(2000);
 80002f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002fa:	f001 fa3f 	bl	800177c <delay>

	// Turn off LEDs
	 set_leds(0);
 80002fe:	2000      	movs	r0, #0
 8000300:	f7ff ffb6 	bl	8000270 <set_leds>
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}

08000308 <chase_leds>:

void chase_leds(void){
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
	uint8_t mask = get_leds() << 1;
 800030e:	f7ff ffc1 	bl	8000294 <get_leds>
 8000312:	4603      	mov	r3, r0
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	71fb      	strb	r3, [r7, #7]
	set_leds(mask);
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ffa8 	bl	8000270 <set_leds>
	if (get_leds() == 0) {
 8000320:	f7ff ffb8 	bl	8000294 <get_leds>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d102      	bne.n	8000330 <chase_leds+0x28>
		set_leds(1);
 800032a:	2001      	movs	r0, #1
 800032c:	f7ff ffa0 	bl	8000270 <set_leds>
	}
}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <get_gyro_values>:
#include <stdio.h>

#include "BSP/stm32f3_discovery.h"
#include "BSP/stm32f3_discovery_gyroscope.h"

float get_gyro_values(void){
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
	float gyro_values[3];

	BSP_GYRO_GetXYZ(&gyro_values[0]);
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4618      	mov	r0, r3
 8000342:	f004 f957 	bl	80045f4 <BSP_GYRO_GetXYZ>

	return gyro_values[1]/20000;
 8000346:	edd7 7a02 	vldr	s15, [r7, #8]
 800034a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000360 <get_gyro_values+0x28>
 800034e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000352:	eef0 7a66 	vmov.f32	s15, s13
}
 8000356:	eeb0 0a67 	vmov.f32	s0, s15
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	469c4000 	.word	0x469c4000

08000364 <randomWord>:
#include "stm32f303xc.h"
#include "timers.h"

#define NUM_WORDS 100 // Total number of words in the array

char* randomWord() {
 8000364:	b580      	push	{r7, lr}
 8000366:	b0ec      	sub	sp, #432	; 0x1b0
 8000368:	af00      	add	r7, sp, #0
    static char* words[NUM_WORDS]; // Static array to store words
    static int usedIndices[NUM_WORDS] = {0}; // Static array to track used indices
    static int wordsCount = 0; // Count of words added to the array

    // Check if all words have been used, reset if needed
    if (wordsCount == NUM_WORDS) {
 800036a:	4b29      	ldr	r3, [pc, #164]	; (8000410 <randomWord+0xac>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b64      	cmp	r3, #100	; 0x64
 8000370:	d108      	bne.n	8000384 <randomWord+0x20>
        wordsCount = 0;
 8000372:	4b27      	ldr	r3, [pc, #156]	; (8000410 <randomWord+0xac>)
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
        memset(usedIndices, 0, sizeof(usedIndices));
 8000378:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800037c:	2100      	movs	r1, #0
 800037e:	4825      	ldr	r0, [pc, #148]	; (8000414 <randomWord+0xb0>)
 8000380:	f005 f8a7 	bl	80054d2 <memset>
    }

	char *allWords[] = {
 8000384:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000388:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800038c:	4a22      	ldr	r2, [pc, #136]	; (8000418 <randomWord+0xb4>)
 800038e:	4618      	mov	r0, r3
 8000390:	4611      	mov	r1, r2
 8000392:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8000396:	461a      	mov	r2, r3
 8000398:	f005 f91f 	bl	80055da <memcpy>
	        "Drinking", "Typing", "Eating", "Having a snowball fight", "Playing the guitar",
	        "Surfing", "Yawning", "Playing golf", "Praying", "Brushing teeth",
	        "Showering", "Meditating", "Singing"
	};

    int numWords = sizeof(allWords) / sizeof(allWords[0]); // Calculate the number of words in the array
 800039c:	2369      	movs	r3, #105	; 0x69
 800039e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

    int randomIndex;
    do {
        randomIndex = rand() % numWords; // Generate a random index within the bounds of the array
 80003a2:	f004 fea7 	bl	80050f4 <rand>
 80003a6:	4603      	mov	r3, r0
 80003a8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80003ac:	fb93 f2f2 	sdiv	r2, r3, r2
 80003b0:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 80003b4:	fb01 f202 	mul.w	r2, r1, r2
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    } while (usedIndices[randomIndex]); // Check if the word at this index has been used
 80003be:	4a15      	ldr	r2, [pc, #84]	; (8000414 <randomWord+0xb0>)
 80003c0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80003c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d1ea      	bne.n	80003a2 <randomWord+0x3e>

    usedIndices[randomIndex] = 1; // Mark this index as used
 80003cc:	4a11      	ldr	r2, [pc, #68]	; (8000414 <randomWord+0xb0>)
 80003ce:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80003d2:	2101      	movs	r1, #1
 80003d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    words[wordsCount++] = allWords[randomIndex]; // Add the word to the array
 80003d8:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <randomWord+0xac>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	1c5a      	adds	r2, r3, #1
 80003de:	490c      	ldr	r1, [pc, #48]	; (8000410 <randomWord+0xac>)
 80003e0:	600a      	str	r2, [r1, #0]
 80003e2:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80003e6:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 80003ea:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 80003ee:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80003f2:	490a      	ldr	r1, [pc, #40]	; (800041c <randomWord+0xb8>)
 80003f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return words[wordsCount - 1]; // Return the last added word
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <randomWord+0xac>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	4a07      	ldr	r2, [pc, #28]	; (800041c <randomWord+0xb8>)
 8000400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000404:	4618      	mov	r0, r3
 8000406:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000174 	.word	0x20000174
 8000414:	20000178 	.word	0x20000178
 8000418:	080069b4 	.word	0x080069b4
 800041c:	20000308 	.word	0x20000308

08000420 <randomTopic>:


#define NUM_TOPICS 9 // Total number of topics in the array

char* randomTopic() {
 8000420:	b5b0      	push	{r4, r5, r7, lr}
 8000422:	b08c      	sub	sp, #48	; 0x30
 8000424:	af00      	add	r7, sp, #0
    static char* topics[NUM_TOPICS]; // Static array to store words
    static int usedIndices[NUM_TOPICS] = {0}; // Static array to track used indices
    static int topicCount = 0; // Count of words added to the array

    // Check if all words have been used, reset if needed
    if (topicCount == NUM_TOPICS) {
 8000426:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <randomTopic+0x90>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b09      	cmp	r3, #9
 800042c:	d107      	bne.n	800043e <randomTopic+0x1e>
    	topicCount = 0;
 800042e:	4b20      	ldr	r3, [pc, #128]	; (80004b0 <randomTopic+0x90>)
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
        memset(usedIndices, 0, sizeof(usedIndices));
 8000434:	2224      	movs	r2, #36	; 0x24
 8000436:	2100      	movs	r1, #0
 8000438:	481e      	ldr	r0, [pc, #120]	; (80004b4 <randomTopic+0x94>)
 800043a:	f005 f84a 	bl	80054d2 <memset>
    }

	char *allTopics[] = {
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <randomTopic+0x98>)
 8000440:	1d3c      	adds	r4, r7, #4
 8000442:	461d      	mov	r5, r3
 8000444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800044a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800044c:	682b      	ldr	r3, [r5, #0]
 800044e:	6023      	str	r3, [r4, #0]
	        "<-Normal pet  Exotic pet->", "<-Useless body part  Useful body part->", "<-Person you could beat up  Person who'd beat you up->",
			"<-Bad pizza topping  Good pizza topping->", "<-Useless major  Useful major->", "<-Worst living person  Greatest living person->",
			"<-Boring hobby  Interesting hobby->", "<-Unsexy emoji  sexy emoji->", "<-Good subject  Bad subject->"
	};

    int numTopics = sizeof(allTopics) / sizeof(allTopics[0]); // Calculate the number of words in the array
 8000450:	2309      	movs	r3, #9
 8000452:	62fb      	str	r3, [r7, #44]	; 0x2c

    int randomIndex;
    do {
        randomIndex = rand() % numTopics; // Generate a random index within the bounds of the array
 8000454:	f004 fe4e 	bl	80050f4 <rand>
 8000458:	4603      	mov	r3, r0
 800045a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800045c:	fb93 f2f2 	sdiv	r2, r3, r2
 8000460:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000462:	fb01 f202 	mul.w	r2, r1, r2
 8000466:	1a9b      	subs	r3, r3, r2
 8000468:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (usedIndices[randomIndex]); // Check if the word at this index has been used
 800046a:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <randomTopic+0x94>)
 800046c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800046e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d1ee      	bne.n	8000454 <randomTopic+0x34>

    usedIndices[randomIndex] = 1; // Mark this index as used
 8000476:	4a0f      	ldr	r2, [pc, #60]	; (80004b4 <randomTopic+0x94>)
 8000478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800047a:	2101      	movs	r1, #1
 800047c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    topics[topicCount++] = allTopics[randomIndex]; // Add the word to the array
 8000480:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <randomTopic+0x90>)
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	1c53      	adds	r3, r2, #1
 8000486:	490a      	ldr	r1, [pc, #40]	; (80004b0 <randomTopic+0x90>)
 8000488:	600b      	str	r3, [r1, #0]
 800048a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	3330      	adds	r3, #48	; 0x30
 8000490:	443b      	add	r3, r7
 8000492:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000496:	4909      	ldr	r1, [pc, #36]	; (80004bc <randomTopic+0x9c>)
 8000498:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

    return topics[topicCount - 1]; // Return the last added word
 800049c:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <randomTopic+0x90>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	4a06      	ldr	r2, [pc, #24]	; (80004bc <randomTopic+0x9c>)
 80004a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3730      	adds	r7, #48	; 0x30
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bdb0      	pop	{r4, r5, r7, pc}
 80004b0:	20000498 	.word	0x20000498
 80004b4:	2000049c 	.word	0x2000049c
 80004b8:	08006cb4 	.word	0x08006cb4
 80004bc:	200004c0 	.word	0x200004c0

080004c0 <set_timesUp>:


uint8_t timesUp = 0;

void set_timesUp(){
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
    if (timesUp == 0) {
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <set_timesUp+0x24>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d103      	bne.n	80004d4 <set_timesUp+0x14>
        timesUp = 1;
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <set_timesUp+0x24>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	701a      	strb	r2, [r3, #0]
    }
    else {
        timesUp = 0;
    }
}
 80004d2:	e002      	b.n	80004da <set_timesUp+0x1a>
        timesUp = 0;
 80004d4:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <set_timesUp+0x24>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	701a      	strb	r2, [r3, #0]
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	20000170 	.word	0x20000170

080004e8 <headsUp>:

void headsUp(uint8_t *P1score, uint8_t *P2score){
 80004e8:	b5b0      	push	{r4, r5, r7, lr}
 80004ea:	b09a      	sub	sp, #104	; 0x68
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]

	uint8_t string_to_send[64] = "This is a string !\r\n";
 80004f2:	4b7b      	ldr	r3, [pc, #492]	; (80006e0 <headsUp+0x1f8>)
 80004f4:	f107 041c 	add.w	r4, r7, #28
 80004f8:	461d      	mov	r5, r3
 80004fa:	6828      	ldr	r0, [r5, #0]
 80004fc:	6869      	ldr	r1, [r5, #4]
 80004fe:	68aa      	ldr	r2, [r5, #8]
 8000500:	68eb      	ldr	r3, [r5, #12]
 8000502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000504:	6928      	ldr	r0, [r5, #16]
 8000506:	6020      	str	r0, [r4, #0]
 8000508:	7d2b      	ldrb	r3, [r5, #20]
 800050a:	7123      	strb	r3, [r4, #4]
 800050c:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8000510:	222b      	movs	r2, #43	; 0x2b
 8000512:	2100      	movs	r1, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f004 ffdc 	bl	80054d2 <memset>

	for (int i = 1; i <= 2; i++) {
 800051a:	2301      	movs	r3, #1
 800051c:	667b      	str	r3, [r7, #100]	; 0x64
 800051e:	e0d6      	b.n	80006ce <headsUp+0x1e6>
		uint8_t Pscore = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

		sprintf(string_to_send, "Player %d your timer starts now!\r\n", i);
 8000526:	f107 031c 	add.w	r3, r7, #28
 800052a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800052c:	496d      	ldr	r1, [pc, #436]	; (80006e4 <headsUp+0x1fc>)
 800052e:	4618      	mov	r0, r3
 8000530:	f004 ff6c 	bl	800540c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000534:	f107 031c 	add.w	r3, r7, #28
 8000538:	496b      	ldr	r1, [pc, #428]	; (80006e8 <headsUp+0x200>)
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fdab 	bl	8001096 <SerialOutputString>
		game_timer(10000, &set_timesUp);
 8000540:	496a      	ldr	r1, [pc, #424]	; (80006ec <headsUp+0x204>)
 8000542:	f242 7010 	movw	r0, #10000	; 0x2710
 8000546:	f001 f8b7 	bl	80016b8 <game_timer>

		while (timesUp == 0) {
 800054a:	e06f      	b.n	800062c <headsUp+0x144>
			uint8_t outcome = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62


			uint8_t guessWord[20];
			char* random = randomWord();
 8000552:	f7ff ff07 	bl	8000364 <randomWord>
 8000556:	65f8      	str	r0, [r7, #92]	; 0x5c
			strcpy((char*)guessWord, random);
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800055e:	4618      	mov	r0, r3
 8000560:	f005 f833 	bl	80055ca <strcpy>
			sprintf(string_to_send, "%s\r\n", (char*)guessWord);
 8000564:	f107 0208 	add.w	r2, r7, #8
 8000568:	f107 031c 	add.w	r3, r7, #28
 800056c:	4960      	ldr	r1, [pc, #384]	; (80006f0 <headsUp+0x208>)
 800056e:	4618      	mov	r0, r3
 8000570:	f004 ff4c 	bl	800540c <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 8000574:	f107 031c 	add.w	r3, r7, #28
 8000578:	495b      	ldr	r1, [pc, #364]	; (80006e8 <headsUp+0x200>)
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fd8b 	bl	8001096 <SerialOutputString>

			while (!outcome){
 8000580:	e026      	b.n	80005d0 <headsUp+0xe8>
				if (get_gyro_values() >= 25){
 8000582:	f7ff fed9 	bl	8000338 <get_gyro_values>
 8000586:	eef0 7a40 	vmov.f32	s15, s0
 800058a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800058e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000596:	db02      	blt.n	800059e <headsUp+0xb6>
					outcome = 1;
 8000598:	2301      	movs	r3, #1
 800059a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
				}
				if (get_gyro_values() <= -25){
 800059e:	f7ff fecb 	bl	8000338 <get_gyro_values>
 80005a2:	eef0 7a40 	vmov.f32	s15, s0
 80005a6:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
 80005aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b2:	d802      	bhi.n	80005ba <headsUp+0xd2>
					outcome = 2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
				}
				if (timesUp){
 80005ba:	4b4e      	ldr	r3, [pc, #312]	; (80006f4 <headsUp+0x20c>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d003      	beq.n	80005ca <headsUp+0xe2>
					outcome = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
					break;
 80005c8:	e006      	b.n	80005d8 <headsUp+0xf0>
				}
				delay(100);
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f001 f8d6 	bl	800177c <delay>
			while (!outcome){
 80005d0:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d0d4      	beq.n	8000582 <headsUp+0x9a>
			}

			if (outcome == 1){
 80005d8:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d113      	bne.n	8000608 <headsUp+0x120>
				Pscore++;
 80005e0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80005e4:	3301      	adds	r3, #1
 80005e6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
				sprintf(string_to_send, "Correct!\r\n");
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	4942      	ldr	r1, [pc, #264]	; (80006f8 <headsUp+0x210>)
 80005f0:	4618      	mov	r0, r3
 80005f2:	f004 ff0b 	bl	800540c <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	493b      	ldr	r1, [pc, #236]	; (80006e8 <headsUp+0x200>)
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fd4a 	bl	8001096 <SerialOutputString>
				correct_leds();
 8000602:	f7ff fe57 	bl	80002b4 <correct_leds>
 8000606:	e011      	b.n	800062c <headsUp+0x144>
			}
			else if (outcome == 2){
 8000608:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800060c:	2b02      	cmp	r3, #2
 800060e:	d112      	bne.n	8000636 <headsUp+0x14e>
				sprintf(string_to_send, "Pass!\r\n");
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4939      	ldr	r1, [pc, #228]	; (80006fc <headsUp+0x214>)
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fef8 	bl	800540c <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4931      	ldr	r1, [pc, #196]	; (80006e8 <headsUp+0x200>)
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fd37 	bl	8001096 <SerialOutputString>
				incorrect_leds();
 8000628:	f7ff fe52 	bl	80002d0 <incorrect_leds>
		while (timesUp == 0) {
 800062c:	4b31      	ldr	r3, [pc, #196]	; (80006f4 <headsUp+0x20c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d08b      	beq.n	800054c <headsUp+0x64>
 8000634:	e000      	b.n	8000638 <headsUp+0x150>
			}
			else{
				break;
 8000636:	bf00      	nop
			}
		}
		sprintf(string_to_send, "Time's Up! Player %d's score is %d!\r\n", i, Pscore);
 8000638:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800063c:	f107 001c 	add.w	r0, r7, #28
 8000640:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000642:	492f      	ldr	r1, [pc, #188]	; (8000700 <headsUp+0x218>)
 8000644:	f004 fee2 	bl	800540c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4926      	ldr	r1, [pc, #152]	; (80006e8 <headsUp+0x200>)
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fd21 	bl	8001096 <SerialOutputString>
		end_leds();
 8000654:	f7ff fe4a 	bl	80002ec <end_leds>
		if (i == 1){
 8000658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800065a:	2b01      	cmp	r3, #1
 800065c:	d11a      	bne.n	8000694 <headsUp+0x1ac>
			*P1score = Pscore;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8000664:	701a      	strb	r2, [r3, #0]
			sprintf(string_to_send, "Press to continue\r\n");
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4926      	ldr	r1, [pc, #152]	; (8000704 <headsUp+0x21c>)
 800066c:	4618      	mov	r0, r3
 800066e:	f004 fecd 	bl	800540c <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	491c      	ldr	r1, [pc, #112]	; (80006e8 <headsUp+0x200>)
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fd0c 	bl	8001096 <SerialOutputString>
			while ((GPIOA->IDR & 0x01) == 0) {}
 800067e:	bf00      	nop
 8000680:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000684:	691b      	ldr	r3, [r3, #16]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f8      	beq.n	8000680 <headsUp+0x198>
			set_timesUp();
 800068e:	f7ff ff17 	bl	80004c0 <set_timesUp>
 8000692:	e019      	b.n	80006c8 <headsUp+0x1e0>
		}
		else {
			*P2score = Pscore;
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 800069a:	701a      	strb	r2, [r3, #0]
			sprintf(string_to_send, "Press to continue\r\n");
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4918      	ldr	r1, [pc, #96]	; (8000704 <headsUp+0x21c>)
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 feb2 	bl	800540c <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	490e      	ldr	r1, [pc, #56]	; (80006e8 <headsUp+0x200>)
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fcf1 	bl	8001096 <SerialOutputString>
			while ((GPIOA->IDR & 0x01) == 0) {}
 80006b4:	bf00      	nop
 80006b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d0f8      	beq.n	80006b6 <headsUp+0x1ce>
			set_timesUp();
 80006c4:	f7ff fefc 	bl	80004c0 <set_timesUp>
	for (int i = 1; i <= 2; i++) {
 80006c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006ca:	3301      	adds	r3, #1
 80006cc:	667b      	str	r3, [r7, #100]	; 0x64
 80006ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	f77f af25 	ble.w	8000520 <headsUp+0x38>
		}
	}
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	3768      	adds	r7, #104	; 0x68
 80006dc:	46bd      	mov	sp, r7
 80006de:	bdb0      	pop	{r4, r5, r7, pc}
 80006e0:	08006d54 	.word	0x08006d54
 80006e4:	08006cd8 	.word	0x08006cd8
 80006e8:	20000000 	.word	0x20000000
 80006ec:	080004c1 	.word	0x080004c1
 80006f0:	08006cfc 	.word	0x08006cfc
 80006f4:	20000170 	.word	0x20000170
 80006f8:	08006d04 	.word	0x08006d04
 80006fc:	08006d10 	.word	0x08006d10
 8000700:	08006d18 	.word	0x08006d18
 8000704:	08006d40 	.word	0x08006d40

08000708 <initialise_board>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_USB_PCD_Init(void);

void initialise_board() {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070e:	f001 f891 	bl	8001834 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000712:	f000 f839 	bl	8000788 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000716:	f000 f939 	bl	800098c <MX_GPIO_Init>
  MX_I2C1_Init();
 800071a:	f000 f897 	bl	800084c <MX_I2C1_Init>
  MX_SPI1_Init();
 800071e:	f000 f8d5 	bl	80008cc <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000722:	f000 f911 	bl	8000948 <MX_USB_PCD_Init>
  
  BSP_GYRO_Init();
 8000726:	f003 feaf 	bl	8004488 <BSP_GYRO_Init>

  RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <initialise_board+0x70>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <initialise_board+0x70>)
 8000730:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000734:	6153      	str	r3, [r2, #20]

  RCC->APB1ENR |=  RCC_APB1ENR_TIM2EN;
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <initialise_board+0x70>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <initialise_board+0x70>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	61d3      	str	r3, [r2, #28]
  RCC->APB1ENR |=  RCC_APB1ENR_TIM3EN;
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <initialise_board+0x70>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <initialise_board+0x70>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	61d3      	str	r3, [r2, #28]

  SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 800074e:	2200      	movs	r2, #0
 8000750:	490a      	ldr	r1, [pc, #40]	; (800077c <initialise_board+0x74>)
 8000752:	2004      	movs	r0, #4
 8000754:	f000 fc00 	bl	8000f58 <SerialInitialise>
  SerialInitialise(BAUD_115200, &UART4_PORT, 0x00);
 8000758:	2200      	movs	r2, #0
 800075a:	4909      	ldr	r1, [pc, #36]	; (8000780 <initialise_board+0x78>)
 800075c:	2004      	movs	r0, #4
 800075e:	f000 fbfb 	bl	8000f58 <SerialInitialise>

  uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <initialise_board+0x7c>)
 8000764:	607b      	str	r3, [r7, #4]
  *led_output_registers = 0x5555;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f245 5255 	movw	r2, #21845	; 0x5555
 800076c:	801a      	strh	r2, [r3, #0]
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000
 800077c:	20000000 	.word	0x20000000
 8000780:	20000040 	.word	0x20000040
 8000784:	48001002 	.word	0x48001002

08000788 <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b09e      	sub	sp, #120	; 0x78
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000792:	2228      	movs	r2, #40	; 0x28
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f004 fe9b 	bl	80054d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ac:	463b      	mov	r3, r7
 80007ae:	223c      	movs	r2, #60	; 0x3c
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f004 fe8d 	bl	80054d2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007b8:	2303      	movs	r3, #3
 80007ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c6:	2301      	movs	r3, #1
 80007c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ca:	2310      	movs	r3, #16
 80007cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007dc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fdd8 	bl	8002398 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80007ee:	f000 f94b 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2302      	movs	r3, #2
 80007f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000802:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000808:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800080c:	2101      	movs	r1, #1
 800080e:	4618      	mov	r0, r3
 8000810:	f002 fe00 	bl	8003414 <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800081a:	f000 f935 	bl	8000a88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <SystemClock_Config+0xc0>)
 8000820:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000826:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800082a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4618      	mov	r0, r3
 8000830:	f002 ffd6 	bl	80037e0 <HAL_RCCEx_PeriphCLKConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800083a:	f000 f925 	bl	8000a88 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3778      	adds	r7, #120	; 0x78
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	00020020 	.word	0x00020020

0800084c <MX_I2C1_Init>:

// I2C1 Initialization Function
static void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_I2C1_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <MX_I2C1_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000888:	f001 fb8e 	bl	8001fa8 <HAL_I2C_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 f8f9 	bl	8000a88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <MX_I2C1_Init+0x74>)
 800089a:	f001 fc14 	bl	80020c6 <HAL_I2CEx_ConfigAnalogFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 f8f0 	bl	8000a88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_I2C1_Init+0x74>)
 80008ac:	f001 fc56 	bl	800215c <HAL_I2CEx_ConfigDigitalFilter>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 f8e7 	bl	8000a88 <Error_Handler>
  }
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200004e4 	.word	0x200004e4
 80008c4:	40005400 	.word	0x40005400
 80008c8:	2000090e 	.word	0x2000090e

080008cc <MX_SPI1_Init>:

// SPI1 Initialization Function
static void MX_SPI1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_SPI1_Init+0x74>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <MX_SPI1_Init+0x78>)
 80008d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_SPI1_Init+0x74>)
 80008d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_SPI1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_SPI1_Init+0x74>)
 80008e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_SPI1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_SPI1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI1_Init+0x74>)
 80008fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_SPI1_Init+0x74>)
 8000902:	2208      	movs	r2, #8
 8000904:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_SPI1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI1_Init+0x74>)
 800091a:	2207      	movs	r2, #7
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_SPI1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI1_Init+0x74>)
 8000926:	2208      	movs	r2, #8
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_SPI1_Init+0x74>)
 800092c:	f003 f908 	bl	8003b40 <HAL_SPI_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000936:	f000 f8a7 	bl	8000a88 <Error_Handler>
  }
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000538 	.word	0x20000538
 8000944:	40013000 	.word	0x40013000

08000948 <MX_USB_PCD_Init>:

// USB Initialization Function
static void MX_USB_PCD_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  hpcd_USB_FS.Instance = USB;
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <MX_USB_PCD_Init+0x3c>)
 800094e:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <MX_USB_PCD_Init+0x40>)
 8000950:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USB_PCD_Init+0x3c>)
 8000954:	2208      	movs	r2, #8
 8000956:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <MX_USB_PCD_Init+0x3c>)
 800095a:	2202      	movs	r2, #2
 800095c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USB_PCD_Init+0x3c>)
 8000960:	2202      	movs	r2, #2
 8000962:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <MX_USB_PCD_Init+0x3c>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USB_PCD_Init+0x3c>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_USB_PCD_Init+0x3c>)
 8000972:	f001 fc3f 	bl	80021f4 <HAL_PCD_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800097c:	f000 f884 	bl	8000a88 <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000059c 	.word	0x2000059c
 8000988:	40005c00 	.word	0x40005c00

0800098c <MX_GPIO_Init>:

// GPIO Initialization Function
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a2:	4b37      	ldr	r3, [pc, #220]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	4a36      	ldr	r2, [pc, #216]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ac:	6153      	str	r3, [r2, #20]
 80009ae:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	4a30      	ldr	r2, [pc, #192]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009c4:	6153      	str	r3, [r2, #20]
 80009c6:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d2:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a2a      	ldr	r2, [pc, #168]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a24      	ldr	r2, [pc, #144]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <MX_GPIO_Init+0xf4>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_GPIO_Init+0xf4>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <MX_GPIO_Init+0xf4>)
 8000a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a0c:	6153      	str	r3, [r2, #20]
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_GPIO_Init+0xf4>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000a20:	4818      	ldr	r0, [pc, #96]	; (8000a84 <MX_GPIO_Init+0xf8>)
 8000a22:	f001 faa9 	bl	8001f78 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000a26:	2337      	movs	r3, #55	; 0x37
 8000a28:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a2a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4812      	ldr	r0, [pc, #72]	; (8000a84 <MX_GPIO_Init+0xf8>)
 8000a3c:	f001 f846 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000a40:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000a44:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	480a      	ldr	r0, [pc, #40]	; (8000a84 <MX_GPIO_Init+0xf8>)
 8000a5a:	f001 f837 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a74:	f001 f82a 	bl	8001acc <HAL_GPIO_Init>
}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40021000 	.word	0x40021000
 8000a84:	48001000 	.word	0x48001000

08000a88 <Error_Handler>:

// This function is executed in case of error occurrence.
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <Error_Handler+0x8>
	...

08000a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a94:	b5b0      	push	{r4, r5, r7, lr}
 8000a96:	b09e      	sub	sp, #120	; 0x78
 8000a98:	af00      	add	r7, sp, #0
	initialise_board();
 8000a9a:	f7ff fe35 	bl	8000708 <initialise_board>

	uint8_t string_to_send[64] = "This is a string!\r\n";
 8000a9e:	4bd1      	ldr	r3, [pc, #836]	; (8000de4 <main+0x350>)
 8000aa0:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000aa4:	461d      	mov	r5, r3
 8000aa6:	6828      	ldr	r0, [r5, #0]
 8000aa8:	6869      	ldr	r1, [r5, #4]
 8000aaa:	68aa      	ldr	r2, [r5, #8]
 8000aac:	68eb      	ldr	r3, [r5, #12]
 8000aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab0:	6928      	ldr	r0, [r5, #16]
 8000ab2:	6020      	str	r0, [r4, #0]
 8000ab4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ab8:	222c      	movs	r2, #44	; 0x2c
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f004 fd08 	bl	80054d2 <memset>

	srand(get_gyro_values());
 8000ac2:	f7ff fc39 	bl	8000338 <get_gyro_values>
 8000ac6:	eef0 7a40 	vmov.f32	s15, s0
 8000aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ace:	ee17 0a90 	vmov	r0, s15
 8000ad2:	f004 fae1 	bl	8005098 <srand>

	uint8_t rounds = 1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t winner;
	uint8_t multiplier;
	uint8_t P1leaderboard = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	uint8_t P2leaderboard = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	uint8_t prize;

	while (rounds <= 3) {
 8000ae8:	e0b4      	b.n	8000c54 <main+0x1c0>
		uint8_t P1score = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		uint8_t P2score = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		headsUp(&P1score, &P2score);
 8000af6:	f107 0229 	add.w	r2, r7, #41	; 0x29
 8000afa:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fcf1 	bl	80004e8 <headsUp>

		// Winner determined
		if (P1score > P2score){
 8000b06:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000b0a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d903      	bls.n	8000b1a <main+0x86>
			// player 1 will play wavelength
			winner = 1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8000b18:	e009      	b.n	8000b2e <main+0x9a>
		}
		else if (P2score > P1score){
 8000b1a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000b1e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000b22:	429a      	cmp	r2, r3
 8000b24:	f240 809c 	bls.w	8000c60 <main+0x1cc>
			// player 2 will play wavelength
			winner = 2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		}
		else {
			break;
		}

		sprintf(string_to_send, "Player %d can play wavelength\r\n", winner);
 8000b2e:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8000b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b36:	49ac      	ldr	r1, [pc, #688]	; (8000de8 <main+0x354>)
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f004 fc67 	bl	800540c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b42:	49aa      	ldr	r1, [pc, #680]	; (8000dec <main+0x358>)
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 faa6 	bl	8001096 <SerialOutputString>
		delay(750);
 8000b4a:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000b4e:	f000 fe15 	bl	800177c <delay>

		uint8_t guessTopic[20];
		char* random = randomTopic();
 8000b52:	f7ff fc65 	bl	8000420 <randomTopic>
 8000b56:	4603      	mov	r3, r0
 8000b58:	673b      	str	r3, [r7, #112]	; 0x70
		strcpy((char*)guessTopic, random);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000b60:	4618      	mov	r0, r3
 8000b62:	f004 fd32 	bl	80055ca <strcpy>
		sprintf(string_to_send, "%s\r\n", (char*)guessTopic);
 8000b66:	f107 0214 	add.w	r2, r7, #20
 8000b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6e:	49a0      	ldr	r1, [pc, #640]	; (8000df0 <main+0x35c>)
 8000b70:	4618      	mov	r0, r3
 8000b72:	f004 fc4b 	bl	800540c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b7a:	499c      	ldr	r1, [pc, #624]	; (8000dec <main+0x358>)
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fa8a 	bl	8001096 <SerialOutputString>

		uint8_t buffer[16];
		SerialInputString(buffer, 16, &UART4_PORT, '\r');
 8000b82:	1d38      	adds	r0, r7, #4
 8000b84:	230d      	movs	r3, #13
 8000b86:	4a9b      	ldr	r2, [pc, #620]	; (8000df4 <main+0x360>)
 8000b88:	2110      	movs	r1, #16
 8000b8a:	f000 fad7 	bl	800113c <SerialInputString>
		multiplier = atoi(buffer);
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	4618      	mov	r0, r3
 8000b92:	f004 fa7d 	bl	8005090 <atoi>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		sprintf(string_to_send, "Wavelength result %d!\r\n", multiplier);
 8000b9c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba4:	4994      	ldr	r1, [pc, #592]	; (8000df8 <main+0x364>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f004 fc30 	bl	800540c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000bac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb0:	498e      	ldr	r1, [pc, #568]	; (8000dec <main+0x358>)
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 fa6f 	bl	8001096 <SerialOutputString>

		// Wavelength multiplier
		if (winner == 1){
 8000bb8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d109      	bne.n	8000bd4 <main+0x140>
			P1score = P1score * multiplier;
 8000bc0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000bc4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000bc8:	fb12 f303 	smulbb	r3, r2, r3
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000bd2:	e00c      	b.n	8000bee <main+0x15a>
		}
		else if (winner == 2){
 8000bd4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d108      	bne.n	8000bee <main+0x15a>
			P2score = P2score * multiplier;
 8000bdc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000be0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000be4:	fb12 f303 	smulbb	r3, r2, r3
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		}

		// Update leaderboard
		P1leaderboard = P1leaderboard + P1score;
 8000bee:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000bf2:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000bf6:	4413      	add	r3, r2
 8000bf8:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		P2leaderboard = P2leaderboard + P2score;
 8000bfc:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000c00:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000c04:	4413      	add	r3, r2
 8000c06:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
		sprintf(string_to_send, "Player 1 your total score is %d!\r\n", P1leaderboard);
 8000c0a:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8000c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c12:	497a      	ldr	r1, [pc, #488]	; (8000dfc <main+0x368>)
 8000c14:	4618      	mov	r0, r3
 8000c16:	f004 fbf9 	bl	800540c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1e:	4973      	ldr	r1, [pc, #460]	; (8000dec <main+0x358>)
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 fa38 	bl	8001096 <SerialOutputString>
		sprintf(string_to_send, "Player 2 your total score is %d!\r\n", P2leaderboard);
 8000c26:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8000c2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c2e:	4974      	ldr	r1, [pc, #464]	; (8000e00 <main+0x36c>)
 8000c30:	4618      	mov	r0, r3
 8000c32:	f004 fbeb 	bl	800540c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3a:	496c      	ldr	r1, [pc, #432]	; (8000dec <main+0x358>)
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 fa2a 	bl	8001096 <SerialOutputString>

		delay(1500);
 8000c42:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000c46:	f000 fd99 	bl	800177c <delay>

		rounds++;
 8000c4a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000c4e:	3301      	adds	r3, #1
 8000c50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (rounds <= 3) {
 8000c54:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	f67f af46 	bls.w	8000aea <main+0x56>
 8000c5e:	e000      	b.n	8000c62 <main+0x1ce>
			break;
 8000c60:	bf00      	nop
	}

	// Final winner announced
	if (P1leaderboard > P2leaderboard){
 8000c62:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8000c66:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d90e      	bls.n	8000c8c <main+0x1f8>
		sprintf(string_to_send, "Player 1 Wins with a final score of %d!\r\n", P1leaderboard);
 8000c6e:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8000c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c76:	4963      	ldr	r1, [pc, #396]	; (8000e04 <main+0x370>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 fbc7 	bl	800540c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c82:	495a      	ldr	r1, [pc, #360]	; (8000dec <main+0x358>)
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 fa06 	bl	8001096 <SerialOutputString>
 8000c8a:	e013      	b.n	8000cb4 <main+0x220>
	}
	else if (P2leaderboard > P1leaderboard){
 8000c8c:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8000c90:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d90d      	bls.n	8000cb4 <main+0x220>
		sprintf(string_to_send, "Player 2 Wins with a final score of %d!\r\n", P2leaderboard);
 8000c98:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8000c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca0:	4959      	ldr	r1, [pc, #356]	; (8000e08 <main+0x374>)
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f004 fbb2 	bl	800540c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cac:	494f      	ldr	r1, [pc, #316]	; (8000dec <main+0x358>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f9f1 	bl	8001096 <SerialOutputString>
	}
	delay(1500);
 8000cb4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000cb8:	f000 fd60 	bl	800177c <delay>

	sprintf(string_to_send, "Winner can spin the wheel now!\r\n");
 8000cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc0:	4952      	ldr	r1, [pc, #328]	; (8000e0c <main+0x378>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f004 fba2 	bl	800540c <siprintf>
	SerialOutputString(string_to_send, &USART1_PORT);
 8000cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ccc:	4947      	ldr	r1, [pc, #284]	; (8000dec <main+0x358>)
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f9e1 	bl	8001096 <SerialOutputString>

	roulette(&prize);
 8000cd4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f8a7 	bl	8000e2c <roulette>

	switch(prize) {
 8000cde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	2b07      	cmp	r3, #7
 8000ce6:	d87c      	bhi.n	8000de2 <main+0x34e>
 8000ce8:	a201      	add	r2, pc, #4	; (adr r2, 8000cf0 <main+0x25c>)
 8000cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cee:	bf00      	nop
 8000cf0:	08000d11 	.word	0x08000d11
 8000cf4:	08000d2b 	.word	0x08000d2b
 8000cf8:	08000d45 	.word	0x08000d45
 8000cfc:	08000d5f 	.word	0x08000d5f
 8000d00:	08000d79 	.word	0x08000d79
 8000d04:	08000d93 	.word	0x08000d93
 8000d08:	08000dad 	.word	0x08000dad
 8000d0c:	08000dc7 	.word	0x08000dc7
	case 1:
		sprintf(string_to_send, "You won a deluxe pen!\r\n");
 8000d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d14:	493e      	ldr	r1, [pc, #248]	; (8000e10 <main+0x37c>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f004 fb78 	bl	800540c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d20:	4932      	ldr	r1, [pc, #200]	; (8000dec <main+0x358>)
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f9b7 	bl	8001096 <SerialOutputString>
		break;
 8000d28:	e05b      	b.n	8000de2 <main+0x34e>
	case 2:
		sprintf(string_to_send, "You won an exclusive notebook!\r\n");
 8000d2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2e:	4939      	ldr	r1, [pc, #228]	; (8000e14 <main+0x380>)
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 fb6b 	bl	800540c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3a:	492c      	ldr	r1, [pc, #176]	; (8000dec <main+0x358>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 f9aa 	bl	8001096 <SerialOutputString>
		break;
 8000d42:	e04e      	b.n	8000de2 <main+0x34e>
	case 3:
		sprintf(string_to_send, "You won a high accuracy ruler!\r\n");
 8000d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d48:	4933      	ldr	r1, [pc, #204]	; (8000e18 <main+0x384>)
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f004 fb5e 	bl	800540c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d54:	4925      	ldr	r1, [pc, #148]	; (8000dec <main+0x358>)
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f99d 	bl	8001096 <SerialOutputString>
		break;
 8000d5c:	e041      	b.n	8000de2 <main+0x34e>
	case 4:
		sprintf(string_to_send, "You won a world class hydration container!\r\n");
 8000d5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d62:	492e      	ldr	r1, [pc, #184]	; (8000e1c <main+0x388>)
 8000d64:	4618      	mov	r0, r3
 8000d66:	f004 fb51 	bl	800540c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000d6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6e:	491f      	ldr	r1, [pc, #124]	; (8000dec <main+0x358>)
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 f990 	bl	8001096 <SerialOutputString>
		break;
 8000d76:	e034      	b.n	8000de2 <main+0x34e>
	case 5:
		sprintf(string_to_send, "You won an exclusive rubber band!\r\n");
 8000d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d7c:	4928      	ldr	r1, [pc, #160]	; (8000e20 <main+0x38c>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f004 fb44 	bl	800540c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000d84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d88:	4918      	ldr	r1, [pc, #96]	; (8000dec <main+0x358>)
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f983 	bl	8001096 <SerialOutputString>
		break;
 8000d90:	e027      	b.n	8000de2 <main+0x34e>
	case 6:
		sprintf(string_to_send, "You won an exclusive rubber band!\r\n");
 8000d92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d96:	4922      	ldr	r1, [pc, #136]	; (8000e20 <main+0x38c>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 fb37 	bl	800540c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000d9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da2:	4912      	ldr	r1, [pc, #72]	; (8000dec <main+0x358>)
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f976 	bl	8001096 <SerialOutputString>
		break;
 8000daa:	e01a      	b.n	8000de2 <main+0x34e>
	case 7:
		sprintf(string_to_send, "You won a luxurious charger!\r\n");
 8000dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db0:	491c      	ldr	r1, [pc, #112]	; (8000e24 <main+0x390>)
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 fb2a 	bl	800540c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dbc:	490b      	ldr	r1, [pc, #44]	; (8000dec <main+0x358>)
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f969 	bl	8001096 <SerialOutputString>
		break;
 8000dc4:	e00d      	b.n	8000de2 <main+0x34e>
	case 8:
		sprintf(string_to_send, "You won a high precision pencil sharpener!\r\n");
 8000dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dca:	4917      	ldr	r1, [pc, #92]	; (8000e28 <main+0x394>)
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f004 fb1d 	bl	800540c <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd6:	4905      	ldr	r1, [pc, #20]	; (8000dec <main+0x358>)
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 f95c 	bl	8001096 <SerialOutputString>
		break;
 8000dde:	bf00      	nop
 8000de0:	e7ff      	b.n	8000de2 <main+0x34e>
	}

	for(;;){};
 8000de2:	e7fe      	b.n	8000de2 <main+0x34e>
 8000de4:	08006f74 	.word	0x08006f74
 8000de8:	08006d6c 	.word	0x08006d6c
 8000dec:	20000000 	.word	0x20000000
 8000df0:	08006d8c 	.word	0x08006d8c
 8000df4:	20000040 	.word	0x20000040
 8000df8:	08006d94 	.word	0x08006d94
 8000dfc:	08006dac 	.word	0x08006dac
 8000e00:	08006dd0 	.word	0x08006dd0
 8000e04:	08006df4 	.word	0x08006df4
 8000e08:	08006e20 	.word	0x08006e20
 8000e0c:	08006e4c 	.word	0x08006e4c
 8000e10:	08006e70 	.word	0x08006e70
 8000e14:	08006e88 	.word	0x08006e88
 8000e18:	08006eac 	.word	0x08006eac
 8000e1c:	08006ed0 	.word	0x08006ed0
 8000e20:	08006f00 	.word	0x08006f00
 8000e24:	08006f24 	.word	0x08006f24
 8000e28:	08006f44 	.word	0x08006f44

08000e2c <roulette>:
#include "stm32f303xc.h"

#include "digital_io.h"
#include "serial.h"

void roulette(uint8_t *prize){
 8000e2c:	b5b0      	push	{r4, r5, r7, lr}
 8000e2e:	b094      	sub	sp, #80	; 0x50
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	while ((GPIOA->IDR & 0x01) == 0) {}
 8000e34:	bf00      	nop
 8000e36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0f8      	beq.n	8000e36 <roulette+0xa>
	uint16_t delay_period = 25;
 8000e44:	2319      	movs	r3, #25
 8000e46:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	for (uint8_t i = 1; i < 6; i++) {
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000e50:	e01c      	b.n	8000e8c <roulette+0x60>
		for(uint8_t j = 0; j < 8; j++){
 8000e52:	2300      	movs	r3, #0
 8000e54:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000e58:	e00f      	b.n	8000e7a <roulette+0x4e>
			chase_leds();
 8000e5a:	f7ff fa55 	bl	8000308 <chase_leds>
			delay(delay_period*i);
 8000e5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000e62:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000e66:	fb02 f303 	mul.w	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fc86 	bl	800177c <delay>
		for(uint8_t j = 0; j < 8; j++){
 8000e70:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000e74:	3301      	adds	r3, #1
 8000e76:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000e7a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000e7e:	2b07      	cmp	r3, #7
 8000e80:	d9eb      	bls.n	8000e5a <roulette+0x2e>
	for (uint8_t i = 1; i < 6; i++) {
 8000e82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e86:	3301      	adds	r3, #1
 8000e88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000e8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e90:	2b05      	cmp	r3, #5
 8000e92:	d9de      	bls.n	8000e52 <roulette+0x26>
		}
	}

	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000e94:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <roulette+0x120>)
 8000e96:	f107 0408 	add.w	r4, r7, #8
 8000e9a:	461d      	mov	r5, r3
 8000e9c:	6828      	ldr	r0, [r5, #0]
 8000e9e:	6869      	ldr	r1, [r5, #4]
 8000ea0:	68aa      	ldr	r2, [r5, #8]
 8000ea2:	68eb      	ldr	r3, [r5, #12]
 8000ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea6:	6928      	ldr	r0, [r5, #16]
 8000ea8:	6020      	str	r0, [r4, #0]
 8000eaa:	7d2b      	ldrb	r3, [r5, #20]
 8000eac:	7123      	strb	r3, [r4, #4]
 8000eae:	f107 031d 	add.w	r3, r7, #29
 8000eb2:	222b      	movs	r2, #43	; 0x2b
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f004 fb0b 	bl	80054d2 <memset>

	uint8_t r = rand() % 8 + 1;
 8000ebc:	f004 f91a 	bl	80050f4 <rand>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	425a      	negs	r2, r3
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	f002 0207 	and.w	r2, r2, #7
 8000ecc:	bf58      	it	pl
 8000ece:	4253      	negpl	r3, r2
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	*prize = r;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8000ede:	701a      	strb	r2, [r3, #0]
	sprintf(string_to_send, "Random number is %d\r\n", r);
 8000ee0:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	4919      	ldr	r1, [pc, #100]	; (8000f50 <roulette+0x124>)
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 fa8e 	bl	800540c <siprintf>
	SerialOutputString(string_to_send, &USART1_PORT);
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	4917      	ldr	r1, [pc, #92]	; (8000f54 <roulette+0x128>)
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f8cd 	bl	8001096 <SerialOutputString>

	uint8_t mask = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	// Turn on the random number of LEDs
	for (uint8_t i = 0; i < r; i++) {
 8000f02:	2300      	movs	r3, #0
 8000f04:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8000f08:	e010      	b.n	8000f2c <roulette+0x100>
		mask |= (1 << i);
 8000f0a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000f0e:	2201      	movs	r2, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	b25a      	sxtb	r2, r3
 8000f16:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	for (uint8_t i = 0; i < r; i++) {
 8000f22:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000f26:	3301      	adds	r3, #1
 8000f28:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8000f2c:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000f30:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d3e8      	bcc.n	8000f0a <roulette+0xde>
	}

	set_leds(mask);
 8000f38:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff f997 	bl	8000270 <set_leds>
}
 8000f42:	bf00      	nop
 8000f44:	3750      	adds	r7, #80	; 0x50
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bdb0      	pop	{r4, r5, r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	08006fa0 	.word	0x08006fa0
 8000f50:	08006f88 	.word	0x08006f88
 8000f54:	20000000 	.word	0x20000000

08000f58 <SerialInitialise>:
		((uint8_t*)&(GPIOC->AFR[1])) + 1,
		0x55};

// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	63da      	str	r2, [r3, #60]	; 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000f6a:	4b3d      	ldr	r3, [pc, #244]	; (8001060 <SerialInitialise+0x108>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a3c      	ldr	r2, [pc, #240]	; (8001060 <SerialInitialise+0x108>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000f76:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <SerialInitialise+0x108>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	4a39      	ldr	r2, [pc, #228]	; (8001060 <SerialInitialise+0x108>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d106      	bne.n	8000f98 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000f8a:	4b35      	ldr	r3, [pc, #212]	; (8001060 <SerialInitialise+0x108>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	4a34      	ldr	r2, [pc, #208]	; (8001060 <SerialInitialise+0x108>)
 8000f90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f94:	6153      	str	r3, [r2, #20]
		break;
 8000f96:	e000      	b.n	8000f9a <SerialInitialise+0x42>
	default:
		break;
 8000f98:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) |= serial_port->SerialPinModeValue;
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) |= serial_port->SerialPinSpeedValue;
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) |= serial_port->SerialPinAlternatePinValue;
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000fc4:	b2d9      	uxtb	r1, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	69d9      	ldr	r1, [r3, #28]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	d825      	bhi.n	8001042 <SerialInitialise+0xea>
 8000ff6:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <SerialInitialise+0xa4>)
 8000ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffc:	08001011 	.word	0x08001011
 8001000:	0800101b 	.word	0x0800101b
 8001004:	08001025 	.word	0x08001025
 8001008:	0800102f 	.word	0x0800102f
 800100c:	08001039 	.word	0x08001039
	case BAUD_9600:
		*baud_rate_config = 0x341 * 0x06; // 9600 at 8MHz
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f241 3286 	movw	r2, #4998	; 0x1386
 8001016:	801a      	strh	r2, [r3, #0]
		break;
 8001018:	e013      	b.n	8001042 <SerialInitialise+0xea>
	case BAUD_19200:
		*baud_rate_config = 0x1A1 * 0x06; // 19200 at 8MHz
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f640 12c6 	movw	r2, #2502	; 0x9c6
 8001020:	801a      	strh	r2, [r3, #0]
		break;
 8001022:	e00e      	b.n	8001042 <SerialInitialise+0xea>
	case BAUD_38400:
		*baud_rate_config = 0xD0 * 0x06;  // 38400 at 8MHz
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 800102a:	801a      	strh	r2, [r3, #0]
		break;
 800102c:	e009      	b.n	8001042 <SerialInitialise+0xea>
	case BAUD_57600:
		*baud_rate_config = 0x8B * 0x06;  // 57600 at 8MHz
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f240 3242 	movw	r2, #834	; 0x342
 8001034:	801a      	strh	r2, [r3, #0]
		break;
 8001036:	e004      	b.n	8001042 <SerialInitialise+0xea>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800103e:	801a      	strh	r2, [r3, #0]
		break;
 8001040:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f042 020d 	orr.w	r2, r2, #13
 8001050:	601a      	str	r2, [r3, #0]
}
 8001052:	bf00      	nop
 8001054:	371c      	adds	r7, #28
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000

08001064 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8001070:	bf00      	nop
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f8      	beq.n	8001072 <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	79fa      	ldrb	r2, [r7, #7]
 8001086:	b292      	uxth	r2, r2
 8001088:	801a      	strh	r2, [r3, #0]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 80010a4:	e00b      	b.n	80010be <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	6839      	ldr	r1, [r7, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffd9 	bl	8001064 <SerialOutputChar>
		counter++;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3301      	adds	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
		pt++;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3301      	adds	r3, #1
 80010bc:	607b      	str	r3, [r7, #4]
	while(*pt) {
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1ef      	bne.n	80010a6 <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	4798      	blx	r3
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <SerialInputChar>:


uint8_t SerialInputChar(SerialPort *serial_port)
{
 80010de:	b480      	push	{r7}
 80010e0:	b085      	sub	sp, #20
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
	while (*(serial_port->StatusRegister) & USART_ISR_ORE || *(serial_port->StatusRegister) & USART_ISR_FE)
 80010e6:	e007      	b.n	80010f8 <SerialInputChar+0x1a>
	{
		*(serial_port->FlagClearRegister) |= USART_ICR_ORECF | USART_ICR_FECF;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f042 020a 	orr.w	r2, r2, #10
 80010f6:	601a      	str	r2, [r3, #0]
	while (*(serial_port->StatusRegister) & USART_ISR_ORE || *(serial_port->StatusRegister) & USART_ISR_FE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f0      	bne.n	80010e8 <SerialInputChar+0xa>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1e9      	bne.n	80010e8 <SerialInputChar+0xa>
	}

	while((*(serial_port->StatusRegister) & USART_ISR_RXNE) == 0)	{};
 8001114:	bf00      	nop
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0320 	and.w	r3, r3, #32
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f8      	beq.n	8001116 <SerialInputChar+0x38>

	//read in a character at a time and return it
	uint8_t character = *(serial_port->DataInputRegister);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	b29b      	uxth	r3, r3
 800112c:	73fb      	strb	r3, [r7, #15]
	return character;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <SerialInputString>:

uint8_t* SerialInputString(uint8_t* buffer, uint32_t buffer_size, SerialPort *serial_port, uint8_t termination_char)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	70fb      	strb	r3, [r7, #3]
	//characters are only read until the buffer is full or a termination char is sent
	uint32_t counter = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < buffer_size/sizeof(uint8_t); i++)
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	e013      	b.n	800117c <SerialInputString+0x40>
	{
		uint8_t character = SerialInputChar(serial_port);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ffc2 	bl	80010de <SerialInputChar>
 800115a:	4603      	mov	r3, r0
 800115c:	75fb      	strb	r3, [r7, #23]
		buffer[i] = character;
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	4413      	add	r3, r2
 8001164:	7dfa      	ldrb	r2, [r7, #23]
 8001166:	701a      	strb	r2, [r3, #0]
		counter++;
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	3301      	adds	r3, #1
 800116c:	61fb      	str	r3, [r7, #28]
		if (character == termination_char)
 800116e:	7dfa      	ldrb	r2, [r7, #23]
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	429a      	cmp	r2, r3
 8001174:	d007      	beq.n	8001186 <SerialInputString+0x4a>
	for (uint32_t i = 0; i < buffer_size/sizeof(uint8_t); i++)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	3301      	adds	r3, #1
 800117a:	61bb      	str	r3, [r7, #24]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	429a      	cmp	r2, r3
 8001182:	d3e7      	bcc.n	8001154 <SerialInputString+0x18>
 8001184:	e000      	b.n	8001188 <SerialInputString+0x4c>
		{
			break;
 8001186:	bf00      	nop
		}
	}
	//callback is called if not equal to NULL
	if (serial_port->completion_function != 0x00)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <SerialInputString+0x5c>
	{
		serial_port->completion_function(counter);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001194:	69f8      	ldr	r0, [r7, #28]
 8001196:	4798      	blx	r3
	}
	return buffer;
 8001198:	68fb      	ldr	r3, [r7, #12]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_MspInit+0x44>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <HAL_MspInit+0x44>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6193      	str	r3, [r2, #24]
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <HAL_MspInit+0x44>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_MspInit+0x44>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <HAL_MspInit+0x44>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	61d3      	str	r3, [r2, #28]
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_MspInit+0x44>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011da:	2007      	movs	r0, #7
 80011dc:	f000 fc42 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40021000 	.word	0x40021000

080011ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a17      	ldr	r2, [pc, #92]	; (8001268 <HAL_I2C_MspInit+0x7c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d127      	bne.n	800125e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_I2C_MspInit+0x80>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4a16      	ldr	r2, [pc, #88]	; (800126c <HAL_I2C_MspInit+0x80>)
 8001214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001218:	6153      	str	r3, [r2, #20]
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_I2C_MspInit+0x80>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001226:	23c0      	movs	r3, #192	; 0xc0
 8001228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122a:	2312      	movs	r3, #18
 800122c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800122e:	2301      	movs	r3, #1
 8001230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001236:	2304      	movs	r3, #4
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	480b      	ldr	r0, [pc, #44]	; (8001270 <HAL_I2C_MspInit+0x84>)
 8001242:	f000 fc43 	bl	8001acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_I2C_MspInit+0x80>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	4a08      	ldr	r2, [pc, #32]	; (800126c <HAL_I2C_MspInit+0x80>)
 800124c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001250:	61d3      	str	r3, [r2, #28]
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_I2C_MspInit+0x80>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40005400 	.word	0x40005400
 800126c:	40021000 	.word	0x40021000
 8001270:	48000400 	.word	0x48000400

08001274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <HAL_SPI_MspInit+0x7c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d128      	bne.n	80012e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	4a16      	ldr	r2, [pc, #88]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 800129c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012a0:	6193      	str	r3, [r2, #24]
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	6153      	str	r3, [r2, #20]
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80012c6:	23e0      	movs	r3, #224	; 0xe0
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012d6:	2305      	movs	r3, #5
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e4:	f000 fbf2 	bl	8001acc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40013000 	.word	0x40013000
 80012f4:	40021000 	.word	0x40021000

080012f8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a08      	ldr	r2, [pc, #32]	; (8001328 <HAL_SPI_MspDeInit+0x30>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d10a      	bne.n	8001320 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_SPI_MspDeInit+0x34>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_SPI_MspDeInit+0x34>)
 8001310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001314:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 8001316:	21e0      	movs	r1, #224	; 0xe0
 8001318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131c:	f000 fd50 	bl	8001dc0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40013000 	.word	0x40013000
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <HAL_PCD_MspInit+0x80>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d129      	bne.n	80013a6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_PCD_MspInit+0x84>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <HAL_PCD_MspInit+0x84>)
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	6153      	str	r3, [r2, #20]
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_PCD_MspInit+0x84>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800136a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800136e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800137c:	230e      	movs	r3, #14
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138a:	f000 fb9f 	bl	8001acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_PCD_MspInit+0x84>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <HAL_PCD_MspInit+0x84>)
 8001394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001398:	61d3      	str	r3, [r2, #28]
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_PCD_MspInit+0x84>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40005c00 	.word	0x40005c00
 80013b4:	40021000 	.word	0x40021000

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <NMI_Handler+0x4>

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001404:	f000 fa5c 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
	return 1;
 8001410:	2301      	movs	r3, #1
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <_kill>:

int _kill(int pid, int sig)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001426:	f004 f8a3 	bl	8005570 <__errno>
 800142a:	4603      	mov	r3, r0
 800142c:	2216      	movs	r2, #22
 800142e:	601a      	str	r2, [r3, #0]
	return -1;
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <_exit>:

void _exit (int status)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ffe7 	bl	800141c <_kill>
	while (1) {}		/* Make sure we hang here */
 800144e:	e7fe      	b.n	800144e <_exit+0x12>

08001450 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	e00a      	b.n	8001478 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001462:	f3af 8000 	nop.w
 8001466:	4601      	mov	r1, r0
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	60ba      	str	r2, [r7, #8]
 800146e:	b2ca      	uxtb	r2, r1
 8001470:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	429a      	cmp	r2, r3
 800147e:	dbf0      	blt.n	8001462 <_read+0x12>
	}

return len;
 8001480:	687b      	ldr	r3, [r7, #4]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e009      	b.n	80014b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60ba      	str	r2, [r7, #8]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbf1      	blt.n	800149c <_write+0x12>
	}
	return len;
 80014b8:	687b      	ldr	r3, [r7, #4]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <_close>:

int _close(int file)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
	return -1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ea:	605a      	str	r2, [r3, #4]
	return 0;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <_isatty>:

int _isatty(int file)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
	return 1;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
	return 0;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001534:	4a14      	ldr	r2, [pc, #80]	; (8001588 <_sbrk+0x5c>)
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <_sbrk+0x60>)
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <_sbrk+0x64>)
 800154a:	4a12      	ldr	r2, [pc, #72]	; (8001594 <_sbrk+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	d207      	bcs.n	800156c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800155c:	f004 f808 	bl	8005570 <__errno>
 8001560:	4603      	mov	r3, r0
 8001562:	220c      	movs	r2, #12
 8001564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	e009      	b.n	8001580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <_sbrk+0x64>)
 800157c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157e:	68fb      	ldr	r3, [r7, #12]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000a000 	.word	0x2000a000
 800158c:	00000400 	.word	0x00000400
 8001590:	20000888 	.word	0x20000888
 8001594:	20000a48 	.word	0x20000a48

08001598 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <SystemInit+0x20>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <SystemInit+0x20>)
 80015a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db0b      	blt.n	80015e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	4907      	ldr	r1, [pc, #28]	; (80015f4 <__NVIC_EnableIRQ+0x38>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	2001      	movs	r0, #1
 80015de:	fa00 f202 	lsl.w	r2, r0, r2
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	; (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	; (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <enable_interrupt>:
#define PRESCALER 47999

// pointers to callback functions
void (*TIM2_callback_function)();

void enable_interrupt(IRQn_Type IRQn, uint32_t priority) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Tell the NVIC module that TIM2 interrupts should be handled
	NVIC_SetPriority(IRQn, priority);  // Set Priority
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	6839      	ldr	r1, [r7, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ffc8 	bl	80015f8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQn);
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ffa5 	bl	80015bc <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001672:	b662      	cpsie	i
}
 8001674:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
// run the oneshot timer interrupt handler
	if (TIM2->SR & TIM_SR_UIF) {
 8001684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00e      	beq.n	80016b0 <TIM2_IRQHandler+0x30>
		// clear oneshot timer interrupt
		TIM2->SR &= ~TIM_SR_UIF;
 8001692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	6113      	str	r3, [r2, #16]

		if (TIM2_callback_function != NULL)
 80016a2:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <TIM2_IRQHandler+0x34>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d002      	beq.n	80016b0 <TIM2_IRQHandler+0x30>
		{
			TIM2_callback_function();
 80016aa:	4b02      	ldr	r3, [pc, #8]	; (80016b4 <TIM2_IRQHandler+0x34>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4798      	blx	r3
		}

	}

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	2000088c 	.word	0x2000088c

080016b8 <game_timer>:

void game_timer(uint16_t time, void (*callback_function)()) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	80fb      	strh	r3, [r7, #6]

	// reset CR1
	TIM2->CR1 = 0x00;
 80016c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

	// set the prescaler to 999, slower than the default clock 1000 times
	TIM2->PSC = PRESCALER; // 1 millisecond or 1 millisecond per count
 80016cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016d0:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28

	// set the auto reload according to the prescaler
	TIM2->ARR = 0x01; // 1 - 1 millisecond
 80016d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016da:	2201      	movs	r2, #1
 80016dc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->ARR = TIM2->ARR * time; // delay in millisecond
 80016de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	88fa      	ldrh	r2, [r7, #6]
 80016e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016ea:	fb02 f303 	mul.w	r3, r2, r3
 80016ee:	62cb      	str	r3, [r1, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // enable auto reload buffering
 80016f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fe:	6013      	str	r3, [r2, #0]

	// set to only counter overflow raises interrupt flag
	TIM2->CR1 |= TIM_CR1_URS;
 8001700:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6013      	str	r3, [r2, #0]

	// set to one-pulse mode
	TIM2->CR1 |= TIM_CR1_OPM;
 8001710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171a:	f043 0308 	orr.w	r3, r3, #8
 800171e:	6013      	str	r3, [r2, #0]

	// re-initialise the counter and generates an update of the registers
	TIM2->EGR |= TIM_EGR_UG;
 8001720:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6153      	str	r3, [r2, #20]

	// enable the update interrupt
	TIM2->DIER |= TIM_DIER_UIE;
 8001730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	60d3      	str	r3, [r2, #12]

	// clear the interrupt
	TIM2->SR &= ~TIM_SR_UIF;
 8001740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	6113      	str	r3, [r2, #16]

	TIM2_callback_function = callback_function;
 8001750:	4a09      	ldr	r2, [pc, #36]	; (8001778 <game_timer+0xc0>)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	6013      	str	r3, [r2, #0]

	enable_interrupt(TIM2_IRQn, 0);
 8001756:	2100      	movs	r1, #0
 8001758:	201c      	movs	r0, #28
 800175a:	f7ff ff77 	bl	800164c <enable_interrupt>

	// enable counter
	TIM2->CR1 |= TIM_CR1_CEN;
 800175e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6013      	str	r3, [r2, #0]

}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000088c 	.word	0x2000088c

0800177c <delay>:

void delay(uint16_t delay){
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	80fb      	strh	r3, [r7, #6]
	// reset CR1
	TIM3->CR1 = 0x00;
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <delay+0x60>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
	TIM3->CNT = 0;
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <delay+0x60>)
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	; 0x24

	// set the prescaler to 999, slower than the default clock 1000 times
	TIM3->PSC = PRESCALER; // 1 millisecond or 1 millisecond per count
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <delay+0x60>)
 8001794:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001798:	629a      	str	r2, [r3, #40]	; 0x28

	// re-initialise the counter and generates an update of the registers
	TIM3->EGR |= TIM_EGR_UG;
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <delay+0x60>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	4a0f      	ldr	r2, [pc, #60]	; (80017dc <delay+0x60>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6153      	str	r3, [r2, #20]

	// enable counter
	TIM3->CR1 |= TIM_CR1_CEN;
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <delay+0x60>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a0c      	ldr	r2, [pc, #48]	; (80017dc <delay+0x60>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6013      	str	r3, [r2, #0]

	while (TIM3->CNT < delay) {};
 80017b2:	bf00      	nop
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <delay+0x60>)
 80017b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d3fa      	bcc.n	80017b4 <delay+0x38>

	// disable counter
	TIM3->CR1 &= ~TIM_CR1_CEN;
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <delay+0x60>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a06      	ldr	r2, [pc, #24]	; (80017dc <delay+0x60>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	6013      	str	r3, [r2, #0]
	TIM3->CNT = 0;
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <delay+0x60>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	40000400 	.word	0x40000400

080017e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001818 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e4:	f7ff fed8 	bl	8001598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e8:	480c      	ldr	r0, [pc, #48]	; (800181c <LoopForever+0x6>)
  ldr r1, =_edata
 80017ea:	490d      	ldr	r1, [pc, #52]	; (8001820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <LoopForever+0xe>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001800:	4c0a      	ldr	r4, [pc, #40]	; (800182c <LoopForever+0x16>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800180e:	f003 feb5 	bl	800557c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001812:	f7ff f93f 	bl	8000a94 <main>

08001816 <LoopForever>:

LoopForever:
    b LoopForever
 8001816:	e7fe      	b.n	8001816 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001818:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8001824:	080071d0 	.word	0x080071d0
  ldr r2, =_sbss
 8001828:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 800182c:	20000a48 	.word	0x20000a48

08001830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC1_2_IRQHandler>
	...

08001834 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_Init+0x28>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_Init+0x28>)
 800183e:	f043 0310 	orr.w	r3, r3, #16
 8001842:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 f90d 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f808 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001850:	f7ff fca8 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40022000 	.word	0x40022000

08001860 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f917 	bl	8001ab2 <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 f8ed 	bl	8001a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000080 	.word	0x20000080
 80018b8:	20000088 	.word	0x20000088
 80018bc:	20000084 	.word	0x20000084

080018c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x20>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x24>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <HAL_IncTick+0x24>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000088 	.word	0x20000088
 80018e4:	20000890 	.word	0x20000890

080018e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_GetTick+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000890 	.word	0x20000890

08001900 <__NVIC_SetPriorityGrouping>:
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_SetPriority>:
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	; (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
         );
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a30:	d301      	bcc.n	8001a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00f      	b.n	8001a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <SysTick_Config+0x40>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3e:	210f      	movs	r1, #15
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f7ff ff8e 	bl	8001964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <SysTick_Config+0x40>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <SysTick_Config+0x40>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010

08001a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff47 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8c:	f7ff ff5c 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff ff8e 	bl	80019b8 <NVIC_EncodePriority>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff5d 	bl	8001964 <__NVIC_SetPriority>
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffb0 	bl	8001a20 <SysTick_Config>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ada:	e154      	b.n	8001d86 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 8146 	beq.w	8001d80 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d005      	beq.n	8001b0c <HAL_GPIO_Init+0x40>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d130      	bne.n	8001b6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b42:	2201      	movs	r2, #1
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	091b      	lsrs	r3, r3, #4
 8001b58:	f003 0201 	and.w	r2, r3, #1
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d017      	beq.n	8001baa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d123      	bne.n	8001bfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	08da      	lsrs	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3208      	adds	r2, #8
 8001bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	08da      	lsrs	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3208      	adds	r2, #8
 8001bf8:	6939      	ldr	r1, [r7, #16]
 8001bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0203 	and.w	r2, r3, #3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80a0 	beq.w	8001d80 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c40:	4b58      	ldr	r3, [pc, #352]	; (8001da4 <HAL_GPIO_Init+0x2d8>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a57      	ldr	r2, [pc, #348]	; (8001da4 <HAL_GPIO_Init+0x2d8>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b55      	ldr	r3, [pc, #340]	; (8001da4 <HAL_GPIO_Init+0x2d8>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c58:	4a53      	ldr	r2, [pc, #332]	; (8001da8 <HAL_GPIO_Init+0x2dc>)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c82:	d019      	beq.n	8001cb8 <HAL_GPIO_Init+0x1ec>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a49      	ldr	r2, [pc, #292]	; (8001dac <HAL_GPIO_Init+0x2e0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d013      	beq.n	8001cb4 <HAL_GPIO_Init+0x1e8>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a48      	ldr	r2, [pc, #288]	; (8001db0 <HAL_GPIO_Init+0x2e4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d00d      	beq.n	8001cb0 <HAL_GPIO_Init+0x1e4>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a47      	ldr	r2, [pc, #284]	; (8001db4 <HAL_GPIO_Init+0x2e8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d007      	beq.n	8001cac <HAL_GPIO_Init+0x1e0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a46      	ldr	r2, [pc, #280]	; (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d101      	bne.n	8001ca8 <HAL_GPIO_Init+0x1dc>
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	e008      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001ca8:	2305      	movs	r3, #5
 8001caa:	e006      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cac:	2303      	movs	r3, #3
 8001cae:	e004      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e002      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	f002 0203 	and.w	r2, r2, #3
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	4093      	lsls	r3, r2
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cca:	4937      	ldr	r1, [pc, #220]	; (8001da8 <HAL_GPIO_Init+0x2dc>)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd8:	4b38      	ldr	r3, [pc, #224]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cfc:	4a2f      	ldr	r2, [pc, #188]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d02:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d26:	4a25      	ldr	r2, [pc, #148]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d2c:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d50:	4a1a      	ldr	r2, [pc, #104]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d56:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d7a:	4a10      	ldr	r2, [pc, #64]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f47f aea3 	bne.w	8001adc <HAL_GPIO_Init+0x10>
  }
}
 8001d96:	bf00      	nop
 8001d98:	bf00      	nop
 8001d9a:	371c      	adds	r7, #28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010000 	.word	0x40010000
 8001dac:	48000400 	.word	0x48000400
 8001db0:	48000800 	.word	0x48000800
 8001db4:	48000c00 	.word	0x48000c00
 8001db8:	48001000 	.word	0x48001000
 8001dbc:	40010400 	.word	0x40010400

08001dc0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001dce:	e0b8      	b.n	8001f42 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80ab 	beq.w	8001f3c <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001de6:	4a5e      	ldr	r2, [pc, #376]	; (8001f60 <HAL_GPIO_DeInit+0x1a0>)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e0e:	d019      	beq.n	8001e44 <HAL_GPIO_DeInit+0x84>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a54      	ldr	r2, [pc, #336]	; (8001f64 <HAL_GPIO_DeInit+0x1a4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d013      	beq.n	8001e40 <HAL_GPIO_DeInit+0x80>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a53      	ldr	r2, [pc, #332]	; (8001f68 <HAL_GPIO_DeInit+0x1a8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d00d      	beq.n	8001e3c <HAL_GPIO_DeInit+0x7c>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a52      	ldr	r2, [pc, #328]	; (8001f6c <HAL_GPIO_DeInit+0x1ac>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d007      	beq.n	8001e38 <HAL_GPIO_DeInit+0x78>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a51      	ldr	r2, [pc, #324]	; (8001f70 <HAL_GPIO_DeInit+0x1b0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d101      	bne.n	8001e34 <HAL_GPIO_DeInit+0x74>
 8001e30:	2304      	movs	r3, #4
 8001e32:	e008      	b.n	8001e46 <HAL_GPIO_DeInit+0x86>
 8001e34:	2305      	movs	r3, #5
 8001e36:	e006      	b.n	8001e46 <HAL_GPIO_DeInit+0x86>
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e004      	b.n	8001e46 <HAL_GPIO_DeInit+0x86>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e002      	b.n	8001e46 <HAL_GPIO_DeInit+0x86>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <HAL_GPIO_DeInit+0x86>
 8001e44:	2300      	movs	r3, #0
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	f002 0203 	and.w	r2, r2, #3
 8001e4c:	0092      	lsls	r2, r2, #2
 8001e4e:	4093      	lsls	r3, r2
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d132      	bne.n	8001ebc <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001e56:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <HAL_GPIO_DeInit+0x1b4>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	4945      	ldr	r1, [pc, #276]	; (8001f74 <HAL_GPIO_DeInit+0x1b4>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001e64:	4b43      	ldr	r3, [pc, #268]	; (8001f74 <HAL_GPIO_DeInit+0x1b4>)
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	4941      	ldr	r1, [pc, #260]	; (8001f74 <HAL_GPIO_DeInit+0x1b4>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001e72:	4b40      	ldr	r3, [pc, #256]	; (8001f74 <HAL_GPIO_DeInit+0x1b4>)
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	493e      	ldr	r1, [pc, #248]	; (8001f74 <HAL_GPIO_DeInit+0x1b4>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001e80:	4b3c      	ldr	r3, [pc, #240]	; (8001f74 <HAL_GPIO_DeInit+0x1b4>)
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	493a      	ldr	r1, [pc, #232]	; (8001f74 <HAL_GPIO_DeInit+0x1b4>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	220f      	movs	r2, #15
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001e9e:	4a30      	ldr	r2, [pc, #192]	; (8001f60 <HAL_GPIO_DeInit+0x1a0>)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	43da      	mvns	r2, r3
 8001eae:	482c      	ldr	r0, [pc, #176]	; (8001f60 <HAL_GPIO_DeInit+0x1a0>)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2103      	movs	r1, #3
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	401a      	ands	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	08da      	lsrs	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3208      	adds	r2, #8
 8001eda:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	08d2      	lsrs	r2, r2, #3
 8001ef2:	4019      	ands	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3208      	adds	r2, #8
 8001ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2103      	movs	r1, #3
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	2101      	movs	r1, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	401a      	ands	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2103      	movs	r1, #3
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	401a      	ands	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f47f af40 	bne.w	8001dd0 <HAL_GPIO_DeInit+0x10>
  }
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	371c      	adds	r7, #28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40010000 	.word	0x40010000
 8001f64:	48000400 	.word	0x48000400
 8001f68:	48000800 	.word	0x48000800
 8001f6c:	48000c00 	.word	0x48000c00
 8001f70:	48001000 	.word	0x48001000
 8001f74:	40010400 	.word	0x40010400

08001f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
 8001f84:	4613      	mov	r3, r2
 8001f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f88:	787b      	ldrb	r3, [r7, #1]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f94:	e002      	b.n	8001f9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e081      	b.n	80020be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff f90c 	bl	80011ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2224      	movs	r2, #36	; 0x24
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0201 	bic.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ff8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002008:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d107      	bne.n	8002022 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	e006      	b.n	8002030 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800202e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d104      	bne.n	8002042 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002040:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002054:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002064:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69d9      	ldr	r1, [r3, #28]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1a      	ldr	r2, [r3, #32]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0201 	orr.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2220      	movs	r2, #32
 80020aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b20      	cmp	r3, #32
 80020da:	d138      	bne.n	800214e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e032      	b.n	8002150 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2224      	movs	r2, #36	; 0x24
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0201 	bic.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002118:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6819      	ldr	r1, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0201 	orr.w	r2, r2, #1
 8002138:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	e000      	b.n	8002150 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800214e:	2302      	movs	r3, #2
  }
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b20      	cmp	r3, #32
 8002170:	d139      	bne.n	80021e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800217c:	2302      	movs	r3, #2
 800217e:	e033      	b.n	80021e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2224      	movs	r2, #36	; 0x24
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	021b      	lsls	r3, r3, #8
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0201 	orr.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e000      	b.n	80021e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021e6:	2302      	movs	r3, #2
  }
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021f6:	b08b      	sub	sp, #44	; 0x2c
 80021f8:	af06      	add	r7, sp, #24
 80021fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0c4      	b.n	8002390 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff f888 	bl	8001330 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2203      	movs	r2, #3
 8002224:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f002 f8ef 	bl	8004410 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002232:	2300      	movs	r3, #0
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	e040      	b.n	80022ba <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	3301      	adds	r3, #1
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	440b      	add	r3, r1
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	440b      	add	r3, r1
 8002272:	3303      	adds	r3, #3
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	3338      	adds	r3, #56	; 0x38
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	440b      	add	r3, r1
 800229a:	333c      	adds	r3, #60	; 0x3c
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	440b      	add	r3, r1
 80022ae:	3340      	adds	r3, #64	; 0x40
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	3301      	adds	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d3b9      	bcc.n	8002238 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	73fb      	strb	r3, [r7, #15]
 80022c8:	e044      	b.n	8002354 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	440b      	add	r3, r1
 80022d8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	3301      	adds	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	429a      	cmp	r2, r3
 800235c:	d3b5      	bcc.n	80022ca <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	687e      	ldr	r6, [r7, #4]
 8002366:	466d      	mov	r5, sp
 8002368:	f106 0410 	add.w	r4, r6, #16
 800236c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800236e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002370:	6823      	ldr	r3, [r4, #0]
 8002372:	602b      	str	r3, [r5, #0]
 8002374:	1d33      	adds	r3, r6, #4
 8002376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002378:	6838      	ldr	r0, [r7, #0]
 800237a:	f002 f864 	bl	8004446 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800239e:	af00      	add	r7, sp, #0
 80023a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	f001 b823 	b.w	8003404 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 817d 	beq.w	80026ce <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023d4:	4bbc      	ldr	r3, [pc, #752]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 030c 	and.w	r3, r3, #12
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d00c      	beq.n	80023fa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023e0:	4bb9      	ldr	r3, [pc, #740]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d15c      	bne.n	80024a6 <HAL_RCC_OscConfig+0x10e>
 80023ec:	4bb6      	ldr	r3, [pc, #728]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f8:	d155      	bne.n	80024a6 <HAL_RCC_OscConfig+0x10e>
 80023fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023fe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800240e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d102      	bne.n	800242c <HAL_RCC_OscConfig+0x94>
 8002426:	4ba8      	ldr	r3, [pc, #672]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	e015      	b.n	8002458 <HAL_RCC_OscConfig+0xc0>
 800242c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002430:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002444:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002448:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002454:	4b9c      	ldr	r3, [pc, #624]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800245c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002460:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002464:	fa92 f2a2 	rbit	r2, r2
 8002468:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800246c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002470:	fab2 f282 	clz	r2, r2
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	f042 0220 	orr.w	r2, r2, #32
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	f002 021f 	and.w	r2, r2, #31
 8002480:	2101      	movs	r1, #1
 8002482:	fa01 f202 	lsl.w	r2, r1, r2
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 811f 	beq.w	80026cc <HAL_RCC_OscConfig+0x334>
 800248e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 8116 	bne.w	80026cc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	f000 bfaf 	b.w	8003404 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x12e>
 80024b8:	4b83      	ldr	r3, [pc, #524]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a82      	ldr	r2, [pc, #520]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 80024be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	e036      	b.n	8002534 <HAL_RCC_OscConfig+0x19c>
 80024c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x158>
 80024d6:	4b7c      	ldr	r3, [pc, #496]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a7b      	ldr	r2, [pc, #492]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 80024dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	4b79      	ldr	r3, [pc, #484]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a78      	ldr	r2, [pc, #480]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 80024e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e021      	b.n	8002534 <HAL_RCC_OscConfig+0x19c>
 80024f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x184>
 8002502:	4b71      	ldr	r3, [pc, #452]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a70      	ldr	r2, [pc, #448]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b6e      	ldr	r3, [pc, #440]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6d      	ldr	r2, [pc, #436]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e00b      	b.n	8002534 <HAL_RCC_OscConfig+0x19c>
 800251c:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a69      	ldr	r2, [pc, #420]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a66      	ldr	r2, [pc, #408]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 800252e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002532:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002534:	4b64      	ldr	r3, [pc, #400]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	f023 020f 	bic.w	r2, r3, #15
 800253c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002540:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	495f      	ldr	r1, [pc, #380]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 800254a:	4313      	orrs	r3, r2
 800254c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800254e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002552:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d059      	beq.n	8002612 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7ff f9c3 	bl	80018e8 <HAL_GetTick>
 8002562:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	e00a      	b.n	800257e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff f9be 	bl	80018e8 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b64      	cmp	r3, #100	; 0x64
 8002576:	d902      	bls.n	800257e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	f000 bf43 	b.w	8003404 <HAL_RCC_OscConfig+0x106c>
 800257e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002582:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002592:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d102      	bne.n	80025b0 <HAL_RCC_OscConfig+0x218>
 80025aa:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	e015      	b.n	80025dc <HAL_RCC_OscConfig+0x244>
 80025b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80025c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80025cc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80025d0:	fa93 f3a3 	rbit	r3, r3
 80025d4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80025d8:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025e0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80025e4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025e8:	fa92 f2a2 	rbit	r2, r2
 80025ec:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80025f0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80025f4:	fab2 f282 	clz	r2, r2
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	f042 0220 	orr.w	r2, r2, #32
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	f002 021f 	and.w	r2, r2, #31
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f202 	lsl.w	r2, r1, r2
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0ab      	beq.n	8002568 <HAL_RCC_OscConfig+0x1d0>
 8002610:	e05d      	b.n	80026ce <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7ff f969 	bl	80018e8 <HAL_GetTick>
 8002616:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261a:	e00a      	b.n	8002632 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800261c:	f7ff f964 	bl	80018e8 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b64      	cmp	r3, #100	; 0x64
 800262a:	d902      	bls.n	8002632 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	f000 bee9 	b.w	8003404 <HAL_RCC_OscConfig+0x106c>
 8002632:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002636:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002646:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d102      	bne.n	8002664 <HAL_RCC_OscConfig+0x2cc>
 800265e:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	e015      	b.n	8002690 <HAL_RCC_OscConfig+0x2f8>
 8002664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002668:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800267c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002680:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002684:	fa93 f3a3 	rbit	r3, r3
 8002688:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800268c:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <HAL_RCC_OscConfig+0x330>)
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002694:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002698:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800269c:	fa92 f2a2 	rbit	r2, r2
 80026a0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80026a4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80026a8:	fab2 f282 	clz	r2, r2
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	f042 0220 	orr.w	r2, r2, #32
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	f002 021f 	and.w	r2, r2, #31
 80026b8:	2101      	movs	r1, #1
 80026ba:	fa01 f202 	lsl.w	r2, r1, r2
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1ab      	bne.n	800261c <HAL_RCC_OscConfig+0x284>
 80026c4:	e003      	b.n	80026ce <HAL_RCC_OscConfig+0x336>
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 817d 	beq.w	80029de <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026e4:	4ba6      	ldr	r3, [pc, #664]	; (8002980 <HAL_RCC_OscConfig+0x5e8>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00b      	beq.n	8002708 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026f0:	4ba3      	ldr	r3, [pc, #652]	; (8002980 <HAL_RCC_OscConfig+0x5e8>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d172      	bne.n	80027e2 <HAL_RCC_OscConfig+0x44a>
 80026fc:	4ba0      	ldr	r3, [pc, #640]	; (8002980 <HAL_RCC_OscConfig+0x5e8>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d16c      	bne.n	80027e2 <HAL_RCC_OscConfig+0x44a>
 8002708:	2302      	movs	r3, #2
 800270a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800271a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_RCC_OscConfig+0x3a0>
 8002732:	4b93      	ldr	r3, [pc, #588]	; (8002980 <HAL_RCC_OscConfig+0x5e8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e013      	b.n	8002760 <HAL_RCC_OscConfig+0x3c8>
 8002738:	2302      	movs	r3, #2
 800273a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800274a:	2302      	movs	r3, #2
 800274c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002750:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800275c:	4b88      	ldr	r3, [pc, #544]	; (8002980 <HAL_RCC_OscConfig+0x5e8>)
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	2202      	movs	r2, #2
 8002762:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002766:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800276a:	fa92 f2a2 	rbit	r2, r2
 800276e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002772:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002776:	fab2 f282 	clz	r2, r2
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	f042 0220 	orr.w	r2, r2, #32
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	f002 021f 	and.w	r2, r2, #31
 8002786:	2101      	movs	r1, #1
 8002788:	fa01 f202 	lsl.w	r2, r1, r2
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCC_OscConfig+0x410>
 8002792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002796:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d002      	beq.n	80027a8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	f000 be2e 	b.w	8003404 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b75      	ldr	r3, [pc, #468]	; (8002980 <HAL_RCC_OscConfig+0x5e8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	21f8      	movs	r1, #248	; 0xf8
 80027be:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80027c6:	fa91 f1a1 	rbit	r1, r1
 80027ca:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80027ce:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80027d2:	fab1 f181 	clz	r1, r1
 80027d6:	b2c9      	uxtb	r1, r1
 80027d8:	408b      	lsls	r3, r1
 80027da:	4969      	ldr	r1, [pc, #420]	; (8002980 <HAL_RCC_OscConfig+0x5e8>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e0:	e0fd      	b.n	80029de <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8088 	beq.w	8002904 <HAL_RCC_OscConfig+0x56c>
 80027f4:	2301      	movs	r3, #1
 80027f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002806:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002814:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	461a      	mov	r2, r3
 800281c:	2301      	movs	r3, #1
 800281e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7ff f862 	bl	80018e8 <HAL_GetTick>
 8002824:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800282a:	f7ff f85d 	bl	80018e8 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d902      	bls.n	8002840 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	f000 bde2 	b.w	8003404 <HAL_RCC_OscConfig+0x106c>
 8002840:	2302      	movs	r3, #2
 8002842:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002852:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b01      	cmp	r3, #1
 8002868:	d102      	bne.n	8002870 <HAL_RCC_OscConfig+0x4d8>
 800286a:	4b45      	ldr	r3, [pc, #276]	; (8002980 <HAL_RCC_OscConfig+0x5e8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	e013      	b.n	8002898 <HAL_RCC_OscConfig+0x500>
 8002870:	2302      	movs	r3, #2
 8002872:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002882:	2302      	movs	r3, #2
 8002884:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002888:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002894:	4b3a      	ldr	r3, [pc, #232]	; (8002980 <HAL_RCC_OscConfig+0x5e8>)
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	2202      	movs	r2, #2
 800289a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800289e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80028a2:	fa92 f2a2 	rbit	r2, r2
 80028a6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80028aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80028ae:	fab2 f282 	clz	r2, r2
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	f042 0220 	orr.w	r2, r2, #32
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	f002 021f 	and.w	r2, r2, #31
 80028be:	2101      	movs	r1, #1
 80028c0:	fa01 f202 	lsl.w	r2, r1, r2
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0af      	beq.n	800282a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ca:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <HAL_RCC_OscConfig+0x5e8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	21f8      	movs	r1, #248	; 0xf8
 80028e0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80028e8:	fa91 f1a1 	rbit	r1, r1
 80028ec:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80028f0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80028f4:	fab1 f181 	clz	r1, r1
 80028f8:	b2c9      	uxtb	r1, r1
 80028fa:	408b      	lsls	r3, r1
 80028fc:	4920      	ldr	r1, [pc, #128]	; (8002980 <HAL_RCC_OscConfig+0x5e8>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
 8002902:	e06c      	b.n	80029de <HAL_RCC_OscConfig+0x646>
 8002904:	2301      	movs	r3, #1
 8002906:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002916:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002924:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	461a      	mov	r2, r3
 800292c:	2300      	movs	r3, #0
 800292e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7fe ffda 	bl	80018e8 <HAL_GetTick>
 8002934:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002938:	e00a      	b.n	8002950 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293a:	f7fe ffd5 	bl	80018e8 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d902      	bls.n	8002950 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	f000 bd5a 	b.w	8003404 <HAL_RCC_OscConfig+0x106c>
 8002950:	2302      	movs	r3, #2
 8002952:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d104      	bne.n	8002984 <HAL_RCC_OscConfig+0x5ec>
 800297a:	4b01      	ldr	r3, [pc, #4]	; (8002980 <HAL_RCC_OscConfig+0x5e8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	e015      	b.n	80029ac <HAL_RCC_OscConfig+0x614>
 8002980:	40021000 	.word	0x40021000
 8002984:	2302      	movs	r3, #2
 8002986:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002996:	2302      	movs	r3, #2
 8002998:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800299c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80029a8:	4bc8      	ldr	r3, [pc, #800]	; (8002ccc <HAL_RCC_OscConfig+0x934>)
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	2202      	movs	r2, #2
 80029ae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80029b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80029b6:	fa92 f2a2 	rbit	r2, r2
 80029ba:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80029be:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80029c2:	fab2 f282 	clz	r2, r2
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	f042 0220 	orr.w	r2, r2, #32
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	f002 021f 	and.w	r2, r2, #31
 80029d2:	2101      	movs	r1, #1
 80029d4:	fa01 f202 	lsl.w	r2, r1, r2
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ad      	bne.n	800293a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8110 	beq.w	8002c14 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d079      	beq.n	8002af8 <HAL_RCC_OscConfig+0x760>
 8002a04:	2301      	movs	r3, #1
 8002a06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	4bab      	ldr	r3, [pc, #684]	; (8002cd0 <HAL_RCC_OscConfig+0x938>)
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2e:	f7fe ff5b 	bl	80018e8 <HAL_GetTick>
 8002a32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a38:	f7fe ff56 	bl	80018e8 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d902      	bls.n	8002a4e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	f000 bcdb 	b.w	8003404 <HAL_RCC_OscConfig+0x106c>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a68:	2202      	movs	r2, #2
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a70:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	fa93 f2a3 	rbit	r2, r3
 8002a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	fa93 f2a3 	rbit	r2, r3
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002aa6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa8:	4b88      	ldr	r3, [pc, #544]	; (8002ccc <HAL_RCC_OscConfig+0x934>)
 8002aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	6019      	str	r1, [r3, #0]
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	fa93 f1a3 	rbit	r1, r3
 8002ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ace:	6019      	str	r1, [r3, #0]
  return result;
 8002ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	2101      	movs	r1, #1
 8002aec:	fa01 f303 	lsl.w	r3, r1, r3
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0a0      	beq.n	8002a38 <HAL_RCC_OscConfig+0x6a0>
 8002af6:	e08d      	b.n	8002c14 <HAL_RCC_OscConfig+0x87c>
 8002af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b00:	2201      	movs	r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	fa93 f2a3 	rbit	r2, r3
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b1a:	601a      	str	r2, [r3, #0]
  return result;
 8002b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b20:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b24:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4b68      	ldr	r3, [pc, #416]	; (8002cd0 <HAL_RCC_OscConfig+0x938>)
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	461a      	mov	r2, r3
 8002b36:	2300      	movs	r3, #0
 8002b38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3a:	f7fe fed5 	bl	80018e8 <HAL_GetTick>
 8002b3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b44:	f7fe fed0 	bl	80018e8 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d902      	bls.n	8002b5a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	f000 bc55 	b.w	8003404 <HAL_RCC_OscConfig+0x106c>
 8002b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b62:	2202      	movs	r2, #2
 8002b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	fa93 f2a3 	rbit	r2, r3
 8002b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b78:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b86:	2202      	movs	r2, #2
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	fa93 f2a3 	rbit	r2, r3
 8002b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002baa:	2202      	movs	r2, #2
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	fa93 f2a3 	rbit	r2, r3
 8002bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc6:	4b41      	ldr	r3, [pc, #260]	; (8002ccc <HAL_RCC_OscConfig+0x934>)
 8002bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	6019      	str	r1, [r3, #0]
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	fa93 f1a3 	rbit	r1, r3
 8002be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002bec:	6019      	str	r1, [r3, #0]
  return result;
 8002bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	2101      	movs	r1, #1
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d197      	bne.n	8002b44 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 81a1 	beq.w	8002f6c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c30:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <HAL_RCC_OscConfig+0x934>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d116      	bne.n	8002c6a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3c:	4b23      	ldr	r3, [pc, #140]	; (8002ccc <HAL_RCC_OscConfig+0x934>)
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	4a22      	ldr	r2, [pc, #136]	; (8002ccc <HAL_RCC_OscConfig+0x934>)
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c46:	61d3      	str	r3, [r2, #28]
 8002c48:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <HAL_RCC_OscConfig+0x934>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c54:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c62:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6a:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d11a      	bne.n	8002cac <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c76:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a16      	ldr	r2, [pc, #88]	; (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c82:	f7fe fe31 	bl	80018e8 <HAL_GetTick>
 8002c86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8a:	e009      	b.n	8002ca0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8c:	f7fe fe2c 	bl	80018e8 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b64      	cmp	r3, #100	; 0x64
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e3b1      	b.n	8003404 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0ef      	beq.n	8002c8c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d10d      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x940>
 8002cbc:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <HAL_RCC_OscConfig+0x934>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	4a02      	ldr	r2, [pc, #8]	; (8002ccc <HAL_RCC_OscConfig+0x934>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6213      	str	r3, [r2, #32]
 8002cc8:	e03c      	b.n	8002d44 <HAL_RCC_OscConfig+0x9ac>
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	10908120 	.word	0x10908120
 8002cd4:	40007000 	.word	0x40007000
 8002cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10c      	bne.n	8002d02 <HAL_RCC_OscConfig+0x96a>
 8002ce8:	4bc1      	ldr	r3, [pc, #772]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	4ac0      	ldr	r2, [pc, #768]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	6213      	str	r3, [r2, #32]
 8002cf4:	4bbe      	ldr	r3, [pc, #760]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	4abd      	ldr	r2, [pc, #756]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002cfa:	f023 0304 	bic.w	r3, r3, #4
 8002cfe:	6213      	str	r3, [r2, #32]
 8002d00:	e020      	b.n	8002d44 <HAL_RCC_OscConfig+0x9ac>
 8002d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b05      	cmp	r3, #5
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x994>
 8002d12:	4bb7      	ldr	r3, [pc, #732]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	4ab6      	ldr	r2, [pc, #728]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002d18:	f043 0304 	orr.w	r3, r3, #4
 8002d1c:	6213      	str	r3, [r2, #32]
 8002d1e:	4bb4      	ldr	r3, [pc, #720]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	4ab3      	ldr	r2, [pc, #716]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6213      	str	r3, [r2, #32]
 8002d2a:	e00b      	b.n	8002d44 <HAL_RCC_OscConfig+0x9ac>
 8002d2c:	4bb0      	ldr	r3, [pc, #704]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	4aaf      	ldr	r2, [pc, #700]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002d32:	f023 0301 	bic.w	r3, r3, #1
 8002d36:	6213      	str	r3, [r2, #32]
 8002d38:	4bad      	ldr	r3, [pc, #692]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	4aac      	ldr	r2, [pc, #688]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002d3e:	f023 0304 	bic.w	r3, r3, #4
 8002d42:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8081 	beq.w	8002e58 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d56:	f7fe fdc7 	bl	80018e8 <HAL_GetTick>
 8002d5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5e:	e00b      	b.n	8002d78 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d60:	f7fe fdc2 	bl	80018e8 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e345      	b.n	8003404 <HAL_RCC_OscConfig+0x106c>
 8002d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d80:	2202      	movs	r2, #2
 8002d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d88:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	fa93 f2a3 	rbit	r2, r3
 8002d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d96:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002da4:	2202      	movs	r2, #2
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	fa93 f2a3 	rbit	r2, r3
 8002db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002dbe:	601a      	str	r2, [r3, #0]
  return result;
 8002dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002dc8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	095b      	lsrs	r3, r3, #5
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f043 0302 	orr.w	r3, r3, #2
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d102      	bne.n	8002de4 <HAL_RCC_OscConfig+0xa4c>
 8002dde:	4b84      	ldr	r3, [pc, #528]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	e013      	b.n	8002e0c <HAL_RCC_OscConfig+0xa74>
 8002de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002dec:	2202      	movs	r2, #2
 8002dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	fa93 f2a3 	rbit	r2, r3
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	4b79      	ldr	r3, [pc, #484]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e10:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e14:	2102      	movs	r1, #2
 8002e16:	6011      	str	r1, [r2, #0]
 8002e18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e1c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	fa92 f1a2 	rbit	r1, r2
 8002e26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e2a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e2e:	6011      	str	r1, [r2, #0]
  return result;
 8002e30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e34:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	fab2 f282 	clz	r2, r2
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	f002 021f 	and.w	r2, r2, #31
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d084      	beq.n	8002d60 <HAL_RCC_OscConfig+0x9c8>
 8002e56:	e07f      	b.n	8002f58 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e58:	f7fe fd46 	bl	80018e8 <HAL_GetTick>
 8002e5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e60:	e00b      	b.n	8002e7a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7fe fd41 	bl	80018e8 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e2c4      	b.n	8003404 <HAL_RCC_OscConfig+0x106c>
 8002e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e82:	2202      	movs	r2, #2
 8002e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	fa93 f2a3 	rbit	r2, r3
 8002e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e98:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	fa93 f2a3 	rbit	r2, r3
 8002eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ec0:	601a      	str	r2, [r3, #0]
  return result;
 8002ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002eca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ecc:	fab3 f383 	clz	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	f043 0302 	orr.w	r3, r3, #2
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d102      	bne.n	8002ee6 <HAL_RCC_OscConfig+0xb4e>
 8002ee0:	4b43      	ldr	r3, [pc, #268]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	e013      	b.n	8002f0e <HAL_RCC_OscConfig+0xb76>
 8002ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002eee:	2202      	movs	r2, #2
 8002ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	fa93 f2a3 	rbit	r2, r3
 8002f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f04:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f12:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f16:	2102      	movs	r1, #2
 8002f18:	6011      	str	r1, [r2, #0]
 8002f1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f1e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	fa92 f1a2 	rbit	r1, r2
 8002f28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f2c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f30:	6011      	str	r1, [r2, #0]
  return result;
 8002f32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f36:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	fab2 f282 	clz	r2, r2
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	f002 021f 	and.w	r2, r2, #31
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d184      	bne.n	8002e62 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f58:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f60:	4b23      	ldr	r3, [pc, #140]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	4a22      	ldr	r2, [pc, #136]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 8242 	beq.w	8003402 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f7e:	4b1c      	ldr	r3, [pc, #112]	; (8002ff0 <HAL_RCC_OscConfig+0xc58>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	f000 8213 	beq.w	80033b2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	f040 8162 	bne.w	8003262 <HAL_RCC_OscConfig+0xeca>
 8002f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002fa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	fa93 f2a3 	rbit	r2, r3
 8002fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fc2:	601a      	str	r2, [r3, #0]
  return result;
 8002fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fcc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fc80 	bl	80018e8 <HAL_GetTick>
 8002fe8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fec:	e00c      	b.n	8003008 <HAL_RCC_OscConfig+0xc70>
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fe fc78 	bl	80018e8 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e1fd      	b.n	8003404 <HAL_RCC_OscConfig+0x106c>
 8003008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003010:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003014:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	fa93 f2a3 	rbit	r2, r3
 8003024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003028:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800302c:	601a      	str	r2, [r3, #0]
  return result;
 800302e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003032:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003036:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b01      	cmp	r3, #1
 800304a:	d102      	bne.n	8003052 <HAL_RCC_OscConfig+0xcba>
 800304c:	4bb0      	ldr	r3, [pc, #704]	; (8003310 <HAL_RCC_OscConfig+0xf78>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	e027      	b.n	80030a2 <HAL_RCC_OscConfig+0xd0a>
 8003052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003056:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800305a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800305e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003064:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	fa93 f2a3 	rbit	r2, r3
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003080:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	fa93 f2a3 	rbit	r2, r3
 8003094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003098:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	4b9c      	ldr	r3, [pc, #624]	; (8003310 <HAL_RCC_OscConfig+0xf78>)
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030a6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80030aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030ae:	6011      	str	r1, [r2, #0]
 80030b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030b4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80030b8:	6812      	ldr	r2, [r2, #0]
 80030ba:	fa92 f1a2 	rbit	r1, r2
 80030be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030c2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030c6:	6011      	str	r1, [r2, #0]
  return result;
 80030c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030cc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	fab2 f282 	clz	r2, r2
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	f042 0220 	orr.w	r2, r2, #32
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	f002 021f 	and.w	r2, r2, #31
 80030e2:	2101      	movs	r1, #1
 80030e4:	fa01 f202 	lsl.w	r2, r1, r2
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d182      	bne.n	8002ff4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ee:	4b88      	ldr	r3, [pc, #544]	; (8003310 <HAL_RCC_OscConfig+0xf78>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	430b      	orrs	r3, r1
 8003110:	497f      	ldr	r1, [pc, #508]	; (8003310 <HAL_RCC_OscConfig+0xf78>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
 8003116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800311e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003122:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003128:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	fa93 f2a3 	rbit	r2, r3
 8003132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003136:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800313a:	601a      	str	r2, [r3, #0]
  return result;
 800313c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003140:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003144:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003146:	fab3 f383 	clz	r3, r3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003150:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	461a      	mov	r2, r3
 8003158:	2301      	movs	r3, #1
 800315a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fe fbc4 	bl	80018e8 <HAL_GetTick>
 8003160:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003164:	e009      	b.n	800317a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003166:	f7fe fbbf 	bl	80018e8 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e144      	b.n	8003404 <HAL_RCC_OscConfig+0x106c>
 800317a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	fa93 f2a3 	rbit	r2, r3
 8003196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800319e:	601a      	str	r2, [r3, #0]
  return result;
 80031a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d102      	bne.n	80031c4 <HAL_RCC_OscConfig+0xe2c>
 80031be:	4b54      	ldr	r3, [pc, #336]	; (8003310 <HAL_RCC_OscConfig+0xf78>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	e027      	b.n	8003214 <HAL_RCC_OscConfig+0xe7c>
 80031c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	fa93 f2a3 	rbit	r2, r3
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ee:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80031f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	fa93 f2a3 	rbit	r2, r3
 8003206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	4b3f      	ldr	r3, [pc, #252]	; (8003310 <HAL_RCC_OscConfig+0xf78>)
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003218:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800321c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003220:	6011      	str	r1, [r2, #0]
 8003222:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003226:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	fa92 f1a2 	rbit	r1, r2
 8003230:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003234:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003238:	6011      	str	r1, [r2, #0]
  return result;
 800323a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800323e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	fab2 f282 	clz	r2, r2
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	f042 0220 	orr.w	r2, r2, #32
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	f002 021f 	and.w	r2, r2, #31
 8003254:	2101      	movs	r1, #1
 8003256:	fa01 f202 	lsl.w	r2, r1, r2
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d082      	beq.n	8003166 <HAL_RCC_OscConfig+0xdce>
 8003260:	e0cf      	b.n	8003402 <HAL_RCC_OscConfig+0x106a>
 8003262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003266:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800326a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800326e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003274:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	fa93 f2a3 	rbit	r2, r3
 800327e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003282:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003286:	601a      	str	r2, [r3, #0]
  return result;
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003290:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003292:	fab3 f383 	clz	r3, r3
 8003296:	b2db      	uxtb	r3, r3
 8003298:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800329c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	461a      	mov	r2, r3
 80032a4:	2300      	movs	r3, #0
 80032a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe fb1e 	bl	80018e8 <HAL_GetTick>
 80032ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b0:	e009      	b.n	80032c6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b2:	f7fe fb19 	bl	80018e8 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e09e      	b.n	8003404 <HAL_RCC_OscConfig+0x106c>
 80032c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	fa93 f2a3 	rbit	r2, r3
 80032e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032ea:	601a      	str	r2, [r3, #0]
  return result;
 80032ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d104      	bne.n	8003314 <HAL_RCC_OscConfig+0xf7c>
 800330a:	4b01      	ldr	r3, [pc, #4]	; (8003310 <HAL_RCC_OscConfig+0xf78>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	e029      	b.n	8003364 <HAL_RCC_OscConfig+0xfcc>
 8003310:	40021000 	.word	0x40021000
 8003314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003318:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800331c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003326:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	fa93 f2a3 	rbit	r2, r3
 8003330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003334:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003342:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	fa93 f2a3 	rbit	r2, r3
 8003356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <HAL_RCC_OscConfig+0x1078>)
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003368:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800336c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003370:	6011      	str	r1, [r2, #0]
 8003372:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003376:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	fa92 f1a2 	rbit	r1, r2
 8003380:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003384:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003388:	6011      	str	r1, [r2, #0]
  return result;
 800338a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800338e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	fab2 f282 	clz	r2, r2
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	f042 0220 	orr.w	r2, r2, #32
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	f002 021f 	and.w	r2, r2, #31
 80033a4:	2101      	movs	r1, #1
 80033a6:	fa01 f202 	lsl.w	r2, r1, r2
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d180      	bne.n	80032b2 <HAL_RCC_OscConfig+0xf1a>
 80033b0:	e027      	b.n	8003402 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e01e      	b.n	8003404 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033c6:	4b12      	ldr	r3, [pc, #72]	; (8003410 <HAL_RCC_OscConfig+0x1078>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033d2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d10b      	bne.n	80033fe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80033e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d001      	beq.n	8003402 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000

08003414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b09e      	sub	sp, #120	; 0x78
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e162      	b.n	80036f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800342c:	4b90      	ldr	r3, [pc, #576]	; (8003670 <HAL_RCC_ClockConfig+0x25c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d910      	bls.n	800345c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b8d      	ldr	r3, [pc, #564]	; (8003670 <HAL_RCC_ClockConfig+0x25c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 0207 	bic.w	r2, r3, #7
 8003442:	498b      	ldr	r1, [pc, #556]	; (8003670 <HAL_RCC_ClockConfig+0x25c>)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b89      	ldr	r3, [pc, #548]	; (8003670 <HAL_RCC_ClockConfig+0x25c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e14a      	b.n	80036f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003468:	4b82      	ldr	r3, [pc, #520]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	497f      	ldr	r1, [pc, #508]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80dc 	beq.w	8003640 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d13c      	bne.n	800350a <HAL_RCC_ClockConfig+0xf6>
 8003490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003494:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800349e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a0:	fab3 f383 	clz	r3, r3
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d102      	bne.n	80034ba <HAL_RCC_ClockConfig+0xa6>
 80034b4:	4b6f      	ldr	r3, [pc, #444]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	e00f      	b.n	80034da <HAL_RCC_ClockConfig+0xc6>
 80034ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034c2:	fa93 f3a3 	rbit	r3, r3
 80034c6:	667b      	str	r3, [r7, #100]	; 0x64
 80034c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034cc:	663b      	str	r3, [r7, #96]	; 0x60
 80034ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034d0:	fa93 f3a3 	rbit	r3, r3
 80034d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034d6:	4b67      	ldr	r3, [pc, #412]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034de:	65ba      	str	r2, [r7, #88]	; 0x58
 80034e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034e2:	fa92 f2a2 	rbit	r2, r2
 80034e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80034e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034ea:	fab2 f282 	clz	r2, r2
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	f042 0220 	orr.w	r2, r2, #32
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	f002 021f 	and.w	r2, r2, #31
 80034fa:	2101      	movs	r1, #1
 80034fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003500:	4013      	ands	r3, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d17b      	bne.n	80035fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0f3      	b.n	80036f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d13c      	bne.n	800358c <HAL_RCC_ClockConfig+0x178>
 8003512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003516:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800351a:	fa93 f3a3 	rbit	r3, r3
 800351e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b01      	cmp	r3, #1
 8003534:	d102      	bne.n	800353c <HAL_RCC_ClockConfig+0x128>
 8003536:	4b4f      	ldr	r3, [pc, #316]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	e00f      	b.n	800355c <HAL_RCC_ClockConfig+0x148>
 800353c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003540:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003544:	fa93 f3a3 	rbit	r3, r3
 8003548:	647b      	str	r3, [r7, #68]	; 0x44
 800354a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800354e:	643b      	str	r3, [r7, #64]	; 0x40
 8003550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003552:	fa93 f3a3 	rbit	r3, r3
 8003556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003558:	4b46      	ldr	r3, [pc, #280]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003560:	63ba      	str	r2, [r7, #56]	; 0x38
 8003562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003564:	fa92 f2a2 	rbit	r2, r2
 8003568:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800356a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800356c:	fab2 f282 	clz	r2, r2
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	f042 0220 	orr.w	r2, r2, #32
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	f002 021f 	and.w	r2, r2, #31
 800357c:	2101      	movs	r1, #1
 800357e:	fa01 f202 	lsl.w	r2, r1, r2
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d13a      	bne.n	80035fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0b2      	b.n	80036f2 <HAL_RCC_ClockConfig+0x2de>
 800358c:	2302      	movs	r3, #2
 800358e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	fa93 f3a3 	rbit	r3, r3
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d102      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x1a0>
 80035ae:	4b31      	ldr	r3, [pc, #196]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	e00d      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1bc>
 80035b4:	2302      	movs	r3, #2
 80035b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
 80035c0:	2302      	movs	r3, #2
 80035c2:	623b      	str	r3, [r7, #32]
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	fa93 f3a3 	rbit	r3, r3
 80035ca:	61fb      	str	r3, [r7, #28]
 80035cc:	4b29      	ldr	r3, [pc, #164]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	2202      	movs	r2, #2
 80035d2:	61ba      	str	r2, [r7, #24]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	fa92 f2a2 	rbit	r2, r2
 80035da:	617a      	str	r2, [r7, #20]
  return result;
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	fab2 f282 	clz	r2, r2
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	f042 0220 	orr.w	r2, r2, #32
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	f002 021f 	and.w	r2, r2, #31
 80035ee:	2101      	movs	r1, #1
 80035f0:	fa01 f202 	lsl.w	r2, r1, r2
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e079      	b.n	80036f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035fe:	4b1d      	ldr	r3, [pc, #116]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f023 0203 	bic.w	r2, r3, #3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	491a      	ldr	r1, [pc, #104]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003610:	f7fe f96a 	bl	80018e8 <HAL_GetTick>
 8003614:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	e00a      	b.n	800362e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003618:	f7fe f966 	bl	80018e8 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	; 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e061      	b.n	80036f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 020c 	and.w	r2, r3, #12
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	429a      	cmp	r2, r3
 800363e:	d1eb      	bne.n	8003618 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_RCC_ClockConfig+0x25c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d214      	bcs.n	8003678 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b08      	ldr	r3, [pc, #32]	; (8003670 <HAL_RCC_ClockConfig+0x25c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 0207 	bic.w	r2, r3, #7
 8003656:	4906      	ldr	r1, [pc, #24]	; (8003670 <HAL_RCC_ClockConfig+0x25c>)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b04      	ldr	r3, [pc, #16]	; (8003670 <HAL_RCC_ClockConfig+0x25c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d005      	beq.n	8003678 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e040      	b.n	80036f2 <HAL_RCC_ClockConfig+0x2de>
 8003670:	40022000 	.word	0x40022000
 8003674:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <HAL_RCC_ClockConfig+0x2e8>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	491a      	ldr	r1, [pc, #104]	; (80036fc <HAL_RCC_ClockConfig+0x2e8>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036a2:	4b16      	ldr	r3, [pc, #88]	; (80036fc <HAL_RCC_ClockConfig+0x2e8>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4912      	ldr	r1, [pc, #72]	; (80036fc <HAL_RCC_ClockConfig+0x2e8>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036b6:	f000 f829 	bl	800370c <HAL_RCC_GetSysClockFreq>
 80036ba:	4601      	mov	r1, r0
 80036bc:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <HAL_RCC_ClockConfig+0x2e8>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c4:	22f0      	movs	r2, #240	; 0xf0
 80036c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	fa92 f2a2 	rbit	r2, r2
 80036ce:	60fa      	str	r2, [r7, #12]
  return result;
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	fab2 f282 	clz	r2, r2
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	40d3      	lsrs	r3, r2
 80036da:	4a09      	ldr	r2, [pc, #36]	; (8003700 <HAL_RCC_ClockConfig+0x2ec>)
 80036dc:	5cd3      	ldrb	r3, [r2, r3]
 80036de:	fa21 f303 	lsr.w	r3, r1, r3
 80036e2:	4a08      	ldr	r2, [pc, #32]	; (8003704 <HAL_RCC_ClockConfig+0x2f0>)
 80036e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036e6:	4b08      	ldr	r3, [pc, #32]	; (8003708 <HAL_RCC_ClockConfig+0x2f4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe f8b8 	bl	8001860 <HAL_InitTick>
  
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3778      	adds	r7, #120	; 0x78
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
 8003700:	08006fb8 	.word	0x08006fb8
 8003704:	20000080 	.word	0x20000080
 8003708:	20000084 	.word	0x20000084

0800370c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800370c:	b480      	push	{r7}
 800370e:	b08b      	sub	sp, #44	; 0x2c
 8003710:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
 8003716:	2300      	movs	r3, #0
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	2300      	movs	r3, #0
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003726:	4b29      	ldr	r3, [pc, #164]	; (80037cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b04      	cmp	r3, #4
 8003734:	d002      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0x30>
 8003736:	2b08      	cmp	r3, #8
 8003738:	d003      	beq.n	8003742 <HAL_RCC_GetSysClockFreq+0x36>
 800373a:	e03c      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800373c:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800373e:	623b      	str	r3, [r7, #32]
      break;
 8003740:	e03c      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003748:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800374c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	fa92 f2a2 	rbit	r2, r2
 8003754:	607a      	str	r2, [r7, #4]
  return result;
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	fab2 f282 	clz	r2, r2
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	40d3      	lsrs	r3, r2
 8003760:	4a1c      	ldr	r2, [pc, #112]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003762:	5cd3      	ldrb	r3, [r2, r3]
 8003764:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003766:	4b19      	ldr	r3, [pc, #100]	; (80037cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	220f      	movs	r2, #15
 8003770:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	fa92 f2a2 	rbit	r2, r2
 8003778:	60fa      	str	r2, [r7, #12]
  return result;
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	fab2 f282 	clz	r2, r2
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	40d3      	lsrs	r3, r2
 8003784:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003786:	5cd3      	ldrb	r3, [r2, r3]
 8003788:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003794:	4a0e      	ldr	r2, [pc, #56]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	fbb2 f2f3 	udiv	r2, r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	fb02 f303 	mul.w	r3, r2, r3
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
 80037a4:	e004      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	4a0c      	ldr	r2, [pc, #48]	; (80037dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	623b      	str	r3, [r7, #32]
      break;
 80037b4:	e002      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037b6:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037b8:	623b      	str	r3, [r7, #32]
      break;
 80037ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037bc:	6a3b      	ldr	r3, [r7, #32]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	372c      	adds	r7, #44	; 0x2c
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	007a1200 	.word	0x007a1200
 80037d4:	08006fc8 	.word	0x08006fc8
 80037d8:	08006fd8 	.word	0x08006fd8
 80037dc:	003d0900 	.word	0x003d0900

080037e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b092      	sub	sp, #72	; 0x48
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80d4 	beq.w	80039ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003804:	4b4e      	ldr	r3, [pc, #312]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10e      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003810:	4b4b      	ldr	r3, [pc, #300]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	4a4a      	ldr	r2, [pc, #296]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381a:	61d3      	str	r3, [r2, #28]
 800381c:	4b48      	ldr	r3, [pc, #288]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003828:	2301      	movs	r3, #1
 800382a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382e:	4b45      	ldr	r3, [pc, #276]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003836:	2b00      	cmp	r3, #0
 8003838:	d118      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383a:	4b42      	ldr	r3, [pc, #264]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a41      	ldr	r2, [pc, #260]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003844:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003846:	f7fe f84f 	bl	80018e8 <HAL_GetTick>
 800384a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384c:	e008      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384e:	f7fe f84b 	bl	80018e8 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b64      	cmp	r3, #100	; 0x64
 800385a:	d901      	bls.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e169      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003860:	4b38      	ldr	r3, [pc, #224]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800386c:	4b34      	ldr	r3, [pc, #208]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003874:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8084 	beq.w	8003986 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003886:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003888:	429a      	cmp	r2, r3
 800388a:	d07c      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800388c:	4b2c      	ldr	r3, [pc, #176]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003896:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800389a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	4b26      	ldr	r3, [pc, #152]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	461a      	mov	r2, r3
 80038b6:	2301      	movs	r3, #1
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c2:	fa93 f3a3 	rbit	r3, r3
 80038c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	461a      	mov	r2, r3
 80038da:	2300      	movs	r3, #0
 80038dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038de:	4a18      	ldr	r2, [pc, #96]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d04b      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ee:	f7fd fffb 	bl	80018e8 <HAL_GetTick>
 80038f2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f4:	e00a      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f6:	f7fd fff7 	bl	80018e8 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f241 3288 	movw	r2, #5000	; 0x1388
 8003904:	4293      	cmp	r3, r2
 8003906:	d901      	bls.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e113      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800390c:	2302      	movs	r3, #2
 800390e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
 8003918:	2302      	movs	r3, #2
 800391a:	623b      	str	r3, [r7, #32]
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	fa93 f3a3 	rbit	r3, r3
 8003922:	61fb      	str	r3, [r7, #28]
  return result;
 8003924:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003926:	fab3 f383 	clz	r3, r3
 800392a:	b2db      	uxtb	r3, r3
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f043 0302 	orr.w	r3, r3, #2
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d108      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800393a:	4b01      	ldr	r3, [pc, #4]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	e00d      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003940:	40021000 	.word	0x40021000
 8003944:	40007000 	.word	0x40007000
 8003948:	10908100 	.word	0x10908100
 800394c:	2302      	movs	r3, #2
 800394e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	4b78      	ldr	r3, [pc, #480]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	2202      	movs	r2, #2
 800395e:	613a      	str	r2, [r7, #16]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	fa92 f2a2 	rbit	r2, r2
 8003966:	60fa      	str	r2, [r7, #12]
  return result;
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	fab2 f282 	clz	r2, r2
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	f002 021f 	and.w	r2, r2, #31
 800397a:	2101      	movs	r1, #1
 800397c:	fa01 f202 	lsl.w	r2, r1, r2
 8003980:	4013      	ands	r3, r2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0b7      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003986:	4b6d      	ldr	r3, [pc, #436]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	496a      	ldr	r1, [pc, #424]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003994:	4313      	orrs	r3, r2
 8003996:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003998:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800399c:	2b01      	cmp	r3, #1
 800399e:	d105      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a0:	4b66      	ldr	r3, [pc, #408]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	4a65      	ldr	r2, [pc, #404]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039b8:	4b60      	ldr	r3, [pc, #384]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	f023 0203 	bic.w	r2, r3, #3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	495d      	ldr	r1, [pc, #372]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d008      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039d6:	4b59      	ldr	r3, [pc, #356]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	4956      	ldr	r1, [pc, #344]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039f4:	4b51      	ldr	r3, [pc, #324]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	494e      	ldr	r1, [pc, #312]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a12:	4b4a      	ldr	r3, [pc, #296]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	f023 0210 	bic.w	r2, r3, #16
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	4947      	ldr	r1, [pc, #284]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a30:	4b42      	ldr	r3, [pc, #264]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	493f      	ldr	r1, [pc, #252]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a4e:	4b3b      	ldr	r3, [pc, #236]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	f023 0220 	bic.w	r2, r3, #32
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4938      	ldr	r1, [pc, #224]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a6c:	4b33      	ldr	r3, [pc, #204]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	4930      	ldr	r1, [pc, #192]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a8a:	4b2c      	ldr	r3, [pc, #176]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	4929      	ldr	r1, [pc, #164]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003aa8:	4b24      	ldr	r3, [pc, #144]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	4921      	ldr	r1, [pc, #132]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	491a      	ldr	r1, [pc, #104]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003ae4:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	4912      	ldr	r1, [pc, #72]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b02:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	490b      	ldr	r1, [pc, #44]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2c:	4903      	ldr	r1, [pc, #12]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3748      	adds	r7, #72	; 0x48
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40021000 	.word	0x40021000

08003b40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e09d      	b.n	8003c8e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d108      	bne.n	8003b6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b62:	d009      	beq.n	8003b78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	61da      	str	r2, [r3, #28]
 8003b6a:	e005      	b.n	8003b78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fd fb6e 	bl	8001274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bb8:	d902      	bls.n	8003bc0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	e002      	b.n	8003bc6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bc4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bce:	d007      	beq.n	8003be0 <HAL_SPI_Init+0xa0>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bd8:	d002      	beq.n	8003be0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	ea42 0103 	orr.w	r1, r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	f003 0204 	and.w	r2, r3, #4
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c5c:	ea42 0103 	orr.w	r1, r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e01a      	b.n	8003cde <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cbe:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7fd fb19 	bl	80012f8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b08a      	sub	sp, #40	; 0x28
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	607a      	str	r2, [r7, #4]
 8003cf2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_SPI_TransmitReceive+0x26>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e20a      	b.n	8004122 <HAL_SPI_TransmitReceive+0x43c>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d14:	f7fd fde8 	bl	80018e8 <HAL_GetTick>
 8003d18:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d20:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003d28:	887b      	ldrh	r3, [r7, #2]
 8003d2a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003d2c:	887b      	ldrh	r3, [r7, #2]
 8003d2e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d30:	7efb      	ldrb	r3, [r7, #27]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d00e      	beq.n	8003d54 <HAL_SPI_TransmitReceive+0x6e>
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d3c:	d106      	bne.n	8003d4c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d102      	bne.n	8003d4c <HAL_SPI_TransmitReceive+0x66>
 8003d46:	7efb      	ldrb	r3, [r7, #27]
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d003      	beq.n	8003d54 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d52:	e1e0      	b.n	8004116 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d005      	beq.n	8003d66 <HAL_SPI_TransmitReceive+0x80>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_SPI_TransmitReceive+0x80>
 8003d60:	887b      	ldrh	r3, [r7, #2]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d6c:	e1d3      	b.n	8004116 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d003      	beq.n	8003d82 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2205      	movs	r2, #5
 8003d7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	887a      	ldrh	r2, [r7, #2]
 8003d92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	887a      	ldrh	r2, [r7, #2]
 8003d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	887a      	ldrh	r2, [r7, #2]
 8003da8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	887a      	ldrh	r2, [r7, #2]
 8003dae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dc4:	d802      	bhi.n	8003dcc <HAL_SPI_TransmitReceive+0xe6>
 8003dc6:	8a3b      	ldrh	r3, [r7, #16]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d908      	bls.n	8003dde <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dda:	605a      	str	r2, [r3, #4]
 8003ddc:	e007      	b.n	8003dee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d007      	beq.n	8003e0c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e14:	f240 8081 	bls.w	8003f1a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_SPI_TransmitReceive+0x140>
 8003e20:	8a7b      	ldrh	r3, [r7, #18]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d16d      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	881a      	ldrh	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	1c9a      	adds	r2, r3, #2
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e4a:	e05a      	b.n	8003f02 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d11b      	bne.n	8003e92 <HAL_SPI_TransmitReceive+0x1ac>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d016      	beq.n	8003e92 <HAL_SPI_TransmitReceive+0x1ac>
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d113      	bne.n	8003e92 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	881a      	ldrh	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	1c9a      	adds	r2, r3, #2
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d11c      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x1f4>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d016      	beq.n	8003eda <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	b292      	uxth	r2, r2
 8003eb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	1c9a      	adds	r2, r3, #2
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003eda:	f7fd fd05 	bl	80018e8 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d80b      	bhi.n	8003f02 <HAL_SPI_TransmitReceive+0x21c>
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d007      	beq.n	8003f02 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003f00:	e109      	b.n	8004116 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d19f      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x166>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d199      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x166>
 8003f18:	e0e3      	b.n	80040e2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_SPI_TransmitReceive+0x244>
 8003f22:	8a7b      	ldrh	r3, [r7, #18]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	f040 80cf 	bne.w	80040c8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d912      	bls.n	8003f5a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	881a      	ldrh	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	1c9a      	adds	r2, r3, #2
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b02      	subs	r3, #2
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f58:	e0b6      	b.n	80040c8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	330c      	adds	r3, #12
 8003f64:	7812      	ldrb	r2, [r2, #0]
 8003f66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f80:	e0a2      	b.n	80040c8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d134      	bne.n	8003ffa <HAL_SPI_TransmitReceive+0x314>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02f      	beq.n	8003ffa <HAL_SPI_TransmitReceive+0x314>
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d12c      	bne.n	8003ffa <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d912      	bls.n	8003fd0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	881a      	ldrh	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	1c9a      	adds	r2, r3, #2
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b02      	subs	r3, #2
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fce:	e012      	b.n	8003ff6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	330c      	adds	r3, #12
 8003fda:	7812      	ldrb	r2, [r2, #0]
 8003fdc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b01      	cmp	r3, #1
 8004006:	d148      	bne.n	800409a <HAL_SPI_TransmitReceive+0x3b4>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d042      	beq.n	800409a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b01      	cmp	r3, #1
 800401e:	d923      	bls.n	8004068 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	b292      	uxth	r2, r2
 800402c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	1c9a      	adds	r2, r3, #2
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b02      	subs	r3, #2
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d81f      	bhi.n	8004096 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	e016      	b.n	8004096 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f103 020c 	add.w	r2, r3, #12
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	7812      	ldrb	r2, [r2, #0]
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004096:	2301      	movs	r3, #1
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800409a:	f7fd fc25 	bl	80018e8 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d803      	bhi.n	80040b2 <HAL_SPI_TransmitReceive+0x3cc>
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d102      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x3d2>
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d107      	bne.n	80040c8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80040c6:	e026      	b.n	8004116 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f47f af57 	bne.w	8003f82 <HAL_SPI_TransmitReceive+0x29c>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f47f af50 	bne.w	8003f82 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f94c 	bl	8004384 <SPI_EndRxTxTransaction>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800410c:	e003      	b.n	8004116 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800411e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004122:	4618      	mov	r0, r3
 8004124:	3728      	adds	r7, #40	; 0x28
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004138:	b2db      	uxtb	r3, r3
}
 800413a:	4618      	mov	r0, r3
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
	...

08004148 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004158:	f7fd fbc6 	bl	80018e8 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	4413      	add	r3, r2
 8004166:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004168:	f7fd fbbe 	bl	80018e8 <HAL_GetTick>
 800416c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800416e:	4b39      	ldr	r3, [pc, #228]	; (8004254 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	015b      	lsls	r3, r3, #5
 8004174:	0d1b      	lsrs	r3, r3, #20
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	fb02 f303 	mul.w	r3, r2, r3
 800417c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800417e:	e054      	b.n	800422a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d050      	beq.n	800422a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004188:	f7fd fbae 	bl	80018e8 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	429a      	cmp	r2, r3
 8004196:	d902      	bls.n	800419e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d13d      	bne.n	800421a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041b6:	d111      	bne.n	80041dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c0:	d004      	beq.n	80041cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ca:	d107      	bne.n	80041dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e4:	d10f      	bne.n	8004206 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004204:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e017      	b.n	800424a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	3b01      	subs	r3, #1
 8004228:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4013      	ands	r3, r2
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	429a      	cmp	r2, r3
 8004238:	bf0c      	ite	eq
 800423a:	2301      	moveq	r3, #1
 800423c:	2300      	movne	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	429a      	cmp	r2, r3
 8004246:	d19b      	bne.n	8004180 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3720      	adds	r7, #32
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000080 	.word	0x20000080

08004258 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	; 0x28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800426a:	f7fd fb3d 	bl	80018e8 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	4413      	add	r3, r2
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800427a:	f7fd fb35 	bl	80018e8 <HAL_GetTick>
 800427e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	330c      	adds	r3, #12
 8004286:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004288:	4b3d      	ldr	r3, [pc, #244]	; (8004380 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	00da      	lsls	r2, r3, #3
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	0d1b      	lsrs	r3, r3, #20
 8004298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429a:	fb02 f303 	mul.w	r3, r2, r3
 800429e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80042a0:	e060      	b.n	8004364 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042a8:	d107      	bne.n	80042ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d104      	bne.n	80042ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d050      	beq.n	8004364 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042c2:	f7fd fb11 	bl	80018e8 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d902      	bls.n	80042d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d13d      	bne.n	8004354 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f0:	d111      	bne.n	8004316 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fa:	d004      	beq.n	8004306 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004304:	d107      	bne.n	8004316 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004314:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431e:	d10f      	bne.n	8004340 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800433e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e010      	b.n	8004376 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	3b01      	subs	r3, #1
 8004362:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	4013      	ands	r3, r2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	429a      	cmp	r2, r3
 8004372:	d196      	bne.n	80042a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3728      	adds	r7, #40	; 0x28
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000080 	.word	0x20000080

08004384 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af02      	add	r7, sp, #8
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2200      	movs	r2, #0
 8004398:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7ff ff5b 	bl	8004258 <SPI_WaitFifoStateUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d007      	beq.n	80043b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ac:	f043 0220 	orr.w	r2, r3, #32
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e027      	b.n	8004408 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2200      	movs	r2, #0
 80043c0:	2180      	movs	r1, #128	; 0x80
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f7ff fec0 	bl	8004148 <SPI_WaitFlagStateUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d2:	f043 0220 	orr.w	r2, r3, #32
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e014      	b.n	8004408 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f7ff ff34 	bl	8004258 <SPI_WaitFifoStateUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fa:	f043 0220 	orr.w	r2, r3, #32
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e000      	b.n	8004408 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004418:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800441c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	b29b      	uxth	r3, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	b29b      	uxth	r3, r3
 800442e:	4013      	ands	r3, r2
 8004430:	b29a      	uxth	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004446:	b084      	sub	sp, #16
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	f107 0014 	add.w	r0, r7, #20
 8004454:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	b004      	add	sp, #16
 8004486:	4770      	bx	lr

08004488 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8004492:	2300      	movs	r3, #0
 8004494:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8004496:	2300      	movs	r3, #0
 8004498:	703b      	strb	r3, [r7, #0]
 800449a:	2300      	movs	r3, #0
 800449c:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800449e:	4b52      	ldr	r3, [pc, #328]	; (80045e8 <BSP_GYRO_Init+0x160>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	4798      	blx	r3
 80044a4:	4603      	mov	r3, r0
 80044a6:	2bd4      	cmp	r3, #212	; 0xd4
 80044a8:	d005      	beq.n	80044b6 <BSP_GYRO_Init+0x2e>
 80044aa:	4b4f      	ldr	r3, [pc, #316]	; (80045e8 <BSP_GYRO_Init+0x160>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	4798      	blx	r3
 80044b0:	4603      	mov	r3, r0
 80044b2:	2bd5      	cmp	r3, #213	; 0xd5
 80044b4:	d146      	bne.n	8004544 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80044b6:	4b4d      	ldr	r3, [pc, #308]	; (80045ec <BSP_GYRO_Init+0x164>)
 80044b8:	4a4b      	ldr	r2, [pc, #300]	; (80045e8 <BSP_GYRO_Init+0x160>)
 80044ba:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 80044bc:	2308      	movs	r3, #8
 80044be:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 80044c0:	2300      	movs	r3, #0
 80044c2:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 80044c4:	2307      	movs	r3, #7
 80044c6:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 80044c8:	2330      	movs	r3, #48	; 0x30
 80044ca:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80044cc:	2300      	movs	r3, #0
 80044ce:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 80044d0:	2300      	movs	r3, #0
 80044d2:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 80044d4:	2310      	movs	r3, #16
 80044d6:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80044d8:	793a      	ldrb	r2, [r7, #4]
 80044da:	797b      	ldrb	r3, [r7, #5]
 80044dc:	4313      	orrs	r3, r2
 80044de:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80044e0:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80044e2:	4313      	orrs	r3, r2
 80044e4:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80044e6:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80044e8:	4313      	orrs	r3, r2
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80044ee:	7a3a      	ldrb	r2, [r7, #8]
 80044f0:	7a7b      	ldrb	r3, [r7, #9]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80044f6:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80044f8:	4313      	orrs	r3, r2
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	b29a      	uxth	r2, r3
 8004502:	89bb      	ldrh	r3, [r7, #12]
 8004504:	4313      	orrs	r3, r2
 8004506:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8004508:	4b38      	ldr	r3, [pc, #224]	; (80045ec <BSP_GYRO_Init+0x164>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	89ba      	ldrh	r2, [r7, #12]
 8004510:	4610      	mov	r0, r2
 8004512:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8004514:	2300      	movs	r3, #0
 8004516:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8004518:	2300      	movs	r3, #0
 800451a:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800451c:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800451e:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8004520:	4313      	orrs	r3, r2
 8004522:	b2db      	uxtb	r3, r3
 8004524:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8004526:	4b31      	ldr	r3, [pc, #196]	; (80045ec <BSP_GYRO_Init+0x164>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452c:	89ba      	ldrh	r2, [r7, #12]
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	4610      	mov	r0, r2
 8004532:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8004534:	4b2d      	ldr	r3, [pc, #180]	; (80045ec <BSP_GYRO_Init+0x164>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	2010      	movs	r0, #16
 800453c:	4798      	blx	r3

    ret = GYRO_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	73fb      	strb	r3, [r7, #15]
 8004542:	e04b      	b.n	80045dc <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 8004544:	4b2a      	ldr	r3, [pc, #168]	; (80045f0 <BSP_GYRO_Init+0x168>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	4798      	blx	r3
 800454a:	4603      	mov	r3, r0
 800454c:	2bd3      	cmp	r3, #211	; 0xd3
 800454e:	d145      	bne.n	80045dc <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8004550:	4b26      	ldr	r3, [pc, #152]	; (80045ec <BSP_GYRO_Init+0x164>)
 8004552:	4a27      	ldr	r2, [pc, #156]	; (80045f0 <BSP_GYRO_Init+0x168>)
 8004554:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 8004556:	2308      	movs	r3, #8
 8004558:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 800455a:	2300      	movs	r3, #0
 800455c:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 800455e:	2307      	movs	r3, #7
 8004560:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 8004562:	2330      	movs	r3, #48	; 0x30
 8004564:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8004566:	2300      	movs	r3, #0
 8004568:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 800456a:	2300      	movs	r3, #0
 800456c:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 800456e:	2310      	movs	r3, #16
 8004570:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004572:	793a      	ldrb	r2, [r7, #4]
 8004574:	797b      	ldrb	r3, [r7, #5]
 8004576:	4313      	orrs	r3, r2
 8004578:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800457a:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800457c:	4313      	orrs	r3, r2
 800457e:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004580:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004582:	4313      	orrs	r3, r2
 8004584:	b2db      	uxtb	r3, r3
 8004586:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004588:	7a3a      	ldrb	r2, [r7, #8]
 800458a:	7a7b      	ldrb	r3, [r7, #9]
 800458c:	4313      	orrs	r3, r2
 800458e:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8004590:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004592:	4313      	orrs	r3, r2
 8004594:	b2db      	uxtb	r3, r3
 8004596:	b29b      	uxth	r3, r3
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	b29a      	uxth	r2, r3
 800459c:	89bb      	ldrh	r3, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <BSP_GYRO_Init+0x164>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	89ba      	ldrh	r2, [r7, #12]
 80045aa:	4610      	mov	r0, r2
 80045ac:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 80045ae:	2300      	movs	r3, #0
 80045b0:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80045b6:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80045b8:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80045ba:	4313      	orrs	r3, r2
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <BSP_GYRO_Init+0x164>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	89ba      	ldrh	r2, [r7, #12]
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	4610      	mov	r0, r2
 80045cc:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 80045ce:	4b07      	ldr	r3, [pc, #28]	; (80045ec <BSP_GYRO_Init+0x164>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	2010      	movs	r0, #16
 80045d6:	4798      	blx	r3

    ret = GYRO_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	200000c0 	.word	0x200000c0
 80045ec:	20000894 	.word	0x20000894
 80045f0:	2000008c 	.word	0x2000008c

080045f4 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <BSP_GYRO_GetXYZ+0x24>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	2b00      	cmp	r3, #0
 8004604:	d004      	beq.n	8004610 <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8004606:	4b04      	ldr	r3, [pc, #16]	; (8004618 <BSP_GYRO_GetXYZ+0x24>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	4798      	blx	r3
  }
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20000894 	.word	0x20000894

0800461c <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004626:	2300      	movs	r3, #0
 8004628:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 800462a:	f000 fc7f 	bl	8004f2c <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8004634:	f107 030f 	add.w	r3, r7, #15
 8004638:	2201      	movs	r2, #1
 800463a:	2120      	movs	r1, #32
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fcbb 	bl	8004fb8 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8004642:	88fb      	ldrh	r3, [r7, #6]
 8004644:	0a1b      	lsrs	r3, r3, #8
 8004646:	b29b      	uxth	r3, r3
 8004648:	b2db      	uxtb	r3, r3
 800464a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 800464c:	f107 030f 	add.w	r3, r7, #15
 8004650:	2201      	movs	r2, #1
 8004652:	2123      	movs	r1, #35	; 0x23
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fcaf 	bl	8004fb8 <GYRO_IO_Write>
}
 800465a:	bf00      	nop
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8004662:	b480      	push	{r7}
 8004664:	af00      	add	r7, sp, #0
}
 8004666:	bf00      	nop
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8004676:	f000 fc59 	bl	8004f2c <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 800467a:	1dfb      	adds	r3, r7, #7
 800467c:	2201      	movs	r2, #1
 800467e:	210f      	movs	r1, #15
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fccb 	bl	800501c <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8004686:	79fb      	ldrb	r3, [r7, #7]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8004696:	1dfb      	adds	r3, r7, #7
 8004698:	2201      	movs	r2, #1
 800469a:	2124      	movs	r1, #36	; 0x24
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fcbd 	bl	800501c <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80046ac:	1dfb      	adds	r3, r7, #7
 80046ae:	2201      	movs	r2, #1
 80046b0:	2124      	movs	r1, #36	; 0x24
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fc80 	bl	8004fb8 <GYRO_IO_Write>
}
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80046ca:	2300      	movs	r3, #0
 80046cc:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 80046d4:	f107 030f 	add.w	r3, r7, #15
 80046d8:	2201      	movs	r2, #1
 80046da:	2120      	movs	r1, #32
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fc6b 	bl	8004fb8 <GYRO_IO_Write>
}
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	4603      	mov	r3, r0
 80046f2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80046f4:	2300      	movs	r3, #0
 80046f6:	73fb      	strb	r3, [r7, #15]
 80046f8:	2300      	movs	r3, #0
 80046fa:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 80046fc:	f107 030f 	add.w	r3, r7, #15
 8004700:	2201      	movs	r2, #1
 8004702:	2130      	movs	r1, #48	; 0x30
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fc89 	bl	800501c <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800470a:	f107 030e 	add.w	r3, r7, #14
 800470e:	2201      	movs	r2, #1
 8004710:	2122      	movs	r1, #34	; 0x22
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fc82 	bl	800501c <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800471e:	b2db      	uxtb	r3, r3
 8004720:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	121b      	asrs	r3, r3, #8
 8004728:	b25a      	sxtb	r2, r3
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	b25b      	sxtb	r3, r3
 800472e:	4313      	orrs	r3, r2
 8004730:	b25b      	sxtb	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8004736:	7bbb      	ldrb	r3, [r7, #14]
 8004738:	f023 0320 	bic.w	r3, r3, #32
 800473c:	b2db      	uxtb	r3, r3
 800473e:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8004740:	88fb      	ldrh	r3, [r7, #6]
 8004742:	b2da      	uxtb	r2, r3
 8004744:	7bbb      	ldrb	r3, [r7, #14]
 8004746:	4313      	orrs	r3, r2
 8004748:	b2db      	uxtb	r3, r3
 800474a:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800474c:	f107 030f 	add.w	r3, r7, #15
 8004750:	2201      	movs	r2, #1
 8004752:	2130      	movs	r1, #48	; 0x30
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fc2f 	bl	8004fb8 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800475a:	f107 030e 	add.w	r3, r7, #14
 800475e:	2201      	movs	r2, #1
 8004760:	2122      	movs	r1, #34	; 0x22
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fc28 	bl	8004fb8 <GYRO_IO_Write>
}
 8004768:	bf00      	nop
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800477a:	f107 030f 	add.w	r3, r7, #15
 800477e:	2201      	movs	r2, #1
 8004780:	2122      	movs	r1, #34	; 0x22
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fc4a 	bl	800501c <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8004788:	79fb      	ldrb	r3, [r7, #7]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10a      	bne.n	80047a4 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004794:	b2db      	uxtb	r3, r3
 8004796:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	73fb      	strb	r3, [r7, #15]
 80047a2:	e00c      	b.n	80047be <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d109      	bne.n	80047be <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	f023 0308 	bic.w	r3, r3, #8
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	f043 0308 	orr.w	r3, r3, #8
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80047be:	f107 030f 	add.w	r3, r7, #15
 80047c2:	2201      	movs	r2, #1
 80047c4:	2122      	movs	r1, #34	; 0x22
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fbf6 	bl	8004fb8 <GYRO_IO_Write>
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80047de:	f107 030f 	add.w	r3, r7, #15
 80047e2:	2201      	movs	r2, #1
 80047e4:	2122      	movs	r1, #34	; 0x22
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fc18 	bl	800501c <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d107      	bne.n	8004802 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	73fb      	strb	r3, [r7, #15]
 8004800:	e009      	b.n	8004816 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d106      	bne.n	8004816 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	f023 0308 	bic.w	r3, r3, #8
 800480e:	b2db      	uxtb	r3, r3
 8004810:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8004816:	f107 030f 	add.w	r3, r7, #15
 800481a:	2201      	movs	r2, #1
 800481c:	2122      	movs	r1, #34	; 0x22
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fbca 	bl	8004fb8 <GYRO_IO_Write>
}
 8004824:	bf00      	nop
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	4603      	mov	r3, r0
 8004834:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8004836:	f107 030f 	add.w	r3, r7, #15
 800483a:	2201      	movs	r2, #1
 800483c:	2121      	movs	r1, #33	; 0x21
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fbec 	bl	800501c <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800484a:	b2db      	uxtb	r3, r3
 800484c:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800484e:	7bfa      	ldrb	r2, [r7, #15]
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	4313      	orrs	r3, r2
 8004854:	b2db      	uxtb	r3, r3
 8004856:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8004858:	f107 030f 	add.w	r3, r7, #15
 800485c:	2201      	movs	r2, #1
 800485e:	2121      	movs	r1, #33	; 0x21
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fba9 	bl	8004fb8 <GYRO_IO_Write>
}
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	4603      	mov	r3, r0
 8004876:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8004878:	f107 030f 	add.w	r3, r7, #15
 800487c:	2201      	movs	r2, #1
 800487e:	2124      	movs	r1, #36	; 0x24
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fbcb 	bl	800501c <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	f023 0310 	bic.w	r3, r3, #16
 800488c:	b2db      	uxtb	r3, r3
 800488e:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8004890:	7bfa      	ldrb	r2, [r7, #15]
 8004892:	79fb      	ldrb	r3, [r7, #7]
 8004894:	4313      	orrs	r3, r2
 8004896:	b2db      	uxtb	r3, r3
 8004898:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800489a:	f107 030f 	add.w	r3, r7, #15
 800489e:	2201      	movs	r2, #1
 80048a0:	2124      	movs	r1, #36	; 0x24
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fb88 	bl	8004fb8 <GYRO_IO_Write>
}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08a      	sub	sp, #40	; 0x28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 80048b8:	2300      	movs	r3, #0
 80048ba:	61bb      	str	r3, [r7, #24]
 80048bc:	2300      	movs	r3, #0
 80048be:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 80048c0:	f107 0310 	add.w	r3, r7, #16
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 80048d8:	f107 030f 	add.w	r3, r7, #15
 80048dc:	2201      	movs	r2, #1
 80048de:	2123      	movs	r1, #35	; 0x23
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fb9b 	bl	800501c <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 80048e6:	f107 0318 	add.w	r3, r7, #24
 80048ea:	2206      	movs	r2, #6
 80048ec:	2128      	movs	r1, #40	; 0x28
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fb94 	bl	800501c <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d123      	bne.n	8004946 <I3G4250D_ReadXYZAngRate+0x96>
  {
    for (i = 0; i < 3; i++)
 80048fe:	2300      	movs	r3, #0
 8004900:	623b      	str	r3, [r7, #32]
 8004902:	e01c      	b.n	800493e <I3G4250D_ReadXYZAngRate+0x8e>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	3301      	adds	r3, #1
 800490a:	3328      	adds	r3, #40	; 0x28
 800490c:	443b      	add	r3, r7
 800490e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004912:	b29b      	uxth	r3, r3
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	b29a      	uxth	r2, r3
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	3328      	adds	r3, #40	; 0x28
 800491e:	443b      	add	r3, r7
 8004920:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004924:	b29b      	uxth	r3, r3
 8004926:	4413      	add	r3, r2
 8004928:	b29b      	uxth	r3, r3
 800492a:	b21a      	sxth	r2, r3
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	3328      	adds	r3, #40	; 0x28
 8004932:	443b      	add	r3, r7
 8004934:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	3301      	adds	r3, #1
 800493c:	623b      	str	r3, [r7, #32]
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	2b02      	cmp	r3, #2
 8004942:	dddf      	ble.n	8004904 <I3G4250D_ReadXYZAngRate+0x54>
 8004944:	e022      	b.n	800498c <I3G4250D_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 8004946:	2300      	movs	r3, #0
 8004948:	623b      	str	r3, [r7, #32]
 800494a:	e01c      	b.n	8004986 <I3G4250D_ReadXYZAngRate+0xd6>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	3328      	adds	r3, #40	; 0x28
 8004952:	443b      	add	r3, r7
 8004954:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004958:	b29b      	uxth	r3, r3
 800495a:	021b      	lsls	r3, r3, #8
 800495c:	b29a      	uxth	r2, r3
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	3301      	adds	r3, #1
 8004964:	3328      	adds	r3, #40	; 0x28
 8004966:	443b      	add	r3, r7
 8004968:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800496c:	b29b      	uxth	r3, r3
 800496e:	4413      	add	r3, r2
 8004970:	b29b      	uxth	r3, r3
 8004972:	b21a      	sxth	r2, r3
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	3328      	adds	r3, #40	; 0x28
 800497a:	443b      	add	r3, r7
 800497c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	3301      	adds	r3, #1
 8004984:	623b      	str	r3, [r7, #32]
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	2b02      	cmp	r3, #2
 800498a:	dddf      	ble.n	800494c <I3G4250D_ReadXYZAngRate+0x9c>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004992:	2b20      	cmp	r3, #32
 8004994:	d00c      	beq.n	80049b0 <I3G4250D_ReadXYZAngRate+0x100>
 8004996:	2b20      	cmp	r3, #32
 8004998:	dc0d      	bgt.n	80049b6 <I3G4250D_ReadXYZAngRate+0x106>
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <I3G4250D_ReadXYZAngRate+0xf4>
 800499e:	2b10      	cmp	r3, #16
 80049a0:	d003      	beq.n	80049aa <I3G4250D_ReadXYZAngRate+0xfa>
 80049a2:	e008      	b.n	80049b6 <I3G4250D_ReadXYZAngRate+0x106>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 80049a4:	4b15      	ldr	r3, [pc, #84]	; (80049fc <I3G4250D_ReadXYZAngRate+0x14c>)
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80049a8:	e005      	b.n	80049b6 <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 80049aa:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <I3G4250D_ReadXYZAngRate+0x150>)
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80049ae:	e002      	b.n	80049b6 <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 80049b0:	4b14      	ldr	r3, [pc, #80]	; (8004a04 <I3G4250D_ReadXYZAngRate+0x154>)
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80049b4:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 80049b6:	2300      	movs	r3, #0
 80049b8:	623b      	str	r3, [r7, #32]
 80049ba:	e016      	b.n	80049ea <I3G4250D_ReadXYZAngRate+0x13a>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	3328      	adds	r3, #40	; 0x28
 80049c2:	443b      	add	r3, r7
 80049c4:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	4413      	add	r3, r2
 80049d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80049dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	3301      	adds	r3, #1
 80049e8:	623b      	str	r3, [r7, #32]
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	dde5      	ble.n	80049bc <I3G4250D_ReadXYZAngRate+0x10c>
  }
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	3728      	adds	r7, #40	; 0x28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	410c0000 	.word	0x410c0000
 8004a00:	418c0000 	.word	0x418c0000
 8004a04:	428c0000 	.word	0x428c0000

08004a08 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004a12:	2300      	movs	r3, #0
 8004a14:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8004a16:	f000 fa89 	bl	8004f2c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8004a20:	f107 030f 	add.w	r3, r7, #15
 8004a24:	2201      	movs	r2, #1
 8004a26:	2120      	movs	r1, #32
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 fac5 	bl	8004fb8 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8004a2e:	88fb      	ldrh	r3, [r7, #6]
 8004a30:	0a1b      	lsrs	r3, r3, #8
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8004a38:	f107 030f 	add.w	r3, r7, #15
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	2123      	movs	r1, #35	; 0x23
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fab9 	bl	8004fb8 <GYRO_IO_Write>
}
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	af00      	add	r7, sp, #0
}
 8004a52:	bf00      	nop
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8004a62:	f000 fa63 	bl	8004f2c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8004a66:	1dfb      	adds	r3, r7, #7
 8004a68:	2201      	movs	r2, #1
 8004a6a:	210f      	movs	r1, #15
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fad5 	bl	800501c <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8004a72:	79fb      	ldrb	r3, [r7, #7]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004a82:	1dfb      	adds	r3, r7, #7
 8004a84:	2201      	movs	r2, #1
 8004a86:	2124      	movs	r1, #36	; 0x24
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fac7 	bl	800501c <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004a98:	1dfb      	adds	r3, r7, #7
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	2124      	movs	r1, #36	; 0x24
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fa8a 	bl	8004fb8 <GYRO_IO_Write>
}
 8004aa4:	bf00      	nop
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8004ac0:	f107 030f 	add.w	r3, r7, #15
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	2120      	movs	r1, #32
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fa75 	bl	8004fb8 <GYRO_IO_Write>
}
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	4603      	mov	r3, r0
 8004ade:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	73fb      	strb	r3, [r7, #15]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8004ae8:	f107 030f 	add.w	r3, r7, #15
 8004aec:	2201      	movs	r2, #1
 8004aee:	2130      	movs	r1, #48	; 0x30
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fa93 	bl	800501c <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8004af6:	f107 030e 	add.w	r3, r7, #14
 8004afa:	2201      	movs	r2, #1
 8004afc:	2122      	movs	r1, #34	; 0x22
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fa8c 	bl	800501c <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8004b0e:	88fb      	ldrh	r3, [r7, #6]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	121b      	asrs	r3, r3, #8
 8004b14:	b25a      	sxtb	r2, r3
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	b25b      	sxtb	r3, r3
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	b25b      	sxtb	r3, r3
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8004b22:	7bbb      	ldrb	r3, [r7, #14]
 8004b24:	f023 0320 	bic.w	r3, r3, #32
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8004b2c:	88fb      	ldrh	r3, [r7, #6]
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	7bbb      	ldrb	r3, [r7, #14]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8004b38:	f107 030f 	add.w	r3, r7, #15
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	2130      	movs	r1, #48	; 0x30
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fa39 	bl	8004fb8 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8004b46:	f107 030e 	add.w	r3, r7, #14
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	2122      	movs	r1, #34	; 0x22
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fa32 	bl	8004fb8 <GYRO_IO_Write>
}
 8004b54:	bf00      	nop
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004b66:	f107 030f 	add.w	r3, r7, #15
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	2122      	movs	r1, #34	; 0x22
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fa54 	bl	800501c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8004b74:	79fb      	ldrb	r3, [r7, #7]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10a      	bne.n	8004b90 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	73fb      	strb	r3, [r7, #15]
 8004b8e:	e00c      	b.n	8004baa <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d109      	bne.n	8004baa <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	f023 0308 	bic.w	r3, r3, #8
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
 8004ba2:	f043 0308 	orr.w	r3, r3, #8
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004baa:	f107 030f 	add.w	r3, r7, #15
 8004bae:	2201      	movs	r2, #1
 8004bb0:	2122      	movs	r1, #34	; 0x22
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fa00 	bl	8004fb8 <GYRO_IO_Write>
}
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004bca:	f107 030f 	add.w	r3, r7, #15
 8004bce:	2201      	movs	r2, #1
 8004bd0:	2122      	movs	r1, #34	; 0x22
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fa22 	bl	800501c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d107      	bne.n	8004bee <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	73fb      	strb	r3, [r7, #15]
 8004bec:	e009      	b.n	8004c02 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8004bee:	79fb      	ldrb	r3, [r7, #7]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d106      	bne.n	8004c02 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	f023 0308 	bic.w	r3, r3, #8
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
 8004c00:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004c02:	f107 030f 	add.w	r3, r7, #15
 8004c06:	2201      	movs	r2, #1
 8004c08:	2122      	movs	r1, #34	; 0x22
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 f9d4 	bl	8004fb8 <GYRO_IO_Write>
}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8004c22:	f107 030f 	add.w	r3, r7, #15
 8004c26:	2201      	movs	r2, #1
 8004c28:	2121      	movs	r1, #33	; 0x21
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 f9f6 	bl	800501c <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8004c3a:	7bfa      	ldrb	r2, [r7, #15]
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8004c44:	f107 030f 	add.w	r3, r7, #15
 8004c48:	2201      	movs	r2, #1
 8004c4a:	2121      	movs	r1, #33	; 0x21
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 f9b3 	bl	8004fb8 <GYRO_IO_Write>
}
 8004c52:	bf00      	nop
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	4603      	mov	r3, r0
 8004c62:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004c64:	f107 030f 	add.w	r3, r7, #15
 8004c68:	2201      	movs	r2, #1
 8004c6a:	2124      	movs	r1, #36	; 0x24
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 f9d5 	bl	800501c <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	f023 0310 	bic.w	r3, r3, #16
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8004c7c:	7bfa      	ldrb	r2, [r7, #15]
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004c86:	f107 030f 	add.w	r3, r7, #15
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	2124      	movs	r1, #36	; 0x24
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 f992 	bl	8004fb8 <GYRO_IO_Write>
}
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08a      	sub	sp, #40	; 0x28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61bb      	str	r3, [r7, #24]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8004cac:	f107 0310 	add.w	r3, r7, #16
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8004cc4:	f107 030f 	add.w	r3, r7, #15
 8004cc8:	2201      	movs	r2, #1
 8004cca:	2123      	movs	r1, #35	; 0x23
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 f9a5 	bl	800501c <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8004cd2:	f107 0318 	add.w	r3, r7, #24
 8004cd6:	2206      	movs	r2, #6
 8004cd8:	2128      	movs	r1, #40	; 0x28
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 f99e 	bl	800501c <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d123      	bne.n	8004d32 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8004cea:	2300      	movs	r3, #0
 8004cec:	623b      	str	r3, [r7, #32]
 8004cee:	e01c      	b.n	8004d2a <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	3328      	adds	r3, #40	; 0x28
 8004cf8:	443b      	add	r3, r7
 8004cfa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	3328      	adds	r3, #40	; 0x28
 8004d0a:	443b      	add	r3, r7
 8004d0c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	4413      	add	r3, r2
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	b21a      	sxth	r2, r3
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	3328      	adds	r3, #40	; 0x28
 8004d1e:	443b      	add	r3, r7
 8004d20:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	3301      	adds	r3, #1
 8004d28:	623b      	str	r3, [r7, #32]
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	dddf      	ble.n	8004cf0 <L3GD20_ReadXYZAngRate+0x54>
 8004d30:	e022      	b.n	8004d78 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8004d32:	2300      	movs	r3, #0
 8004d34:	623b      	str	r3, [r7, #32]
 8004d36:	e01c      	b.n	8004d72 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	3328      	adds	r3, #40	; 0x28
 8004d3e:	443b      	add	r3, r7
 8004d40:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	3301      	adds	r3, #1
 8004d50:	3328      	adds	r3, #40	; 0x28
 8004d52:	443b      	add	r3, r7
 8004d54:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	b21a      	sxth	r2, r3
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	3328      	adds	r3, #40	; 0x28
 8004d66:	443b      	add	r3, r7
 8004d68:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	623b      	str	r3, [r7, #32]
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	dddf      	ble.n	8004d38 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	d00c      	beq.n	8004d9c <L3GD20_ReadXYZAngRate+0x100>
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	dc0d      	bgt.n	8004da2 <L3GD20_ReadXYZAngRate+0x106>
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <L3GD20_ReadXYZAngRate+0xf4>
 8004d8a:	2b10      	cmp	r3, #16
 8004d8c:	d003      	beq.n	8004d96 <L3GD20_ReadXYZAngRate+0xfa>
 8004d8e:	e008      	b.n	8004da2 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8004d90:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <L3GD20_ReadXYZAngRate+0x14c>)
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8004d94:	e005      	b.n	8004da2 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8004d96:	4b15      	ldr	r3, [pc, #84]	; (8004dec <L3GD20_ReadXYZAngRate+0x150>)
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8004d9a:	e002      	b.n	8004da2 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8004d9c:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <L3GD20_ReadXYZAngRate+0x154>)
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8004da0:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8004da2:	2300      	movs	r3, #0
 8004da4:	623b      	str	r3, [r7, #32]
 8004da6:	e016      	b.n	8004dd6 <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	3328      	adds	r3, #40	; 0x28
 8004dae:	443b      	add	r3, r7
 8004db0:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8004db4:	ee07 3a90 	vmov	s15, r3
 8004db8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dcc:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	623b      	str	r3, [r7, #32]
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	dde5      	ble.n	8004da8 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8004ddc:	bf00      	nop
 8004dde:	bf00      	nop
 8004de0:	3728      	adds	r7, #40	; 0x28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	410c0000 	.word	0x410c0000
 8004dec:	418c0000 	.word	0x418c0000
 8004df0:	428c0000 	.word	0x428c0000

08004df4 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8004df8:	481a      	ldr	r0, [pc, #104]	; (8004e64 <SPIx_Init+0x70>)
 8004dfa:	f7ff f996 	bl	800412a <HAL_SPI_GetState>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d12c      	bne.n	8004e5e <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8004e04:	4b17      	ldr	r3, [pc, #92]	; (8004e64 <SPIx_Init+0x70>)
 8004e06:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <SPIx_Init+0x74>)
 8004e08:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004e0a:	4b16      	ldr	r3, [pc, #88]	; (8004e64 <SPIx_Init+0x70>)
 8004e0c:	2218      	movs	r2, #24
 8004e0e:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 8004e10:	4b14      	ldr	r3, [pc, #80]	; (8004e64 <SPIx_Init+0x70>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e16:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <SPIx_Init+0x70>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e1c:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <SPIx_Init+0x70>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e22:	4b10      	ldr	r3, [pc, #64]	; (8004e64 <SPIx_Init+0x70>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8004e28:	4b0e      	ldr	r3, [pc, #56]	; (8004e64 <SPIx_Init+0x70>)
 8004e2a:	2207      	movs	r2, #7
 8004e2c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <SPIx_Init+0x70>)
 8004e30:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004e34:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e36:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <SPIx_Init+0x70>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8004e3c:	4b09      	ldr	r3, [pc, #36]	; (8004e64 <SPIx_Init+0x70>)
 8004e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e42:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8004e44:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <SPIx_Init+0x70>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8004e4a:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <SPIx_Init+0x70>)
 8004e4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004e50:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8004e52:	4804      	ldr	r0, [pc, #16]	; (8004e64 <SPIx_Init+0x70>)
 8004e54:	f000 f836 	bl	8004ec4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8004e58:	4802      	ldr	r0, [pc, #8]	; (8004e64 <SPIx_Init+0x70>)
 8004e5a:	f7fe fe71 	bl	8003b40 <HAL_SPI_Init>
  }
}
 8004e5e:	bf00      	nop
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000898 	.word	0x20000898
 8004e68:	40013000 	.word	0x40013000

08004e6c <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	4603      	mov	r3, r0
 8004e74:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8004e7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <SPIx_WriteRead+0x38>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f107 020f 	add.w	r2, r7, #15
 8004e82:	1df9      	adds	r1, r7, #7
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	2301      	movs	r3, #1
 8004e88:	4807      	ldr	r0, [pc, #28]	; (8004ea8 <SPIx_WriteRead+0x3c>)
 8004e8a:	f7fe ff2c 	bl	8003ce6 <HAL_SPI_TransmitReceive>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8004e94:	f000 f80a 	bl	8004eac <SPIx_Error>
  }
  
  return receivedbyte;
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	200000f4 	.word	0x200000f4
 8004ea8:	20000898 	.word	0x20000898

08004eac <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8004eb0:	4803      	ldr	r0, [pc, #12]	; (8004ec0 <SPIx_Error+0x14>)
 8004eb2:	f7fe fef0 	bl	8003c96 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8004eb6:	f7ff ff9d 	bl	8004df4 <SPIx_Init>
}
 8004eba:	bf00      	nop
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000898 	.word	0x20000898

08004ec4 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08a      	sub	sp, #40	; 0x28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8004ecc:	4b16      	ldr	r3, [pc, #88]	; (8004f28 <SPIx_MspInit+0x64>)
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	4a15      	ldr	r2, [pc, #84]	; (8004f28 <SPIx_MspInit+0x64>)
 8004ed2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ed6:	6193      	str	r3, [r2, #24]
 8004ed8:	4b13      	ldr	r3, [pc, #76]	; (8004f28 <SPIx_MspInit+0x64>)
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8004ee4:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <SPIx_MspInit+0x64>)
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	4a0f      	ldr	r2, [pc, #60]	; (8004f28 <SPIx_MspInit+0x64>)
 8004eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eee:	6153      	str	r3, [r2, #20]
 8004ef0:	4b0d      	ldr	r3, [pc, #52]	; (8004f28 <SPIx_MspInit+0x64>)
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8004efc:	23e0      	movs	r3, #224	; 0xe0
 8004efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004f00:	2302      	movs	r3, #2
 8004f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8004f04:	2300      	movs	r3, #0
 8004f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8004f0c:	2305      	movs	r3, #5
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8004f10:	f107 0314 	add.w	r3, r7, #20
 8004f14:	4619      	mov	r1, r3
 8004f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f1a:	f7fc fdd7 	bl	8001acc <HAL_GPIO_Init>
}
 8004f1e:	bf00      	nop
 8004f20:	3728      	adds	r7, #40	; 0x28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40021000 	.word	0x40021000

08004f2c <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8004f32:	4b1f      	ldr	r3, [pc, #124]	; (8004fb0 <GYRO_IO_Init+0x84>)
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	4a1e      	ldr	r2, [pc, #120]	; (8004fb0 <GYRO_IO_Init+0x84>)
 8004f38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f3c:	6153      	str	r3, [r2, #20]
 8004f3e:	4b1c      	ldr	r3, [pc, #112]	; (8004fb0 <GYRO_IO_Init+0x84>)
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f46:	60bb      	str	r3, [r7, #8]
 8004f48:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f56:	2303      	movs	r3, #3
 8004f58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8004f5a:	f107 030c 	add.w	r3, r7, #12
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4814      	ldr	r0, [pc, #80]	; (8004fb4 <GYRO_IO_Init+0x88>)
 8004f62:	f7fc fdb3 	bl	8001acc <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8004f66:	2201      	movs	r2, #1
 8004f68:	2108      	movs	r1, #8
 8004f6a:	4812      	ldr	r0, [pc, #72]	; (8004fb4 <GYRO_IO_Init+0x88>)
 8004f6c:	f7fd f804 	bl	8001f78 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8004f70:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <GYRO_IO_Init+0x84>)
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	4a0e      	ldr	r2, [pc, #56]	; (8004fb0 <GYRO_IO_Init+0x84>)
 8004f76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f7a:	6153      	str	r3, [r2, #20]
 8004f7c:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <GYRO_IO_Init+0x84>)
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f84:	607b      	str	r3, [r7, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f90:	2303      	movs	r3, #3
 8004f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004f98:	f107 030c 	add.w	r3, r7, #12
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4805      	ldr	r0, [pc, #20]	; (8004fb4 <GYRO_IO_Init+0x88>)
 8004fa0:	f7fc fd94 	bl	8001acc <HAL_GPIO_Init>
  
  SPIx_Init();
 8004fa4:	f7ff ff26 	bl	8004df4 <SPIx_Init>
}
 8004fa8:	bf00      	nop
 8004faa:	3720      	adds	r7, #32
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	48001000 	.word	0x48001000

08004fb8 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	70fb      	strb	r3, [r7, #3]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8004fc8:	883b      	ldrh	r3, [r7, #0]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d903      	bls.n	8004fd6 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fd4:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	2108      	movs	r1, #8
 8004fda:	480f      	ldr	r0, [pc, #60]	; (8005018 <GYRO_IO_Write+0x60>)
 8004fdc:	f7fc ffcc 	bl	8001f78 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff ff42 	bl	8004e6c <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8004fe8:	e00a      	b.n	8005000 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff ff3c 	bl	8004e6c <SPIx_WriteRead>
    NumByteToWrite--;
 8004ff4:	883b      	ldrh	r3, [r7, #0]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8005000:	883b      	ldrh	r3, [r7, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f1      	bne.n	8004fea <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8005006:	2201      	movs	r2, #1
 8005008:	2108      	movs	r1, #8
 800500a:	4803      	ldr	r0, [pc, #12]	; (8005018 <GYRO_IO_Write+0x60>)
 800500c:	f7fc ffb4 	bl	8001f78 <HAL_GPIO_WritePin>
}
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	48001000 	.word	0x48001000

0800501c <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	70fb      	strb	r3, [r7, #3]
 8005028:	4613      	mov	r3, r2
 800502a:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 800502c:	883b      	ldrh	r3, [r7, #0]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d904      	bls.n	800503c <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8005032:	78fb      	ldrb	r3, [r7, #3]
 8005034:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8005038:	70fb      	strb	r3, [r7, #3]
 800503a:	e003      	b.n	8005044 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005042:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8005044:	2200      	movs	r2, #0
 8005046:	2108      	movs	r1, #8
 8005048:	4810      	ldr	r0, [pc, #64]	; (800508c <GYRO_IO_Read+0x70>)
 800504a:	f7fc ff95 	bl	8001f78 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff ff0b 	bl	8004e6c <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8005056:	e00c      	b.n	8005072 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8005058:	2000      	movs	r0, #0
 800505a:	f7ff ff07 	bl	8004e6c <SPIx_WriteRead>
 800505e:	4603      	mov	r3, r0
 8005060:	461a      	mov	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8005066:	883b      	ldrh	r3, [r7, #0]
 8005068:	3b01      	subs	r3, #1
 800506a:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3301      	adds	r3, #1
 8005070:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8005072:	883b      	ldrh	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1ef      	bne.n	8005058 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8005078:	2201      	movs	r2, #1
 800507a:	2108      	movs	r1, #8
 800507c:	4803      	ldr	r0, [pc, #12]	; (800508c <GYRO_IO_Read+0x70>)
 800507e:	f7fc ff7b 	bl	8001f78 <HAL_GPIO_WritePin>
}  
 8005082:	bf00      	nop
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	48001000 	.word	0x48001000

08005090 <atoi>:
 8005090:	220a      	movs	r2, #10
 8005092:	2100      	movs	r1, #0
 8005094:	f000 b8ee 	b.w	8005274 <strtol>

08005098 <srand>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	4b10      	ldr	r3, [pc, #64]	; (80050dc <srand+0x44>)
 800509c:	681d      	ldr	r5, [r3, #0]
 800509e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80050a0:	4604      	mov	r4, r0
 80050a2:	b9b3      	cbnz	r3, 80050d2 <srand+0x3a>
 80050a4:	2018      	movs	r0, #24
 80050a6:	f000 fb11 	bl	80056cc <malloc>
 80050aa:	4602      	mov	r2, r0
 80050ac:	6328      	str	r0, [r5, #48]	; 0x30
 80050ae:	b920      	cbnz	r0, 80050ba <srand+0x22>
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <srand+0x48>)
 80050b2:	480c      	ldr	r0, [pc, #48]	; (80050e4 <srand+0x4c>)
 80050b4:	2146      	movs	r1, #70	; 0x46
 80050b6:	f000 fa9f 	bl	80055f8 <__assert_func>
 80050ba:	490b      	ldr	r1, [pc, #44]	; (80050e8 <srand+0x50>)
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <srand+0x54>)
 80050be:	e9c0 1300 	strd	r1, r3, [r0]
 80050c2:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <srand+0x58>)
 80050c4:	6083      	str	r3, [r0, #8]
 80050c6:	230b      	movs	r3, #11
 80050c8:	8183      	strh	r3, [r0, #12]
 80050ca:	2100      	movs	r1, #0
 80050cc:	2001      	movs	r0, #1
 80050ce:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80050d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80050d4:	2200      	movs	r2, #0
 80050d6:	611c      	str	r4, [r3, #16]
 80050d8:	615a      	str	r2, [r3, #20]
 80050da:	bd38      	pop	{r3, r4, r5, pc}
 80050dc:	20000150 	.word	0x20000150
 80050e0:	08006fe8 	.word	0x08006fe8
 80050e4:	08006fff 	.word	0x08006fff
 80050e8:	abcd330e 	.word	0xabcd330e
 80050ec:	e66d1234 	.word	0xe66d1234
 80050f0:	0005deec 	.word	0x0005deec

080050f4 <rand>:
 80050f4:	4b16      	ldr	r3, [pc, #88]	; (8005150 <rand+0x5c>)
 80050f6:	b510      	push	{r4, lr}
 80050f8:	681c      	ldr	r4, [r3, #0]
 80050fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050fc:	b9b3      	cbnz	r3, 800512c <rand+0x38>
 80050fe:	2018      	movs	r0, #24
 8005100:	f000 fae4 	bl	80056cc <malloc>
 8005104:	4602      	mov	r2, r0
 8005106:	6320      	str	r0, [r4, #48]	; 0x30
 8005108:	b920      	cbnz	r0, 8005114 <rand+0x20>
 800510a:	4b12      	ldr	r3, [pc, #72]	; (8005154 <rand+0x60>)
 800510c:	4812      	ldr	r0, [pc, #72]	; (8005158 <rand+0x64>)
 800510e:	2152      	movs	r1, #82	; 0x52
 8005110:	f000 fa72 	bl	80055f8 <__assert_func>
 8005114:	4911      	ldr	r1, [pc, #68]	; (800515c <rand+0x68>)
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <rand+0x6c>)
 8005118:	e9c0 1300 	strd	r1, r3, [r0]
 800511c:	4b11      	ldr	r3, [pc, #68]	; (8005164 <rand+0x70>)
 800511e:	6083      	str	r3, [r0, #8]
 8005120:	230b      	movs	r3, #11
 8005122:	8183      	strh	r3, [r0, #12]
 8005124:	2100      	movs	r1, #0
 8005126:	2001      	movs	r0, #1
 8005128:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800512c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800512e:	480e      	ldr	r0, [pc, #56]	; (8005168 <rand+0x74>)
 8005130:	690b      	ldr	r3, [r1, #16]
 8005132:	694c      	ldr	r4, [r1, #20]
 8005134:	4a0d      	ldr	r2, [pc, #52]	; (800516c <rand+0x78>)
 8005136:	4358      	muls	r0, r3
 8005138:	fb02 0004 	mla	r0, r2, r4, r0
 800513c:	fba3 3202 	umull	r3, r2, r3, r2
 8005140:	3301      	adds	r3, #1
 8005142:	eb40 0002 	adc.w	r0, r0, r2
 8005146:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800514a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800514e:	bd10      	pop	{r4, pc}
 8005150:	20000150 	.word	0x20000150
 8005154:	08006fe8 	.word	0x08006fe8
 8005158:	08006fff 	.word	0x08006fff
 800515c:	abcd330e 	.word	0xabcd330e
 8005160:	e66d1234 	.word	0xe66d1234
 8005164:	0005deec 	.word	0x0005deec
 8005168:	5851f42d 	.word	0x5851f42d
 800516c:	4c957f2d 	.word	0x4c957f2d

08005170 <_strtol_l.constprop.0>:
 8005170:	2b01      	cmp	r3, #1
 8005172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005176:	d001      	beq.n	800517c <_strtol_l.constprop.0+0xc>
 8005178:	2b24      	cmp	r3, #36	; 0x24
 800517a:	d906      	bls.n	800518a <_strtol_l.constprop.0+0x1a>
 800517c:	f000 f9f8 	bl	8005570 <__errno>
 8005180:	2316      	movs	r3, #22
 8005182:	6003      	str	r3, [r0, #0]
 8005184:	2000      	movs	r0, #0
 8005186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800518a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005270 <_strtol_l.constprop.0+0x100>
 800518e:	460d      	mov	r5, r1
 8005190:	462e      	mov	r6, r5
 8005192:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005196:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800519a:	f017 0708 	ands.w	r7, r7, #8
 800519e:	d1f7      	bne.n	8005190 <_strtol_l.constprop.0+0x20>
 80051a0:	2c2d      	cmp	r4, #45	; 0x2d
 80051a2:	d132      	bne.n	800520a <_strtol_l.constprop.0+0x9a>
 80051a4:	782c      	ldrb	r4, [r5, #0]
 80051a6:	2701      	movs	r7, #1
 80051a8:	1cb5      	adds	r5, r6, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d05b      	beq.n	8005266 <_strtol_l.constprop.0+0xf6>
 80051ae:	2b10      	cmp	r3, #16
 80051b0:	d109      	bne.n	80051c6 <_strtol_l.constprop.0+0x56>
 80051b2:	2c30      	cmp	r4, #48	; 0x30
 80051b4:	d107      	bne.n	80051c6 <_strtol_l.constprop.0+0x56>
 80051b6:	782c      	ldrb	r4, [r5, #0]
 80051b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80051bc:	2c58      	cmp	r4, #88	; 0x58
 80051be:	d14d      	bne.n	800525c <_strtol_l.constprop.0+0xec>
 80051c0:	786c      	ldrb	r4, [r5, #1]
 80051c2:	2310      	movs	r3, #16
 80051c4:	3502      	adds	r5, #2
 80051c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80051ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80051ce:	f04f 0e00 	mov.w	lr, #0
 80051d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80051d6:	4676      	mov	r6, lr
 80051d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80051dc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80051e0:	f1bc 0f09 	cmp.w	ip, #9
 80051e4:	d816      	bhi.n	8005214 <_strtol_l.constprop.0+0xa4>
 80051e6:	4664      	mov	r4, ip
 80051e8:	42a3      	cmp	r3, r4
 80051ea:	dd24      	ble.n	8005236 <_strtol_l.constprop.0+0xc6>
 80051ec:	f1be 3fff 	cmp.w	lr, #4294967295
 80051f0:	d008      	beq.n	8005204 <_strtol_l.constprop.0+0x94>
 80051f2:	45b1      	cmp	r9, r6
 80051f4:	d31c      	bcc.n	8005230 <_strtol_l.constprop.0+0xc0>
 80051f6:	d101      	bne.n	80051fc <_strtol_l.constprop.0+0x8c>
 80051f8:	45a2      	cmp	sl, r4
 80051fa:	db19      	blt.n	8005230 <_strtol_l.constprop.0+0xc0>
 80051fc:	fb06 4603 	mla	r6, r6, r3, r4
 8005200:	f04f 0e01 	mov.w	lr, #1
 8005204:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005208:	e7e8      	b.n	80051dc <_strtol_l.constprop.0+0x6c>
 800520a:	2c2b      	cmp	r4, #43	; 0x2b
 800520c:	bf04      	itt	eq
 800520e:	782c      	ldrbeq	r4, [r5, #0]
 8005210:	1cb5      	addeq	r5, r6, #2
 8005212:	e7ca      	b.n	80051aa <_strtol_l.constprop.0+0x3a>
 8005214:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005218:	f1bc 0f19 	cmp.w	ip, #25
 800521c:	d801      	bhi.n	8005222 <_strtol_l.constprop.0+0xb2>
 800521e:	3c37      	subs	r4, #55	; 0x37
 8005220:	e7e2      	b.n	80051e8 <_strtol_l.constprop.0+0x78>
 8005222:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005226:	f1bc 0f19 	cmp.w	ip, #25
 800522a:	d804      	bhi.n	8005236 <_strtol_l.constprop.0+0xc6>
 800522c:	3c57      	subs	r4, #87	; 0x57
 800522e:	e7db      	b.n	80051e8 <_strtol_l.constprop.0+0x78>
 8005230:	f04f 3eff 	mov.w	lr, #4294967295
 8005234:	e7e6      	b.n	8005204 <_strtol_l.constprop.0+0x94>
 8005236:	f1be 3fff 	cmp.w	lr, #4294967295
 800523a:	d105      	bne.n	8005248 <_strtol_l.constprop.0+0xd8>
 800523c:	2322      	movs	r3, #34	; 0x22
 800523e:	6003      	str	r3, [r0, #0]
 8005240:	4646      	mov	r6, r8
 8005242:	b942      	cbnz	r2, 8005256 <_strtol_l.constprop.0+0xe6>
 8005244:	4630      	mov	r0, r6
 8005246:	e79e      	b.n	8005186 <_strtol_l.constprop.0+0x16>
 8005248:	b107      	cbz	r7, 800524c <_strtol_l.constprop.0+0xdc>
 800524a:	4276      	negs	r6, r6
 800524c:	2a00      	cmp	r2, #0
 800524e:	d0f9      	beq.n	8005244 <_strtol_l.constprop.0+0xd4>
 8005250:	f1be 0f00 	cmp.w	lr, #0
 8005254:	d000      	beq.n	8005258 <_strtol_l.constprop.0+0xe8>
 8005256:	1e69      	subs	r1, r5, #1
 8005258:	6011      	str	r1, [r2, #0]
 800525a:	e7f3      	b.n	8005244 <_strtol_l.constprop.0+0xd4>
 800525c:	2430      	movs	r4, #48	; 0x30
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1b1      	bne.n	80051c6 <_strtol_l.constprop.0+0x56>
 8005262:	2308      	movs	r3, #8
 8005264:	e7af      	b.n	80051c6 <_strtol_l.constprop.0+0x56>
 8005266:	2c30      	cmp	r4, #48	; 0x30
 8005268:	d0a5      	beq.n	80051b6 <_strtol_l.constprop.0+0x46>
 800526a:	230a      	movs	r3, #10
 800526c:	e7ab      	b.n	80051c6 <_strtol_l.constprop.0+0x56>
 800526e:	bf00      	nop
 8005270:	08007058 	.word	0x08007058

08005274 <strtol>:
 8005274:	4613      	mov	r3, r2
 8005276:	460a      	mov	r2, r1
 8005278:	4601      	mov	r1, r0
 800527a:	4802      	ldr	r0, [pc, #8]	; (8005284 <strtol+0x10>)
 800527c:	6800      	ldr	r0, [r0, #0]
 800527e:	f7ff bf77 	b.w	8005170 <_strtol_l.constprop.0>
 8005282:	bf00      	nop
 8005284:	20000150 	.word	0x20000150

08005288 <std>:
 8005288:	2300      	movs	r3, #0
 800528a:	b510      	push	{r4, lr}
 800528c:	4604      	mov	r4, r0
 800528e:	e9c0 3300 	strd	r3, r3, [r0]
 8005292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005296:	6083      	str	r3, [r0, #8]
 8005298:	8181      	strh	r1, [r0, #12]
 800529a:	6643      	str	r3, [r0, #100]	; 0x64
 800529c:	81c2      	strh	r2, [r0, #14]
 800529e:	6183      	str	r3, [r0, #24]
 80052a0:	4619      	mov	r1, r3
 80052a2:	2208      	movs	r2, #8
 80052a4:	305c      	adds	r0, #92	; 0x5c
 80052a6:	f000 f914 	bl	80054d2 <memset>
 80052aa:	4b0d      	ldr	r3, [pc, #52]	; (80052e0 <std+0x58>)
 80052ac:	6263      	str	r3, [r4, #36]	; 0x24
 80052ae:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <std+0x5c>)
 80052b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80052b2:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <std+0x60>)
 80052b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052b6:	4b0d      	ldr	r3, [pc, #52]	; (80052ec <std+0x64>)
 80052b8:	6323      	str	r3, [r4, #48]	; 0x30
 80052ba:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <std+0x68>)
 80052bc:	6224      	str	r4, [r4, #32]
 80052be:	429c      	cmp	r4, r3
 80052c0:	d006      	beq.n	80052d0 <std+0x48>
 80052c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80052c6:	4294      	cmp	r4, r2
 80052c8:	d002      	beq.n	80052d0 <std+0x48>
 80052ca:	33d0      	adds	r3, #208	; 0xd0
 80052cc:	429c      	cmp	r4, r3
 80052ce:	d105      	bne.n	80052dc <std+0x54>
 80052d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d8:	f000 b974 	b.w	80055c4 <__retarget_lock_init_recursive>
 80052dc:	bd10      	pop	{r4, pc}
 80052de:	bf00      	nop
 80052e0:	0800544d 	.word	0x0800544d
 80052e4:	0800546f 	.word	0x0800546f
 80052e8:	080054a7 	.word	0x080054a7
 80052ec:	080054cb 	.word	0x080054cb
 80052f0:	200008fc 	.word	0x200008fc

080052f4 <stdio_exit_handler>:
 80052f4:	4a02      	ldr	r2, [pc, #8]	; (8005300 <stdio_exit_handler+0xc>)
 80052f6:	4903      	ldr	r1, [pc, #12]	; (8005304 <stdio_exit_handler+0x10>)
 80052f8:	4803      	ldr	r0, [pc, #12]	; (8005308 <stdio_exit_handler+0x14>)
 80052fa:	f000 b869 	b.w	80053d0 <_fwalk_sglue>
 80052fe:	bf00      	nop
 8005300:	200000f8 	.word	0x200000f8
 8005304:	08005f11 	.word	0x08005f11
 8005308:	20000104 	.word	0x20000104

0800530c <cleanup_stdio>:
 800530c:	6841      	ldr	r1, [r0, #4]
 800530e:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <cleanup_stdio+0x34>)
 8005310:	4299      	cmp	r1, r3
 8005312:	b510      	push	{r4, lr}
 8005314:	4604      	mov	r4, r0
 8005316:	d001      	beq.n	800531c <cleanup_stdio+0x10>
 8005318:	f000 fdfa 	bl	8005f10 <_fflush_r>
 800531c:	68a1      	ldr	r1, [r4, #8]
 800531e:	4b09      	ldr	r3, [pc, #36]	; (8005344 <cleanup_stdio+0x38>)
 8005320:	4299      	cmp	r1, r3
 8005322:	d002      	beq.n	800532a <cleanup_stdio+0x1e>
 8005324:	4620      	mov	r0, r4
 8005326:	f000 fdf3 	bl	8005f10 <_fflush_r>
 800532a:	68e1      	ldr	r1, [r4, #12]
 800532c:	4b06      	ldr	r3, [pc, #24]	; (8005348 <cleanup_stdio+0x3c>)
 800532e:	4299      	cmp	r1, r3
 8005330:	d004      	beq.n	800533c <cleanup_stdio+0x30>
 8005332:	4620      	mov	r0, r4
 8005334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005338:	f000 bdea 	b.w	8005f10 <_fflush_r>
 800533c:	bd10      	pop	{r4, pc}
 800533e:	bf00      	nop
 8005340:	200008fc 	.word	0x200008fc
 8005344:	20000964 	.word	0x20000964
 8005348:	200009cc 	.word	0x200009cc

0800534c <global_stdio_init.part.0>:
 800534c:	b510      	push	{r4, lr}
 800534e:	4b0b      	ldr	r3, [pc, #44]	; (800537c <global_stdio_init.part.0+0x30>)
 8005350:	4c0b      	ldr	r4, [pc, #44]	; (8005380 <global_stdio_init.part.0+0x34>)
 8005352:	4a0c      	ldr	r2, [pc, #48]	; (8005384 <global_stdio_init.part.0+0x38>)
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	4620      	mov	r0, r4
 8005358:	2200      	movs	r2, #0
 800535a:	2104      	movs	r1, #4
 800535c:	f7ff ff94 	bl	8005288 <std>
 8005360:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005364:	2201      	movs	r2, #1
 8005366:	2109      	movs	r1, #9
 8005368:	f7ff ff8e 	bl	8005288 <std>
 800536c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005370:	2202      	movs	r2, #2
 8005372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005376:	2112      	movs	r1, #18
 8005378:	f7ff bf86 	b.w	8005288 <std>
 800537c:	20000a34 	.word	0x20000a34
 8005380:	200008fc 	.word	0x200008fc
 8005384:	080052f5 	.word	0x080052f5

08005388 <__sfp_lock_acquire>:
 8005388:	4801      	ldr	r0, [pc, #4]	; (8005390 <__sfp_lock_acquire+0x8>)
 800538a:	f000 b91c 	b.w	80055c6 <__retarget_lock_acquire_recursive>
 800538e:	bf00      	nop
 8005390:	20000a3d 	.word	0x20000a3d

08005394 <__sfp_lock_release>:
 8005394:	4801      	ldr	r0, [pc, #4]	; (800539c <__sfp_lock_release+0x8>)
 8005396:	f000 b917 	b.w	80055c8 <__retarget_lock_release_recursive>
 800539a:	bf00      	nop
 800539c:	20000a3d 	.word	0x20000a3d

080053a0 <__sinit>:
 80053a0:	b510      	push	{r4, lr}
 80053a2:	4604      	mov	r4, r0
 80053a4:	f7ff fff0 	bl	8005388 <__sfp_lock_acquire>
 80053a8:	6a23      	ldr	r3, [r4, #32]
 80053aa:	b11b      	cbz	r3, 80053b4 <__sinit+0x14>
 80053ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b0:	f7ff bff0 	b.w	8005394 <__sfp_lock_release>
 80053b4:	4b04      	ldr	r3, [pc, #16]	; (80053c8 <__sinit+0x28>)
 80053b6:	6223      	str	r3, [r4, #32]
 80053b8:	4b04      	ldr	r3, [pc, #16]	; (80053cc <__sinit+0x2c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1f5      	bne.n	80053ac <__sinit+0xc>
 80053c0:	f7ff ffc4 	bl	800534c <global_stdio_init.part.0>
 80053c4:	e7f2      	b.n	80053ac <__sinit+0xc>
 80053c6:	bf00      	nop
 80053c8:	0800530d 	.word	0x0800530d
 80053cc:	20000a34 	.word	0x20000a34

080053d0 <_fwalk_sglue>:
 80053d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053d4:	4607      	mov	r7, r0
 80053d6:	4688      	mov	r8, r1
 80053d8:	4614      	mov	r4, r2
 80053da:	2600      	movs	r6, #0
 80053dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053e0:	f1b9 0901 	subs.w	r9, r9, #1
 80053e4:	d505      	bpl.n	80053f2 <_fwalk_sglue+0x22>
 80053e6:	6824      	ldr	r4, [r4, #0]
 80053e8:	2c00      	cmp	r4, #0
 80053ea:	d1f7      	bne.n	80053dc <_fwalk_sglue+0xc>
 80053ec:	4630      	mov	r0, r6
 80053ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053f2:	89ab      	ldrh	r3, [r5, #12]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d907      	bls.n	8005408 <_fwalk_sglue+0x38>
 80053f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053fc:	3301      	adds	r3, #1
 80053fe:	d003      	beq.n	8005408 <_fwalk_sglue+0x38>
 8005400:	4629      	mov	r1, r5
 8005402:	4638      	mov	r0, r7
 8005404:	47c0      	blx	r8
 8005406:	4306      	orrs	r6, r0
 8005408:	3568      	adds	r5, #104	; 0x68
 800540a:	e7e9      	b.n	80053e0 <_fwalk_sglue+0x10>

0800540c <siprintf>:
 800540c:	b40e      	push	{r1, r2, r3}
 800540e:	b500      	push	{lr}
 8005410:	b09c      	sub	sp, #112	; 0x70
 8005412:	ab1d      	add	r3, sp, #116	; 0x74
 8005414:	9002      	str	r0, [sp, #8]
 8005416:	9006      	str	r0, [sp, #24]
 8005418:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800541c:	4809      	ldr	r0, [pc, #36]	; (8005444 <siprintf+0x38>)
 800541e:	9107      	str	r1, [sp, #28]
 8005420:	9104      	str	r1, [sp, #16]
 8005422:	4909      	ldr	r1, [pc, #36]	; (8005448 <siprintf+0x3c>)
 8005424:	f853 2b04 	ldr.w	r2, [r3], #4
 8005428:	9105      	str	r1, [sp, #20]
 800542a:	6800      	ldr	r0, [r0, #0]
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	a902      	add	r1, sp, #8
 8005430:	f000 fa5a 	bl	80058e8 <_svfiprintf_r>
 8005434:	9b02      	ldr	r3, [sp, #8]
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	b01c      	add	sp, #112	; 0x70
 800543c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005440:	b003      	add	sp, #12
 8005442:	4770      	bx	lr
 8005444:	20000150 	.word	0x20000150
 8005448:	ffff0208 	.word	0xffff0208

0800544c <__sread>:
 800544c:	b510      	push	{r4, lr}
 800544e:	460c      	mov	r4, r1
 8005450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005454:	f000 f868 	bl	8005528 <_read_r>
 8005458:	2800      	cmp	r0, #0
 800545a:	bfab      	itete	ge
 800545c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800545e:	89a3      	ldrhlt	r3, [r4, #12]
 8005460:	181b      	addge	r3, r3, r0
 8005462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005466:	bfac      	ite	ge
 8005468:	6563      	strge	r3, [r4, #84]	; 0x54
 800546a:	81a3      	strhlt	r3, [r4, #12]
 800546c:	bd10      	pop	{r4, pc}

0800546e <__swrite>:
 800546e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005472:	461f      	mov	r7, r3
 8005474:	898b      	ldrh	r3, [r1, #12]
 8005476:	05db      	lsls	r3, r3, #23
 8005478:	4605      	mov	r5, r0
 800547a:	460c      	mov	r4, r1
 800547c:	4616      	mov	r6, r2
 800547e:	d505      	bpl.n	800548c <__swrite+0x1e>
 8005480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005484:	2302      	movs	r3, #2
 8005486:	2200      	movs	r2, #0
 8005488:	f000 f83c 	bl	8005504 <_lseek_r>
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005496:	81a3      	strh	r3, [r4, #12]
 8005498:	4632      	mov	r2, r6
 800549a:	463b      	mov	r3, r7
 800549c:	4628      	mov	r0, r5
 800549e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054a2:	f000 b853 	b.w	800554c <_write_r>

080054a6 <__sseek>:
 80054a6:	b510      	push	{r4, lr}
 80054a8:	460c      	mov	r4, r1
 80054aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ae:	f000 f829 	bl	8005504 <_lseek_r>
 80054b2:	1c43      	adds	r3, r0, #1
 80054b4:	89a3      	ldrh	r3, [r4, #12]
 80054b6:	bf15      	itete	ne
 80054b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80054ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054c2:	81a3      	strheq	r3, [r4, #12]
 80054c4:	bf18      	it	ne
 80054c6:	81a3      	strhne	r3, [r4, #12]
 80054c8:	bd10      	pop	{r4, pc}

080054ca <__sclose>:
 80054ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ce:	f000 b809 	b.w	80054e4 <_close_r>

080054d2 <memset>:
 80054d2:	4402      	add	r2, r0
 80054d4:	4603      	mov	r3, r0
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d100      	bne.n	80054dc <memset+0xa>
 80054da:	4770      	bx	lr
 80054dc:	f803 1b01 	strb.w	r1, [r3], #1
 80054e0:	e7f9      	b.n	80054d6 <memset+0x4>
	...

080054e4 <_close_r>:
 80054e4:	b538      	push	{r3, r4, r5, lr}
 80054e6:	4d06      	ldr	r5, [pc, #24]	; (8005500 <_close_r+0x1c>)
 80054e8:	2300      	movs	r3, #0
 80054ea:	4604      	mov	r4, r0
 80054ec:	4608      	mov	r0, r1
 80054ee:	602b      	str	r3, [r5, #0]
 80054f0:	f7fb ffe7 	bl	80014c2 <_close>
 80054f4:	1c43      	adds	r3, r0, #1
 80054f6:	d102      	bne.n	80054fe <_close_r+0x1a>
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	b103      	cbz	r3, 80054fe <_close_r+0x1a>
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	20000a38 	.word	0x20000a38

08005504 <_lseek_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	4d07      	ldr	r5, [pc, #28]	; (8005524 <_lseek_r+0x20>)
 8005508:	4604      	mov	r4, r0
 800550a:	4608      	mov	r0, r1
 800550c:	4611      	mov	r1, r2
 800550e:	2200      	movs	r2, #0
 8005510:	602a      	str	r2, [r5, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	f7fb fffc 	bl	8001510 <_lseek>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d102      	bne.n	8005522 <_lseek_r+0x1e>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	b103      	cbz	r3, 8005522 <_lseek_r+0x1e>
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	bd38      	pop	{r3, r4, r5, pc}
 8005524:	20000a38 	.word	0x20000a38

08005528 <_read_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	4d07      	ldr	r5, [pc, #28]	; (8005548 <_read_r+0x20>)
 800552c:	4604      	mov	r4, r0
 800552e:	4608      	mov	r0, r1
 8005530:	4611      	mov	r1, r2
 8005532:	2200      	movs	r2, #0
 8005534:	602a      	str	r2, [r5, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	f7fb ff8a 	bl	8001450 <_read>
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	d102      	bne.n	8005546 <_read_r+0x1e>
 8005540:	682b      	ldr	r3, [r5, #0]
 8005542:	b103      	cbz	r3, 8005546 <_read_r+0x1e>
 8005544:	6023      	str	r3, [r4, #0]
 8005546:	bd38      	pop	{r3, r4, r5, pc}
 8005548:	20000a38 	.word	0x20000a38

0800554c <_write_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4d07      	ldr	r5, [pc, #28]	; (800556c <_write_r+0x20>)
 8005550:	4604      	mov	r4, r0
 8005552:	4608      	mov	r0, r1
 8005554:	4611      	mov	r1, r2
 8005556:	2200      	movs	r2, #0
 8005558:	602a      	str	r2, [r5, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	f7fb ff95 	bl	800148a <_write>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_write_r+0x1e>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	b103      	cbz	r3, 800556a <_write_r+0x1e>
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	20000a38 	.word	0x20000a38

08005570 <__errno>:
 8005570:	4b01      	ldr	r3, [pc, #4]	; (8005578 <__errno+0x8>)
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000150 	.word	0x20000150

0800557c <__libc_init_array>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	4d0d      	ldr	r5, [pc, #52]	; (80055b4 <__libc_init_array+0x38>)
 8005580:	4c0d      	ldr	r4, [pc, #52]	; (80055b8 <__libc_init_array+0x3c>)
 8005582:	1b64      	subs	r4, r4, r5
 8005584:	10a4      	asrs	r4, r4, #2
 8005586:	2600      	movs	r6, #0
 8005588:	42a6      	cmp	r6, r4
 800558a:	d109      	bne.n	80055a0 <__libc_init_array+0x24>
 800558c:	4d0b      	ldr	r5, [pc, #44]	; (80055bc <__libc_init_array+0x40>)
 800558e:	4c0c      	ldr	r4, [pc, #48]	; (80055c0 <__libc_init_array+0x44>)
 8005590:	f001 f802 	bl	8006598 <_init>
 8005594:	1b64      	subs	r4, r4, r5
 8005596:	10a4      	asrs	r4, r4, #2
 8005598:	2600      	movs	r6, #0
 800559a:	42a6      	cmp	r6, r4
 800559c:	d105      	bne.n	80055aa <__libc_init_array+0x2e>
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a4:	4798      	blx	r3
 80055a6:	3601      	adds	r6, #1
 80055a8:	e7ee      	b.n	8005588 <__libc_init_array+0xc>
 80055aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ae:	4798      	blx	r3
 80055b0:	3601      	adds	r6, #1
 80055b2:	e7f2      	b.n	800559a <__libc_init_array+0x1e>
 80055b4:	080071c8 	.word	0x080071c8
 80055b8:	080071c8 	.word	0x080071c8
 80055bc:	080071c8 	.word	0x080071c8
 80055c0:	080071cc 	.word	0x080071cc

080055c4 <__retarget_lock_init_recursive>:
 80055c4:	4770      	bx	lr

080055c6 <__retarget_lock_acquire_recursive>:
 80055c6:	4770      	bx	lr

080055c8 <__retarget_lock_release_recursive>:
 80055c8:	4770      	bx	lr

080055ca <strcpy>:
 80055ca:	4603      	mov	r3, r0
 80055cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055d0:	f803 2b01 	strb.w	r2, [r3], #1
 80055d4:	2a00      	cmp	r2, #0
 80055d6:	d1f9      	bne.n	80055cc <strcpy+0x2>
 80055d8:	4770      	bx	lr

080055da <memcpy>:
 80055da:	440a      	add	r2, r1
 80055dc:	4291      	cmp	r1, r2
 80055de:	f100 33ff 	add.w	r3, r0, #4294967295
 80055e2:	d100      	bne.n	80055e6 <memcpy+0xc>
 80055e4:	4770      	bx	lr
 80055e6:	b510      	push	{r4, lr}
 80055e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055f0:	4291      	cmp	r1, r2
 80055f2:	d1f9      	bne.n	80055e8 <memcpy+0xe>
 80055f4:	bd10      	pop	{r4, pc}
	...

080055f8 <__assert_func>:
 80055f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055fa:	4614      	mov	r4, r2
 80055fc:	461a      	mov	r2, r3
 80055fe:	4b09      	ldr	r3, [pc, #36]	; (8005624 <__assert_func+0x2c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4605      	mov	r5, r0
 8005604:	68d8      	ldr	r0, [r3, #12]
 8005606:	b14c      	cbz	r4, 800561c <__assert_func+0x24>
 8005608:	4b07      	ldr	r3, [pc, #28]	; (8005628 <__assert_func+0x30>)
 800560a:	9100      	str	r1, [sp, #0]
 800560c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005610:	4906      	ldr	r1, [pc, #24]	; (800562c <__assert_func+0x34>)
 8005612:	462b      	mov	r3, r5
 8005614:	f000 fca4 	bl	8005f60 <fiprintf>
 8005618:	f000 fcde 	bl	8005fd8 <abort>
 800561c:	4b04      	ldr	r3, [pc, #16]	; (8005630 <__assert_func+0x38>)
 800561e:	461c      	mov	r4, r3
 8005620:	e7f3      	b.n	800560a <__assert_func+0x12>
 8005622:	bf00      	nop
 8005624:	20000150 	.word	0x20000150
 8005628:	08007158 	.word	0x08007158
 800562c:	08007165 	.word	0x08007165
 8005630:	08007193 	.word	0x08007193

08005634 <_free_r>:
 8005634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005636:	2900      	cmp	r1, #0
 8005638:	d044      	beq.n	80056c4 <_free_r+0x90>
 800563a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800563e:	9001      	str	r0, [sp, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	f1a1 0404 	sub.w	r4, r1, #4
 8005646:	bfb8      	it	lt
 8005648:	18e4      	addlt	r4, r4, r3
 800564a:	f000 f8e7 	bl	800581c <__malloc_lock>
 800564e:	4a1e      	ldr	r2, [pc, #120]	; (80056c8 <_free_r+0x94>)
 8005650:	9801      	ldr	r0, [sp, #4]
 8005652:	6813      	ldr	r3, [r2, #0]
 8005654:	b933      	cbnz	r3, 8005664 <_free_r+0x30>
 8005656:	6063      	str	r3, [r4, #4]
 8005658:	6014      	str	r4, [r2, #0]
 800565a:	b003      	add	sp, #12
 800565c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005660:	f000 b8e2 	b.w	8005828 <__malloc_unlock>
 8005664:	42a3      	cmp	r3, r4
 8005666:	d908      	bls.n	800567a <_free_r+0x46>
 8005668:	6825      	ldr	r5, [r4, #0]
 800566a:	1961      	adds	r1, r4, r5
 800566c:	428b      	cmp	r3, r1
 800566e:	bf01      	itttt	eq
 8005670:	6819      	ldreq	r1, [r3, #0]
 8005672:	685b      	ldreq	r3, [r3, #4]
 8005674:	1949      	addeq	r1, r1, r5
 8005676:	6021      	streq	r1, [r4, #0]
 8005678:	e7ed      	b.n	8005656 <_free_r+0x22>
 800567a:	461a      	mov	r2, r3
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	b10b      	cbz	r3, 8005684 <_free_r+0x50>
 8005680:	42a3      	cmp	r3, r4
 8005682:	d9fa      	bls.n	800567a <_free_r+0x46>
 8005684:	6811      	ldr	r1, [r2, #0]
 8005686:	1855      	adds	r5, r2, r1
 8005688:	42a5      	cmp	r5, r4
 800568a:	d10b      	bne.n	80056a4 <_free_r+0x70>
 800568c:	6824      	ldr	r4, [r4, #0]
 800568e:	4421      	add	r1, r4
 8005690:	1854      	adds	r4, r2, r1
 8005692:	42a3      	cmp	r3, r4
 8005694:	6011      	str	r1, [r2, #0]
 8005696:	d1e0      	bne.n	800565a <_free_r+0x26>
 8005698:	681c      	ldr	r4, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	6053      	str	r3, [r2, #4]
 800569e:	440c      	add	r4, r1
 80056a0:	6014      	str	r4, [r2, #0]
 80056a2:	e7da      	b.n	800565a <_free_r+0x26>
 80056a4:	d902      	bls.n	80056ac <_free_r+0x78>
 80056a6:	230c      	movs	r3, #12
 80056a8:	6003      	str	r3, [r0, #0]
 80056aa:	e7d6      	b.n	800565a <_free_r+0x26>
 80056ac:	6825      	ldr	r5, [r4, #0]
 80056ae:	1961      	adds	r1, r4, r5
 80056b0:	428b      	cmp	r3, r1
 80056b2:	bf04      	itt	eq
 80056b4:	6819      	ldreq	r1, [r3, #0]
 80056b6:	685b      	ldreq	r3, [r3, #4]
 80056b8:	6063      	str	r3, [r4, #4]
 80056ba:	bf04      	itt	eq
 80056bc:	1949      	addeq	r1, r1, r5
 80056be:	6021      	streq	r1, [r4, #0]
 80056c0:	6054      	str	r4, [r2, #4]
 80056c2:	e7ca      	b.n	800565a <_free_r+0x26>
 80056c4:	b003      	add	sp, #12
 80056c6:	bd30      	pop	{r4, r5, pc}
 80056c8:	20000a40 	.word	0x20000a40

080056cc <malloc>:
 80056cc:	4b02      	ldr	r3, [pc, #8]	; (80056d8 <malloc+0xc>)
 80056ce:	4601      	mov	r1, r0
 80056d0:	6818      	ldr	r0, [r3, #0]
 80056d2:	f000 b823 	b.w	800571c <_malloc_r>
 80056d6:	bf00      	nop
 80056d8:	20000150 	.word	0x20000150

080056dc <sbrk_aligned>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	4e0e      	ldr	r6, [pc, #56]	; (8005718 <sbrk_aligned+0x3c>)
 80056e0:	460c      	mov	r4, r1
 80056e2:	6831      	ldr	r1, [r6, #0]
 80056e4:	4605      	mov	r5, r0
 80056e6:	b911      	cbnz	r1, 80056ee <sbrk_aligned+0x12>
 80056e8:	f000 fc66 	bl	8005fb8 <_sbrk_r>
 80056ec:	6030      	str	r0, [r6, #0]
 80056ee:	4621      	mov	r1, r4
 80056f0:	4628      	mov	r0, r5
 80056f2:	f000 fc61 	bl	8005fb8 <_sbrk_r>
 80056f6:	1c43      	adds	r3, r0, #1
 80056f8:	d00a      	beq.n	8005710 <sbrk_aligned+0x34>
 80056fa:	1cc4      	adds	r4, r0, #3
 80056fc:	f024 0403 	bic.w	r4, r4, #3
 8005700:	42a0      	cmp	r0, r4
 8005702:	d007      	beq.n	8005714 <sbrk_aligned+0x38>
 8005704:	1a21      	subs	r1, r4, r0
 8005706:	4628      	mov	r0, r5
 8005708:	f000 fc56 	bl	8005fb8 <_sbrk_r>
 800570c:	3001      	adds	r0, #1
 800570e:	d101      	bne.n	8005714 <sbrk_aligned+0x38>
 8005710:	f04f 34ff 	mov.w	r4, #4294967295
 8005714:	4620      	mov	r0, r4
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	20000a44 	.word	0x20000a44

0800571c <_malloc_r>:
 800571c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005720:	1ccd      	adds	r5, r1, #3
 8005722:	f025 0503 	bic.w	r5, r5, #3
 8005726:	3508      	adds	r5, #8
 8005728:	2d0c      	cmp	r5, #12
 800572a:	bf38      	it	cc
 800572c:	250c      	movcc	r5, #12
 800572e:	2d00      	cmp	r5, #0
 8005730:	4607      	mov	r7, r0
 8005732:	db01      	blt.n	8005738 <_malloc_r+0x1c>
 8005734:	42a9      	cmp	r1, r5
 8005736:	d905      	bls.n	8005744 <_malloc_r+0x28>
 8005738:	230c      	movs	r3, #12
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	2600      	movs	r6, #0
 800573e:	4630      	mov	r0, r6
 8005740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005744:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005818 <_malloc_r+0xfc>
 8005748:	f000 f868 	bl	800581c <__malloc_lock>
 800574c:	f8d8 3000 	ldr.w	r3, [r8]
 8005750:	461c      	mov	r4, r3
 8005752:	bb5c      	cbnz	r4, 80057ac <_malloc_r+0x90>
 8005754:	4629      	mov	r1, r5
 8005756:	4638      	mov	r0, r7
 8005758:	f7ff ffc0 	bl	80056dc <sbrk_aligned>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	4604      	mov	r4, r0
 8005760:	d155      	bne.n	800580e <_malloc_r+0xf2>
 8005762:	f8d8 4000 	ldr.w	r4, [r8]
 8005766:	4626      	mov	r6, r4
 8005768:	2e00      	cmp	r6, #0
 800576a:	d145      	bne.n	80057f8 <_malloc_r+0xdc>
 800576c:	2c00      	cmp	r4, #0
 800576e:	d048      	beq.n	8005802 <_malloc_r+0xe6>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	4631      	mov	r1, r6
 8005774:	4638      	mov	r0, r7
 8005776:	eb04 0903 	add.w	r9, r4, r3
 800577a:	f000 fc1d 	bl	8005fb8 <_sbrk_r>
 800577e:	4581      	cmp	r9, r0
 8005780:	d13f      	bne.n	8005802 <_malloc_r+0xe6>
 8005782:	6821      	ldr	r1, [r4, #0]
 8005784:	1a6d      	subs	r5, r5, r1
 8005786:	4629      	mov	r1, r5
 8005788:	4638      	mov	r0, r7
 800578a:	f7ff ffa7 	bl	80056dc <sbrk_aligned>
 800578e:	3001      	adds	r0, #1
 8005790:	d037      	beq.n	8005802 <_malloc_r+0xe6>
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	442b      	add	r3, r5
 8005796:	6023      	str	r3, [r4, #0]
 8005798:	f8d8 3000 	ldr.w	r3, [r8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d038      	beq.n	8005812 <_malloc_r+0xf6>
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	42a2      	cmp	r2, r4
 80057a4:	d12b      	bne.n	80057fe <_malloc_r+0xe2>
 80057a6:	2200      	movs	r2, #0
 80057a8:	605a      	str	r2, [r3, #4]
 80057aa:	e00f      	b.n	80057cc <_malloc_r+0xb0>
 80057ac:	6822      	ldr	r2, [r4, #0]
 80057ae:	1b52      	subs	r2, r2, r5
 80057b0:	d41f      	bmi.n	80057f2 <_malloc_r+0xd6>
 80057b2:	2a0b      	cmp	r2, #11
 80057b4:	d917      	bls.n	80057e6 <_malloc_r+0xca>
 80057b6:	1961      	adds	r1, r4, r5
 80057b8:	42a3      	cmp	r3, r4
 80057ba:	6025      	str	r5, [r4, #0]
 80057bc:	bf18      	it	ne
 80057be:	6059      	strne	r1, [r3, #4]
 80057c0:	6863      	ldr	r3, [r4, #4]
 80057c2:	bf08      	it	eq
 80057c4:	f8c8 1000 	streq.w	r1, [r8]
 80057c8:	5162      	str	r2, [r4, r5]
 80057ca:	604b      	str	r3, [r1, #4]
 80057cc:	4638      	mov	r0, r7
 80057ce:	f104 060b 	add.w	r6, r4, #11
 80057d2:	f000 f829 	bl	8005828 <__malloc_unlock>
 80057d6:	f026 0607 	bic.w	r6, r6, #7
 80057da:	1d23      	adds	r3, r4, #4
 80057dc:	1af2      	subs	r2, r6, r3
 80057de:	d0ae      	beq.n	800573e <_malloc_r+0x22>
 80057e0:	1b9b      	subs	r3, r3, r6
 80057e2:	50a3      	str	r3, [r4, r2]
 80057e4:	e7ab      	b.n	800573e <_malloc_r+0x22>
 80057e6:	42a3      	cmp	r3, r4
 80057e8:	6862      	ldr	r2, [r4, #4]
 80057ea:	d1dd      	bne.n	80057a8 <_malloc_r+0x8c>
 80057ec:	f8c8 2000 	str.w	r2, [r8]
 80057f0:	e7ec      	b.n	80057cc <_malloc_r+0xb0>
 80057f2:	4623      	mov	r3, r4
 80057f4:	6864      	ldr	r4, [r4, #4]
 80057f6:	e7ac      	b.n	8005752 <_malloc_r+0x36>
 80057f8:	4634      	mov	r4, r6
 80057fa:	6876      	ldr	r6, [r6, #4]
 80057fc:	e7b4      	b.n	8005768 <_malloc_r+0x4c>
 80057fe:	4613      	mov	r3, r2
 8005800:	e7cc      	b.n	800579c <_malloc_r+0x80>
 8005802:	230c      	movs	r3, #12
 8005804:	603b      	str	r3, [r7, #0]
 8005806:	4638      	mov	r0, r7
 8005808:	f000 f80e 	bl	8005828 <__malloc_unlock>
 800580c:	e797      	b.n	800573e <_malloc_r+0x22>
 800580e:	6025      	str	r5, [r4, #0]
 8005810:	e7dc      	b.n	80057cc <_malloc_r+0xb0>
 8005812:	605b      	str	r3, [r3, #4]
 8005814:	deff      	udf	#255	; 0xff
 8005816:	bf00      	nop
 8005818:	20000a40 	.word	0x20000a40

0800581c <__malloc_lock>:
 800581c:	4801      	ldr	r0, [pc, #4]	; (8005824 <__malloc_lock+0x8>)
 800581e:	f7ff bed2 	b.w	80055c6 <__retarget_lock_acquire_recursive>
 8005822:	bf00      	nop
 8005824:	20000a3c 	.word	0x20000a3c

08005828 <__malloc_unlock>:
 8005828:	4801      	ldr	r0, [pc, #4]	; (8005830 <__malloc_unlock+0x8>)
 800582a:	f7ff becd 	b.w	80055c8 <__retarget_lock_release_recursive>
 800582e:	bf00      	nop
 8005830:	20000a3c 	.word	0x20000a3c

08005834 <__ssputs_r>:
 8005834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005838:	688e      	ldr	r6, [r1, #8]
 800583a:	461f      	mov	r7, r3
 800583c:	42be      	cmp	r6, r7
 800583e:	680b      	ldr	r3, [r1, #0]
 8005840:	4682      	mov	sl, r0
 8005842:	460c      	mov	r4, r1
 8005844:	4690      	mov	r8, r2
 8005846:	d82c      	bhi.n	80058a2 <__ssputs_r+0x6e>
 8005848:	898a      	ldrh	r2, [r1, #12]
 800584a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800584e:	d026      	beq.n	800589e <__ssputs_r+0x6a>
 8005850:	6965      	ldr	r5, [r4, #20]
 8005852:	6909      	ldr	r1, [r1, #16]
 8005854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005858:	eba3 0901 	sub.w	r9, r3, r1
 800585c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005860:	1c7b      	adds	r3, r7, #1
 8005862:	444b      	add	r3, r9
 8005864:	106d      	asrs	r5, r5, #1
 8005866:	429d      	cmp	r5, r3
 8005868:	bf38      	it	cc
 800586a:	461d      	movcc	r5, r3
 800586c:	0553      	lsls	r3, r2, #21
 800586e:	d527      	bpl.n	80058c0 <__ssputs_r+0x8c>
 8005870:	4629      	mov	r1, r5
 8005872:	f7ff ff53 	bl	800571c <_malloc_r>
 8005876:	4606      	mov	r6, r0
 8005878:	b360      	cbz	r0, 80058d4 <__ssputs_r+0xa0>
 800587a:	6921      	ldr	r1, [r4, #16]
 800587c:	464a      	mov	r2, r9
 800587e:	f7ff feac 	bl	80055da <memcpy>
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800588c:	81a3      	strh	r3, [r4, #12]
 800588e:	6126      	str	r6, [r4, #16]
 8005890:	6165      	str	r5, [r4, #20]
 8005892:	444e      	add	r6, r9
 8005894:	eba5 0509 	sub.w	r5, r5, r9
 8005898:	6026      	str	r6, [r4, #0]
 800589a:	60a5      	str	r5, [r4, #8]
 800589c:	463e      	mov	r6, r7
 800589e:	42be      	cmp	r6, r7
 80058a0:	d900      	bls.n	80058a4 <__ssputs_r+0x70>
 80058a2:	463e      	mov	r6, r7
 80058a4:	6820      	ldr	r0, [r4, #0]
 80058a6:	4632      	mov	r2, r6
 80058a8:	4641      	mov	r1, r8
 80058aa:	f000 fb6b 	bl	8005f84 <memmove>
 80058ae:	68a3      	ldr	r3, [r4, #8]
 80058b0:	1b9b      	subs	r3, r3, r6
 80058b2:	60a3      	str	r3, [r4, #8]
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	4433      	add	r3, r6
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	2000      	movs	r0, #0
 80058bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c0:	462a      	mov	r2, r5
 80058c2:	f000 fb90 	bl	8005fe6 <_realloc_r>
 80058c6:	4606      	mov	r6, r0
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d1e0      	bne.n	800588e <__ssputs_r+0x5a>
 80058cc:	6921      	ldr	r1, [r4, #16]
 80058ce:	4650      	mov	r0, sl
 80058d0:	f7ff feb0 	bl	8005634 <_free_r>
 80058d4:	230c      	movs	r3, #12
 80058d6:	f8ca 3000 	str.w	r3, [sl]
 80058da:	89a3      	ldrh	r3, [r4, #12]
 80058dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e0:	81a3      	strh	r3, [r4, #12]
 80058e2:	f04f 30ff 	mov.w	r0, #4294967295
 80058e6:	e7e9      	b.n	80058bc <__ssputs_r+0x88>

080058e8 <_svfiprintf_r>:
 80058e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ec:	4698      	mov	r8, r3
 80058ee:	898b      	ldrh	r3, [r1, #12]
 80058f0:	061b      	lsls	r3, r3, #24
 80058f2:	b09d      	sub	sp, #116	; 0x74
 80058f4:	4607      	mov	r7, r0
 80058f6:	460d      	mov	r5, r1
 80058f8:	4614      	mov	r4, r2
 80058fa:	d50e      	bpl.n	800591a <_svfiprintf_r+0x32>
 80058fc:	690b      	ldr	r3, [r1, #16]
 80058fe:	b963      	cbnz	r3, 800591a <_svfiprintf_r+0x32>
 8005900:	2140      	movs	r1, #64	; 0x40
 8005902:	f7ff ff0b 	bl	800571c <_malloc_r>
 8005906:	6028      	str	r0, [r5, #0]
 8005908:	6128      	str	r0, [r5, #16]
 800590a:	b920      	cbnz	r0, 8005916 <_svfiprintf_r+0x2e>
 800590c:	230c      	movs	r3, #12
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	f04f 30ff 	mov.w	r0, #4294967295
 8005914:	e0d0      	b.n	8005ab8 <_svfiprintf_r+0x1d0>
 8005916:	2340      	movs	r3, #64	; 0x40
 8005918:	616b      	str	r3, [r5, #20]
 800591a:	2300      	movs	r3, #0
 800591c:	9309      	str	r3, [sp, #36]	; 0x24
 800591e:	2320      	movs	r3, #32
 8005920:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005924:	f8cd 800c 	str.w	r8, [sp, #12]
 8005928:	2330      	movs	r3, #48	; 0x30
 800592a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005ad0 <_svfiprintf_r+0x1e8>
 800592e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005932:	f04f 0901 	mov.w	r9, #1
 8005936:	4623      	mov	r3, r4
 8005938:	469a      	mov	sl, r3
 800593a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800593e:	b10a      	cbz	r2, 8005944 <_svfiprintf_r+0x5c>
 8005940:	2a25      	cmp	r2, #37	; 0x25
 8005942:	d1f9      	bne.n	8005938 <_svfiprintf_r+0x50>
 8005944:	ebba 0b04 	subs.w	fp, sl, r4
 8005948:	d00b      	beq.n	8005962 <_svfiprintf_r+0x7a>
 800594a:	465b      	mov	r3, fp
 800594c:	4622      	mov	r2, r4
 800594e:	4629      	mov	r1, r5
 8005950:	4638      	mov	r0, r7
 8005952:	f7ff ff6f 	bl	8005834 <__ssputs_r>
 8005956:	3001      	adds	r0, #1
 8005958:	f000 80a9 	beq.w	8005aae <_svfiprintf_r+0x1c6>
 800595c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800595e:	445a      	add	r2, fp
 8005960:	9209      	str	r2, [sp, #36]	; 0x24
 8005962:	f89a 3000 	ldrb.w	r3, [sl]
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 80a1 	beq.w	8005aae <_svfiprintf_r+0x1c6>
 800596c:	2300      	movs	r3, #0
 800596e:	f04f 32ff 	mov.w	r2, #4294967295
 8005972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005976:	f10a 0a01 	add.w	sl, sl, #1
 800597a:	9304      	str	r3, [sp, #16]
 800597c:	9307      	str	r3, [sp, #28]
 800597e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005982:	931a      	str	r3, [sp, #104]	; 0x68
 8005984:	4654      	mov	r4, sl
 8005986:	2205      	movs	r2, #5
 8005988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800598c:	4850      	ldr	r0, [pc, #320]	; (8005ad0 <_svfiprintf_r+0x1e8>)
 800598e:	f7fa fc1f 	bl	80001d0 <memchr>
 8005992:	9a04      	ldr	r2, [sp, #16]
 8005994:	b9d8      	cbnz	r0, 80059ce <_svfiprintf_r+0xe6>
 8005996:	06d0      	lsls	r0, r2, #27
 8005998:	bf44      	itt	mi
 800599a:	2320      	movmi	r3, #32
 800599c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059a0:	0711      	lsls	r1, r2, #28
 80059a2:	bf44      	itt	mi
 80059a4:	232b      	movmi	r3, #43	; 0x2b
 80059a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059aa:	f89a 3000 	ldrb.w	r3, [sl]
 80059ae:	2b2a      	cmp	r3, #42	; 0x2a
 80059b0:	d015      	beq.n	80059de <_svfiprintf_r+0xf6>
 80059b2:	9a07      	ldr	r2, [sp, #28]
 80059b4:	4654      	mov	r4, sl
 80059b6:	2000      	movs	r0, #0
 80059b8:	f04f 0c0a 	mov.w	ip, #10
 80059bc:	4621      	mov	r1, r4
 80059be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059c2:	3b30      	subs	r3, #48	; 0x30
 80059c4:	2b09      	cmp	r3, #9
 80059c6:	d94d      	bls.n	8005a64 <_svfiprintf_r+0x17c>
 80059c8:	b1b0      	cbz	r0, 80059f8 <_svfiprintf_r+0x110>
 80059ca:	9207      	str	r2, [sp, #28]
 80059cc:	e014      	b.n	80059f8 <_svfiprintf_r+0x110>
 80059ce:	eba0 0308 	sub.w	r3, r0, r8
 80059d2:	fa09 f303 	lsl.w	r3, r9, r3
 80059d6:	4313      	orrs	r3, r2
 80059d8:	9304      	str	r3, [sp, #16]
 80059da:	46a2      	mov	sl, r4
 80059dc:	e7d2      	b.n	8005984 <_svfiprintf_r+0x9c>
 80059de:	9b03      	ldr	r3, [sp, #12]
 80059e0:	1d19      	adds	r1, r3, #4
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	9103      	str	r1, [sp, #12]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	bfbb      	ittet	lt
 80059ea:	425b      	neglt	r3, r3
 80059ec:	f042 0202 	orrlt.w	r2, r2, #2
 80059f0:	9307      	strge	r3, [sp, #28]
 80059f2:	9307      	strlt	r3, [sp, #28]
 80059f4:	bfb8      	it	lt
 80059f6:	9204      	strlt	r2, [sp, #16]
 80059f8:	7823      	ldrb	r3, [r4, #0]
 80059fa:	2b2e      	cmp	r3, #46	; 0x2e
 80059fc:	d10c      	bne.n	8005a18 <_svfiprintf_r+0x130>
 80059fe:	7863      	ldrb	r3, [r4, #1]
 8005a00:	2b2a      	cmp	r3, #42	; 0x2a
 8005a02:	d134      	bne.n	8005a6e <_svfiprintf_r+0x186>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	1d1a      	adds	r2, r3, #4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	9203      	str	r2, [sp, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bfb8      	it	lt
 8005a10:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a14:	3402      	adds	r4, #2
 8005a16:	9305      	str	r3, [sp, #20]
 8005a18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005ae0 <_svfiprintf_r+0x1f8>
 8005a1c:	7821      	ldrb	r1, [r4, #0]
 8005a1e:	2203      	movs	r2, #3
 8005a20:	4650      	mov	r0, sl
 8005a22:	f7fa fbd5 	bl	80001d0 <memchr>
 8005a26:	b138      	cbz	r0, 8005a38 <_svfiprintf_r+0x150>
 8005a28:	9b04      	ldr	r3, [sp, #16]
 8005a2a:	eba0 000a 	sub.w	r0, r0, sl
 8005a2e:	2240      	movs	r2, #64	; 0x40
 8005a30:	4082      	lsls	r2, r0
 8005a32:	4313      	orrs	r3, r2
 8005a34:	3401      	adds	r4, #1
 8005a36:	9304      	str	r3, [sp, #16]
 8005a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a3c:	4825      	ldr	r0, [pc, #148]	; (8005ad4 <_svfiprintf_r+0x1ec>)
 8005a3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a42:	2206      	movs	r2, #6
 8005a44:	f7fa fbc4 	bl	80001d0 <memchr>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	d038      	beq.n	8005abe <_svfiprintf_r+0x1d6>
 8005a4c:	4b22      	ldr	r3, [pc, #136]	; (8005ad8 <_svfiprintf_r+0x1f0>)
 8005a4e:	bb1b      	cbnz	r3, 8005a98 <_svfiprintf_r+0x1b0>
 8005a50:	9b03      	ldr	r3, [sp, #12]
 8005a52:	3307      	adds	r3, #7
 8005a54:	f023 0307 	bic.w	r3, r3, #7
 8005a58:	3308      	adds	r3, #8
 8005a5a:	9303      	str	r3, [sp, #12]
 8005a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5e:	4433      	add	r3, r6
 8005a60:	9309      	str	r3, [sp, #36]	; 0x24
 8005a62:	e768      	b.n	8005936 <_svfiprintf_r+0x4e>
 8005a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a68:	460c      	mov	r4, r1
 8005a6a:	2001      	movs	r0, #1
 8005a6c:	e7a6      	b.n	80059bc <_svfiprintf_r+0xd4>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	3401      	adds	r4, #1
 8005a72:	9305      	str	r3, [sp, #20]
 8005a74:	4619      	mov	r1, r3
 8005a76:	f04f 0c0a 	mov.w	ip, #10
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a80:	3a30      	subs	r2, #48	; 0x30
 8005a82:	2a09      	cmp	r2, #9
 8005a84:	d903      	bls.n	8005a8e <_svfiprintf_r+0x1a6>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0c6      	beq.n	8005a18 <_svfiprintf_r+0x130>
 8005a8a:	9105      	str	r1, [sp, #20]
 8005a8c:	e7c4      	b.n	8005a18 <_svfiprintf_r+0x130>
 8005a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a92:	4604      	mov	r4, r0
 8005a94:	2301      	movs	r3, #1
 8005a96:	e7f0      	b.n	8005a7a <_svfiprintf_r+0x192>
 8005a98:	ab03      	add	r3, sp, #12
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	462a      	mov	r2, r5
 8005a9e:	4b0f      	ldr	r3, [pc, #60]	; (8005adc <_svfiprintf_r+0x1f4>)
 8005aa0:	a904      	add	r1, sp, #16
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	f3af 8000 	nop.w
 8005aa8:	1c42      	adds	r2, r0, #1
 8005aaa:	4606      	mov	r6, r0
 8005aac:	d1d6      	bne.n	8005a5c <_svfiprintf_r+0x174>
 8005aae:	89ab      	ldrh	r3, [r5, #12]
 8005ab0:	065b      	lsls	r3, r3, #25
 8005ab2:	f53f af2d 	bmi.w	8005910 <_svfiprintf_r+0x28>
 8005ab6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ab8:	b01d      	add	sp, #116	; 0x74
 8005aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005abe:	ab03      	add	r3, sp, #12
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	462a      	mov	r2, r5
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <_svfiprintf_r+0x1f4>)
 8005ac6:	a904      	add	r1, sp, #16
 8005ac8:	4638      	mov	r0, r7
 8005aca:	f000 f879 	bl	8005bc0 <_printf_i>
 8005ace:	e7eb      	b.n	8005aa8 <_svfiprintf_r+0x1c0>
 8005ad0:	08007194 	.word	0x08007194
 8005ad4:	0800719e 	.word	0x0800719e
 8005ad8:	00000000 	.word	0x00000000
 8005adc:	08005835 	.word	0x08005835
 8005ae0:	0800719a 	.word	0x0800719a

08005ae4 <_printf_common>:
 8005ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae8:	4616      	mov	r6, r2
 8005aea:	4699      	mov	r9, r3
 8005aec:	688a      	ldr	r2, [r1, #8]
 8005aee:	690b      	ldr	r3, [r1, #16]
 8005af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005af4:	4293      	cmp	r3, r2
 8005af6:	bfb8      	it	lt
 8005af8:	4613      	movlt	r3, r2
 8005afa:	6033      	str	r3, [r6, #0]
 8005afc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b00:	4607      	mov	r7, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	b10a      	cbz	r2, 8005b0a <_printf_common+0x26>
 8005b06:	3301      	adds	r3, #1
 8005b08:	6033      	str	r3, [r6, #0]
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	0699      	lsls	r1, r3, #26
 8005b0e:	bf42      	ittt	mi
 8005b10:	6833      	ldrmi	r3, [r6, #0]
 8005b12:	3302      	addmi	r3, #2
 8005b14:	6033      	strmi	r3, [r6, #0]
 8005b16:	6825      	ldr	r5, [r4, #0]
 8005b18:	f015 0506 	ands.w	r5, r5, #6
 8005b1c:	d106      	bne.n	8005b2c <_printf_common+0x48>
 8005b1e:	f104 0a19 	add.w	sl, r4, #25
 8005b22:	68e3      	ldr	r3, [r4, #12]
 8005b24:	6832      	ldr	r2, [r6, #0]
 8005b26:	1a9b      	subs	r3, r3, r2
 8005b28:	42ab      	cmp	r3, r5
 8005b2a:	dc26      	bgt.n	8005b7a <_printf_common+0x96>
 8005b2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b30:	1e13      	subs	r3, r2, #0
 8005b32:	6822      	ldr	r2, [r4, #0]
 8005b34:	bf18      	it	ne
 8005b36:	2301      	movne	r3, #1
 8005b38:	0692      	lsls	r2, r2, #26
 8005b3a:	d42b      	bmi.n	8005b94 <_printf_common+0xb0>
 8005b3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b40:	4649      	mov	r1, r9
 8005b42:	4638      	mov	r0, r7
 8005b44:	47c0      	blx	r8
 8005b46:	3001      	adds	r0, #1
 8005b48:	d01e      	beq.n	8005b88 <_printf_common+0xa4>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	6922      	ldr	r2, [r4, #16]
 8005b4e:	f003 0306 	and.w	r3, r3, #6
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	bf02      	ittt	eq
 8005b56:	68e5      	ldreq	r5, [r4, #12]
 8005b58:	6833      	ldreq	r3, [r6, #0]
 8005b5a:	1aed      	subeq	r5, r5, r3
 8005b5c:	68a3      	ldr	r3, [r4, #8]
 8005b5e:	bf0c      	ite	eq
 8005b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b64:	2500      	movne	r5, #0
 8005b66:	4293      	cmp	r3, r2
 8005b68:	bfc4      	itt	gt
 8005b6a:	1a9b      	subgt	r3, r3, r2
 8005b6c:	18ed      	addgt	r5, r5, r3
 8005b6e:	2600      	movs	r6, #0
 8005b70:	341a      	adds	r4, #26
 8005b72:	42b5      	cmp	r5, r6
 8005b74:	d11a      	bne.n	8005bac <_printf_common+0xc8>
 8005b76:	2000      	movs	r0, #0
 8005b78:	e008      	b.n	8005b8c <_printf_common+0xa8>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	4652      	mov	r2, sl
 8005b7e:	4649      	mov	r1, r9
 8005b80:	4638      	mov	r0, r7
 8005b82:	47c0      	blx	r8
 8005b84:	3001      	adds	r0, #1
 8005b86:	d103      	bne.n	8005b90 <_printf_common+0xac>
 8005b88:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b90:	3501      	adds	r5, #1
 8005b92:	e7c6      	b.n	8005b22 <_printf_common+0x3e>
 8005b94:	18e1      	adds	r1, r4, r3
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	2030      	movs	r0, #48	; 0x30
 8005b9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b9e:	4422      	add	r2, r4
 8005ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ba4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ba8:	3302      	adds	r3, #2
 8005baa:	e7c7      	b.n	8005b3c <_printf_common+0x58>
 8005bac:	2301      	movs	r3, #1
 8005bae:	4622      	mov	r2, r4
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	47c0      	blx	r8
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	d0e6      	beq.n	8005b88 <_printf_common+0xa4>
 8005bba:	3601      	adds	r6, #1
 8005bbc:	e7d9      	b.n	8005b72 <_printf_common+0x8e>
	...

08005bc0 <_printf_i>:
 8005bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc4:	7e0f      	ldrb	r7, [r1, #24]
 8005bc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bc8:	2f78      	cmp	r7, #120	; 0x78
 8005bca:	4691      	mov	r9, r2
 8005bcc:	4680      	mov	r8, r0
 8005bce:	460c      	mov	r4, r1
 8005bd0:	469a      	mov	sl, r3
 8005bd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bd6:	d807      	bhi.n	8005be8 <_printf_i+0x28>
 8005bd8:	2f62      	cmp	r7, #98	; 0x62
 8005bda:	d80a      	bhi.n	8005bf2 <_printf_i+0x32>
 8005bdc:	2f00      	cmp	r7, #0
 8005bde:	f000 80d4 	beq.w	8005d8a <_printf_i+0x1ca>
 8005be2:	2f58      	cmp	r7, #88	; 0x58
 8005be4:	f000 80c0 	beq.w	8005d68 <_printf_i+0x1a8>
 8005be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bf0:	e03a      	b.n	8005c68 <_printf_i+0xa8>
 8005bf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bf6:	2b15      	cmp	r3, #21
 8005bf8:	d8f6      	bhi.n	8005be8 <_printf_i+0x28>
 8005bfa:	a101      	add	r1, pc, #4	; (adr r1, 8005c00 <_printf_i+0x40>)
 8005bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c00:	08005c59 	.word	0x08005c59
 8005c04:	08005c6d 	.word	0x08005c6d
 8005c08:	08005be9 	.word	0x08005be9
 8005c0c:	08005be9 	.word	0x08005be9
 8005c10:	08005be9 	.word	0x08005be9
 8005c14:	08005be9 	.word	0x08005be9
 8005c18:	08005c6d 	.word	0x08005c6d
 8005c1c:	08005be9 	.word	0x08005be9
 8005c20:	08005be9 	.word	0x08005be9
 8005c24:	08005be9 	.word	0x08005be9
 8005c28:	08005be9 	.word	0x08005be9
 8005c2c:	08005d71 	.word	0x08005d71
 8005c30:	08005c99 	.word	0x08005c99
 8005c34:	08005d2b 	.word	0x08005d2b
 8005c38:	08005be9 	.word	0x08005be9
 8005c3c:	08005be9 	.word	0x08005be9
 8005c40:	08005d93 	.word	0x08005d93
 8005c44:	08005be9 	.word	0x08005be9
 8005c48:	08005c99 	.word	0x08005c99
 8005c4c:	08005be9 	.word	0x08005be9
 8005c50:	08005be9 	.word	0x08005be9
 8005c54:	08005d33 	.word	0x08005d33
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	1d1a      	adds	r2, r3, #4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	602a      	str	r2, [r5, #0]
 8005c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e09f      	b.n	8005dac <_printf_i+0x1ec>
 8005c6c:	6820      	ldr	r0, [r4, #0]
 8005c6e:	682b      	ldr	r3, [r5, #0]
 8005c70:	0607      	lsls	r7, r0, #24
 8005c72:	f103 0104 	add.w	r1, r3, #4
 8005c76:	6029      	str	r1, [r5, #0]
 8005c78:	d501      	bpl.n	8005c7e <_printf_i+0xbe>
 8005c7a:	681e      	ldr	r6, [r3, #0]
 8005c7c:	e003      	b.n	8005c86 <_printf_i+0xc6>
 8005c7e:	0646      	lsls	r6, r0, #25
 8005c80:	d5fb      	bpl.n	8005c7a <_printf_i+0xba>
 8005c82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c86:	2e00      	cmp	r6, #0
 8005c88:	da03      	bge.n	8005c92 <_printf_i+0xd2>
 8005c8a:	232d      	movs	r3, #45	; 0x2d
 8005c8c:	4276      	negs	r6, r6
 8005c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c92:	485a      	ldr	r0, [pc, #360]	; (8005dfc <_printf_i+0x23c>)
 8005c94:	230a      	movs	r3, #10
 8005c96:	e012      	b.n	8005cbe <_printf_i+0xfe>
 8005c98:	682b      	ldr	r3, [r5, #0]
 8005c9a:	6820      	ldr	r0, [r4, #0]
 8005c9c:	1d19      	adds	r1, r3, #4
 8005c9e:	6029      	str	r1, [r5, #0]
 8005ca0:	0605      	lsls	r5, r0, #24
 8005ca2:	d501      	bpl.n	8005ca8 <_printf_i+0xe8>
 8005ca4:	681e      	ldr	r6, [r3, #0]
 8005ca6:	e002      	b.n	8005cae <_printf_i+0xee>
 8005ca8:	0641      	lsls	r1, r0, #25
 8005caa:	d5fb      	bpl.n	8005ca4 <_printf_i+0xe4>
 8005cac:	881e      	ldrh	r6, [r3, #0]
 8005cae:	4853      	ldr	r0, [pc, #332]	; (8005dfc <_printf_i+0x23c>)
 8005cb0:	2f6f      	cmp	r7, #111	; 0x6f
 8005cb2:	bf0c      	ite	eq
 8005cb4:	2308      	moveq	r3, #8
 8005cb6:	230a      	movne	r3, #10
 8005cb8:	2100      	movs	r1, #0
 8005cba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cbe:	6865      	ldr	r5, [r4, #4]
 8005cc0:	60a5      	str	r5, [r4, #8]
 8005cc2:	2d00      	cmp	r5, #0
 8005cc4:	bfa2      	ittt	ge
 8005cc6:	6821      	ldrge	r1, [r4, #0]
 8005cc8:	f021 0104 	bicge.w	r1, r1, #4
 8005ccc:	6021      	strge	r1, [r4, #0]
 8005cce:	b90e      	cbnz	r6, 8005cd4 <_printf_i+0x114>
 8005cd0:	2d00      	cmp	r5, #0
 8005cd2:	d04b      	beq.n	8005d6c <_printf_i+0x1ac>
 8005cd4:	4615      	mov	r5, r2
 8005cd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cda:	fb03 6711 	mls	r7, r3, r1, r6
 8005cde:	5dc7      	ldrb	r7, [r0, r7]
 8005ce0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ce4:	4637      	mov	r7, r6
 8005ce6:	42bb      	cmp	r3, r7
 8005ce8:	460e      	mov	r6, r1
 8005cea:	d9f4      	bls.n	8005cd6 <_printf_i+0x116>
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d10b      	bne.n	8005d08 <_printf_i+0x148>
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	07de      	lsls	r6, r3, #31
 8005cf4:	d508      	bpl.n	8005d08 <_printf_i+0x148>
 8005cf6:	6923      	ldr	r3, [r4, #16]
 8005cf8:	6861      	ldr	r1, [r4, #4]
 8005cfa:	4299      	cmp	r1, r3
 8005cfc:	bfde      	ittt	le
 8005cfe:	2330      	movle	r3, #48	; 0x30
 8005d00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d08:	1b52      	subs	r2, r2, r5
 8005d0a:	6122      	str	r2, [r4, #16]
 8005d0c:	f8cd a000 	str.w	sl, [sp]
 8005d10:	464b      	mov	r3, r9
 8005d12:	aa03      	add	r2, sp, #12
 8005d14:	4621      	mov	r1, r4
 8005d16:	4640      	mov	r0, r8
 8005d18:	f7ff fee4 	bl	8005ae4 <_printf_common>
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d14a      	bne.n	8005db6 <_printf_i+0x1f6>
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	b004      	add	sp, #16
 8005d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	f043 0320 	orr.w	r3, r3, #32
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	4833      	ldr	r0, [pc, #204]	; (8005e00 <_printf_i+0x240>)
 8005d34:	2778      	movs	r7, #120	; 0x78
 8005d36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	6829      	ldr	r1, [r5, #0]
 8005d3e:	061f      	lsls	r7, r3, #24
 8005d40:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d44:	d402      	bmi.n	8005d4c <_printf_i+0x18c>
 8005d46:	065f      	lsls	r7, r3, #25
 8005d48:	bf48      	it	mi
 8005d4a:	b2b6      	uxthmi	r6, r6
 8005d4c:	07df      	lsls	r7, r3, #31
 8005d4e:	bf48      	it	mi
 8005d50:	f043 0320 	orrmi.w	r3, r3, #32
 8005d54:	6029      	str	r1, [r5, #0]
 8005d56:	bf48      	it	mi
 8005d58:	6023      	strmi	r3, [r4, #0]
 8005d5a:	b91e      	cbnz	r6, 8005d64 <_printf_i+0x1a4>
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	f023 0320 	bic.w	r3, r3, #32
 8005d62:	6023      	str	r3, [r4, #0]
 8005d64:	2310      	movs	r3, #16
 8005d66:	e7a7      	b.n	8005cb8 <_printf_i+0xf8>
 8005d68:	4824      	ldr	r0, [pc, #144]	; (8005dfc <_printf_i+0x23c>)
 8005d6a:	e7e4      	b.n	8005d36 <_printf_i+0x176>
 8005d6c:	4615      	mov	r5, r2
 8005d6e:	e7bd      	b.n	8005cec <_printf_i+0x12c>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	6826      	ldr	r6, [r4, #0]
 8005d74:	6961      	ldr	r1, [r4, #20]
 8005d76:	1d18      	adds	r0, r3, #4
 8005d78:	6028      	str	r0, [r5, #0]
 8005d7a:	0635      	lsls	r5, r6, #24
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	d501      	bpl.n	8005d84 <_printf_i+0x1c4>
 8005d80:	6019      	str	r1, [r3, #0]
 8005d82:	e002      	b.n	8005d8a <_printf_i+0x1ca>
 8005d84:	0670      	lsls	r0, r6, #25
 8005d86:	d5fb      	bpl.n	8005d80 <_printf_i+0x1c0>
 8005d88:	8019      	strh	r1, [r3, #0]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	6123      	str	r3, [r4, #16]
 8005d8e:	4615      	mov	r5, r2
 8005d90:	e7bc      	b.n	8005d0c <_printf_i+0x14c>
 8005d92:	682b      	ldr	r3, [r5, #0]
 8005d94:	1d1a      	adds	r2, r3, #4
 8005d96:	602a      	str	r2, [r5, #0]
 8005d98:	681d      	ldr	r5, [r3, #0]
 8005d9a:	6862      	ldr	r2, [r4, #4]
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f7fa fa16 	bl	80001d0 <memchr>
 8005da4:	b108      	cbz	r0, 8005daa <_printf_i+0x1ea>
 8005da6:	1b40      	subs	r0, r0, r5
 8005da8:	6060      	str	r0, [r4, #4]
 8005daa:	6863      	ldr	r3, [r4, #4]
 8005dac:	6123      	str	r3, [r4, #16]
 8005dae:	2300      	movs	r3, #0
 8005db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005db4:	e7aa      	b.n	8005d0c <_printf_i+0x14c>
 8005db6:	6923      	ldr	r3, [r4, #16]
 8005db8:	462a      	mov	r2, r5
 8005dba:	4649      	mov	r1, r9
 8005dbc:	4640      	mov	r0, r8
 8005dbe:	47d0      	blx	sl
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d0ad      	beq.n	8005d20 <_printf_i+0x160>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	079b      	lsls	r3, r3, #30
 8005dc8:	d413      	bmi.n	8005df2 <_printf_i+0x232>
 8005dca:	68e0      	ldr	r0, [r4, #12]
 8005dcc:	9b03      	ldr	r3, [sp, #12]
 8005dce:	4298      	cmp	r0, r3
 8005dd0:	bfb8      	it	lt
 8005dd2:	4618      	movlt	r0, r3
 8005dd4:	e7a6      	b.n	8005d24 <_printf_i+0x164>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	4632      	mov	r2, r6
 8005dda:	4649      	mov	r1, r9
 8005ddc:	4640      	mov	r0, r8
 8005dde:	47d0      	blx	sl
 8005de0:	3001      	adds	r0, #1
 8005de2:	d09d      	beq.n	8005d20 <_printf_i+0x160>
 8005de4:	3501      	adds	r5, #1
 8005de6:	68e3      	ldr	r3, [r4, #12]
 8005de8:	9903      	ldr	r1, [sp, #12]
 8005dea:	1a5b      	subs	r3, r3, r1
 8005dec:	42ab      	cmp	r3, r5
 8005dee:	dcf2      	bgt.n	8005dd6 <_printf_i+0x216>
 8005df0:	e7eb      	b.n	8005dca <_printf_i+0x20a>
 8005df2:	2500      	movs	r5, #0
 8005df4:	f104 0619 	add.w	r6, r4, #25
 8005df8:	e7f5      	b.n	8005de6 <_printf_i+0x226>
 8005dfa:	bf00      	nop
 8005dfc:	080071a5 	.word	0x080071a5
 8005e00:	080071b6 	.word	0x080071b6

08005e04 <__sflush_r>:
 8005e04:	898a      	ldrh	r2, [r1, #12]
 8005e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	0710      	lsls	r0, r2, #28
 8005e0e:	460c      	mov	r4, r1
 8005e10:	d458      	bmi.n	8005ec4 <__sflush_r+0xc0>
 8005e12:	684b      	ldr	r3, [r1, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	dc05      	bgt.n	8005e24 <__sflush_r+0x20>
 8005e18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	dc02      	bgt.n	8005e24 <__sflush_r+0x20>
 8005e1e:	2000      	movs	r0, #0
 8005e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e26:	2e00      	cmp	r6, #0
 8005e28:	d0f9      	beq.n	8005e1e <__sflush_r+0x1a>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e30:	682f      	ldr	r7, [r5, #0]
 8005e32:	6a21      	ldr	r1, [r4, #32]
 8005e34:	602b      	str	r3, [r5, #0]
 8005e36:	d032      	beq.n	8005e9e <__sflush_r+0x9a>
 8005e38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e3a:	89a3      	ldrh	r3, [r4, #12]
 8005e3c:	075a      	lsls	r2, r3, #29
 8005e3e:	d505      	bpl.n	8005e4c <__sflush_r+0x48>
 8005e40:	6863      	ldr	r3, [r4, #4]
 8005e42:	1ac0      	subs	r0, r0, r3
 8005e44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e46:	b10b      	cbz	r3, 8005e4c <__sflush_r+0x48>
 8005e48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e4a:	1ac0      	subs	r0, r0, r3
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	4602      	mov	r2, r0
 8005e50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e52:	6a21      	ldr	r1, [r4, #32]
 8005e54:	4628      	mov	r0, r5
 8005e56:	47b0      	blx	r6
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	d106      	bne.n	8005e6c <__sflush_r+0x68>
 8005e5e:	6829      	ldr	r1, [r5, #0]
 8005e60:	291d      	cmp	r1, #29
 8005e62:	d82b      	bhi.n	8005ebc <__sflush_r+0xb8>
 8005e64:	4a29      	ldr	r2, [pc, #164]	; (8005f0c <__sflush_r+0x108>)
 8005e66:	410a      	asrs	r2, r1
 8005e68:	07d6      	lsls	r6, r2, #31
 8005e6a:	d427      	bmi.n	8005ebc <__sflush_r+0xb8>
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	6062      	str	r2, [r4, #4]
 8005e70:	04d9      	lsls	r1, r3, #19
 8005e72:	6922      	ldr	r2, [r4, #16]
 8005e74:	6022      	str	r2, [r4, #0]
 8005e76:	d504      	bpl.n	8005e82 <__sflush_r+0x7e>
 8005e78:	1c42      	adds	r2, r0, #1
 8005e7a:	d101      	bne.n	8005e80 <__sflush_r+0x7c>
 8005e7c:	682b      	ldr	r3, [r5, #0]
 8005e7e:	b903      	cbnz	r3, 8005e82 <__sflush_r+0x7e>
 8005e80:	6560      	str	r0, [r4, #84]	; 0x54
 8005e82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e84:	602f      	str	r7, [r5, #0]
 8005e86:	2900      	cmp	r1, #0
 8005e88:	d0c9      	beq.n	8005e1e <__sflush_r+0x1a>
 8005e8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e8e:	4299      	cmp	r1, r3
 8005e90:	d002      	beq.n	8005e98 <__sflush_r+0x94>
 8005e92:	4628      	mov	r0, r5
 8005e94:	f7ff fbce 	bl	8005634 <_free_r>
 8005e98:	2000      	movs	r0, #0
 8005e9a:	6360      	str	r0, [r4, #52]	; 0x34
 8005e9c:	e7c0      	b.n	8005e20 <__sflush_r+0x1c>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	47b0      	blx	r6
 8005ea4:	1c41      	adds	r1, r0, #1
 8005ea6:	d1c8      	bne.n	8005e3a <__sflush_r+0x36>
 8005ea8:	682b      	ldr	r3, [r5, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0c5      	beq.n	8005e3a <__sflush_r+0x36>
 8005eae:	2b1d      	cmp	r3, #29
 8005eb0:	d001      	beq.n	8005eb6 <__sflush_r+0xb2>
 8005eb2:	2b16      	cmp	r3, #22
 8005eb4:	d101      	bne.n	8005eba <__sflush_r+0xb6>
 8005eb6:	602f      	str	r7, [r5, #0]
 8005eb8:	e7b1      	b.n	8005e1e <__sflush_r+0x1a>
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ec0:	81a3      	strh	r3, [r4, #12]
 8005ec2:	e7ad      	b.n	8005e20 <__sflush_r+0x1c>
 8005ec4:	690f      	ldr	r7, [r1, #16]
 8005ec6:	2f00      	cmp	r7, #0
 8005ec8:	d0a9      	beq.n	8005e1e <__sflush_r+0x1a>
 8005eca:	0793      	lsls	r3, r2, #30
 8005ecc:	680e      	ldr	r6, [r1, #0]
 8005ece:	bf08      	it	eq
 8005ed0:	694b      	ldreq	r3, [r1, #20]
 8005ed2:	600f      	str	r7, [r1, #0]
 8005ed4:	bf18      	it	ne
 8005ed6:	2300      	movne	r3, #0
 8005ed8:	eba6 0807 	sub.w	r8, r6, r7
 8005edc:	608b      	str	r3, [r1, #8]
 8005ede:	f1b8 0f00 	cmp.w	r8, #0
 8005ee2:	dd9c      	ble.n	8005e1e <__sflush_r+0x1a>
 8005ee4:	6a21      	ldr	r1, [r4, #32]
 8005ee6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ee8:	4643      	mov	r3, r8
 8005eea:	463a      	mov	r2, r7
 8005eec:	4628      	mov	r0, r5
 8005eee:	47b0      	blx	r6
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	dc06      	bgt.n	8005f02 <__sflush_r+0xfe>
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005efa:	81a3      	strh	r3, [r4, #12]
 8005efc:	f04f 30ff 	mov.w	r0, #4294967295
 8005f00:	e78e      	b.n	8005e20 <__sflush_r+0x1c>
 8005f02:	4407      	add	r7, r0
 8005f04:	eba8 0800 	sub.w	r8, r8, r0
 8005f08:	e7e9      	b.n	8005ede <__sflush_r+0xda>
 8005f0a:	bf00      	nop
 8005f0c:	dfbffffe 	.word	0xdfbffffe

08005f10 <_fflush_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	690b      	ldr	r3, [r1, #16]
 8005f14:	4605      	mov	r5, r0
 8005f16:	460c      	mov	r4, r1
 8005f18:	b913      	cbnz	r3, 8005f20 <_fflush_r+0x10>
 8005f1a:	2500      	movs	r5, #0
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
 8005f20:	b118      	cbz	r0, 8005f2a <_fflush_r+0x1a>
 8005f22:	6a03      	ldr	r3, [r0, #32]
 8005f24:	b90b      	cbnz	r3, 8005f2a <_fflush_r+0x1a>
 8005f26:	f7ff fa3b 	bl	80053a0 <__sinit>
 8005f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0f3      	beq.n	8005f1a <_fflush_r+0xa>
 8005f32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f34:	07d0      	lsls	r0, r2, #31
 8005f36:	d404      	bmi.n	8005f42 <_fflush_r+0x32>
 8005f38:	0599      	lsls	r1, r3, #22
 8005f3a:	d402      	bmi.n	8005f42 <_fflush_r+0x32>
 8005f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f3e:	f7ff fb42 	bl	80055c6 <__retarget_lock_acquire_recursive>
 8005f42:	4628      	mov	r0, r5
 8005f44:	4621      	mov	r1, r4
 8005f46:	f7ff ff5d 	bl	8005e04 <__sflush_r>
 8005f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f4c:	07da      	lsls	r2, r3, #31
 8005f4e:	4605      	mov	r5, r0
 8005f50:	d4e4      	bmi.n	8005f1c <_fflush_r+0xc>
 8005f52:	89a3      	ldrh	r3, [r4, #12]
 8005f54:	059b      	lsls	r3, r3, #22
 8005f56:	d4e1      	bmi.n	8005f1c <_fflush_r+0xc>
 8005f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f5a:	f7ff fb35 	bl	80055c8 <__retarget_lock_release_recursive>
 8005f5e:	e7dd      	b.n	8005f1c <_fflush_r+0xc>

08005f60 <fiprintf>:
 8005f60:	b40e      	push	{r1, r2, r3}
 8005f62:	b503      	push	{r0, r1, lr}
 8005f64:	4601      	mov	r1, r0
 8005f66:	ab03      	add	r3, sp, #12
 8005f68:	4805      	ldr	r0, [pc, #20]	; (8005f80 <fiprintf+0x20>)
 8005f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f6e:	6800      	ldr	r0, [r0, #0]
 8005f70:	9301      	str	r3, [sp, #4]
 8005f72:	f000 f891 	bl	8006098 <_vfiprintf_r>
 8005f76:	b002      	add	sp, #8
 8005f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f7c:	b003      	add	sp, #12
 8005f7e:	4770      	bx	lr
 8005f80:	20000150 	.word	0x20000150

08005f84 <memmove>:
 8005f84:	4288      	cmp	r0, r1
 8005f86:	b510      	push	{r4, lr}
 8005f88:	eb01 0402 	add.w	r4, r1, r2
 8005f8c:	d902      	bls.n	8005f94 <memmove+0x10>
 8005f8e:	4284      	cmp	r4, r0
 8005f90:	4623      	mov	r3, r4
 8005f92:	d807      	bhi.n	8005fa4 <memmove+0x20>
 8005f94:	1e43      	subs	r3, r0, #1
 8005f96:	42a1      	cmp	r1, r4
 8005f98:	d008      	beq.n	8005fac <memmove+0x28>
 8005f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fa2:	e7f8      	b.n	8005f96 <memmove+0x12>
 8005fa4:	4402      	add	r2, r0
 8005fa6:	4601      	mov	r1, r0
 8005fa8:	428a      	cmp	r2, r1
 8005faa:	d100      	bne.n	8005fae <memmove+0x2a>
 8005fac:	bd10      	pop	{r4, pc}
 8005fae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fb6:	e7f7      	b.n	8005fa8 <memmove+0x24>

08005fb8 <_sbrk_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4d06      	ldr	r5, [pc, #24]	; (8005fd4 <_sbrk_r+0x1c>)
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	4608      	mov	r0, r1
 8005fc2:	602b      	str	r3, [r5, #0]
 8005fc4:	f7fb fab2 	bl	800152c <_sbrk>
 8005fc8:	1c43      	adds	r3, r0, #1
 8005fca:	d102      	bne.n	8005fd2 <_sbrk_r+0x1a>
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	b103      	cbz	r3, 8005fd2 <_sbrk_r+0x1a>
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	bd38      	pop	{r3, r4, r5, pc}
 8005fd4:	20000a38 	.word	0x20000a38

08005fd8 <abort>:
 8005fd8:	b508      	push	{r3, lr}
 8005fda:	2006      	movs	r0, #6
 8005fdc:	f000 fa34 	bl	8006448 <raise>
 8005fe0:	2001      	movs	r0, #1
 8005fe2:	f7fb fa2b 	bl	800143c <_exit>

08005fe6 <_realloc_r>:
 8005fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fea:	4680      	mov	r8, r0
 8005fec:	4614      	mov	r4, r2
 8005fee:	460e      	mov	r6, r1
 8005ff0:	b921      	cbnz	r1, 8005ffc <_realloc_r+0x16>
 8005ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	f7ff bb90 	b.w	800571c <_malloc_r>
 8005ffc:	b92a      	cbnz	r2, 800600a <_realloc_r+0x24>
 8005ffe:	f7ff fb19 	bl	8005634 <_free_r>
 8006002:	4625      	mov	r5, r4
 8006004:	4628      	mov	r0, r5
 8006006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800600a:	f000 fa39 	bl	8006480 <_malloc_usable_size_r>
 800600e:	4284      	cmp	r4, r0
 8006010:	4607      	mov	r7, r0
 8006012:	d802      	bhi.n	800601a <_realloc_r+0x34>
 8006014:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006018:	d812      	bhi.n	8006040 <_realloc_r+0x5a>
 800601a:	4621      	mov	r1, r4
 800601c:	4640      	mov	r0, r8
 800601e:	f7ff fb7d 	bl	800571c <_malloc_r>
 8006022:	4605      	mov	r5, r0
 8006024:	2800      	cmp	r0, #0
 8006026:	d0ed      	beq.n	8006004 <_realloc_r+0x1e>
 8006028:	42bc      	cmp	r4, r7
 800602a:	4622      	mov	r2, r4
 800602c:	4631      	mov	r1, r6
 800602e:	bf28      	it	cs
 8006030:	463a      	movcs	r2, r7
 8006032:	f7ff fad2 	bl	80055da <memcpy>
 8006036:	4631      	mov	r1, r6
 8006038:	4640      	mov	r0, r8
 800603a:	f7ff fafb 	bl	8005634 <_free_r>
 800603e:	e7e1      	b.n	8006004 <_realloc_r+0x1e>
 8006040:	4635      	mov	r5, r6
 8006042:	e7df      	b.n	8006004 <_realloc_r+0x1e>

08006044 <__sfputc_r>:
 8006044:	6893      	ldr	r3, [r2, #8]
 8006046:	3b01      	subs	r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	b410      	push	{r4}
 800604c:	6093      	str	r3, [r2, #8]
 800604e:	da08      	bge.n	8006062 <__sfputc_r+0x1e>
 8006050:	6994      	ldr	r4, [r2, #24]
 8006052:	42a3      	cmp	r3, r4
 8006054:	db01      	blt.n	800605a <__sfputc_r+0x16>
 8006056:	290a      	cmp	r1, #10
 8006058:	d103      	bne.n	8006062 <__sfputc_r+0x1e>
 800605a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800605e:	f000 b935 	b.w	80062cc <__swbuf_r>
 8006062:	6813      	ldr	r3, [r2, #0]
 8006064:	1c58      	adds	r0, r3, #1
 8006066:	6010      	str	r0, [r2, #0]
 8006068:	7019      	strb	r1, [r3, #0]
 800606a:	4608      	mov	r0, r1
 800606c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006070:	4770      	bx	lr

08006072 <__sfputs_r>:
 8006072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006074:	4606      	mov	r6, r0
 8006076:	460f      	mov	r7, r1
 8006078:	4614      	mov	r4, r2
 800607a:	18d5      	adds	r5, r2, r3
 800607c:	42ac      	cmp	r4, r5
 800607e:	d101      	bne.n	8006084 <__sfputs_r+0x12>
 8006080:	2000      	movs	r0, #0
 8006082:	e007      	b.n	8006094 <__sfputs_r+0x22>
 8006084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006088:	463a      	mov	r2, r7
 800608a:	4630      	mov	r0, r6
 800608c:	f7ff ffda 	bl	8006044 <__sfputc_r>
 8006090:	1c43      	adds	r3, r0, #1
 8006092:	d1f3      	bne.n	800607c <__sfputs_r+0xa>
 8006094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006098 <_vfiprintf_r>:
 8006098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	460d      	mov	r5, r1
 800609e:	b09d      	sub	sp, #116	; 0x74
 80060a0:	4614      	mov	r4, r2
 80060a2:	4698      	mov	r8, r3
 80060a4:	4606      	mov	r6, r0
 80060a6:	b118      	cbz	r0, 80060b0 <_vfiprintf_r+0x18>
 80060a8:	6a03      	ldr	r3, [r0, #32]
 80060aa:	b90b      	cbnz	r3, 80060b0 <_vfiprintf_r+0x18>
 80060ac:	f7ff f978 	bl	80053a0 <__sinit>
 80060b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060b2:	07d9      	lsls	r1, r3, #31
 80060b4:	d405      	bmi.n	80060c2 <_vfiprintf_r+0x2a>
 80060b6:	89ab      	ldrh	r3, [r5, #12]
 80060b8:	059a      	lsls	r2, r3, #22
 80060ba:	d402      	bmi.n	80060c2 <_vfiprintf_r+0x2a>
 80060bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060be:	f7ff fa82 	bl	80055c6 <__retarget_lock_acquire_recursive>
 80060c2:	89ab      	ldrh	r3, [r5, #12]
 80060c4:	071b      	lsls	r3, r3, #28
 80060c6:	d501      	bpl.n	80060cc <_vfiprintf_r+0x34>
 80060c8:	692b      	ldr	r3, [r5, #16]
 80060ca:	b99b      	cbnz	r3, 80060f4 <_vfiprintf_r+0x5c>
 80060cc:	4629      	mov	r1, r5
 80060ce:	4630      	mov	r0, r6
 80060d0:	f000 f93a 	bl	8006348 <__swsetup_r>
 80060d4:	b170      	cbz	r0, 80060f4 <_vfiprintf_r+0x5c>
 80060d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060d8:	07dc      	lsls	r4, r3, #31
 80060da:	d504      	bpl.n	80060e6 <_vfiprintf_r+0x4e>
 80060dc:	f04f 30ff 	mov.w	r0, #4294967295
 80060e0:	b01d      	add	sp, #116	; 0x74
 80060e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e6:	89ab      	ldrh	r3, [r5, #12]
 80060e8:	0598      	lsls	r0, r3, #22
 80060ea:	d4f7      	bmi.n	80060dc <_vfiprintf_r+0x44>
 80060ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060ee:	f7ff fa6b 	bl	80055c8 <__retarget_lock_release_recursive>
 80060f2:	e7f3      	b.n	80060dc <_vfiprintf_r+0x44>
 80060f4:	2300      	movs	r3, #0
 80060f6:	9309      	str	r3, [sp, #36]	; 0x24
 80060f8:	2320      	movs	r3, #32
 80060fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006102:	2330      	movs	r3, #48	; 0x30
 8006104:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80062b8 <_vfiprintf_r+0x220>
 8006108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800610c:	f04f 0901 	mov.w	r9, #1
 8006110:	4623      	mov	r3, r4
 8006112:	469a      	mov	sl, r3
 8006114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006118:	b10a      	cbz	r2, 800611e <_vfiprintf_r+0x86>
 800611a:	2a25      	cmp	r2, #37	; 0x25
 800611c:	d1f9      	bne.n	8006112 <_vfiprintf_r+0x7a>
 800611e:	ebba 0b04 	subs.w	fp, sl, r4
 8006122:	d00b      	beq.n	800613c <_vfiprintf_r+0xa4>
 8006124:	465b      	mov	r3, fp
 8006126:	4622      	mov	r2, r4
 8006128:	4629      	mov	r1, r5
 800612a:	4630      	mov	r0, r6
 800612c:	f7ff ffa1 	bl	8006072 <__sfputs_r>
 8006130:	3001      	adds	r0, #1
 8006132:	f000 80a9 	beq.w	8006288 <_vfiprintf_r+0x1f0>
 8006136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006138:	445a      	add	r2, fp
 800613a:	9209      	str	r2, [sp, #36]	; 0x24
 800613c:	f89a 3000 	ldrb.w	r3, [sl]
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 80a1 	beq.w	8006288 <_vfiprintf_r+0x1f0>
 8006146:	2300      	movs	r3, #0
 8006148:	f04f 32ff 	mov.w	r2, #4294967295
 800614c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006150:	f10a 0a01 	add.w	sl, sl, #1
 8006154:	9304      	str	r3, [sp, #16]
 8006156:	9307      	str	r3, [sp, #28]
 8006158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800615c:	931a      	str	r3, [sp, #104]	; 0x68
 800615e:	4654      	mov	r4, sl
 8006160:	2205      	movs	r2, #5
 8006162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006166:	4854      	ldr	r0, [pc, #336]	; (80062b8 <_vfiprintf_r+0x220>)
 8006168:	f7fa f832 	bl	80001d0 <memchr>
 800616c:	9a04      	ldr	r2, [sp, #16]
 800616e:	b9d8      	cbnz	r0, 80061a8 <_vfiprintf_r+0x110>
 8006170:	06d1      	lsls	r1, r2, #27
 8006172:	bf44      	itt	mi
 8006174:	2320      	movmi	r3, #32
 8006176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800617a:	0713      	lsls	r3, r2, #28
 800617c:	bf44      	itt	mi
 800617e:	232b      	movmi	r3, #43	; 0x2b
 8006180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006184:	f89a 3000 	ldrb.w	r3, [sl]
 8006188:	2b2a      	cmp	r3, #42	; 0x2a
 800618a:	d015      	beq.n	80061b8 <_vfiprintf_r+0x120>
 800618c:	9a07      	ldr	r2, [sp, #28]
 800618e:	4654      	mov	r4, sl
 8006190:	2000      	movs	r0, #0
 8006192:	f04f 0c0a 	mov.w	ip, #10
 8006196:	4621      	mov	r1, r4
 8006198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800619c:	3b30      	subs	r3, #48	; 0x30
 800619e:	2b09      	cmp	r3, #9
 80061a0:	d94d      	bls.n	800623e <_vfiprintf_r+0x1a6>
 80061a2:	b1b0      	cbz	r0, 80061d2 <_vfiprintf_r+0x13a>
 80061a4:	9207      	str	r2, [sp, #28]
 80061a6:	e014      	b.n	80061d2 <_vfiprintf_r+0x13a>
 80061a8:	eba0 0308 	sub.w	r3, r0, r8
 80061ac:	fa09 f303 	lsl.w	r3, r9, r3
 80061b0:	4313      	orrs	r3, r2
 80061b2:	9304      	str	r3, [sp, #16]
 80061b4:	46a2      	mov	sl, r4
 80061b6:	e7d2      	b.n	800615e <_vfiprintf_r+0xc6>
 80061b8:	9b03      	ldr	r3, [sp, #12]
 80061ba:	1d19      	adds	r1, r3, #4
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	9103      	str	r1, [sp, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	bfbb      	ittet	lt
 80061c4:	425b      	neglt	r3, r3
 80061c6:	f042 0202 	orrlt.w	r2, r2, #2
 80061ca:	9307      	strge	r3, [sp, #28]
 80061cc:	9307      	strlt	r3, [sp, #28]
 80061ce:	bfb8      	it	lt
 80061d0:	9204      	strlt	r2, [sp, #16]
 80061d2:	7823      	ldrb	r3, [r4, #0]
 80061d4:	2b2e      	cmp	r3, #46	; 0x2e
 80061d6:	d10c      	bne.n	80061f2 <_vfiprintf_r+0x15a>
 80061d8:	7863      	ldrb	r3, [r4, #1]
 80061da:	2b2a      	cmp	r3, #42	; 0x2a
 80061dc:	d134      	bne.n	8006248 <_vfiprintf_r+0x1b0>
 80061de:	9b03      	ldr	r3, [sp, #12]
 80061e0:	1d1a      	adds	r2, r3, #4
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	9203      	str	r2, [sp, #12]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	bfb8      	it	lt
 80061ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80061ee:	3402      	adds	r4, #2
 80061f0:	9305      	str	r3, [sp, #20]
 80061f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80062c8 <_vfiprintf_r+0x230>
 80061f6:	7821      	ldrb	r1, [r4, #0]
 80061f8:	2203      	movs	r2, #3
 80061fa:	4650      	mov	r0, sl
 80061fc:	f7f9 ffe8 	bl	80001d0 <memchr>
 8006200:	b138      	cbz	r0, 8006212 <_vfiprintf_r+0x17a>
 8006202:	9b04      	ldr	r3, [sp, #16]
 8006204:	eba0 000a 	sub.w	r0, r0, sl
 8006208:	2240      	movs	r2, #64	; 0x40
 800620a:	4082      	lsls	r2, r0
 800620c:	4313      	orrs	r3, r2
 800620e:	3401      	adds	r4, #1
 8006210:	9304      	str	r3, [sp, #16]
 8006212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006216:	4829      	ldr	r0, [pc, #164]	; (80062bc <_vfiprintf_r+0x224>)
 8006218:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800621c:	2206      	movs	r2, #6
 800621e:	f7f9 ffd7 	bl	80001d0 <memchr>
 8006222:	2800      	cmp	r0, #0
 8006224:	d03f      	beq.n	80062a6 <_vfiprintf_r+0x20e>
 8006226:	4b26      	ldr	r3, [pc, #152]	; (80062c0 <_vfiprintf_r+0x228>)
 8006228:	bb1b      	cbnz	r3, 8006272 <_vfiprintf_r+0x1da>
 800622a:	9b03      	ldr	r3, [sp, #12]
 800622c:	3307      	adds	r3, #7
 800622e:	f023 0307 	bic.w	r3, r3, #7
 8006232:	3308      	adds	r3, #8
 8006234:	9303      	str	r3, [sp, #12]
 8006236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006238:	443b      	add	r3, r7
 800623a:	9309      	str	r3, [sp, #36]	; 0x24
 800623c:	e768      	b.n	8006110 <_vfiprintf_r+0x78>
 800623e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006242:	460c      	mov	r4, r1
 8006244:	2001      	movs	r0, #1
 8006246:	e7a6      	b.n	8006196 <_vfiprintf_r+0xfe>
 8006248:	2300      	movs	r3, #0
 800624a:	3401      	adds	r4, #1
 800624c:	9305      	str	r3, [sp, #20]
 800624e:	4619      	mov	r1, r3
 8006250:	f04f 0c0a 	mov.w	ip, #10
 8006254:	4620      	mov	r0, r4
 8006256:	f810 2b01 	ldrb.w	r2, [r0], #1
 800625a:	3a30      	subs	r2, #48	; 0x30
 800625c:	2a09      	cmp	r2, #9
 800625e:	d903      	bls.n	8006268 <_vfiprintf_r+0x1d0>
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0c6      	beq.n	80061f2 <_vfiprintf_r+0x15a>
 8006264:	9105      	str	r1, [sp, #20]
 8006266:	e7c4      	b.n	80061f2 <_vfiprintf_r+0x15a>
 8006268:	fb0c 2101 	mla	r1, ip, r1, r2
 800626c:	4604      	mov	r4, r0
 800626e:	2301      	movs	r3, #1
 8006270:	e7f0      	b.n	8006254 <_vfiprintf_r+0x1bc>
 8006272:	ab03      	add	r3, sp, #12
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	462a      	mov	r2, r5
 8006278:	4b12      	ldr	r3, [pc, #72]	; (80062c4 <_vfiprintf_r+0x22c>)
 800627a:	a904      	add	r1, sp, #16
 800627c:	4630      	mov	r0, r6
 800627e:	f3af 8000 	nop.w
 8006282:	4607      	mov	r7, r0
 8006284:	1c78      	adds	r0, r7, #1
 8006286:	d1d6      	bne.n	8006236 <_vfiprintf_r+0x19e>
 8006288:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800628a:	07d9      	lsls	r1, r3, #31
 800628c:	d405      	bmi.n	800629a <_vfiprintf_r+0x202>
 800628e:	89ab      	ldrh	r3, [r5, #12]
 8006290:	059a      	lsls	r2, r3, #22
 8006292:	d402      	bmi.n	800629a <_vfiprintf_r+0x202>
 8006294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006296:	f7ff f997 	bl	80055c8 <__retarget_lock_release_recursive>
 800629a:	89ab      	ldrh	r3, [r5, #12]
 800629c:	065b      	lsls	r3, r3, #25
 800629e:	f53f af1d 	bmi.w	80060dc <_vfiprintf_r+0x44>
 80062a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062a4:	e71c      	b.n	80060e0 <_vfiprintf_r+0x48>
 80062a6:	ab03      	add	r3, sp, #12
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	462a      	mov	r2, r5
 80062ac:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <_vfiprintf_r+0x22c>)
 80062ae:	a904      	add	r1, sp, #16
 80062b0:	4630      	mov	r0, r6
 80062b2:	f7ff fc85 	bl	8005bc0 <_printf_i>
 80062b6:	e7e4      	b.n	8006282 <_vfiprintf_r+0x1ea>
 80062b8:	08007194 	.word	0x08007194
 80062bc:	0800719e 	.word	0x0800719e
 80062c0:	00000000 	.word	0x00000000
 80062c4:	08006073 	.word	0x08006073
 80062c8:	0800719a 	.word	0x0800719a

080062cc <__swbuf_r>:
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	460e      	mov	r6, r1
 80062d0:	4614      	mov	r4, r2
 80062d2:	4605      	mov	r5, r0
 80062d4:	b118      	cbz	r0, 80062de <__swbuf_r+0x12>
 80062d6:	6a03      	ldr	r3, [r0, #32]
 80062d8:	b90b      	cbnz	r3, 80062de <__swbuf_r+0x12>
 80062da:	f7ff f861 	bl	80053a0 <__sinit>
 80062de:	69a3      	ldr	r3, [r4, #24]
 80062e0:	60a3      	str	r3, [r4, #8]
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	071a      	lsls	r2, r3, #28
 80062e6:	d525      	bpl.n	8006334 <__swbuf_r+0x68>
 80062e8:	6923      	ldr	r3, [r4, #16]
 80062ea:	b31b      	cbz	r3, 8006334 <__swbuf_r+0x68>
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	6922      	ldr	r2, [r4, #16]
 80062f0:	1a98      	subs	r0, r3, r2
 80062f2:	6963      	ldr	r3, [r4, #20]
 80062f4:	b2f6      	uxtb	r6, r6
 80062f6:	4283      	cmp	r3, r0
 80062f8:	4637      	mov	r7, r6
 80062fa:	dc04      	bgt.n	8006306 <__swbuf_r+0x3a>
 80062fc:	4621      	mov	r1, r4
 80062fe:	4628      	mov	r0, r5
 8006300:	f7ff fe06 	bl	8005f10 <_fflush_r>
 8006304:	b9e0      	cbnz	r0, 8006340 <__swbuf_r+0x74>
 8006306:	68a3      	ldr	r3, [r4, #8]
 8006308:	3b01      	subs	r3, #1
 800630a:	60a3      	str	r3, [r4, #8]
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	6022      	str	r2, [r4, #0]
 8006312:	701e      	strb	r6, [r3, #0]
 8006314:	6962      	ldr	r2, [r4, #20]
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	429a      	cmp	r2, r3
 800631a:	d004      	beq.n	8006326 <__swbuf_r+0x5a>
 800631c:	89a3      	ldrh	r3, [r4, #12]
 800631e:	07db      	lsls	r3, r3, #31
 8006320:	d506      	bpl.n	8006330 <__swbuf_r+0x64>
 8006322:	2e0a      	cmp	r6, #10
 8006324:	d104      	bne.n	8006330 <__swbuf_r+0x64>
 8006326:	4621      	mov	r1, r4
 8006328:	4628      	mov	r0, r5
 800632a:	f7ff fdf1 	bl	8005f10 <_fflush_r>
 800632e:	b938      	cbnz	r0, 8006340 <__swbuf_r+0x74>
 8006330:	4638      	mov	r0, r7
 8006332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006334:	4621      	mov	r1, r4
 8006336:	4628      	mov	r0, r5
 8006338:	f000 f806 	bl	8006348 <__swsetup_r>
 800633c:	2800      	cmp	r0, #0
 800633e:	d0d5      	beq.n	80062ec <__swbuf_r+0x20>
 8006340:	f04f 37ff 	mov.w	r7, #4294967295
 8006344:	e7f4      	b.n	8006330 <__swbuf_r+0x64>
	...

08006348 <__swsetup_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	4b2a      	ldr	r3, [pc, #168]	; (80063f4 <__swsetup_r+0xac>)
 800634c:	4605      	mov	r5, r0
 800634e:	6818      	ldr	r0, [r3, #0]
 8006350:	460c      	mov	r4, r1
 8006352:	b118      	cbz	r0, 800635c <__swsetup_r+0x14>
 8006354:	6a03      	ldr	r3, [r0, #32]
 8006356:	b90b      	cbnz	r3, 800635c <__swsetup_r+0x14>
 8006358:	f7ff f822 	bl	80053a0 <__sinit>
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006362:	0718      	lsls	r0, r3, #28
 8006364:	d422      	bmi.n	80063ac <__swsetup_r+0x64>
 8006366:	06d9      	lsls	r1, r3, #27
 8006368:	d407      	bmi.n	800637a <__swsetup_r+0x32>
 800636a:	2309      	movs	r3, #9
 800636c:	602b      	str	r3, [r5, #0]
 800636e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006372:	81a3      	strh	r3, [r4, #12]
 8006374:	f04f 30ff 	mov.w	r0, #4294967295
 8006378:	e034      	b.n	80063e4 <__swsetup_r+0x9c>
 800637a:	0758      	lsls	r0, r3, #29
 800637c:	d512      	bpl.n	80063a4 <__swsetup_r+0x5c>
 800637e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006380:	b141      	cbz	r1, 8006394 <__swsetup_r+0x4c>
 8006382:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006386:	4299      	cmp	r1, r3
 8006388:	d002      	beq.n	8006390 <__swsetup_r+0x48>
 800638a:	4628      	mov	r0, r5
 800638c:	f7ff f952 	bl	8005634 <_free_r>
 8006390:	2300      	movs	r3, #0
 8006392:	6363      	str	r3, [r4, #52]	; 0x34
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800639a:	81a3      	strh	r3, [r4, #12]
 800639c:	2300      	movs	r3, #0
 800639e:	6063      	str	r3, [r4, #4]
 80063a0:	6923      	ldr	r3, [r4, #16]
 80063a2:	6023      	str	r3, [r4, #0]
 80063a4:	89a3      	ldrh	r3, [r4, #12]
 80063a6:	f043 0308 	orr.w	r3, r3, #8
 80063aa:	81a3      	strh	r3, [r4, #12]
 80063ac:	6923      	ldr	r3, [r4, #16]
 80063ae:	b94b      	cbnz	r3, 80063c4 <__swsetup_r+0x7c>
 80063b0:	89a3      	ldrh	r3, [r4, #12]
 80063b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ba:	d003      	beq.n	80063c4 <__swsetup_r+0x7c>
 80063bc:	4621      	mov	r1, r4
 80063be:	4628      	mov	r0, r5
 80063c0:	f000 f88c 	bl	80064dc <__smakebuf_r>
 80063c4:	89a0      	ldrh	r0, [r4, #12]
 80063c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063ca:	f010 0301 	ands.w	r3, r0, #1
 80063ce:	d00a      	beq.n	80063e6 <__swsetup_r+0x9e>
 80063d0:	2300      	movs	r3, #0
 80063d2:	60a3      	str	r3, [r4, #8]
 80063d4:	6963      	ldr	r3, [r4, #20]
 80063d6:	425b      	negs	r3, r3
 80063d8:	61a3      	str	r3, [r4, #24]
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	b943      	cbnz	r3, 80063f0 <__swsetup_r+0xa8>
 80063de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063e2:	d1c4      	bne.n	800636e <__swsetup_r+0x26>
 80063e4:	bd38      	pop	{r3, r4, r5, pc}
 80063e6:	0781      	lsls	r1, r0, #30
 80063e8:	bf58      	it	pl
 80063ea:	6963      	ldrpl	r3, [r4, #20]
 80063ec:	60a3      	str	r3, [r4, #8]
 80063ee:	e7f4      	b.n	80063da <__swsetup_r+0x92>
 80063f0:	2000      	movs	r0, #0
 80063f2:	e7f7      	b.n	80063e4 <__swsetup_r+0x9c>
 80063f4:	20000150 	.word	0x20000150

080063f8 <_raise_r>:
 80063f8:	291f      	cmp	r1, #31
 80063fa:	b538      	push	{r3, r4, r5, lr}
 80063fc:	4604      	mov	r4, r0
 80063fe:	460d      	mov	r5, r1
 8006400:	d904      	bls.n	800640c <_raise_r+0x14>
 8006402:	2316      	movs	r3, #22
 8006404:	6003      	str	r3, [r0, #0]
 8006406:	f04f 30ff 	mov.w	r0, #4294967295
 800640a:	bd38      	pop	{r3, r4, r5, pc}
 800640c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800640e:	b112      	cbz	r2, 8006416 <_raise_r+0x1e>
 8006410:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006414:	b94b      	cbnz	r3, 800642a <_raise_r+0x32>
 8006416:	4620      	mov	r0, r4
 8006418:	f000 f830 	bl	800647c <_getpid_r>
 800641c:	462a      	mov	r2, r5
 800641e:	4601      	mov	r1, r0
 8006420:	4620      	mov	r0, r4
 8006422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006426:	f000 b817 	b.w	8006458 <_kill_r>
 800642a:	2b01      	cmp	r3, #1
 800642c:	d00a      	beq.n	8006444 <_raise_r+0x4c>
 800642e:	1c59      	adds	r1, r3, #1
 8006430:	d103      	bne.n	800643a <_raise_r+0x42>
 8006432:	2316      	movs	r3, #22
 8006434:	6003      	str	r3, [r0, #0]
 8006436:	2001      	movs	r0, #1
 8006438:	e7e7      	b.n	800640a <_raise_r+0x12>
 800643a:	2400      	movs	r4, #0
 800643c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006440:	4628      	mov	r0, r5
 8006442:	4798      	blx	r3
 8006444:	2000      	movs	r0, #0
 8006446:	e7e0      	b.n	800640a <_raise_r+0x12>

08006448 <raise>:
 8006448:	4b02      	ldr	r3, [pc, #8]	; (8006454 <raise+0xc>)
 800644a:	4601      	mov	r1, r0
 800644c:	6818      	ldr	r0, [r3, #0]
 800644e:	f7ff bfd3 	b.w	80063f8 <_raise_r>
 8006452:	bf00      	nop
 8006454:	20000150 	.word	0x20000150

08006458 <_kill_r>:
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	4d07      	ldr	r5, [pc, #28]	; (8006478 <_kill_r+0x20>)
 800645c:	2300      	movs	r3, #0
 800645e:	4604      	mov	r4, r0
 8006460:	4608      	mov	r0, r1
 8006462:	4611      	mov	r1, r2
 8006464:	602b      	str	r3, [r5, #0]
 8006466:	f7fa ffd9 	bl	800141c <_kill>
 800646a:	1c43      	adds	r3, r0, #1
 800646c:	d102      	bne.n	8006474 <_kill_r+0x1c>
 800646e:	682b      	ldr	r3, [r5, #0]
 8006470:	b103      	cbz	r3, 8006474 <_kill_r+0x1c>
 8006472:	6023      	str	r3, [r4, #0]
 8006474:	bd38      	pop	{r3, r4, r5, pc}
 8006476:	bf00      	nop
 8006478:	20000a38 	.word	0x20000a38

0800647c <_getpid_r>:
 800647c:	f7fa bfc6 	b.w	800140c <_getpid>

08006480 <_malloc_usable_size_r>:
 8006480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006484:	1f18      	subs	r0, r3, #4
 8006486:	2b00      	cmp	r3, #0
 8006488:	bfbc      	itt	lt
 800648a:	580b      	ldrlt	r3, [r1, r0]
 800648c:	18c0      	addlt	r0, r0, r3
 800648e:	4770      	bx	lr

08006490 <__swhatbuf_r>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	460c      	mov	r4, r1
 8006494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006498:	2900      	cmp	r1, #0
 800649a:	b096      	sub	sp, #88	; 0x58
 800649c:	4615      	mov	r5, r2
 800649e:	461e      	mov	r6, r3
 80064a0:	da0d      	bge.n	80064be <__swhatbuf_r+0x2e>
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80064a8:	f04f 0100 	mov.w	r1, #0
 80064ac:	bf0c      	ite	eq
 80064ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80064b2:	2340      	movne	r3, #64	; 0x40
 80064b4:	2000      	movs	r0, #0
 80064b6:	6031      	str	r1, [r6, #0]
 80064b8:	602b      	str	r3, [r5, #0]
 80064ba:	b016      	add	sp, #88	; 0x58
 80064bc:	bd70      	pop	{r4, r5, r6, pc}
 80064be:	466a      	mov	r2, sp
 80064c0:	f000 f848 	bl	8006554 <_fstat_r>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	dbec      	blt.n	80064a2 <__swhatbuf_r+0x12>
 80064c8:	9901      	ldr	r1, [sp, #4]
 80064ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80064ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80064d2:	4259      	negs	r1, r3
 80064d4:	4159      	adcs	r1, r3
 80064d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064da:	e7eb      	b.n	80064b4 <__swhatbuf_r+0x24>

080064dc <__smakebuf_r>:
 80064dc:	898b      	ldrh	r3, [r1, #12]
 80064de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064e0:	079d      	lsls	r5, r3, #30
 80064e2:	4606      	mov	r6, r0
 80064e4:	460c      	mov	r4, r1
 80064e6:	d507      	bpl.n	80064f8 <__smakebuf_r+0x1c>
 80064e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	6123      	str	r3, [r4, #16]
 80064f0:	2301      	movs	r3, #1
 80064f2:	6163      	str	r3, [r4, #20]
 80064f4:	b002      	add	sp, #8
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	ab01      	add	r3, sp, #4
 80064fa:	466a      	mov	r2, sp
 80064fc:	f7ff ffc8 	bl	8006490 <__swhatbuf_r>
 8006500:	9900      	ldr	r1, [sp, #0]
 8006502:	4605      	mov	r5, r0
 8006504:	4630      	mov	r0, r6
 8006506:	f7ff f909 	bl	800571c <_malloc_r>
 800650a:	b948      	cbnz	r0, 8006520 <__smakebuf_r+0x44>
 800650c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006510:	059a      	lsls	r2, r3, #22
 8006512:	d4ef      	bmi.n	80064f4 <__smakebuf_r+0x18>
 8006514:	f023 0303 	bic.w	r3, r3, #3
 8006518:	f043 0302 	orr.w	r3, r3, #2
 800651c:	81a3      	strh	r3, [r4, #12]
 800651e:	e7e3      	b.n	80064e8 <__smakebuf_r+0xc>
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	6020      	str	r0, [r4, #0]
 8006524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006528:	81a3      	strh	r3, [r4, #12]
 800652a:	9b00      	ldr	r3, [sp, #0]
 800652c:	6163      	str	r3, [r4, #20]
 800652e:	9b01      	ldr	r3, [sp, #4]
 8006530:	6120      	str	r0, [r4, #16]
 8006532:	b15b      	cbz	r3, 800654c <__smakebuf_r+0x70>
 8006534:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006538:	4630      	mov	r0, r6
 800653a:	f000 f81d 	bl	8006578 <_isatty_r>
 800653e:	b128      	cbz	r0, 800654c <__smakebuf_r+0x70>
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	f023 0303 	bic.w	r3, r3, #3
 8006546:	f043 0301 	orr.w	r3, r3, #1
 800654a:	81a3      	strh	r3, [r4, #12]
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	431d      	orrs	r5, r3
 8006550:	81a5      	strh	r5, [r4, #12]
 8006552:	e7cf      	b.n	80064f4 <__smakebuf_r+0x18>

08006554 <_fstat_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4d07      	ldr	r5, [pc, #28]	; (8006574 <_fstat_r+0x20>)
 8006558:	2300      	movs	r3, #0
 800655a:	4604      	mov	r4, r0
 800655c:	4608      	mov	r0, r1
 800655e:	4611      	mov	r1, r2
 8006560:	602b      	str	r3, [r5, #0]
 8006562:	f7fa ffba 	bl	80014da <_fstat>
 8006566:	1c43      	adds	r3, r0, #1
 8006568:	d102      	bne.n	8006570 <_fstat_r+0x1c>
 800656a:	682b      	ldr	r3, [r5, #0]
 800656c:	b103      	cbz	r3, 8006570 <_fstat_r+0x1c>
 800656e:	6023      	str	r3, [r4, #0]
 8006570:	bd38      	pop	{r3, r4, r5, pc}
 8006572:	bf00      	nop
 8006574:	20000a38 	.word	0x20000a38

08006578 <_isatty_r>:
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	4d06      	ldr	r5, [pc, #24]	; (8006594 <_isatty_r+0x1c>)
 800657c:	2300      	movs	r3, #0
 800657e:	4604      	mov	r4, r0
 8006580:	4608      	mov	r0, r1
 8006582:	602b      	str	r3, [r5, #0]
 8006584:	f7fa ffb9 	bl	80014fa <_isatty>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d102      	bne.n	8006592 <_isatty_r+0x1a>
 800658c:	682b      	ldr	r3, [r5, #0]
 800658e:	b103      	cbz	r3, 8006592 <_isatty_r+0x1a>
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	20000a38 	.word	0x20000a38

08006598 <_init>:
 8006598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659a:	bf00      	nop
 800659c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659e:	bc08      	pop	{r3}
 80065a0:	469e      	mov	lr, r3
 80065a2:	4770      	bx	lr

080065a4 <_fini>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	bf00      	nop
 80065a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065aa:	bc08      	pop	{r3}
 80065ac:	469e      	mov	lr, r3
 80065ae:	4770      	bx	lr
