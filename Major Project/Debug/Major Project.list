
Major Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  08006260  08006260  00007260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bb8  08006bb8  00008154  2**0
                  CONTENTS
  4 .ARM          00000008  08006bb8  08006bb8  00007bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bc0  08006bc0  00008154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bc0  08006bc0  00007bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006bc4  08006bc4  00007bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000154  20000000  08006bc8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008154  2**0
                  CONTENTS
 10 .bss          000008a8  20000154  20000154  00008154  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009fc  200009fc  00008154  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008154  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011170  00000000  00000000  00008184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003395  00000000  00000000  000192f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  0001c690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb7  00000000  00000000  0001d600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003dea7  00000000  00000000  0001e1b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000170b7  00000000  00000000  0005c05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7c8d  00000000  00000000  00073115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015ada2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047dc  00000000  00000000  0015ade8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0015f5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000154 	.word	0x20000154
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006248 	.word	0x08006248

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000158 	.word	0x20000158
 80001cc:	08006248 	.word	0x08006248

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <set_leds>:
#define INCORRECT 0b01010101

// Function set LEDs pattern by binary number
// input: binary led mask pattern
void set_leds(uint8_t led_mask_pattern)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800027a:	4b05      	ldr	r3, [pc, #20]	@ (8000290 <set_leds+0x20>)
 800027c:	60fb      	str	r3, [r7, #12]

	if (led_mask_pattern <= 255 && led_mask_pattern >= 0)
	{
		*led_register = led_mask_pattern;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	79fa      	ldrb	r2, [r7, #7]
 8000282:	701a      	strb	r2, [r3, #0]
	}
}
 8000284:	bf00      	nop
 8000286:	3714      	adds	r7, #20
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	48001015 	.word	0x48001015

08000294 <get_leds>:

uint8_t get_leds(void){
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800029a:	4b05      	ldr	r3, [pc, #20]	@ (80002b0 <get_leds+0x1c>)
 800029c:	607b      	str	r3, [r7, #4]
	return *led_register;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	781b      	ldrb	r3, [r3, #0]
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	48001015 	.word	0x48001015

080002b4 <correct_leds>:

void correct_leds(void){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
    // Turn on LEDs
    set_leds(CORRECT);
 80002b8:	20ff      	movs	r0, #255	@ 0xff
 80002ba:	f7ff ffd9 	bl	8000270 <set_leds>

    // Delay for 1 second (adjust delay according to system clock)
    delay(1000);
 80002be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002c2:	f001 f957 	bl	8001574 <delay>

    // Turn off LEDs
    set_leds(0);
 80002c6:	2000      	movs	r0, #0
 80002c8:	f7ff ffd2 	bl	8000270 <set_leds>
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <incorrect_leds>:

void incorrect_leds(void){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
    // Turn on LEDs
    set_leds(INCORRECT);
 80002d4:	2055      	movs	r0, #85	@ 0x55
 80002d6:	f7ff ffcb 	bl	8000270 <set_leds>

    // Delay for 1 second (adjust delay according to system clock)
    delay(1000);
 80002da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002de:	f001 f949 	bl	8001574 <delay>

    // Turn off LEDs
    set_leds(0);
 80002e2:	2000      	movs	r0, #0
 80002e4:	f7ff ffc4 	bl	8000270 <set_leds>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}

080002ec <end_leds>:

void end_leds(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	 // Turn on LEDs
	set_leds(CORRECT);
 80002f0:	20ff      	movs	r0, #255	@ 0xff
 80002f2:	f7ff ffbd 	bl	8000270 <set_leds>

	// Delay for 5 second (adjust delay according to system clock)
	delay(2000);
 80002f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002fa:	f001 f93b 	bl	8001574 <delay>

	// Turn off LEDs
	 set_leds(0);
 80002fe:	2000      	movs	r0, #0
 8000300:	f7ff ffb6 	bl	8000270 <set_leds>
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}

08000308 <chase_leds>:

void chase_leds(void){
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
	uint8_t mask = get_leds() << 1;
 800030e:	f7ff ffc1 	bl	8000294 <get_leds>
 8000312:	4603      	mov	r3, r0
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	71fb      	strb	r3, [r7, #7]
	set_leds(mask);
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ffa8 	bl	8000270 <set_leds>
	if (get_leds() == 0) {
 8000320:	f7ff ffb8 	bl	8000294 <get_leds>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d102      	bne.n	8000330 <chase_leds+0x28>
		set_leds(1);
 800032a:	2001      	movs	r0, #1
 800032c:	f7ff ffa0 	bl	8000270 <set_leds>
	}
}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <get_gyro_values>:
#include <stdio.h>

#include "BSP/stm32f3_discovery.h"
#include "BSP/stm32f3_discovery_gyroscope.h"

float get_gyro_values(void){
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
	float gyro_values[3];

	BSP_GYRO_GetXYZ(&gyro_values[0]);
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4618      	mov	r0, r3
 8000342:	f004 f851 	bl	80043e8 <BSP_GYRO_GetXYZ>

	return gyro_values[1]/20000;
 8000346:	edd7 7a02 	vldr	s15, [r7, #8]
 800034a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000360 <get_gyro_values+0x28>
 800034e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000352:	eef0 7a66 	vmov.f32	s15, s13
}
 8000356:	eeb0 0a67 	vmov.f32	s0, s15
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	469c4000 	.word	0x469c4000

08000364 <randomWord>:
#include "stm32f303xc.h"
#include "timers.h"

#define NUM_WORDS 100 // Total number of words in the array

char* randomWord() {
 8000364:	b580      	push	{r7, lr}
 8000366:	b0ec      	sub	sp, #432	@ 0x1b0
 8000368:	af00      	add	r7, sp, #0
    static char* words[NUM_WORDS]; // Static array to store words
    static int usedIndices[NUM_WORDS] = {0}; // Static array to track used indices
    static int wordsCount = 0; // Count of words added to the array

    // Check if all words have been used, reset if needed
    if (wordsCount == NUM_WORDS) {
 800036a:	4b29      	ldr	r3, [pc, #164]	@ (8000410 <randomWord+0xac>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b64      	cmp	r3, #100	@ 0x64
 8000370:	d108      	bne.n	8000384 <randomWord+0x20>
        wordsCount = 0;
 8000372:	4b27      	ldr	r3, [pc, #156]	@ (8000410 <randomWord+0xac>)
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
        memset(usedIndices, 0, sizeof(usedIndices));
 8000378:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800037c:	2100      	movs	r1, #0
 800037e:	4825      	ldr	r0, [pc, #148]	@ (8000414 <randomWord+0xb0>)
 8000380:	f004 ff09 	bl	8005196 <memset>
    }

	char *allWords[] = {
 8000384:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000388:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800038c:	4a22      	ldr	r2, [pc, #136]	@ (8000418 <randomWord+0xb4>)
 800038e:	4618      	mov	r0, r3
 8000390:	4611      	mov	r1, r2
 8000392:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8000396:	461a      	mov	r2, r3
 8000398:	f004 ff81 	bl	800529e <memcpy>
	        "Drinking", "Typing", "Eating", "Having a snowball fight", "Playing the guitar",
	        "Surfing", "Yawning", "Playing golf", "Praying", "Brushing teeth",
	        "Showering", "Meditating", "Singing"
	};

    int numWords = sizeof(allWords) / sizeof(allWords[0]); // Calculate the number of words in the array
 800039c:	2369      	movs	r3, #105	@ 0x69
 800039e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac

    int randomIndex;
    do {
        randomIndex = rand() % numWords; // Generate a random index within the bounds of the array
 80003a2:	f004 fd95 	bl	8004ed0 <rand>
 80003a6:	4603      	mov	r3, r0
 80003a8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80003ac:	fb93 f2f2 	sdiv	r2, r3, r2
 80003b0:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 80003b4:	fb01 f202 	mul.w	r2, r1, r2
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    } while (usedIndices[randomIndex]); // Check if the word at this index has been used
 80003be:	4a15      	ldr	r2, [pc, #84]	@ (8000414 <randomWord+0xb0>)
 80003c0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80003c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d1ea      	bne.n	80003a2 <randomWord+0x3e>

    usedIndices[randomIndex] = 1; // Mark this index as used
 80003cc:	4a11      	ldr	r2, [pc, #68]	@ (8000414 <randomWord+0xb0>)
 80003ce:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80003d2:	2101      	movs	r1, #1
 80003d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    words[wordsCount++] = allWords[randomIndex]; // Add the word to the array
 80003d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000410 <randomWord+0xac>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	1c5a      	adds	r2, r3, #1
 80003de:	490c      	ldr	r1, [pc, #48]	@ (8000410 <randomWord+0xac>)
 80003e0:	600a      	str	r2, [r1, #0]
 80003e2:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 80003e6:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 80003ea:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 80003ee:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80003f2:	490a      	ldr	r1, [pc, #40]	@ (800041c <randomWord+0xb8>)
 80003f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return words[wordsCount - 1]; // Return the last added word
 80003f8:	4b05      	ldr	r3, [pc, #20]	@ (8000410 <randomWord+0xac>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	4a07      	ldr	r2, [pc, #28]	@ (800041c <randomWord+0xb8>)
 8000400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000404:	4618      	mov	r0, r3
 8000406:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000174 	.word	0x20000174
 8000414:	20000178 	.word	0x20000178
 8000418:	08006664 	.word	0x08006664
 800041c:	20000308 	.word	0x20000308

08000420 <set_timesUp>:

uint8_t timesUp = 0;

void set_timesUp(){
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
    if (timesUp == 0) {
 8000424:	4b07      	ldr	r3, [pc, #28]	@ (8000444 <set_timesUp+0x24>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d103      	bne.n	8000434 <set_timesUp+0x14>
        timesUp = 1;
 800042c:	4b05      	ldr	r3, [pc, #20]	@ (8000444 <set_timesUp+0x24>)
 800042e:	2201      	movs	r2, #1
 8000430:	701a      	strb	r2, [r3, #0]
    }
    else {
        timesUp = 0;
    }
}
 8000432:	e002      	b.n	800043a <set_timesUp+0x1a>
        timesUp = 0;
 8000434:	4b03      	ldr	r3, [pc, #12]	@ (8000444 <set_timesUp+0x24>)
 8000436:	2200      	movs	r2, #0
 8000438:	701a      	strb	r2, [r3, #0]
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	20000170 	.word	0x20000170

08000448 <headsUp>:

void headsUp(uint8_t *P1score, uint8_t *P2score){
 8000448:	b5b0      	push	{r4, r5, r7, lr}
 800044a:	b09a      	sub	sp, #104	@ 0x68
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]

	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000452:	4b7b      	ldr	r3, [pc, #492]	@ (8000640 <headsUp+0x1f8>)
 8000454:	f107 041c 	add.w	r4, r7, #28
 8000458:	461d      	mov	r5, r3
 800045a:	6828      	ldr	r0, [r5, #0]
 800045c:	6869      	ldr	r1, [r5, #4]
 800045e:	68aa      	ldr	r2, [r5, #8]
 8000460:	68eb      	ldr	r3, [r5, #12]
 8000462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000464:	6928      	ldr	r0, [r5, #16]
 8000466:	6020      	str	r0, [r4, #0]
 8000468:	7d2b      	ldrb	r3, [r5, #20]
 800046a:	7123      	strb	r3, [r4, #4]
 800046c:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 8000470:	222b      	movs	r2, #43	@ 0x2b
 8000472:	2100      	movs	r1, #0
 8000474:	4618      	mov	r0, r3
 8000476:	f004 fe8e 	bl	8005196 <memset>

	for (int i = 1; i <= 2; i++) {
 800047a:	2301      	movs	r3, #1
 800047c:	667b      	str	r3, [r7, #100]	@ 0x64
 800047e:	e0d6      	b.n	800062e <headsUp+0x1e6>
		uint8_t Pscore = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

		sprintf(string_to_send, "Player %d your timer starts now!\r\n", i);
 8000486:	f107 031c 	add.w	r3, r7, #28
 800048a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800048c:	496d      	ldr	r1, [pc, #436]	@ (8000644 <headsUp+0x1fc>)
 800048e:	4618      	mov	r0, r3
 8000490:	f004 fe1e 	bl	80050d0 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000494:	f107 031c 	add.w	r3, r7, #28
 8000498:	496b      	ldr	r1, [pc, #428]	@ (8000648 <headsUp+0x200>)
 800049a:	4618      	mov	r0, r3
 800049c:	f000 fd53 	bl	8000f46 <SerialOutputString>
		game_timer(30000, &set_timesUp);
 80004a0:	496a      	ldr	r1, [pc, #424]	@ (800064c <headsUp+0x204>)
 80004a2:	f247 5030 	movw	r0, #30000	@ 0x7530
 80004a6:	f001 f803 	bl	80014b0 <game_timer>

		while (timesUp == 0) {
 80004aa:	e06f      	b.n	800058c <headsUp+0x144>
			uint8_t outcome = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62


			uint8_t guessWord[20];
			char* random = randomWord();
 80004b2:	f7ff ff57 	bl	8000364 <randomWord>
 80004b6:	65f8      	str	r0, [r7, #92]	@ 0x5c
			strcpy((char*)guessWord, random);
 80004b8:	f107 0308 	add.w	r3, r7, #8
 80004bc:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80004be:	4618      	mov	r0, r3
 80004c0:	f004 fee5 	bl	800528e <strcpy>
			sprintf(string_to_send, "%s\r\n", (char*)guessWord);
 80004c4:	f107 0208 	add.w	r2, r7, #8
 80004c8:	f107 031c 	add.w	r3, r7, #28
 80004cc:	4960      	ldr	r1, [pc, #384]	@ (8000650 <headsUp+0x208>)
 80004ce:	4618      	mov	r0, r3
 80004d0:	f004 fdfe 	bl	80050d0 <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 80004d4:	f107 031c 	add.w	r3, r7, #28
 80004d8:	495b      	ldr	r1, [pc, #364]	@ (8000648 <headsUp+0x200>)
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 fd33 	bl	8000f46 <SerialOutputString>

			while (!outcome){
 80004e0:	e026      	b.n	8000530 <headsUp+0xe8>
				if (get_gyro_values() >= 25){
 80004e2:	f7ff ff29 	bl	8000338 <get_gyro_values>
 80004e6:	eef0 7a40 	vmov.f32	s15, s0
 80004ea:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80004ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80004f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004f6:	db02      	blt.n	80004fe <headsUp+0xb6>
					outcome = 1;
 80004f8:	2301      	movs	r3, #1
 80004fa:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
				}
				if (get_gyro_values() <= -25){
 80004fe:	f7ff ff1b 	bl	8000338 <get_gyro_values>
 8000502:	eef0 7a40 	vmov.f32	s15, s0
 8000506:	eebb 7a09 	vmov.f32	s14, #185	@ 0xc1c80000 -25.0
 800050a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800050e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000512:	d802      	bhi.n	800051a <headsUp+0xd2>
					outcome = 2;
 8000514:	2302      	movs	r3, #2
 8000516:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
				}
				if (timesUp){
 800051a:	4b4e      	ldr	r3, [pc, #312]	@ (8000654 <headsUp+0x20c>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d003      	beq.n	800052a <headsUp+0xe2>
					outcome = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
					break;
 8000528:	e006      	b.n	8000538 <headsUp+0xf0>
				}
				delay(100);
 800052a:	2064      	movs	r0, #100	@ 0x64
 800052c:	f001 f822 	bl	8001574 <delay>
			while (!outcome){
 8000530:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8000534:	2b00      	cmp	r3, #0
 8000536:	d0d4      	beq.n	80004e2 <headsUp+0x9a>
			}

			if (outcome == 1){
 8000538:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800053c:	2b01      	cmp	r3, #1
 800053e:	d113      	bne.n	8000568 <headsUp+0x120>
				Pscore++;
 8000540:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000544:	3301      	adds	r3, #1
 8000546:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
				sprintf(string_to_send, "Correct!\r\n");
 800054a:	f107 031c 	add.w	r3, r7, #28
 800054e:	4942      	ldr	r1, [pc, #264]	@ (8000658 <headsUp+0x210>)
 8000550:	4618      	mov	r0, r3
 8000552:	f004 fdbd 	bl	80050d0 <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	493b      	ldr	r1, [pc, #236]	@ (8000648 <headsUp+0x200>)
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fcf2 	bl	8000f46 <SerialOutputString>
				correct_leds();
 8000562:	f7ff fea7 	bl	80002b4 <correct_leds>
 8000566:	e011      	b.n	800058c <headsUp+0x144>
			}
			else if (outcome == 2){
 8000568:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800056c:	2b02      	cmp	r3, #2
 800056e:	d112      	bne.n	8000596 <headsUp+0x14e>
				sprintf(string_to_send, "Pass!\r\n");
 8000570:	f107 031c 	add.w	r3, r7, #28
 8000574:	4939      	ldr	r1, [pc, #228]	@ (800065c <headsUp+0x214>)
 8000576:	4618      	mov	r0, r3
 8000578:	f004 fdaa 	bl	80050d0 <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 800057c:	f107 031c 	add.w	r3, r7, #28
 8000580:	4931      	ldr	r1, [pc, #196]	@ (8000648 <headsUp+0x200>)
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fcdf 	bl	8000f46 <SerialOutputString>
				incorrect_leds();
 8000588:	f7ff fea2 	bl	80002d0 <incorrect_leds>
		while (timesUp == 0) {
 800058c:	4b31      	ldr	r3, [pc, #196]	@ (8000654 <headsUp+0x20c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d08b      	beq.n	80004ac <headsUp+0x64>
 8000594:	e000      	b.n	8000598 <headsUp+0x150>
			}
			else{
				break;
 8000596:	bf00      	nop
			}
		}
		sprintf(string_to_send, "Time's Up! Player %d's score is %d!\r\n", i, Pscore);
 8000598:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800059c:	f107 001c 	add.w	r0, r7, #28
 80005a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80005a2:	492f      	ldr	r1, [pc, #188]	@ (8000660 <headsUp+0x218>)
 80005a4:	f004 fd94 	bl	80050d0 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 80005a8:	f107 031c 	add.w	r3, r7, #28
 80005ac:	4926      	ldr	r1, [pc, #152]	@ (8000648 <headsUp+0x200>)
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 fcc9 	bl	8000f46 <SerialOutputString>
		end_leds();
 80005b4:	f7ff fe9a 	bl	80002ec <end_leds>
		if (i == 1){
 80005b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d11a      	bne.n	80005f4 <headsUp+0x1ac>
			*P1score = Pscore;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 80005c4:	701a      	strb	r2, [r3, #0]
			sprintf(string_to_send, "Press to continue\r\n");
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	4926      	ldr	r1, [pc, #152]	@ (8000664 <headsUp+0x21c>)
 80005cc:	4618      	mov	r0, r3
 80005ce:	f004 fd7f 	bl	80050d0 <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	491c      	ldr	r1, [pc, #112]	@ (8000648 <headsUp+0x200>)
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fcb4 	bl	8000f46 <SerialOutputString>
			while ((GPIOA->IDR & 0x01) == 0) {}
 80005de:	bf00      	nop
 80005e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005e4:	691b      	ldr	r3, [r3, #16]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f8      	beq.n	80005e0 <headsUp+0x198>
			set_timesUp();
 80005ee:	f7ff ff17 	bl	8000420 <set_timesUp>
 80005f2:	e019      	b.n	8000628 <headsUp+0x1e0>
		}
		else {
			*P2score = Pscore;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 80005fa:	701a      	strb	r2, [r3, #0]
			sprintf(string_to_send, "Press to continue\r\n");
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4918      	ldr	r1, [pc, #96]	@ (8000664 <headsUp+0x21c>)
 8000602:	4618      	mov	r0, r3
 8000604:	f004 fd64 	bl	80050d0 <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 8000608:	f107 031c 	add.w	r3, r7, #28
 800060c:	490e      	ldr	r1, [pc, #56]	@ (8000648 <headsUp+0x200>)
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fc99 	bl	8000f46 <SerialOutputString>
			while ((GPIOA->IDR & 0x01) == 0) {}
 8000614:	bf00      	nop
 8000616:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0f8      	beq.n	8000616 <headsUp+0x1ce>
			set_timesUp();
 8000624:	f7ff fefc 	bl	8000420 <set_timesUp>
	for (int i = 1; i <= 2; i++) {
 8000628:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800062a:	3301      	adds	r3, #1
 800062c:	667b      	str	r3, [r7, #100]	@ 0x64
 800062e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000630:	2b02      	cmp	r3, #2
 8000632:	f77f af25 	ble.w	8000480 <headsUp+0x38>
		}
	}
}
 8000636:	bf00      	nop
 8000638:	bf00      	nop
 800063a:	3768      	adds	r7, #104	@ 0x68
 800063c:	46bd      	mov	sp, r7
 800063e:	bdb0      	pop	{r4, r5, r7, pc}
 8000640:	08006884 	.word	0x08006884
 8000644:	08006808 	.word	0x08006808
 8000648:	20000000 	.word	0x20000000
 800064c:	08000421 	.word	0x08000421
 8000650:	0800682c 	.word	0x0800682c
 8000654:	20000170 	.word	0x20000170
 8000658:	08006834 	.word	0x08006834
 800065c:	08006840 	.word	0x08006840
 8000660:	08006848 	.word	0x08006848
 8000664:	08006870 	.word	0x08006870

08000668 <initialise_board>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_USB_PCD_Init(void);

void initialise_board() {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066e:	f000 ffdd 	bl	800162c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000672:	f000 f839 	bl	80006e8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000676:	f000 f939 	bl	80008ec <MX_GPIO_Init>
  MX_I2C1_Init();
 800067a:	f000 f897 	bl	80007ac <MX_I2C1_Init>
  MX_SPI1_Init();
 800067e:	f000 f8d5 	bl	800082c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000682:	f000 f911 	bl	80008a8 <MX_USB_PCD_Init>
  
  BSP_GYRO_Init();
 8000686:	f003 fdfb 	bl	8004280 <BSP_GYRO_Init>

  RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 800068a:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <initialise_board+0x70>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	4a12      	ldr	r2, [pc, #72]	@ (80006d8 <initialise_board+0x70>)
 8000690:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 8000694:	6153      	str	r3, [r2, #20]

  RCC->APB1ENR |=  RCC_APB1ENR_TIM2EN;
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <initialise_board+0x70>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	4a0f      	ldr	r2, [pc, #60]	@ (80006d8 <initialise_board+0x70>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	61d3      	str	r3, [r2, #28]
  RCC->APB1ENR |=  RCC_APB1ENR_TIM3EN;
 80006a2:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <initialise_board+0x70>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	4a0c      	ldr	r2, [pc, #48]	@ (80006d8 <initialise_board+0x70>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	61d3      	str	r3, [r2, #28]

  SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 80006ae:	2200      	movs	r2, #0
 80006b0:	490a      	ldr	r1, [pc, #40]	@ (80006dc <initialise_board+0x74>)
 80006b2:	2004      	movs	r0, #4
 80006b4:	f000 fba8 	bl	8000e08 <SerialInitialise>
  SerialInitialise(BAUD_115200, &UART4_PORT, 0x00);
 80006b8:	2200      	movs	r2, #0
 80006ba:	4909      	ldr	r1, [pc, #36]	@ (80006e0 <initialise_board+0x78>)
 80006bc:	2004      	movs	r0, #4
 80006be:	f000 fba3 	bl	8000e08 <SerialInitialise>

  uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <initialise_board+0x7c>)
 80006c4:	607b      	str	r3, [r7, #4]
  *led_output_registers = 0x5555;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f245 5255 	movw	r2, #21845	@ 0x5555
 80006cc:	801a      	strh	r2, [r3, #0]
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20000040 	.word	0x20000040
 80006e4:	48001002 	.word	0x48001002

080006e8 <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b09e      	sub	sp, #120	@ 0x78
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80006f2:	2228      	movs	r2, #40	@ 0x28
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f004 fd4d 	bl	8005196 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800070c:	463b      	mov	r3, r7
 800070e:	223c      	movs	r2, #60	@ 0x3c
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f004 fd3f 	bl	8005196 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000718:	2303      	movs	r3, #3
 800071a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800071c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000720:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000726:	2301      	movs	r3, #1
 8000728:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072a:	2310      	movs	r3, #16
 800072c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	2302      	movs	r3, #2
 8000730:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000732:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000736:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000738:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800073c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fd24 	bl	8002190 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800074e:	f000 f94b 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2302      	movs	r3, #2
 8000758:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000762:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000768:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800076c:	2101      	movs	r1, #1
 800076e:	4618      	mov	r0, r3
 8000770:	f002 fd4c 	bl	800320c <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800077a:	f000 f935 	bl	80009e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800077e:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <SystemClock_Config+0xc0>)
 8000780:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000786:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800078a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	4618      	mov	r0, r3
 8000790:	f002 ff22 	bl	80035d8 <HAL_RCCEx_PeriphCLKConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800079a:	f000 f925 	bl	80009e8 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3778      	adds	r7, #120	@ 0x78
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	00020020 	.word	0x00020020

080007ac <MX_I2C1_Init>:

// I2C1 Initialization Function
static void MX_I2C1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000824 <MX_I2C1_Init+0x78>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000828 <MX_I2C1_Init+0x7c>)
 80007ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007bc:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c2:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ce:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e6:	480e      	ldr	r0, [pc, #56]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007e8:	f001 fada 	bl	8001da0 <HAL_I2C_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007f2:	f000 f8f9 	bl	80009e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f6:	2100      	movs	r1, #0
 80007f8:	4809      	ldr	r0, [pc, #36]	@ (8000820 <MX_I2C1_Init+0x74>)
 80007fa:	f001 fb60 	bl	8001ebe <HAL_I2CEx_ConfigAnalogFilter>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000804:	f000 f8f0 	bl	80009e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000808:	2100      	movs	r1, #0
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_I2C1_Init+0x74>)
 800080c:	f001 fba2 	bl	8001f54 <HAL_I2CEx_ConfigDigitalFilter>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 f8e7 	bl	80009e8 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000498 	.word	0x20000498
 8000824:	40005400 	.word	0x40005400
 8000828:	2000090e 	.word	0x2000090e

0800082c <MX_SPI1_Init>:

// SPI1 Initialization Function
static void MX_SPI1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000830:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <MX_SPI1_Init+0x74>)
 8000832:	4a1c      	ldr	r2, [pc, #112]	@ (80008a4 <MX_SPI1_Init+0x78>)
 8000834:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000836:	4b1a      	ldr	r3, [pc, #104]	@ (80008a0 <MX_SPI1_Init+0x74>)
 8000838:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800083c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800083e:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <MX_SPI1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000844:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <MX_SPI1_Init+0x74>)
 8000846:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800084a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800084c:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_SPI1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <MX_SPI1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_SPI1_Init+0x74>)
 800085a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800085e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_SPI1_Init+0x74>)
 8000862:	2208      	movs	r2, #8
 8000864:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_SPI1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_SPI1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <MX_SPI1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000878:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_SPI1_Init+0x74>)
 800087a:	2207      	movs	r2, #7
 800087c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <MX_SPI1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_SPI1_Init+0x74>)
 8000886:	2208      	movs	r2, #8
 8000888:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_SPI1_Init+0x74>)
 800088c:	f003 f854 	bl	8003938 <HAL_SPI_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000896:	f000 f8a7 	bl	80009e8 <Error_Handler>
  }
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200004ec 	.word	0x200004ec
 80008a4:	40013000 	.word	0x40013000

080008a8 <MX_USB_PCD_Init>:

// USB Initialization Function
static void MX_USB_PCD_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  hpcd_USB_FS.Instance = USB;
 80008ac:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <MX_USB_PCD_Init+0x3c>)
 80008ae:	4a0e      	ldr	r2, [pc, #56]	@ (80008e8 <MX_USB_PCD_Init+0x40>)
 80008b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <MX_USB_PCD_Init+0x3c>)
 80008b4:	2208      	movs	r2, #8
 80008b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <MX_USB_PCD_Init+0x3c>)
 80008ba:	2202      	movs	r2, #2
 80008bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_USB_PCD_Init+0x3c>)
 80008c0:	2202      	movs	r2, #2
 80008c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <MX_USB_PCD_Init+0x3c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_USB_PCD_Init+0x3c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_USB_PCD_Init+0x3c>)
 80008d2:	f001 fb8b 	bl	8001fec <HAL_PCD_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80008dc:	f000 f884 	bl	80009e8 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000550 	.word	0x20000550
 80008e8:	40005c00 	.word	0x40005c00

080008ec <MX_GPIO_Init>:

// GPIO Initialization Function
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	@ 0x28
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000902:	4b37      	ldr	r3, [pc, #220]	@ (80009e0 <MX_GPIO_Init+0xf4>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	4a36      	ldr	r2, [pc, #216]	@ (80009e0 <MX_GPIO_Init+0xf4>)
 8000908:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800090c:	6153      	str	r3, [r2, #20]
 800090e:	4b34      	ldr	r3, [pc, #208]	@ (80009e0 <MX_GPIO_Init+0xf4>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b31      	ldr	r3, [pc, #196]	@ (80009e0 <MX_GPIO_Init+0xf4>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	4a30      	ldr	r2, [pc, #192]	@ (80009e0 <MX_GPIO_Init+0xf4>)
 8000920:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000924:	6153      	str	r3, [r2, #20]
 8000926:	4b2e      	ldr	r3, [pc, #184]	@ (80009e0 <MX_GPIO_Init+0xf4>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000932:	4b2b      	ldr	r3, [pc, #172]	@ (80009e0 <MX_GPIO_Init+0xf4>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4a2a      	ldr	r2, [pc, #168]	@ (80009e0 <MX_GPIO_Init+0xf4>)
 8000938:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800093c:	6153      	str	r3, [r2, #20]
 800093e:	4b28      	ldr	r3, [pc, #160]	@ (80009e0 <MX_GPIO_Init+0xf4>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b25      	ldr	r3, [pc, #148]	@ (80009e0 <MX_GPIO_Init+0xf4>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a24      	ldr	r2, [pc, #144]	@ (80009e0 <MX_GPIO_Init+0xf4>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b22      	ldr	r3, [pc, #136]	@ (80009e0 <MX_GPIO_Init+0xf4>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b1f      	ldr	r3, [pc, #124]	@ (80009e0 <MX_GPIO_Init+0xf4>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a1e      	ldr	r2, [pc, #120]	@ (80009e0 <MX_GPIO_Init+0xf4>)
 8000968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <MX_GPIO_Init+0xf4>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800097a:	2200      	movs	r2, #0
 800097c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000980:	4818      	ldr	r0, [pc, #96]	@ (80009e4 <MX_GPIO_Init+0xf8>)
 8000982:	f001 f9f5 	bl	8001d70 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000986:	2337      	movs	r3, #55	@ 0x37
 8000988:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800098a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	4812      	ldr	r0, [pc, #72]	@ (80009e4 <MX_GPIO_Init+0xf8>)
 800099c:	f000 ff92 	bl	80018c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80009a0:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80009a4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	480a      	ldr	r0, [pc, #40]	@ (80009e4 <MX_GPIO_Init+0xf8>)
 80009ba:	f000 ff83 	bl	80018c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009be:	2301      	movs	r3, #1
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d4:	f000 ff76 	bl	80018c4 <HAL_GPIO_Init>
}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	@ 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40021000 	.word	0x40021000
 80009e4:	48001000 	.word	0x48001000

080009e8 <Error_Handler>:

// This function is executed in case of error occurrence.
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <Error_Handler+0x8>

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b5b0      	push	{r4, r5, r7, lr}
 80009f6:	b094      	sub	sp, #80	@ 0x50
 80009f8:	af00      	add	r7, sp, #0
	initialise_board();
 80009fa:	f7ff fe35 	bl	8000668 <initialise_board>

	uint8_t string_to_send[64] = "This is a string!\r\n";
 80009fe:	4ba6      	ldr	r3, [pc, #664]	@ (8000c98 <main+0x2a4>)
 8000a00:	f107 0408 	add.w	r4, r7, #8
 8000a04:	461d      	mov	r5, r3
 8000a06:	6828      	ldr	r0, [r5, #0]
 8000a08:	6869      	ldr	r1, [r5, #4]
 8000a0a:	68aa      	ldr	r2, [r5, #8]
 8000a0c:	68eb      	ldr	r3, [r5, #12]
 8000a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a10:	6928      	ldr	r0, [r5, #16]
 8000a12:	6020      	str	r0, [r4, #0]
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	222c      	movs	r2, #44	@ 0x2c
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f004 fbba 	bl	8005196 <memset>

	srand(get_gyro_values());
 8000a22:	f7ff fc89 	bl	8000338 <get_gyro_values>
 8000a26:	eef0 7a40 	vmov.f32	s15, s0
 8000a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a2e:	ee17 0a90 	vmov	r0, s15
 8000a32:	f004 fa1f 	bl	8004e74 <srand>

	uint8_t rounds = 1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8_t winner;
	uint8_t multiplier;
	uint8_t P1leaderboard = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	uint8_t P2leaderboard = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (rounds <= 3) {
 8000a48:	e063      	b.n	8000b12 <main+0x11e>
		uint8_t P1score = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	71fb      	strb	r3, [r7, #7]
		uint8_t P2score = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	71bb      	strb	r3, [r7, #6]

		headsUp(&P1score, &P2score);
 8000a52:	1dba      	adds	r2, r7, #6
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fcf5 	bl	8000448 <headsUp>

		// Winner determined
		if (P1score > P2score){
 8000a5e:	79fa      	ldrb	r2, [r7, #7]
 8000a60:	79bb      	ldrb	r3, [r7, #6]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d903      	bls.n	8000a6e <main+0x7a>
			// player 1 will play wavelength
			winner = 1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000a6c:	e006      	b.n	8000a7c <main+0x88>
		}
		else if (P2score > P1score){
 8000a6e:	79ba      	ldrb	r2, [r7, #6]
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d902      	bls.n	8000a7c <main+0x88>
			// player 2 will play wavelength
			winner = 2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

		// Multiplier
		//uint8_t buffer[8];
		//SerialInputString(buffer, 8, &UART4_PORT, '\r');
		//multiplier = atoi(buffer);
		multiplier = 2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

		// Wavelength multiplier
		if (winner == 1){
 8000a82:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d107      	bne.n	8000a9a <main+0xa6>
			P1score = P1score * multiplier;
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 8000a90:	fb12 f303 	smulbb	r3, r2, r3
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	71fb      	strb	r3, [r7, #7]
 8000a98:	e00a      	b.n	8000ab0 <main+0xbc>
		}
		else if (winner == 2){
 8000a9a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d106      	bne.n	8000ab0 <main+0xbc>
			P2score = P2score * multiplier;
 8000aa2:	79bb      	ldrb	r3, [r7, #6]
 8000aa4:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 8000aa8:	fb12 f303 	smulbb	r3, r2, r3
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	71bb      	strb	r3, [r7, #6]
		}

		// Update leaderboard
		P1leaderboard = P1leaderboard + P1score;
 8000ab0:	79fa      	ldrb	r2, [r7, #7]
 8000ab2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000ab6:	4413      	add	r3, r2
 8000ab8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
		P2leaderboard = P2leaderboard + P2score;
 8000abc:	79ba      	ldrb	r2, [r7, #6]
 8000abe:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000ac2:	4413      	add	r3, r2
 8000ac4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		sprintf(string_to_send, "Player 1 your total score is %d!\r\n", P1leaderboard);
 8000ac8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	4972      	ldr	r1, [pc, #456]	@ (8000c9c <main+0x2a8>)
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f004 fafc 	bl	80050d0 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	4970      	ldr	r1, [pc, #448]	@ (8000ca0 <main+0x2ac>)
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fa31 	bl	8000f46 <SerialOutputString>
		sprintf(string_to_send, "Player 2 your total score is %d!\r\n", P2leaderboard);
 8000ae4:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	496d      	ldr	r1, [pc, #436]	@ (8000ca4 <main+0x2b0>)
 8000aee:	4618      	mov	r0, r3
 8000af0:	f004 faee 	bl	80050d0 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	4969      	ldr	r1, [pc, #420]	@ (8000ca0 <main+0x2ac>)
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 fa23 	bl	8000f46 <SerialOutputString>

		delay(1000);
 8000b00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b04:	f000 fd36 	bl	8001574 <delay>

		rounds++;
 8000b08:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	while (rounds <= 3) {
 8000b12:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d997      	bls.n	8000a4a <main+0x56>
	}

	// Final winner announced
	if (P1leaderboard > P2leaderboard){
 8000b1a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8000b1e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d90e      	bls.n	8000b44 <main+0x150>
		sprintf(string_to_send, "Player 1 Wins with a final score of %d!\r\n", P1leaderboard);
 8000b26:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	495e      	ldr	r1, [pc, #376]	@ (8000ca8 <main+0x2b4>)
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 facd 	bl	80050d0 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	4959      	ldr	r1, [pc, #356]	@ (8000ca0 <main+0x2ac>)
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 fa02 	bl	8000f46 <SerialOutputString>
 8000b42:	e013      	b.n	8000b6c <main+0x178>
	}
	else if (P2leaderboard > P1leaderboard){
 8000b44:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8000b48:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d90d      	bls.n	8000b6c <main+0x178>
		sprintf(string_to_send, "Player 2 Wins with a final score of %d!\r\n", P2leaderboard);
 8000b50:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	4954      	ldr	r1, [pc, #336]	@ (8000cac <main+0x2b8>)
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f004 fab8 	bl	80050d0 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	494e      	ldr	r1, [pc, #312]	@ (8000ca0 <main+0x2ac>)
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f9ed 	bl	8000f46 <SerialOutputString>
	}
	sprintf(string_to_send, "Winner can spin the wheel now!\r\n");
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	494f      	ldr	r1, [pc, #316]	@ (8000cb0 <main+0x2bc>)
 8000b72:	4618      	mov	r0, r3
 8000b74:	f004 faac 	bl	80050d0 <siprintf>
	SerialOutputString(string_to_send, &USART1_PORT);
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	4948      	ldr	r1, [pc, #288]	@ (8000ca0 <main+0x2ac>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 f9e1 	bl	8000f46 <SerialOutputString>

	uint8_t prize = roulette();
 8000b84:	f000 f8a4 	bl	8000cd0 <roulette>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

	switch(prize) {
 8000b8e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000b92:	3b01      	subs	r3, #1
 8000b94:	2b07      	cmp	r3, #7
 8000b96:	d87c      	bhi.n	8000c92 <main+0x29e>
 8000b98:	a201      	add	r2, pc, #4	@ (adr r2, 8000ba0 <main+0x1ac>)
 8000b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9e:	bf00      	nop
 8000ba0:	08000bc1 	.word	0x08000bc1
 8000ba4:	08000bdb 	.word	0x08000bdb
 8000ba8:	08000bf5 	.word	0x08000bf5
 8000bac:	08000c0f 	.word	0x08000c0f
 8000bb0:	08000c29 	.word	0x08000c29
 8000bb4:	08000c43 	.word	0x08000c43
 8000bb8:	08000c5d 	.word	0x08000c5d
 8000bbc:	08000c77 	.word	0x08000c77
	case 1:
		sprintf(string_to_send, "You won a deluxe pen!\r\n");
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	493b      	ldr	r1, [pc, #236]	@ (8000cb4 <main+0x2c0>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f004 fa82 	bl	80050d0 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	4933      	ldr	r1, [pc, #204]	@ (8000ca0 <main+0x2ac>)
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f9b7 	bl	8000f46 <SerialOutputString>
		break;
 8000bd8:	e05b      	b.n	8000c92 <main+0x29e>
	case 2:
		sprintf(string_to_send, "You won an exclusive notebook!\r\n");
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	4936      	ldr	r1, [pc, #216]	@ (8000cb8 <main+0x2c4>)
 8000be0:	4618      	mov	r0, r3
 8000be2:	f004 fa75 	bl	80050d0 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	492d      	ldr	r1, [pc, #180]	@ (8000ca0 <main+0x2ac>)
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f9aa 	bl	8000f46 <SerialOutputString>
		break;
 8000bf2:	e04e      	b.n	8000c92 <main+0x29e>
	case 3:
		sprintf(string_to_send, "You won a high accuracy ruler!\r\n");
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	4930      	ldr	r1, [pc, #192]	@ (8000cbc <main+0x2c8>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f004 fa68 	bl	80050d0 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	4926      	ldr	r1, [pc, #152]	@ (8000ca0 <main+0x2ac>)
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f99d 	bl	8000f46 <SerialOutputString>
		break;
 8000c0c:	e041      	b.n	8000c92 <main+0x29e>
	case 4:
		sprintf(string_to_send, "You won a world class hydration container!\r\n");
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	492b      	ldr	r1, [pc, #172]	@ (8000cc0 <main+0x2cc>)
 8000c14:	4618      	mov	r0, r3
 8000c16:	f004 fa5b 	bl	80050d0 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	4920      	ldr	r1, [pc, #128]	@ (8000ca0 <main+0x2ac>)
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 f990 	bl	8000f46 <SerialOutputString>
		break;
 8000c26:	e034      	b.n	8000c92 <main+0x29e>
	case 5:
		sprintf(string_to_send, "You won an exclusive rubber band!\r\n");
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	4925      	ldr	r1, [pc, #148]	@ (8000cc4 <main+0x2d0>)
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f004 fa4e 	bl	80050d0 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	4919      	ldr	r1, [pc, #100]	@ (8000ca0 <main+0x2ac>)
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f983 	bl	8000f46 <SerialOutputString>
		break;
 8000c40:	e027      	b.n	8000c92 <main+0x29e>
	case 6:
		sprintf(string_to_send, "You won an exclusive rubber band!\r\n");
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	491f      	ldr	r1, [pc, #124]	@ (8000cc4 <main+0x2d0>)
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f004 fa41 	bl	80050d0 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	4913      	ldr	r1, [pc, #76]	@ (8000ca0 <main+0x2ac>)
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 f976 	bl	8000f46 <SerialOutputString>
		break;
 8000c5a:	e01a      	b.n	8000c92 <main+0x29e>
	case 7:
		sprintf(string_to_send, "You won a luxurious charger!\r\n");
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	4919      	ldr	r1, [pc, #100]	@ (8000cc8 <main+0x2d4>)
 8000c62:	4618      	mov	r0, r3
 8000c64:	f004 fa34 	bl	80050d0 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	490c      	ldr	r1, [pc, #48]	@ (8000ca0 <main+0x2ac>)
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f969 	bl	8000f46 <SerialOutputString>
		break;
 8000c74:	e00d      	b.n	8000c92 <main+0x29e>
	case 8:
		sprintf(string_to_send, "You won a high precision pencil sharpener!\r\n");
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	4914      	ldr	r1, [pc, #80]	@ (8000ccc <main+0x2d8>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f004 fa27 	bl	80050d0 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	4906      	ldr	r1, [pc, #24]	@ (8000ca0 <main+0x2ac>)
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 f95c 	bl	8000f46 <SerialOutputString>
		break;
 8000c8e:	bf00      	nop
 8000c90:	e7ff      	b.n	8000c92 <main+0x29e>
	}

	for(;;){};
 8000c92:	bf00      	nop
 8000c94:	e7fd      	b.n	8000c92 <main+0x29e>
 8000c96:	bf00      	nop
 8000c98:	08006a64 	.word	0x08006a64
 8000c9c:	0800689c 	.word	0x0800689c
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	080068c0 	.word	0x080068c0
 8000ca8:	080068e4 	.word	0x080068e4
 8000cac:	08006910 	.word	0x08006910
 8000cb0:	0800693c 	.word	0x0800693c
 8000cb4:	08006960 	.word	0x08006960
 8000cb8:	08006978 	.word	0x08006978
 8000cbc:	0800699c 	.word	0x0800699c
 8000cc0:	080069c0 	.word	0x080069c0
 8000cc4:	080069f0 	.word	0x080069f0
 8000cc8:	08006a14 	.word	0x08006a14
 8000ccc:	08006a34 	.word	0x08006a34

08000cd0 <roulette>:
#include "stm32f303xc.h"

#include "digital_io.h"
#include "serial.h"

uint8_t roulette(void){
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b094      	sub	sp, #80	@ 0x50
 8000cd4:	af00      	add	r7, sp, #0
	while ((GPIOA->IDR & 0x01) == 0) {}
 8000cd6:	bf00      	nop
 8000cd8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f8      	beq.n	8000cd8 <roulette+0x8>
	uint16_t delay_period = 25;
 8000ce6:	2319      	movs	r3, #25
 8000ce8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

	for (uint8_t i = 1; i < 6; i++) {
 8000cec:	2301      	movs	r3, #1
 8000cee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000cf2:	e01c      	b.n	8000d2e <roulette+0x5e>
		for(uint8_t j = 0; j < 8; j++){
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000cfa:	e00f      	b.n	8000d1c <roulette+0x4c>
			chase_leds();
 8000cfc:	f7ff fb04 	bl	8000308 <chase_leds>
			delay(delay_period*i);
 8000d00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000d04:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000d08:	fb02 f303 	mul.w	r3, r2, r3
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fc31 	bl	8001574 <delay>
		for(uint8_t j = 0; j < 8; j++){
 8000d12:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000d16:	3301      	adds	r3, #1
 8000d18:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000d1c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000d20:	2b07      	cmp	r3, #7
 8000d22:	d9eb      	bls.n	8000cfc <roulette+0x2c>
	for (uint8_t i = 1; i < 6; i++) {
 8000d24:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d28:	3301      	adds	r3, #1
 8000d2a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000d2e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d32:	2b05      	cmp	r3, #5
 8000d34:	d9de      	bls.n	8000cf4 <roulette+0x24>
		}
	}

	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000d36:	4b31      	ldr	r3, [pc, #196]	@ (8000dfc <roulette+0x12c>)
 8000d38:	463c      	mov	r4, r7
 8000d3a:	461d      	mov	r5, r3
 8000d3c:	6828      	ldr	r0, [r5, #0]
 8000d3e:	6869      	ldr	r1, [r5, #4]
 8000d40:	68aa      	ldr	r2, [r5, #8]
 8000d42:	68eb      	ldr	r3, [r5, #12]
 8000d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d46:	6928      	ldr	r0, [r5, #16]
 8000d48:	6020      	str	r0, [r4, #0]
 8000d4a:	7d2b      	ldrb	r3, [r5, #20]
 8000d4c:	7123      	strb	r3, [r4, #4]
 8000d4e:	f107 0315 	add.w	r3, r7, #21
 8000d52:	222b      	movs	r2, #43	@ 0x2b
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f004 fa1d 	bl	8005196 <memset>

	uint32_t seed = get_gyro_values(0)*20000;
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff faeb 	bl	8000338 <get_gyro_values>
 8000d62:	4603      	mov	r3, r0
 8000d64:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000d68:	fb02 f303 	mul.w	r3, r2, r3
 8000d6c:	647b      	str	r3, [r7, #68]	@ 0x44
	srand(seed);
 8000d6e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000d70:	f004 f880 	bl	8004e74 <srand>

	uint8_t r = rand() % 8 + 1;
 8000d74:	f004 f8ac 	bl	8004ed0 <rand>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	425a      	negs	r2, r3
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	f002 0207 	and.w	r2, r2, #7
 8000d84:	bf58      	it	pl
 8000d86:	4253      	negpl	r3, r2
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	sprintf(string_to_send, "Random number is %d\r\n", r);
 8000d90:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8000d94:	463b      	mov	r3, r7
 8000d96:	491a      	ldr	r1, [pc, #104]	@ (8000e00 <roulette+0x130>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 f999 	bl	80050d0 <siprintf>
	SerialOutputString(string_to_send, &USART1_PORT);
 8000d9e:	463b      	mov	r3, r7
 8000da0:	4918      	ldr	r1, [pc, #96]	@ (8000e04 <roulette+0x134>)
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f8cf 	bl	8000f46 <SerialOutputString>

	uint8_t mask = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	// Turn on the random number of LEDs
	for (uint8_t i = 0; i < r; i++) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8000db4:	e010      	b.n	8000dd8 <roulette+0x108>
		mask |= (1 << i);
 8000db6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000dba:	2201      	movs	r2, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	b25a      	sxtb	r2, r3
 8000dc2:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for (uint8_t i = 0; i < r; i++) {
 8000dce:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8000dd8:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8000ddc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d3e8      	bcc.n	8000db6 <roulette+0xe6>
	}

	set_leds(mask);
 8000de4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fa41 	bl	8000270 <set_leds>

	return r;
 8000dee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3750      	adds	r7, #80	@ 0x50
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	08006a90 	.word	0x08006a90
 8000e00:	08006a78 	.word	0x08006a78
 8000e04:	20000000 	.word	0x20000000

08000e08 <SerialInitialise>:
		((uint8_t*)&(GPIOC->AFR[1])) + 1,
		0x55};

// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000e08:	b480      	push	{r7}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	63da      	str	r2, [r3, #60]	@ 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f10 <SerialInitialise+0x108>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a3c      	ldr	r2, [pc, #240]	@ (8000f10 <SerialInitialise+0x108>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e24:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000e26:	4b3a      	ldr	r3, [pc, #232]	@ (8000f10 <SerialInitialise+0x108>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	4a39      	ldr	r2, [pc, #228]	@ (8000f10 <SerialInitialise+0x108>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	6a1b      	ldr	r3, [r3, #32]
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d106      	bne.n	8000e48 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000e3a:	4b35      	ldr	r3, [pc, #212]	@ (8000f10 <SerialInitialise+0x108>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	4a34      	ldr	r2, [pc, #208]	@ (8000f10 <SerialInitialise+0x108>)
 8000e40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e44:	6153      	str	r3, [r2, #20]
		break;
 8000e46:	e000      	b.n	8000e4a <SerialInitialise+0x42>
	default:
		break;
 8000e48:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) |= serial_port->SerialPinModeValue;
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) |= serial_port->SerialPinSpeedValue;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) |= serial_port->SerialPinAlternatePinValue;
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000e74:	b2d9      	uxtb	r1, r3
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e82:	430a      	orrs	r2, r1
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	69d9      	ldr	r1, [r3, #28]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	430a      	orrs	r2, r1
 8000e98:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	d825      	bhi.n	8000ef2 <SerialInitialise+0xea>
 8000ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8000eac <SerialInitialise+0xa4>)
 8000ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eac:	08000ec1 	.word	0x08000ec1
 8000eb0:	08000ecb 	.word	0x08000ecb
 8000eb4:	08000ed5 	.word	0x08000ed5
 8000eb8:	08000edf 	.word	0x08000edf
 8000ebc:	08000ee9 	.word	0x08000ee9
	case BAUD_9600:
		*baud_rate_config = 0x341 * 0x06; // 9600 at 8MHz
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000ec6:	801a      	strh	r2, [r3, #0]
		break;
 8000ec8:	e013      	b.n	8000ef2 <SerialInitialise+0xea>
	case BAUD_19200:
		*baud_rate_config = 0x1A1 * 0x06; // 19200 at 8MHz
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f640 12c6 	movw	r2, #2502	@ 0x9c6
 8000ed0:	801a      	strh	r2, [r3, #0]
		break;
 8000ed2:	e00e      	b.n	8000ef2 <SerialInitialise+0xea>
	case BAUD_38400:
		*baud_rate_config = 0xD0 * 0x06;  // 38400 at 8MHz
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8000eda:	801a      	strh	r2, [r3, #0]
		break;
 8000edc:	e009      	b.n	8000ef2 <SerialInitialise+0xea>
	case BAUD_57600:
		*baud_rate_config = 0x8B * 0x06;  // 57600 at 8MHz
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f240 3242 	movw	r2, #834	@ 0x342
 8000ee4:	801a      	strh	r2, [r3, #0]
		break;
 8000ee6:	e004      	b.n	8000ef2 <SerialInitialise+0xea>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8000eee:	801a      	strh	r2, [r3, #0]
		break;
 8000ef0:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f042 020d 	orr.w	r2, r2, #13
 8000f00:	601a      	str	r2, [r3, #0]
}
 8000f02:	bf00      	nop
 8000f04:	371c      	adds	r7, #28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000

08000f14 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8000f20:	bf00      	nop
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0f8      	beq.n	8000f22 <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	79fa      	ldrb	r2, [r7, #7]
 8000f36:	b292      	uxth	r2, r2
 8000f38:	801a      	strh	r2, [r3, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b084      	sub	sp, #16
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8000f54:	e00b      	b.n	8000f6e <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	6839      	ldr	r1, [r7, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ffd9 	bl	8000f14 <SerialOutputChar>
		counter++;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
		pt++;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1ef      	bne.n	8000f56 <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	4798      	blx	r3
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <HAL_MspInit+0x44>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd4 <HAL_MspInit+0x44>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6193      	str	r3, [r2, #24]
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <HAL_MspInit+0x44>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <HAL_MspInit+0x44>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a08      	ldr	r2, [pc, #32]	@ (8000fd4 <HAL_MspInit+0x44>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_MspInit+0x44>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fc6:	2007      	movs	r0, #7
 8000fc8:	f000 fc48 	bl	800185c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	@ 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a17      	ldr	r2, [pc, #92]	@ (8001054 <HAL_I2C_MspInit+0x7c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d127      	bne.n	800104a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <HAL_I2C_MspInit+0x80>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	4a16      	ldr	r2, [pc, #88]	@ (8001058 <HAL_I2C_MspInit+0x80>)
 8001000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001004:	6153      	str	r3, [r2, #20]
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <HAL_I2C_MspInit+0x80>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001012:	23c0      	movs	r3, #192	@ 0xc0
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001016:	2312      	movs	r3, #18
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101a:	2301      	movs	r3, #1
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001022:	2304      	movs	r3, #4
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	480b      	ldr	r0, [pc, #44]	@ (800105c <HAL_I2C_MspInit+0x84>)
 800102e:	f000 fc49 	bl	80018c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <HAL_I2C_MspInit+0x80>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a08      	ldr	r2, [pc, #32]	@ (8001058 <HAL_I2C_MspInit+0x80>)
 8001038:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800103c:	61d3      	str	r3, [r2, #28]
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_I2C_MspInit+0x80>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	@ 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40005400 	.word	0x40005400
 8001058:	40021000 	.word	0x40021000
 800105c:	48000400 	.word	0x48000400

08001060 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a17      	ldr	r2, [pc, #92]	@ (80010dc <HAL_SPI_MspInit+0x7c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d128      	bne.n	80010d4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001082:	4b17      	ldr	r3, [pc, #92]	@ (80010e0 <HAL_SPI_MspInit+0x80>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a16      	ldr	r2, [pc, #88]	@ (80010e0 <HAL_SPI_MspInit+0x80>)
 8001088:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800108c:	6193      	str	r3, [r2, #24]
 800108e:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <HAL_SPI_MspInit+0x80>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <HAL_SPI_MspInit+0x80>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	4a10      	ldr	r2, [pc, #64]	@ (80010e0 <HAL_SPI_MspInit+0x80>)
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a4:	6153      	str	r3, [r2, #20]
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <HAL_SPI_MspInit+0x80>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80010b2:	23e0      	movs	r3, #224	@ 0xe0
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010c2:	2305      	movs	r3, #5
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d0:	f000 fbf8 	bl	80018c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	@ 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40013000 	.word	0x40013000
 80010e0:	40021000 	.word	0x40021000

080010e4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a08      	ldr	r2, [pc, #32]	@ (8001114 <HAL_SPI_MspDeInit+0x30>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d10a      	bne.n	800110c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80010f6:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <HAL_SPI_MspDeInit+0x34>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	4a07      	ldr	r2, [pc, #28]	@ (8001118 <HAL_SPI_MspDeInit+0x34>)
 80010fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001100:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 8001102:	21e0      	movs	r1, #224	@ 0xe0
 8001104:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001108:	f000 fd56 	bl	8001bb8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40013000 	.word	0x40013000
 8001118:	40021000 	.word	0x40021000

0800111c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	@ 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a18      	ldr	r2, [pc, #96]	@ (800119c <HAL_PCD_MspInit+0x80>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d129      	bne.n	8001192 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <HAL_PCD_MspInit+0x84>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <HAL_PCD_MspInit+0x84>)
 8001144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001148:	6153      	str	r3, [r2, #20]
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <HAL_PCD_MspInit+0x84>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001156:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001168:	230e      	movs	r3, #14
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001176:	f000 fba5 	bl	80018c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800117a:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <HAL_PCD_MspInit+0x84>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4a08      	ldr	r2, [pc, #32]	@ (80011a0 <HAL_PCD_MspInit+0x84>)
 8001180:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001184:	61d3      	str	r3, [r2, #28]
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_PCD_MspInit+0x84>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	@ 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40005c00 	.word	0x40005c00
 80011a0:	40021000 	.word	0x40021000

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <NMI_Handler+0x4>

080011ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <HardFault_Handler+0x4>

080011b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <MemManage_Handler+0x4>

080011bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <UsageFault_Handler+0x4>

080011cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fa:	f000 fa5d 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}

08001202 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
	return 1;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <_kill>:

int _kill(int pid, int sig)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800121c:	f004 f80a 	bl	8005234 <__errno>
 8001220:	4603      	mov	r3, r0
 8001222:	2216      	movs	r2, #22
 8001224:	601a      	str	r2, [r3, #0]
	return -1;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <_exit>:

void _exit (int status)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800123a:	f04f 31ff 	mov.w	r1, #4294967295
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffe7 	bl	8001212 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <_exit+0x12>

08001248 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	e00a      	b.n	8001270 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800125a:	f3af 8000 	nop.w
 800125e:	4601      	mov	r1, r0
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	60ba      	str	r2, [r7, #8]
 8001266:	b2ca      	uxtb	r2, r1
 8001268:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	429a      	cmp	r2, r3
 8001276:	dbf0      	blt.n	800125a <_read+0x12>
	}

return len;
 8001278:	687b      	ldr	r3, [r7, #4]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	e009      	b.n	80012a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	60ba      	str	r2, [r7, #8]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbf1      	blt.n	8001294 <_write+0x12>
	}
	return len;
 80012b0:	687b      	ldr	r3, [r7, #4]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_close>:

int _close(int file)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
	return -1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012e2:	605a      	str	r2, [r3, #4]
	return 0;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <_isatty>:

int _isatty(int file)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
	return 1;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800132c:	4a14      	ldr	r2, [pc, #80]	@ (8001380 <_sbrk+0x5c>)
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <_sbrk+0x60>)
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001338:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <_sbrk+0x64>)
 8001342:	4a12      	ldr	r2, [pc, #72]	@ (800138c <_sbrk+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001354:	f003 ff6e 	bl	8005234 <__errno>
 8001358:	4603      	mov	r3, r0
 800135a:	220c      	movs	r2, #12
 800135c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e009      	b.n	8001378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a05      	ldr	r2, [pc, #20]	@ (8001388 <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	2000a000 	.word	0x2000a000
 8001384:	00000400 	.word	0x00000400
 8001388:	2000083c 	.word	0x2000083c
 800138c:	20000a00 	.word	0x20000a00

08001390 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <SystemInit+0x20>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800139a:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <SystemInit+0x20>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	db0b      	blt.n	80013de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	f003 021f 	and.w	r2, r3, #31
 80013cc:	4907      	ldr	r1, [pc, #28]	@ (80013ec <__NVIC_EnableIRQ+0x38>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	095b      	lsrs	r3, r3, #5
 80013d4:	2001      	movs	r0, #1
 80013d6:	fa00 f202 	lsl.w	r2, r0, r2
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e100 	.word	0xe000e100

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	@ (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	@ (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <enable_interrupt>:
#define PRESCALER 47999

// pointers to callback functions
void (*TIM2_callback_function)();

void enable_interrupt(IRQn_Type IRQn, uint32_t priority) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8001450:	b672      	cpsid	i
}
 8001452:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Tell the NVIC module that TIM2 interrupts should be handled
	NVIC_SetPriority(IRQn, priority);  // Set Priority
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	6839      	ldr	r1, [r7, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ffc8 	bl	80013f0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQn);
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ffa5 	bl	80013b4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800146a:	b662      	cpsie	i
}
 800146c:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
// run the oneshot timer interrupt handler
	if (TIM2->SR & TIM_SR_UIF) {
 800147c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00e      	beq.n	80014a8 <TIM2_IRQHandler+0x30>
		// clear oneshot timer interrupt
		TIM2->SR &= ~TIM_SR_UIF;
 800148a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	6113      	str	r3, [r2, #16]

		if (TIM2_callback_function != NULL)
 800149a:	4b04      	ldr	r3, [pc, #16]	@ (80014ac <TIM2_IRQHandler+0x34>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <TIM2_IRQHandler+0x30>
		{
			TIM2_callback_function();
 80014a2:	4b02      	ldr	r3, [pc, #8]	@ (80014ac <TIM2_IRQHandler+0x34>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4798      	blx	r3
		}

	}

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000840 	.word	0x20000840

080014b0 <game_timer>:

void game_timer(uint16_t time, void (*callback_function)()) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	80fb      	strh	r3, [r7, #6]

	// reset CR1
	TIM2->CR1 = 0x00;
 80014bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]

	// set the prescaler to 999, slower than the default clock 1000 times
	TIM2->PSC = PRESCALER; // 1 millisecond or 1 millisecond per count
 80014c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014c8:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80014cc:	629a      	str	r2, [r3, #40]	@ 0x28

	// set the auto reload according to the prescaler
	TIM2->ARR = 0x01; // 1 - 1 millisecond
 80014ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014d2:	2201      	movs	r2, #1
 80014d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->ARR = TIM2->ARR * time; // delay in millisecond
 80014d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014dc:	88fa      	ldrh	r2, [r7, #6]
 80014de:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80014e2:	fb02 f303 	mul.w	r3, r2, r3
 80014e6:	62cb      	str	r3, [r1, #44]	@ 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // enable auto reload buffering
 80014e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f6:	6013      	str	r3, [r2, #0]

	// set to only counter overflow raises interrupt flag
	TIM2->CR1 |= TIM_CR1_URS;
 80014f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	6013      	str	r3, [r2, #0]

	// set to one-pulse mode
	TIM2->CR1 |= TIM_CR1_OPM;
 8001508:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001512:	f043 0308 	orr.w	r3, r3, #8
 8001516:	6013      	str	r3, [r2, #0]

	// re-initialise the counter and generates an update of the registers
	TIM2->EGR |= TIM_EGR_UG;
 8001518:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6153      	str	r3, [r2, #20]

	// enable the update interrupt
	TIM2->DIER |= TIM_DIER_UIE;
 8001528:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	60d3      	str	r3, [r2, #12]

	// clear the interrupt
	TIM2->SR &= ~TIM_SR_UIF;
 8001538:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001542:	f023 0301 	bic.w	r3, r3, #1
 8001546:	6113      	str	r3, [r2, #16]

	TIM2_callback_function = callback_function;
 8001548:	4a09      	ldr	r2, [pc, #36]	@ (8001570 <game_timer+0xc0>)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	6013      	str	r3, [r2, #0]

	enable_interrupt(TIM2_IRQn, 0);
 800154e:	2100      	movs	r1, #0
 8001550:	201c      	movs	r0, #28
 8001552:	f7ff ff77 	bl	8001444 <enable_interrupt>

	// enable counter
	TIM2->CR1 |= TIM_CR1_CEN;
 8001556:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6013      	str	r3, [r2, #0]

}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000840 	.word	0x20000840

08001574 <delay>:

void delay(uint16_t delay){
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	80fb      	strh	r3, [r7, #6]
	// reset CR1
	TIM3->CR1 = 0x00;
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <delay+0x60>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
	TIM3->CNT = 0;
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <delay+0x60>)
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	@ 0x24

	// set the prescaler to 999, slower than the default clock 1000 times
	TIM3->PSC = PRESCALER; // 1 millisecond or 1 millisecond per count
 800158a:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <delay+0x60>)
 800158c:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8001590:	629a      	str	r2, [r3, #40]	@ 0x28

	// re-initialise the counter and generates an update of the registers
	TIM3->EGR |= TIM_EGR_UG;
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <delay+0x60>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	4a0f      	ldr	r2, [pc, #60]	@ (80015d4 <delay+0x60>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6153      	str	r3, [r2, #20]

	// enable counter
	TIM3->CR1 |= TIM_CR1_CEN;
 800159e:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <delay+0x60>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a0c      	ldr	r2, [pc, #48]	@ (80015d4 <delay+0x60>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6013      	str	r3, [r2, #0]

	while (TIM3->CNT < delay) {};
 80015aa:	bf00      	nop
 80015ac:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <delay+0x60>)
 80015ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d3fa      	bcc.n	80015ac <delay+0x38>

	// disable counter
	TIM3->CR1 &= ~TIM_CR1_CEN;
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <delay+0x60>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a06      	ldr	r2, [pc, #24]	@ (80015d4 <delay+0x60>)
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	6013      	str	r3, [r2, #0]
	TIM3->CNT = 0;
 80015c2:	4b04      	ldr	r3, [pc, #16]	@ (80015d4 <delay+0x60>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40000400 	.word	0x40000400

080015d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001610 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015dc:	f7ff fed8 	bl	8001390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e0:	480c      	ldr	r0, [pc, #48]	@ (8001614 <LoopForever+0x6>)
  ldr r1, =_edata
 80015e2:	490d      	ldr	r1, [pc, #52]	@ (8001618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e4:	4a0d      	ldr	r2, [pc, #52]	@ (800161c <LoopForever+0xe>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001624 <LoopForever+0x16>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001606:	f003 fe1b 	bl	8005240 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800160a:	f7ff f9f3 	bl	80009f4 <main>

0800160e <LoopForever>:

LoopForever:
    b LoopForever
 800160e:	e7fe      	b.n	800160e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001610:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 800161c:	08006bc8 	.word	0x08006bc8
  ldr r2, =_sbss
 8001620:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8001624:	200009fc 	.word	0x200009fc

08001628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC1_2_IRQHandler>
	...

0800162c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001630:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <HAL_Init+0x28>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a07      	ldr	r2, [pc, #28]	@ (8001654 <HAL_Init+0x28>)
 8001636:	f043 0310 	orr.w	r3, r3, #16
 800163a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163c:	2003      	movs	r0, #3
 800163e:	f000 f90d 	bl	800185c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001642:	2000      	movs	r0, #0
 8001644:	f000 f808 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001648:	f7ff fca2 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40022000 	.word	0x40022000

08001658 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <HAL_InitTick+0x54>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <HAL_InitTick+0x58>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f917 	bl	80018aa <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e00e      	b.n	80016a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d80a      	bhi.n	80016a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f000 f8ed 	bl	8001872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4a06      	ldr	r2, [pc, #24]	@ (80016b4 <HAL_InitTick+0x5c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000080 	.word	0x20000080
 80016b0:	20000088 	.word	0x20000088
 80016b4:	20000084 	.word	0x20000084

080016b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_IncTick+0x20>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_IncTick+0x24>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a04      	ldr	r2, [pc, #16]	@ (80016dc <HAL_IncTick+0x24>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000088 	.word	0x20000088
 80016dc:	20000844 	.word	0x20000844

080016e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80016e4:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <HAL_GetTick+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000844 	.word	0x20000844

080016f8 <__NVIC_SetPriorityGrouping>:
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001708:	4b0c      	ldr	r3, [pc, #48]	@ (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001714:	4013      	ands	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172a:	4a04      	ldr	r2, [pc, #16]	@ (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	60d3      	str	r3, [r2, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_GetPriorityGrouping>:
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001744:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <__NVIC_GetPriorityGrouping+0x18>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	f003 0307 	and.w	r3, r3, #7
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_SetPriority>:
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176c:	2b00      	cmp	r3, #0
 800176e:	db0a      	blt.n	8001786 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	b2da      	uxtb	r2, r3
 8001774:	490c      	ldr	r1, [pc, #48]	@ (80017a8 <__NVIC_SetPriority+0x4c>)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	0112      	lsls	r2, r2, #4
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	440b      	add	r3, r1
 8001780:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001784:	e00a      	b.n	800179c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4908      	ldr	r1, [pc, #32]	@ (80017ac <__NVIC_SetPriority+0x50>)
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	3b04      	subs	r3, #4
 8001794:	0112      	lsls	r2, r2, #4
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	440b      	add	r3, r1
 800179a:	761a      	strb	r2, [r3, #24]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000e100 	.word	0xe000e100
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	@ 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f1c3 0307 	rsb	r3, r3, #7
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	bf28      	it	cs
 80017ce:	2304      	movcs	r3, #4
 80017d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3304      	adds	r3, #4
 80017d6:	2b06      	cmp	r3, #6
 80017d8:	d902      	bls.n	80017e0 <NVIC_EncodePriority+0x30>
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3b03      	subs	r3, #3
 80017de:	e000      	b.n	80017e2 <NVIC_EncodePriority+0x32>
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	f04f 32ff 	mov.w	r2, #4294967295
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43da      	mvns	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	401a      	ands	r2, r3
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f8:	f04f 31ff 	mov.w	r1, #4294967295
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	43d9      	mvns	r1, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	4313      	orrs	r3, r2
         );
}
 800180a:	4618      	mov	r0, r3
 800180c:	3724      	adds	r7, #36	@ 0x24
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001828:	d301      	bcc.n	800182e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182a:	2301      	movs	r3, #1
 800182c:	e00f      	b.n	800184e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <SysTick_Config+0x40>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001836:	210f      	movs	r1, #15
 8001838:	f04f 30ff 	mov.w	r0, #4294967295
 800183c:	f7ff ff8e 	bl	800175c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001840:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <SysTick_Config+0x40>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001846:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <SysTick_Config+0x40>)
 8001848:	2207      	movs	r2, #7
 800184a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	e000e010 	.word	0xe000e010

0800185c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ff47 	bl	80016f8 <__NVIC_SetPriorityGrouping>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001884:	f7ff ff5c 	bl	8001740 <__NVIC_GetPriorityGrouping>
 8001888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	68b9      	ldr	r1, [r7, #8]
 800188e:	6978      	ldr	r0, [r7, #20]
 8001890:	f7ff ff8e 	bl	80017b0 <NVIC_EncodePriority>
 8001894:	4602      	mov	r2, r0
 8001896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff5d 	bl	800175c <__NVIC_SetPriority>
}
 80018a2:	bf00      	nop
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffb0 	bl	8001818 <SysTick_Config>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d2:	e154      	b.n	8001b7e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2101      	movs	r1, #1
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	4013      	ands	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8146 	beq.w	8001b78 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d005      	beq.n	8001904 <HAL_GPIO_Init+0x40>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d130      	bne.n	8001966 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	2203      	movs	r2, #3
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800193a:	2201      	movs	r2, #1
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	f003 0201 	and.w	r2, r3, #1
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	2b03      	cmp	r3, #3
 8001970:	d017      	beq.n	80019a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	2203      	movs	r2, #3
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d123      	bne.n	80019f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	08da      	lsrs	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3208      	adds	r2, #8
 80019b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	220f      	movs	r2, #15
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	08da      	lsrs	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3208      	adds	r2, #8
 80019f0:	6939      	ldr	r1, [r7, #16]
 80019f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	2203      	movs	r2, #3
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0203 	and.w	r2, r3, #3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80a0 	beq.w	8001b78 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a38:	4b58      	ldr	r3, [pc, #352]	@ (8001b9c <HAL_GPIO_Init+0x2d8>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a57      	ldr	r2, [pc, #348]	@ (8001b9c <HAL_GPIO_Init+0x2d8>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b55      	ldr	r3, [pc, #340]	@ (8001b9c <HAL_GPIO_Init+0x2d8>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a50:	4a53      	ldr	r2, [pc, #332]	@ (8001ba0 <HAL_GPIO_Init+0x2dc>)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	220f      	movs	r2, #15
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a7a:	d019      	beq.n	8001ab0 <HAL_GPIO_Init+0x1ec>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a49      	ldr	r2, [pc, #292]	@ (8001ba4 <HAL_GPIO_Init+0x2e0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d013      	beq.n	8001aac <HAL_GPIO_Init+0x1e8>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a48      	ldr	r2, [pc, #288]	@ (8001ba8 <HAL_GPIO_Init+0x2e4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d00d      	beq.n	8001aa8 <HAL_GPIO_Init+0x1e4>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a47      	ldr	r2, [pc, #284]	@ (8001bac <HAL_GPIO_Init+0x2e8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d007      	beq.n	8001aa4 <HAL_GPIO_Init+0x1e0>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a46      	ldr	r2, [pc, #280]	@ (8001bb0 <HAL_GPIO_Init+0x2ec>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_GPIO_Init+0x1dc>
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	e008      	b.n	8001ab2 <HAL_GPIO_Init+0x1ee>
 8001aa0:	2305      	movs	r3, #5
 8001aa2:	e006      	b.n	8001ab2 <HAL_GPIO_Init+0x1ee>
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e004      	b.n	8001ab2 <HAL_GPIO_Init+0x1ee>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e002      	b.n	8001ab2 <HAL_GPIO_Init+0x1ee>
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <HAL_GPIO_Init+0x1ee>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	f002 0203 	and.w	r2, r2, #3
 8001ab8:	0092      	lsls	r2, r2, #2
 8001aba:	4093      	lsls	r3, r2
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ac2:	4937      	ldr	r1, [pc, #220]	@ (8001ba0 <HAL_GPIO_Init+0x2dc>)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	089b      	lsrs	r3, r3, #2
 8001ac8:	3302      	adds	r3, #2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad0:	4b38      	ldr	r3, [pc, #224]	@ (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001af4:	4a2f      	ldr	r2, [pc, #188]	@ (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001afa:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b1e:	4a25      	ldr	r2, [pc, #148]	@ (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b24:	4b23      	ldr	r3, [pc, #140]	@ (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b48:	4a1a      	ldr	r2, [pc, #104]	@ (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b72:	4a10      	ldr	r2, [pc, #64]	@ (8001bb4 <HAL_GPIO_Init+0x2f0>)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f47f aea3 	bne.w	80018d4 <HAL_GPIO_Init+0x10>
  }
}
 8001b8e:	bf00      	nop
 8001b90:	bf00      	nop
 8001b92:	371c      	adds	r7, #28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40010000 	.word	0x40010000
 8001ba4:	48000400 	.word	0x48000400
 8001ba8:	48000800 	.word	0x48000800
 8001bac:	48000c00 	.word	0x48000c00
 8001bb0:	48001000 	.word	0x48001000
 8001bb4:	40010400 	.word	0x40010400

08001bb8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001bc6:	e0b8      	b.n	8001d3a <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80ab 	beq.w	8001d34 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001bde:	4a5e      	ldr	r2, [pc, #376]	@ (8001d58 <HAL_GPIO_DeInit+0x1a0>)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	3302      	adds	r3, #2
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c06:	d019      	beq.n	8001c3c <HAL_GPIO_DeInit+0x84>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a54      	ldr	r2, [pc, #336]	@ (8001d5c <HAL_GPIO_DeInit+0x1a4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d013      	beq.n	8001c38 <HAL_GPIO_DeInit+0x80>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a53      	ldr	r2, [pc, #332]	@ (8001d60 <HAL_GPIO_DeInit+0x1a8>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d00d      	beq.n	8001c34 <HAL_GPIO_DeInit+0x7c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a52      	ldr	r2, [pc, #328]	@ (8001d64 <HAL_GPIO_DeInit+0x1ac>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d007      	beq.n	8001c30 <HAL_GPIO_DeInit+0x78>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a51      	ldr	r2, [pc, #324]	@ (8001d68 <HAL_GPIO_DeInit+0x1b0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d101      	bne.n	8001c2c <HAL_GPIO_DeInit+0x74>
 8001c28:	2304      	movs	r3, #4
 8001c2a:	e008      	b.n	8001c3e <HAL_GPIO_DeInit+0x86>
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	e006      	b.n	8001c3e <HAL_GPIO_DeInit+0x86>
 8001c30:	2303      	movs	r3, #3
 8001c32:	e004      	b.n	8001c3e <HAL_GPIO_DeInit+0x86>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e002      	b.n	8001c3e <HAL_GPIO_DeInit+0x86>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_GPIO_DeInit+0x86>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	f002 0203 	and.w	r2, r2, #3
 8001c44:	0092      	lsls	r2, r2, #2
 8001c46:	4093      	lsls	r3, r2
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d132      	bne.n	8001cb4 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001c4e:	4b47      	ldr	r3, [pc, #284]	@ (8001d6c <HAL_GPIO_DeInit+0x1b4>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	4945      	ldr	r1, [pc, #276]	@ (8001d6c <HAL_GPIO_DeInit+0x1b4>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001c5c:	4b43      	ldr	r3, [pc, #268]	@ (8001d6c <HAL_GPIO_DeInit+0x1b4>)
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	4941      	ldr	r1, [pc, #260]	@ (8001d6c <HAL_GPIO_DeInit+0x1b4>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001c6a:	4b40      	ldr	r3, [pc, #256]	@ (8001d6c <HAL_GPIO_DeInit+0x1b4>)
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	493e      	ldr	r1, [pc, #248]	@ (8001d6c <HAL_GPIO_DeInit+0x1b4>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001c78:	4b3c      	ldr	r3, [pc, #240]	@ (8001d6c <HAL_GPIO_DeInit+0x1b4>)
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	493a      	ldr	r1, [pc, #232]	@ (8001d6c <HAL_GPIO_DeInit+0x1b4>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	220f      	movs	r2, #15
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001c96:	4a30      	ldr	r2, [pc, #192]	@ (8001d58 <HAL_GPIO_DeInit+0x1a0>)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43da      	mvns	r2, r3
 8001ca6:	482c      	ldr	r0, [pc, #176]	@ (8001d58 <HAL_GPIO_DeInit+0x1a0>)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	400a      	ands	r2, r1
 8001cae:	3302      	adds	r3, #2
 8001cb0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2103      	movs	r1, #3
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	401a      	ands	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	08da      	lsrs	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3208      	adds	r2, #8
 8001cd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	220f      	movs	r2, #15
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	08d2      	lsrs	r2, r2, #3
 8001cea:	4019      	ands	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3208      	adds	r2, #8
 8001cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	2103      	movs	r1, #3
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	401a      	ands	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	2101      	movs	r1, #1
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	401a      	ands	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2103      	movs	r1, #3
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	401a      	ands	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	3301      	adds	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f47f af40 	bne.w	8001bc8 <HAL_GPIO_DeInit+0x10>
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	371c      	adds	r7, #28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40010000 	.word	0x40010000
 8001d5c:	48000400 	.word	0x48000400
 8001d60:	48000800 	.word	0x48000800
 8001d64:	48000c00 	.word	0x48000c00
 8001d68:	48001000 	.word	0x48001000
 8001d6c:	40010400 	.word	0x40010400

08001d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d80:	787b      	ldrb	r3, [r7, #1]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d8c:	e002      	b.n	8001d94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e081      	b.n	8001eb6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff f906 	bl	8000fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2224      	movs	r2, #36	@ 0x24
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001df0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	e006      	b.n	8001e28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d104      	bne.n	8001e3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69d9      	ldr	r1, [r3, #28]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1a      	ldr	r2, [r3, #32]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b20      	cmp	r3, #32
 8001ed2:	d138      	bne.n	8001f46 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e032      	b.n	8001f48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2224      	movs	r2, #36	@ 0x24
 8001eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0201 	bic.w	r2, r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f10:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6819      	ldr	r1, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0201 	orr.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2220      	movs	r2, #32
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f46:	2302      	movs	r3, #2
  }
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b20      	cmp	r3, #32
 8001f68:	d139      	bne.n	8001fde <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e033      	b.n	8001fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2224      	movs	r2, #36	@ 0x24
 8001f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fa6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e000      	b.n	8001fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
  }
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fee:	b08b      	sub	sp, #44	@ 0x2c
 8001ff0:	af06      	add	r7, sp, #24
 8001ff2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e0c4      	b.n	8002188 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff f882 	bl	800111c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2203      	movs	r2, #3
 800201c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f002 f8ef 	bl	8004208 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202a:	2300      	movs	r3, #0
 800202c:	73fb      	strb	r3, [r7, #15]
 800202e:	e040      	b.n	80020b2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	440b      	add	r3, r1
 8002040:	3301      	adds	r3, #1
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	3303      	adds	r3, #3
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	440b      	add	r3, r1
 800207e:	3338      	adds	r3, #56	@ 0x38
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	440b      	add	r3, r1
 8002092:	333c      	adds	r3, #60	@ 0x3c
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	440b      	add	r3, r1
 80020a6:	3340      	adds	r3, #64	@ 0x40
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	3301      	adds	r3, #1
 80020b0:	73fb      	strb	r3, [r7, #15]
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d3b9      	bcc.n	8002030 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e044      	b.n	800214c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	440b      	add	r3, r1
 80020e6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002104:	7bfa      	ldrb	r2, [r7, #15]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	440b      	add	r3, r1
 8002128:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	440b      	add	r3, r1
 800213e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	3301      	adds	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	429a      	cmp	r2, r3
 8002154:	d3b5      	bcc.n	80020c2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	687e      	ldr	r6, [r7, #4]
 800215e:	466d      	mov	r5, sp
 8002160:	f106 0410 	add.w	r4, r6, #16
 8002164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	602b      	str	r3, [r5, #0]
 800216c:	1d33      	adds	r3, r6, #4
 800216e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002170:	6838      	ldr	r0, [r7, #0]
 8002172:	f002 f864 	bl	800423e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002196:	af00      	add	r7, sp, #0
 8002198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021a0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d102      	bne.n	80021b6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	f001 b823 	b.w	80031fc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 817d 	beq.w	80024c6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021cc:	4bbc      	ldr	r3, [pc, #752]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d00c      	beq.n	80021f2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021d8:	4bb9      	ldr	r3, [pc, #740]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d15c      	bne.n	800229e <HAL_RCC_OscConfig+0x10e>
 80021e4:	4bb6      	ldr	r3, [pc, #728]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f0:	d155      	bne.n	800229e <HAL_RCC_OscConfig+0x10e>
 80021f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021f6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002206:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	b2db      	uxtb	r3, r3
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d102      	bne.n	8002224 <HAL_RCC_OscConfig+0x94>
 800221e:	4ba8      	ldr	r3, [pc, #672]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	e015      	b.n	8002250 <HAL_RCC_OscConfig+0xc0>
 8002224:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002228:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002230:	fa93 f3a3 	rbit	r3, r3
 8002234:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002238:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800223c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002240:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800224c:	4b9c      	ldr	r3, [pc, #624]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002254:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002258:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800225c:	fa92 f2a2 	rbit	r2, r2
 8002260:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002264:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002268:	fab2 f282 	clz	r2, r2
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f042 0220 	orr.w	r2, r2, #32
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	f002 021f 	and.w	r2, r2, #31
 8002278:	2101      	movs	r1, #1
 800227a:	fa01 f202 	lsl.w	r2, r1, r2
 800227e:	4013      	ands	r3, r2
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 811f 	beq.w	80024c4 <HAL_RCC_OscConfig+0x334>
 8002286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f040 8116 	bne.w	80024c4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	f000 bfaf 	b.w	80031fc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ae:	d106      	bne.n	80022be <HAL_RCC_OscConfig+0x12e>
 80022b0:	4b83      	ldr	r3, [pc, #524]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a82      	ldr	r2, [pc, #520]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 80022b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	e036      	b.n	800232c <HAL_RCC_OscConfig+0x19c>
 80022be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x158>
 80022ce:	4b7c      	ldr	r3, [pc, #496]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a7b      	ldr	r2, [pc, #492]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 80022d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b79      	ldr	r3, [pc, #484]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a78      	ldr	r2, [pc, #480]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 80022e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e021      	b.n	800232c <HAL_RCC_OscConfig+0x19c>
 80022e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x184>
 80022fa:	4b71      	ldr	r3, [pc, #452]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a70      	ldr	r2, [pc, #448]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 8002300:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	4b6e      	ldr	r3, [pc, #440]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a6d      	ldr	r2, [pc, #436]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 800230c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e00b      	b.n	800232c <HAL_RCC_OscConfig+0x19c>
 8002314:	4b6a      	ldr	r3, [pc, #424]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a69      	ldr	r2, [pc, #420]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 800231a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	4b67      	ldr	r3, [pc, #412]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a66      	ldr	r2, [pc, #408]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 8002326:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800232a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800232c:	4b64      	ldr	r3, [pc, #400]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 800232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002330:	f023 020f 	bic.w	r2, r3, #15
 8002334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002338:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	495f      	ldr	r1, [pc, #380]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 8002342:	4313      	orrs	r3, r2
 8002344:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d059      	beq.n	800240a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7ff f9c3 	bl	80016e0 <HAL_GetTick>
 800235a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235e:	e00a      	b.n	8002376 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002360:	f7ff f9be 	bl	80016e0 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b64      	cmp	r3, #100	@ 0x64
 800236e:	d902      	bls.n	8002376 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	f000 bf43 	b.w	80031fc <HAL_RCC_OscConfig+0x106c>
 8002376:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800237a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800238a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d102      	bne.n	80023a8 <HAL_RCC_OscConfig+0x218>
 80023a2:	4b47      	ldr	r3, [pc, #284]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	e015      	b.n	80023d4 <HAL_RCC_OscConfig+0x244>
 80023a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023ac:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80023bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023c0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80023c4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80023d0:	4b3b      	ldr	r3, [pc, #236]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023d8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80023dc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80023e0:	fa92 f2a2 	rbit	r2, r2
 80023e4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80023e8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80023ec:	fab2 f282 	clz	r2, r2
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	f042 0220 	orr.w	r2, r2, #32
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	f002 021f 	and.w	r2, r2, #31
 80023fc:	2101      	movs	r1, #1
 80023fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ab      	beq.n	8002360 <HAL_RCC_OscConfig+0x1d0>
 8002408:	e05d      	b.n	80024c6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7ff f969 	bl	80016e0 <HAL_GetTick>
 800240e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	e00a      	b.n	800242a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002414:	f7ff f964 	bl	80016e0 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b64      	cmp	r3, #100	@ 0x64
 8002422:	d902      	bls.n	800242a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	f000 bee9 	b.w	80031fc <HAL_RCC_OscConfig+0x106c>
 800242a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800242e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800243e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d102      	bne.n	800245c <HAL_RCC_OscConfig+0x2cc>
 8002456:	4b1a      	ldr	r3, [pc, #104]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	e015      	b.n	8002488 <HAL_RCC_OscConfig+0x2f8>
 800245c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002460:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002470:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002474:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002478:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800247c:	fa93 f3a3 	rbit	r3, r3
 8002480:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002484:	4b0e      	ldr	r3, [pc, #56]	@ (80024c0 <HAL_RCC_OscConfig+0x330>)
 8002486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002488:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800248c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002490:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002494:	fa92 f2a2 	rbit	r2, r2
 8002498:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800249c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80024a0:	fab2 f282 	clz	r2, r2
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	f042 0220 	orr.w	r2, r2, #32
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	f002 021f 	and.w	r2, r2, #31
 80024b0:	2101      	movs	r1, #1
 80024b2:	fa01 f202 	lsl.w	r2, r1, r2
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1ab      	bne.n	8002414 <HAL_RCC_OscConfig+0x284>
 80024bc:	e003      	b.n	80024c6 <HAL_RCC_OscConfig+0x336>
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 817d 	beq.w	80027d6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024dc:	4ba6      	ldr	r3, [pc, #664]	@ (8002778 <HAL_RCC_OscConfig+0x5e8>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00b      	beq.n	8002500 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024e8:	4ba3      	ldr	r3, [pc, #652]	@ (8002778 <HAL_RCC_OscConfig+0x5e8>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d172      	bne.n	80025da <HAL_RCC_OscConfig+0x44a>
 80024f4:	4ba0      	ldr	r3, [pc, #640]	@ (8002778 <HAL_RCC_OscConfig+0x5e8>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d16c      	bne.n	80025da <HAL_RCC_OscConfig+0x44a>
 8002500:	2302      	movs	r3, #2
 8002502:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002512:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d102      	bne.n	8002530 <HAL_RCC_OscConfig+0x3a0>
 800252a:	4b93      	ldr	r3, [pc, #588]	@ (8002778 <HAL_RCC_OscConfig+0x5e8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	e013      	b.n	8002558 <HAL_RCC_OscConfig+0x3c8>
 8002530:	2302      	movs	r3, #2
 8002532:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002542:	2302      	movs	r3, #2
 8002544:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002548:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002554:	4b88      	ldr	r3, [pc, #544]	@ (8002778 <HAL_RCC_OscConfig+0x5e8>)
 8002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002558:	2202      	movs	r2, #2
 800255a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800255e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002562:	fa92 f2a2 	rbit	r2, r2
 8002566:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800256a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800256e:	fab2 f282 	clz	r2, r2
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	f042 0220 	orr.w	r2, r2, #32
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	f002 021f 	and.w	r2, r2, #31
 800257e:	2101      	movs	r1, #1
 8002580:	fa01 f202 	lsl.w	r2, r1, r2
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <HAL_RCC_OscConfig+0x410>
 800258a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d002      	beq.n	80025a0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	f000 be2e 	b.w	80031fc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a0:	4b75      	ldr	r3, [pc, #468]	@ (8002778 <HAL_RCC_OscConfig+0x5e8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	21f8      	movs	r1, #248	@ 0xf8
 80025b6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80025be:	fa91 f1a1 	rbit	r1, r1
 80025c2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80025c6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80025ca:	fab1 f181 	clz	r1, r1
 80025ce:	b2c9      	uxtb	r1, r1
 80025d0:	408b      	lsls	r3, r1
 80025d2:	4969      	ldr	r1, [pc, #420]	@ (8002778 <HAL_RCC_OscConfig+0x5e8>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d8:	e0fd      	b.n	80027d6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8088 	beq.w	80026fc <HAL_RCC_OscConfig+0x56c>
 80025ec:	2301      	movs	r3, #1
 80025ee:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80025fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800260c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	461a      	mov	r2, r3
 8002614:	2301      	movs	r3, #1
 8002616:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7ff f862 	bl	80016e0 <HAL_GetTick>
 800261c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002622:	f7ff f85d 	bl	80016e0 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d902      	bls.n	8002638 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	f000 bde2 	b.w	80031fc <HAL_RCC_OscConfig+0x106c>
 8002638:	2302      	movs	r3, #2
 800263a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800264a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d102      	bne.n	8002668 <HAL_RCC_OscConfig+0x4d8>
 8002662:	4b45      	ldr	r3, [pc, #276]	@ (8002778 <HAL_RCC_OscConfig+0x5e8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	e013      	b.n	8002690 <HAL_RCC_OscConfig+0x500>
 8002668:	2302      	movs	r3, #2
 800266a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800267a:	2302      	movs	r3, #2
 800267c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002680:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002684:	fa93 f3a3 	rbit	r3, r3
 8002688:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800268c:	4b3a      	ldr	r3, [pc, #232]	@ (8002778 <HAL_RCC_OscConfig+0x5e8>)
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	2202      	movs	r2, #2
 8002692:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002696:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800269a:	fa92 f2a2 	rbit	r2, r2
 800269e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80026a2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80026a6:	fab2 f282 	clz	r2, r2
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	f042 0220 	orr.w	r2, r2, #32
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	f002 021f 	and.w	r2, r2, #31
 80026b6:	2101      	movs	r1, #1
 80026b8:	fa01 f202 	lsl.w	r2, r1, r2
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0af      	beq.n	8002622 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002778 <HAL_RCC_OscConfig+0x5e8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	21f8      	movs	r1, #248	@ 0xf8
 80026d8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80026e0:	fa91 f1a1 	rbit	r1, r1
 80026e4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80026e8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80026ec:	fab1 f181 	clz	r1, r1
 80026f0:	b2c9      	uxtb	r1, r1
 80026f2:	408b      	lsls	r3, r1
 80026f4:	4920      	ldr	r1, [pc, #128]	@ (8002778 <HAL_RCC_OscConfig+0x5e8>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]
 80026fa:	e06c      	b.n	80027d6 <HAL_RCC_OscConfig+0x646>
 80026fc:	2301      	movs	r3, #1
 80026fe:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800270e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800271c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	461a      	mov	r2, r3
 8002724:	2300      	movs	r3, #0
 8002726:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe ffda 	bl	80016e0 <HAL_GetTick>
 800272c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002730:	e00a      	b.n	8002748 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002732:	f7fe ffd5 	bl	80016e0 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d902      	bls.n	8002748 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	f000 bd5a 	b.w	80031fc <HAL_RCC_OscConfig+0x106c>
 8002748:	2302      	movs	r3, #2
 800274a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800275a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	095b      	lsrs	r3, r3, #5
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d104      	bne.n	800277c <HAL_RCC_OscConfig+0x5ec>
 8002772:	4b01      	ldr	r3, [pc, #4]	@ (8002778 <HAL_RCC_OscConfig+0x5e8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	e015      	b.n	80027a4 <HAL_RCC_OscConfig+0x614>
 8002778:	40021000 	.word	0x40021000
 800277c:	2302      	movs	r3, #2
 800277e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800278e:	2302      	movs	r3, #2
 8002790:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002794:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80027a0:	4bc8      	ldr	r3, [pc, #800]	@ (8002ac4 <HAL_RCC_OscConfig+0x934>)
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	2202      	movs	r2, #2
 80027a6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80027aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80027ae:	fa92 f2a2 	rbit	r2, r2
 80027b2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80027b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80027ba:	fab2 f282 	clz	r2, r2
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	f042 0220 	orr.w	r2, r2, #32
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	f002 021f 	and.w	r2, r2, #31
 80027ca:	2101      	movs	r1, #1
 80027cc:	fa01 f202 	lsl.w	r2, r1, r2
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1ad      	bne.n	8002732 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 8110 	beq.w	8002a0c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d079      	beq.n	80028f0 <HAL_RCC_OscConfig+0x760>
 80027fc:	2301      	movs	r3, #1
 80027fe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800280e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	4bab      	ldr	r3, [pc, #684]	@ (8002ac8 <HAL_RCC_OscConfig+0x938>)
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	461a      	mov	r2, r3
 8002822:	2301      	movs	r3, #1
 8002824:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002826:	f7fe ff5b 	bl	80016e0 <HAL_GetTick>
 800282a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282e:	e00a      	b.n	8002846 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002830:	f7fe ff56 	bl	80016e0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d902      	bls.n	8002846 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	f000 bcdb 	b.w	80031fc <HAL_RCC_OscConfig+0x106c>
 8002846:	2302      	movs	r3, #2
 8002848:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002860:	2202      	movs	r2, #2
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002868:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	fa93 f2a3 	rbit	r2, r3
 8002872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002884:	2202      	movs	r2, #2
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	fa93 f2a3 	rbit	r2, r3
 8002896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800289e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a0:	4b88      	ldr	r3, [pc, #544]	@ (8002ac4 <HAL_RCC_OscConfig+0x934>)
 80028a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80028ac:	2102      	movs	r1, #2
 80028ae:	6019      	str	r1, [r3, #0]
 80028b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	fa93 f1a3 	rbit	r1, r3
 80028be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028c6:	6019      	str	r1, [r3, #0]
  return result;
 80028c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	2101      	movs	r1, #1
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0a0      	beq.n	8002830 <HAL_RCC_OscConfig+0x6a0>
 80028ee:	e08d      	b.n	8002a0c <HAL_RCC_OscConfig+0x87c>
 80028f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002900:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	fa93 f2a3 	rbit	r2, r3
 800290a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002912:	601a      	str	r2, [r3, #0]
  return result;
 8002914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002918:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800291c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	4b68      	ldr	r3, [pc, #416]	@ (8002ac8 <HAL_RCC_OscConfig+0x938>)
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	461a      	mov	r2, r3
 800292e:	2300      	movs	r3, #0
 8002930:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002932:	f7fe fed5 	bl	80016e0 <HAL_GetTick>
 8002936:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800293c:	f7fe fed0 	bl	80016e0 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d902      	bls.n	8002952 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	f000 bc55 	b.w	80031fc <HAL_RCC_OscConfig+0x106c>
 8002952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002956:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800295a:	2202      	movs	r2, #2
 800295c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002962:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	fa93 f2a3 	rbit	r2, r3
 800296c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002970:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800297e:	2202      	movs	r2, #2
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002986:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	fa93 f2a3 	rbit	r2, r3
 8002990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002994:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80029a2:	2202      	movs	r2, #2
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029aa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	fa93 f2a3 	rbit	r2, r3
 80029b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80029bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029be:	4b41      	ldr	r3, [pc, #260]	@ (8002ac4 <HAL_RCC_OscConfig+0x934>)
 80029c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80029ca:	2102      	movs	r1, #2
 80029cc:	6019      	str	r1, [r3, #0]
 80029ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	fa93 f1a3 	rbit	r1, r3
 80029dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029e4:	6019      	str	r1, [r3, #0]
  return result;
 80029e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d197      	bne.n	800293c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 81a1 	beq.w	8002d64 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a28:	4b26      	ldr	r3, [pc, #152]	@ (8002ac4 <HAL_RCC_OscConfig+0x934>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d116      	bne.n	8002a62 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a34:	4b23      	ldr	r3, [pc, #140]	@ (8002ac4 <HAL_RCC_OscConfig+0x934>)
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	4a22      	ldr	r2, [pc, #136]	@ (8002ac4 <HAL_RCC_OscConfig+0x934>)
 8002a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a3e:	61d3      	str	r3, [r2, #28]
 8002a40:	4b20      	ldr	r3, [pc, #128]	@ (8002ac4 <HAL_RCC_OscConfig+0x934>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a56:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002a5a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a62:	4b1a      	ldr	r3, [pc, #104]	@ (8002acc <HAL_RCC_OscConfig+0x93c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d11a      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a6e:	4b17      	ldr	r3, [pc, #92]	@ (8002acc <HAL_RCC_OscConfig+0x93c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a16      	ldr	r2, [pc, #88]	@ (8002acc <HAL_RCC_OscConfig+0x93c>)
 8002a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a78:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe fe31 	bl	80016e0 <HAL_GetTick>
 8002a7e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a82:	e009      	b.n	8002a98 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a84:	f7fe fe2c 	bl	80016e0 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b64      	cmp	r3, #100	@ 0x64
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e3b1      	b.n	80031fc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	4b0c      	ldr	r3, [pc, #48]	@ (8002acc <HAL_RCC_OscConfig+0x93c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0ef      	beq.n	8002a84 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d10d      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x940>
 8002ab4:	4b03      	ldr	r3, [pc, #12]	@ (8002ac4 <HAL_RCC_OscConfig+0x934>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4a02      	ldr	r2, [pc, #8]	@ (8002ac4 <HAL_RCC_OscConfig+0x934>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6213      	str	r3, [r2, #32]
 8002ac0:	e03c      	b.n	8002b3c <HAL_RCC_OscConfig+0x9ac>
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	10908120 	.word	0x10908120
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10c      	bne.n	8002afa <HAL_RCC_OscConfig+0x96a>
 8002ae0:	4bc1      	ldr	r3, [pc, #772]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4ac0      	ldr	r2, [pc, #768]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	6213      	str	r3, [r2, #32]
 8002aec:	4bbe      	ldr	r3, [pc, #760]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4abd      	ldr	r2, [pc, #756]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002af2:	f023 0304 	bic.w	r3, r3, #4
 8002af6:	6213      	str	r3, [r2, #32]
 8002af8:	e020      	b.n	8002b3c <HAL_RCC_OscConfig+0x9ac>
 8002afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b05      	cmp	r3, #5
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x994>
 8002b0a:	4bb7      	ldr	r3, [pc, #732]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	4ab6      	ldr	r2, [pc, #728]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002b10:	f043 0304 	orr.w	r3, r3, #4
 8002b14:	6213      	str	r3, [r2, #32]
 8002b16:	4bb4      	ldr	r3, [pc, #720]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4ab3      	ldr	r2, [pc, #716]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6213      	str	r3, [r2, #32]
 8002b22:	e00b      	b.n	8002b3c <HAL_RCC_OscConfig+0x9ac>
 8002b24:	4bb0      	ldr	r3, [pc, #704]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4aaf      	ldr	r2, [pc, #700]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002b2a:	f023 0301 	bic.w	r3, r3, #1
 8002b2e:	6213      	str	r3, [r2, #32]
 8002b30:	4bad      	ldr	r3, [pc, #692]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	4aac      	ldr	r2, [pc, #688]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002b36:	f023 0304 	bic.w	r3, r3, #4
 8002b3a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8081 	beq.w	8002c50 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fdc7 	bl	80016e0 <HAL_GetTick>
 8002b52:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b56:	e00b      	b.n	8002b70 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7fe fdc2 	bl	80016e0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e345      	b.n	80031fc <HAL_RCC_OscConfig+0x106c>
 8002b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b74:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b78:	2202      	movs	r2, #2
 8002b7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b80:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	fa93 f2a3 	rbit	r2, r3
 8002b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b98:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	fa93 f2a3 	rbit	r2, r3
 8002bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002bb6:	601a      	str	r2, [r3, #0]
  return result;
 8002bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002bc0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d102      	bne.n	8002bdc <HAL_RCC_OscConfig+0xa4c>
 8002bd6:	4b84      	ldr	r3, [pc, #528]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	e013      	b.n	8002c04 <HAL_RCC_OscConfig+0xa74>
 8002bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002be4:	2202      	movs	r2, #2
 8002be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bec:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	fa93 f2a3 	rbit	r2, r3
 8002bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	4b79      	ldr	r3, [pc, #484]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c08:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002c0c:	2102      	movs	r1, #2
 8002c0e:	6011      	str	r1, [r2, #0]
 8002c10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c14:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	fa92 f1a2 	rbit	r1, r2
 8002c1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c22:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002c26:	6011      	str	r1, [r2, #0]
  return result;
 8002c28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c2c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	fab2 f282 	clz	r2, r2
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	f002 021f 	and.w	r2, r2, #31
 8002c42:	2101      	movs	r1, #1
 8002c44:	fa01 f202 	lsl.w	r2, r1, r2
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d084      	beq.n	8002b58 <HAL_RCC_OscConfig+0x9c8>
 8002c4e:	e07f      	b.n	8002d50 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c50:	f7fe fd46 	bl	80016e0 <HAL_GetTick>
 8002c54:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c58:	e00b      	b.n	8002c72 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe fd41 	bl	80016e0 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e2c4      	b.n	80031fc <HAL_RCC_OscConfig+0x106c>
 8002c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c76:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c82:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	fa93 f2a3 	rbit	r2, r3
 8002c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c90:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	fa93 f2a3 	rbit	r2, r3
 8002cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002cb8:	601a      	str	r2, [r3, #0]
  return result;
 8002cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cbe:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002cc2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	095b      	lsrs	r3, r3, #5
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f043 0302 	orr.w	r3, r3, #2
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d102      	bne.n	8002cde <HAL_RCC_OscConfig+0xb4e>
 8002cd8:	4b43      	ldr	r3, [pc, #268]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	e013      	b.n	8002d06 <HAL_RCC_OscConfig+0xb76>
 8002cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cee:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	fa93 f2a3 	rbit	r2, r3
 8002cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	4b39      	ldr	r3, [pc, #228]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d0a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002d0e:	2102      	movs	r1, #2
 8002d10:	6011      	str	r1, [r2, #0]
 8002d12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d16:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	fa92 f1a2 	rbit	r1, r2
 8002d20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d24:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002d28:	6011      	str	r1, [r2, #0]
  return result;
 8002d2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d2e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	fab2 f282 	clz	r2, r2
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	f002 021f 	and.w	r2, r2, #31
 8002d44:	2101      	movs	r1, #1
 8002d46:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d184      	bne.n	8002c5a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d50:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d105      	bne.n	8002d64 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d58:	4b23      	ldr	r3, [pc, #140]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	4a22      	ldr	r2, [pc, #136]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002d5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8242 	beq.w	80031fa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d76:	4b1c      	ldr	r3, [pc, #112]	@ (8002de8 <HAL_RCC_OscConfig+0xc58>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	f000 8213 	beq.w	80031aa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	f040 8162 	bne.w	800305a <HAL_RCC_OscConfig+0xeca>
 8002d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002d9e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	fa93 f2a3 	rbit	r2, r3
 8002db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002dba:	601a      	str	r2, [r3, #0]
  return result;
 8002dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002dc4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002dd0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	2300      	movs	r3, #0
 8002dda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fc80 	bl	80016e0 <HAL_GetTick>
 8002de0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de4:	e00c      	b.n	8002e00 <HAL_RCC_OscConfig+0xc70>
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe fc78 	bl	80016e0 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e1fd      	b.n	80031fc <HAL_RCC_OscConfig+0x106c>
 8002e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e04:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e12:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	fa93 f2a3 	rbit	r2, r3
 8002e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e20:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e24:	601a      	str	r2, [r3, #0]
  return result;
 8002e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d102      	bne.n	8002e4a <HAL_RCC_OscConfig+0xcba>
 8002e44:	4bb0      	ldr	r3, [pc, #704]	@ (8003108 <HAL_RCC_OscConfig+0xf78>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	e027      	b.n	8002e9a <HAL_RCC_OscConfig+0xd0a>
 8002e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	fa93 f2a3 	rbit	r2, r3
 8002e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e74:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002e78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e82:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	fa93 f2a3 	rbit	r2, r3
 8002e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e90:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	4b9c      	ldr	r3, [pc, #624]	@ (8003108 <HAL_RCC_OscConfig+0xf78>)
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e9e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002ea2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ea6:	6011      	str	r1, [r2, #0]
 8002ea8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002eac:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	fa92 f1a2 	rbit	r1, r2
 8002eb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002eba:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ebe:	6011      	str	r1, [r2, #0]
  return result;
 8002ec0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ec4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	fab2 f282 	clz	r2, r2
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	f042 0220 	orr.w	r2, r2, #32
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	f002 021f 	and.w	r2, r2, #31
 8002eda:	2101      	movs	r1, #1
 8002edc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d182      	bne.n	8002dec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee6:	4b88      	ldr	r3, [pc, #544]	@ (8003108 <HAL_RCC_OscConfig+0xf78>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	430b      	orrs	r3, r1
 8002f08:	497f      	ldr	r1, [pc, #508]	@ (8003108 <HAL_RCC_OscConfig+0xf78>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	604b      	str	r3, [r1, #4]
 8002f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f12:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002f16:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f20:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	fa93 f2a3 	rbit	r2, r3
 8002f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002f32:	601a      	str	r2, [r3, #0]
  return result;
 8002f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f38:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002f3c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f48:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2301      	movs	r3, #1
 8002f52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fe fbc4 	bl	80016e0 <HAL_GetTick>
 8002f58:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f5c:	e009      	b.n	8002f72 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5e:	f7fe fbbf 	bl	80016e0 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e144      	b.n	80031fc <HAL_RCC_OscConfig+0x106c>
 8002f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f76:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002f7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f84:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	fa93 f2a3 	rbit	r2, r3
 8002f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f92:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f96:	601a      	str	r2, [r3, #0]
  return result;
 8002f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002fa0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d102      	bne.n	8002fbc <HAL_RCC_OscConfig+0xe2c>
 8002fb6:	4b54      	ldr	r3, [pc, #336]	@ (8003108 <HAL_RCC_OscConfig+0xf78>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	e027      	b.n	800300c <HAL_RCC_OscConfig+0xe7c>
 8002fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002fc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fce:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fa93 f2a3 	rbit	r2, r3
 8002fd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fdc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002fea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	fa93 f2a3 	rbit	r2, r3
 8002ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003002:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	4b3f      	ldr	r3, [pc, #252]	@ (8003108 <HAL_RCC_OscConfig+0xf78>)
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003010:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003014:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003018:	6011      	str	r1, [r2, #0]
 800301a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800301e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	fa92 f1a2 	rbit	r1, r2
 8003028:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800302c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003030:	6011      	str	r1, [r2, #0]
  return result;
 8003032:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003036:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	fab2 f282 	clz	r2, r2
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	f042 0220 	orr.w	r2, r2, #32
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	f002 021f 	and.w	r2, r2, #31
 800304c:	2101      	movs	r1, #1
 800304e:	fa01 f202 	lsl.w	r2, r1, r2
 8003052:	4013      	ands	r3, r2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d082      	beq.n	8002f5e <HAL_RCC_OscConfig+0xdce>
 8003058:	e0cf      	b.n	80031fa <HAL_RCC_OscConfig+0x106a>
 800305a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003062:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003066:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	fa93 f2a3 	rbit	r2, r3
 8003076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800307e:	601a      	str	r2, [r3, #0]
  return result;
 8003080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003084:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003088:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003094:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	461a      	mov	r2, r3
 800309c:	2300      	movs	r3, #0
 800309e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fe fb1e 	bl	80016e0 <HAL_GetTick>
 80030a4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a8:	e009      	b.n	80030be <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030aa:	f7fe fb19 	bl	80016e0 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e09e      	b.n	80031fc <HAL_RCC_OscConfig+0x106c>
 80030be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80030c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	fa93 f2a3 	rbit	r2, r3
 80030da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030de:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80030e2:	601a      	str	r2, [r3, #0]
  return result;
 80030e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80030ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ee:	fab3 f383 	clz	r3, r3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d104      	bne.n	800310c <HAL_RCC_OscConfig+0xf7c>
 8003102:	4b01      	ldr	r3, [pc, #4]	@ (8003108 <HAL_RCC_OscConfig+0xf78>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	e029      	b.n	800315c <HAL_RCC_OscConfig+0xfcc>
 8003108:	40021000 	.word	0x40021000
 800310c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003110:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003114:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003118:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	fa93 f2a3 	rbit	r2, r3
 8003128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003136:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800313a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003144:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	fa93 f2a3 	rbit	r2, r3
 800314e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003152:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	4b2b      	ldr	r3, [pc, #172]	@ (8003208 <HAL_RCC_OscConfig+0x1078>)
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003160:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003164:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003168:	6011      	str	r1, [r2, #0]
 800316a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800316e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	fa92 f1a2 	rbit	r1, r2
 8003178:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800317c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003180:	6011      	str	r1, [r2, #0]
  return result;
 8003182:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003186:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	fab2 f282 	clz	r2, r2
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	f042 0220 	orr.w	r2, r2, #32
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	f002 021f 	and.w	r2, r2, #31
 800319c:	2101      	movs	r1, #1
 800319e:	fa01 f202 	lsl.w	r2, r1, r2
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d180      	bne.n	80030aa <HAL_RCC_OscConfig+0xf1a>
 80031a8:	e027      	b.n	80031fa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e01e      	b.n	80031fc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031be:	4b12      	ldr	r3, [pc, #72]	@ (8003208 <HAL_RCC_OscConfig+0x1078>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80031ca:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d10b      	bne.n	80031f6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80031e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80031e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d001      	beq.n	80031fa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000

0800320c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b09e      	sub	sp, #120	@ 0x78
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e162      	b.n	80034ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003224:	4b90      	ldr	r3, [pc, #576]	@ (8003468 <HAL_RCC_ClockConfig+0x25c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d910      	bls.n	8003254 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b8d      	ldr	r3, [pc, #564]	@ (8003468 <HAL_RCC_ClockConfig+0x25c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 0207 	bic.w	r2, r3, #7
 800323a:	498b      	ldr	r1, [pc, #556]	@ (8003468 <HAL_RCC_ClockConfig+0x25c>)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b89      	ldr	r3, [pc, #548]	@ (8003468 <HAL_RCC_ClockConfig+0x25c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e14a      	b.n	80034ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003260:	4b82      	ldr	r3, [pc, #520]	@ (800346c <HAL_RCC_ClockConfig+0x260>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	497f      	ldr	r1, [pc, #508]	@ (800346c <HAL_RCC_ClockConfig+0x260>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 80dc 	beq.w	8003438 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d13c      	bne.n	8003302 <HAL_RCC_ClockConfig+0xf6>
 8003288:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800328c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003298:	fab3 f383 	clz	r3, r3
 800329c:	b2db      	uxtb	r3, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d102      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xa6>
 80032ac:	4b6f      	ldr	r3, [pc, #444]	@ (800346c <HAL_RCC_ClockConfig+0x260>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	e00f      	b.n	80032d2 <HAL_RCC_ClockConfig+0xc6>
 80032b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032ba:	fa93 f3a3 	rbit	r3, r3
 80032be:	667b      	str	r3, [r7, #100]	@ 0x64
 80032c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80032c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032c8:	fa93 f3a3 	rbit	r3, r3
 80032cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032ce:	4b67      	ldr	r3, [pc, #412]	@ (800346c <HAL_RCC_ClockConfig+0x260>)
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032d6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80032d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032da:	fa92 f2a2 	rbit	r2, r2
 80032de:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80032e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032e2:	fab2 f282 	clz	r2, r2
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	f042 0220 	orr.w	r2, r2, #32
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	f002 021f 	and.w	r2, r2, #31
 80032f2:	2101      	movs	r1, #1
 80032f4:	fa01 f202 	lsl.w	r2, r1, r2
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d17b      	bne.n	80033f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0f3      	b.n	80034ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d13c      	bne.n	8003384 <HAL_RCC_ClockConfig+0x178>
 800330a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800330e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331a:	fab3 f383 	clz	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	095b      	lsrs	r3, r3, #5
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d102      	bne.n	8003334 <HAL_RCC_ClockConfig+0x128>
 800332e:	4b4f      	ldr	r3, [pc, #316]	@ (800346c <HAL_RCC_ClockConfig+0x260>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	e00f      	b.n	8003354 <HAL_RCC_ClockConfig+0x148>
 8003334:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003338:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	647b      	str	r3, [r7, #68]	@ 0x44
 8003342:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003346:	643b      	str	r3, [r7, #64]	@ 0x40
 8003348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003350:	4b46      	ldr	r3, [pc, #280]	@ (800346c <HAL_RCC_ClockConfig+0x260>)
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003358:	63ba      	str	r2, [r7, #56]	@ 0x38
 800335a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800335c:	fa92 f2a2 	rbit	r2, r2
 8003360:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003362:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003364:	fab2 f282 	clz	r2, r2
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	f042 0220 	orr.w	r2, r2, #32
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	f002 021f 	and.w	r2, r2, #31
 8003374:	2101      	movs	r1, #1
 8003376:	fa01 f202 	lsl.w	r2, r1, r2
 800337a:	4013      	ands	r3, r2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d13a      	bne.n	80033f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0b2      	b.n	80034ea <HAL_RCC_ClockConfig+0x2de>
 8003384:	2302      	movs	r3, #2
 8003386:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d102      	bne.n	80033ac <HAL_RCC_ClockConfig+0x1a0>
 80033a6:	4b31      	ldr	r3, [pc, #196]	@ (800346c <HAL_RCC_ClockConfig+0x260>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	e00d      	b.n	80033c8 <HAL_RCC_ClockConfig+0x1bc>
 80033ac:	2302      	movs	r3, #2
 80033ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b8:	2302      	movs	r3, #2
 80033ba:	623b      	str	r3, [r7, #32]
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	4b29      	ldr	r3, [pc, #164]	@ (800346c <HAL_RCC_ClockConfig+0x260>)
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	2202      	movs	r2, #2
 80033ca:	61ba      	str	r2, [r7, #24]
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	fa92 f2a2 	rbit	r2, r2
 80033d2:	617a      	str	r2, [r7, #20]
  return result;
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	fab2 f282 	clz	r2, r2
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	f042 0220 	orr.w	r2, r2, #32
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	f002 021f 	and.w	r2, r2, #31
 80033e6:	2101      	movs	r1, #1
 80033e8:	fa01 f202 	lsl.w	r2, r1, r2
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e079      	b.n	80034ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f6:	4b1d      	ldr	r3, [pc, #116]	@ (800346c <HAL_RCC_ClockConfig+0x260>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f023 0203 	bic.w	r2, r3, #3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	491a      	ldr	r1, [pc, #104]	@ (800346c <HAL_RCC_ClockConfig+0x260>)
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003408:	f7fe f96a 	bl	80016e0 <HAL_GetTick>
 800340c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340e:	e00a      	b.n	8003426 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003410:	f7fe f966 	bl	80016e0 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e061      	b.n	80034ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003426:	4b11      	ldr	r3, [pc, #68]	@ (800346c <HAL_RCC_ClockConfig+0x260>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 020c 	and.w	r2, r3, #12
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	429a      	cmp	r2, r3
 8003436:	d1eb      	bne.n	8003410 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003438:	4b0b      	ldr	r3, [pc, #44]	@ (8003468 <HAL_RCC_ClockConfig+0x25c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d214      	bcs.n	8003470 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b08      	ldr	r3, [pc, #32]	@ (8003468 <HAL_RCC_ClockConfig+0x25c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 0207 	bic.w	r2, r3, #7
 800344e:	4906      	ldr	r1, [pc, #24]	@ (8003468 <HAL_RCC_ClockConfig+0x25c>)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b04      	ldr	r3, [pc, #16]	@ (8003468 <HAL_RCC_ClockConfig+0x25c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d005      	beq.n	8003470 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e040      	b.n	80034ea <HAL_RCC_ClockConfig+0x2de>
 8003468:	40022000 	.word	0x40022000
 800346c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800347c:	4b1d      	ldr	r3, [pc, #116]	@ (80034f4 <HAL_RCC_ClockConfig+0x2e8>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	491a      	ldr	r1, [pc, #104]	@ (80034f4 <HAL_RCC_ClockConfig+0x2e8>)
 800348a:	4313      	orrs	r3, r2
 800348c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800349a:	4b16      	ldr	r3, [pc, #88]	@ (80034f4 <HAL_RCC_ClockConfig+0x2e8>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4912      	ldr	r1, [pc, #72]	@ (80034f4 <HAL_RCC_ClockConfig+0x2e8>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034ae:	f000 f829 	bl	8003504 <HAL_RCC_GetSysClockFreq>
 80034b2:	4601      	mov	r1, r0
 80034b4:	4b0f      	ldr	r3, [pc, #60]	@ (80034f4 <HAL_RCC_ClockConfig+0x2e8>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034bc:	22f0      	movs	r2, #240	@ 0xf0
 80034be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	fa92 f2a2 	rbit	r2, r2
 80034c6:	60fa      	str	r2, [r7, #12]
  return result;
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	fab2 f282 	clz	r2, r2
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	40d3      	lsrs	r3, r2
 80034d2:	4a09      	ldr	r2, [pc, #36]	@ (80034f8 <HAL_RCC_ClockConfig+0x2ec>)
 80034d4:	5cd3      	ldrb	r3, [r2, r3]
 80034d6:	fa21 f303 	lsr.w	r3, r1, r3
 80034da:	4a08      	ldr	r2, [pc, #32]	@ (80034fc <HAL_RCC_ClockConfig+0x2f0>)
 80034dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034de:	4b08      	ldr	r3, [pc, #32]	@ (8003500 <HAL_RCC_ClockConfig+0x2f4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe f8b8 	bl	8001658 <HAL_InitTick>
  
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3778      	adds	r7, #120	@ 0x78
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	08006aa8 	.word	0x08006aa8
 80034fc:	20000080 	.word	0x20000080
 8003500:	20000084 	.word	0x20000084

08003504 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003504:	b480      	push	{r7}
 8003506:	b08b      	sub	sp, #44	@ 0x2c
 8003508:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	2300      	movs	r3, #0
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	2300      	movs	r3, #0
 8003514:	627b      	str	r3, [r7, #36]	@ 0x24
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800351e:	4b29      	ldr	r3, [pc, #164]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b04      	cmp	r3, #4
 800352c:	d002      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x30>
 800352e:	2b08      	cmp	r3, #8
 8003530:	d003      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0x36>
 8003532:	e03c      	b.n	80035ae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003534:	4b24      	ldr	r3, [pc, #144]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003536:	623b      	str	r3, [r7, #32]
      break;
 8003538:	e03c      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003540:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003544:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	fa92 f2a2 	rbit	r2, r2
 800354c:	607a      	str	r2, [r7, #4]
  return result;
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	fab2 f282 	clz	r2, r2
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	40d3      	lsrs	r3, r2
 8003558:	4a1c      	ldr	r2, [pc, #112]	@ (80035cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800355a:	5cd3      	ldrb	r3, [r2, r3]
 800355c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800355e:	4b19      	ldr	r3, [pc, #100]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	220f      	movs	r2, #15
 8003568:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	fa92 f2a2 	rbit	r2, r2
 8003570:	60fa      	str	r2, [r7, #12]
  return result;
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	fab2 f282 	clz	r2, r2
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	40d3      	lsrs	r3, r2
 800357c:	4a14      	ldr	r2, [pc, #80]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800357e:	5cd3      	ldrb	r3, [r2, r3]
 8003580:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800358c:	4a0e      	ldr	r2, [pc, #56]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	fbb2 f2f3 	udiv	r2, r2, r3
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	627b      	str	r3, [r7, #36]	@ 0x24
 800359c:	e004      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	4a0c      	ldr	r2, [pc, #48]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	623b      	str	r3, [r7, #32]
      break;
 80035ac:	e002      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035ae:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035b0:	623b      	str	r3, [r7, #32]
      break;
 80035b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b4:	6a3b      	ldr	r3, [r7, #32]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	372c      	adds	r7, #44	@ 0x2c
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40021000 	.word	0x40021000
 80035c8:	007a1200 	.word	0x007a1200
 80035cc:	08006ab8 	.word	0x08006ab8
 80035d0:	08006ac8 	.word	0x08006ac8
 80035d4:	003d0900 	.word	0x003d0900

080035d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b092      	sub	sp, #72	@ 0x48
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80035e8:	2300      	movs	r3, #0
 80035ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 80d4 	beq.w	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fc:	4b4e      	ldr	r3, [pc, #312]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10e      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003608:	4b4b      	ldr	r3, [pc, #300]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	4a4a      	ldr	r2, [pc, #296]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003612:	61d3      	str	r3, [r2, #28]
 8003614:	4b48      	ldr	r3, [pc, #288]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003626:	4b45      	ldr	r3, [pc, #276]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d118      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003632:	4b42      	ldr	r3, [pc, #264]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a41      	ldr	r2, [pc, #260]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800363c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363e:	f7fe f84f 	bl	80016e0 <HAL_GetTick>
 8003642:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003644:	e008      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003646:	f7fe f84b 	bl	80016e0 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b64      	cmp	r3, #100	@ 0x64
 8003652:	d901      	bls.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e169      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003658:	4b38      	ldr	r3, [pc, #224]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003664:	4b34      	ldr	r3, [pc, #208]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800366c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800366e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8084 	beq.w	800377e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800367e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003680:	429a      	cmp	r2, r3
 8003682:	d07c      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003684:	4b2c      	ldr	r3, [pc, #176]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800368c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800368e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003692:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003696:	fa93 f3a3 	rbit	r3, r3
 800369a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800369c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	4b26      	ldr	r3, [pc, #152]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	461a      	mov	r2, r3
 80036ae:	2301      	movs	r3, #1
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ba:	fa93 f3a3 	rbit	r3, r3
 80036be:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80036c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036c2:	fab3 f383 	clz	r3, r3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	461a      	mov	r2, r3
 80036ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	461a      	mov	r2, r3
 80036d2:	2300      	movs	r3, #0
 80036d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036d6:	4a18      	ldr	r2, [pc, #96]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d04b      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7fd fffb 	bl	80016e0 <HAL_GetTick>
 80036ea:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ec:	e00a      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ee:	f7fd fff7 	bl	80016e0 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e113      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003704:	2302      	movs	r3, #2
 8003706:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003710:	2302      	movs	r3, #2
 8003712:	623b      	str	r3, [r7, #32]
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	61fb      	str	r3, [r7, #28]
  return result;
 800371c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	095b      	lsrs	r3, r3, #5
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f043 0302 	orr.w	r3, r3, #2
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d108      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003732:	4b01      	ldr	r3, [pc, #4]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	e00d      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003738:	40021000 	.word	0x40021000
 800373c:	40007000 	.word	0x40007000
 8003740:	10908100 	.word	0x10908100
 8003744:	2302      	movs	r3, #2
 8003746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	fa93 f3a3 	rbit	r3, r3
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	4b78      	ldr	r3, [pc, #480]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	2202      	movs	r2, #2
 8003756:	613a      	str	r2, [r7, #16]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	fa92 f2a2 	rbit	r2, r2
 800375e:	60fa      	str	r2, [r7, #12]
  return result;
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	fab2 f282 	clz	r2, r2
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	f002 021f 	and.w	r2, r2, #31
 8003772:	2101      	movs	r1, #1
 8003774:	fa01 f202 	lsl.w	r2, r1, r2
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0b7      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800377e:	4b6d      	ldr	r3, [pc, #436]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	496a      	ldr	r1, [pc, #424]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800378c:	4313      	orrs	r3, r2
 800378e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003790:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003794:	2b01      	cmp	r3, #1
 8003796:	d105      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003798:	4b66      	ldr	r3, [pc, #408]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	4a65      	ldr	r2, [pc, #404]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800379e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037b0:	4b60      	ldr	r3, [pc, #384]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b4:	f023 0203 	bic.w	r2, r3, #3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	495d      	ldr	r1, [pc, #372]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d008      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037ce:	4b59      	ldr	r3, [pc, #356]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	4956      	ldr	r1, [pc, #344]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037ec:	4b51      	ldr	r3, [pc, #324]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	494e      	ldr	r1, [pc, #312]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d008      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800380a:	4b4a      	ldr	r3, [pc, #296]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	f023 0210 	bic.w	r2, r3, #16
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	4947      	ldr	r1, [pc, #284]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003818:	4313      	orrs	r3, r2
 800381a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003828:	4b42      	ldr	r3, [pc, #264]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003834:	493f      	ldr	r1, [pc, #252]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003846:	4b3b      	ldr	r3, [pc, #236]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	f023 0220 	bic.w	r2, r3, #32
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	4938      	ldr	r1, [pc, #224]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003854:	4313      	orrs	r3, r2
 8003856:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003864:	4b33      	ldr	r3, [pc, #204]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003868:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	4930      	ldr	r1, [pc, #192]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003872:	4313      	orrs	r3, r2
 8003874:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	d008      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003882:	4b2c      	ldr	r3, [pc, #176]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	4929      	ldr	r1, [pc, #164]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003890:	4313      	orrs	r3, r2
 8003892:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038a0:	4b24      	ldr	r3, [pc, #144]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ac:	4921      	ldr	r1, [pc, #132]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038be:	4b1d      	ldr	r3, [pc, #116]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	491a      	ldr	r1, [pc, #104]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80038dc:	4b15      	ldr	r3, [pc, #84]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e0:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e8:	4912      	ldr	r1, [pc, #72]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	490b      	ldr	r1, [pc, #44]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003908:	4313      	orrs	r3, r2
 800390a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003918:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800391a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003924:	4903      	ldr	r1, [pc, #12]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003926:	4313      	orrs	r3, r2
 8003928:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3748      	adds	r7, #72	@ 0x48
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000

08003938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e09d      	b.n	8003a86 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394e:	2b00      	cmp	r3, #0
 8003950:	d108      	bne.n	8003964 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800395a:	d009      	beq.n	8003970 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	61da      	str	r2, [r3, #28]
 8003962:	e005      	b.n	8003970 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd fb68 	bl	8001060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039b0:	d902      	bls.n	80039b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	e002      	b.n	80039be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80039c6:	d007      	beq.n	80039d8 <HAL_SPI_Init+0xa0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039d0:	d002      	beq.n	80039d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a1a:	ea42 0103 	orr.w	r1, r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a22:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	0c1b      	lsrs	r3, r3, #16
 8003a34:	f003 0204 	and.w	r2, r3, #4
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003a54:	ea42 0103 	orr.w	r1, r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69da      	ldr	r2, [r3, #28]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e01a      	b.n	8003ad6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ab6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7fd fb13 	bl	80010e4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b08a      	sub	sp, #40	@ 0x28
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003aec:	2301      	movs	r3, #1
 8003aee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_SPI_TransmitReceive+0x26>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e20a      	b.n	8003f1a <HAL_SPI_TransmitReceive+0x43c>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b0c:	f7fd fde8 	bl	80016e0 <HAL_GetTick>
 8003b10:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b18:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b20:	887b      	ldrh	r3, [r7, #2]
 8003b22:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b24:	887b      	ldrh	r3, [r7, #2]
 8003b26:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b28:	7efb      	ldrb	r3, [r7, #27]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d00e      	beq.n	8003b4c <HAL_SPI_TransmitReceive+0x6e>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b34:	d106      	bne.n	8003b44 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <HAL_SPI_TransmitReceive+0x66>
 8003b3e:	7efb      	ldrb	r3, [r7, #27]
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d003      	beq.n	8003b4c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
 8003b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003b4a:	e1e0      	b.n	8003f0e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_SPI_TransmitReceive+0x80>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <HAL_SPI_TransmitReceive+0x80>
 8003b58:	887b      	ldrh	r3, [r7, #2]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d103      	bne.n	8003b66 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003b64:	e1d3      	b.n	8003f0e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d003      	beq.n	8003b7a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2205      	movs	r2, #5
 8003b76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	887a      	ldrh	r2, [r7, #2]
 8003b8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	887a      	ldrh	r2, [r7, #2]
 8003b92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	887a      	ldrh	r2, [r7, #2]
 8003ba0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	887a      	ldrh	r2, [r7, #2]
 8003ba6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bbc:	d802      	bhi.n	8003bc4 <HAL_SPI_TransmitReceive+0xe6>
 8003bbe:	8a3b      	ldrh	r3, [r7, #16]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d908      	bls.n	8003bd6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bd2:	605a      	str	r2, [r3, #4]
 8003bd4:	e007      	b.n	8003be6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003be4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf0:	2b40      	cmp	r3, #64	@ 0x40
 8003bf2:	d007      	beq.n	8003c04 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c0c:	f240 8081 	bls.w	8003d12 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <HAL_SPI_TransmitReceive+0x140>
 8003c18:	8a7b      	ldrh	r3, [r7, #18]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d16d      	bne.n	8003cfa <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c22:	881a      	ldrh	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2e:	1c9a      	adds	r2, r3, #2
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c42:	e05a      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d11b      	bne.n	8003c8a <HAL_SPI_TransmitReceive+0x1ac>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d016      	beq.n	8003c8a <HAL_SPI_TransmitReceive+0x1ac>
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d113      	bne.n	8003c8a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c66:	881a      	ldrh	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c72:	1c9a      	adds	r2, r3, #2
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d11c      	bne.n	8003cd2 <HAL_SPI_TransmitReceive+0x1f4>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d016      	beq.n	8003cd2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cae:	b292      	uxth	r2, r2
 8003cb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	1c9a      	adds	r2, r3, #2
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cd2:	f7fd fd05 	bl	80016e0 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d80b      	bhi.n	8003cfa <HAL_SPI_TransmitReceive+0x21c>
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d007      	beq.n	8003cfa <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003cf8:	e109      	b.n	8003f0e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d19f      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x166>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d199      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x166>
 8003d10:	e0e3      	b.n	8003eda <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_SPI_TransmitReceive+0x244>
 8003d1a:	8a7b      	ldrh	r3, [r7, #18]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	f040 80cf 	bne.w	8003ec0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d912      	bls.n	8003d52 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d30:	881a      	ldrh	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3c:	1c9a      	adds	r2, r3, #2
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b02      	subs	r3, #2
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d50:	e0b6      	b.n	8003ec0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	7812      	ldrb	r2, [r2, #0]
 8003d5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d78:	e0a2      	b.n	8003ec0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d134      	bne.n	8003df2 <HAL_SPI_TransmitReceive+0x314>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d02f      	beq.n	8003df2 <HAL_SPI_TransmitReceive+0x314>
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d12c      	bne.n	8003df2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d912      	bls.n	8003dc8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da6:	881a      	ldrh	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db2:	1c9a      	adds	r2, r3, #2
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b02      	subs	r3, #2
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003dc6:	e012      	b.n	8003dee <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	330c      	adds	r3, #12
 8003dd2:	7812      	ldrb	r2, [r2, #0]
 8003dd4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d148      	bne.n	8003e92 <HAL_SPI_TransmitReceive+0x3b4>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d042      	beq.n	8003e92 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d923      	bls.n	8003e60 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	b292      	uxth	r2, r2
 8003e24:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	1c9a      	adds	r2, r3, #2
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b02      	subs	r3, #2
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d81f      	bhi.n	8003e8e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	e016      	b.n	8003e8e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f103 020c 	add.w	r2, r3, #12
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6c:	7812      	ldrb	r2, [r2, #0]
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e92:	f7fd fc25 	bl	80016e0 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d803      	bhi.n	8003eaa <HAL_SPI_TransmitReceive+0x3cc>
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea8:	d102      	bne.n	8003eb0 <HAL_SPI_TransmitReceive+0x3d2>
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d107      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003ebe:	e026      	b.n	8003f0e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f47f af57 	bne.w	8003d7a <HAL_SPI_TransmitReceive+0x29c>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f47f af50 	bne.w	8003d7a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f94c 	bl	800417c <SPI_EndRxTxTransaction>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f04:	e003      	b.n	8003f0e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003f16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3728      	adds	r7, #40	@ 0x28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f30:	b2db      	uxtb	r3, r3
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
	...

08003f40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f50:	f7fd fbc6 	bl	80016e0 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f60:	f7fd fbbe 	bl	80016e0 <HAL_GetTick>
 8003f64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f66:	4b39      	ldr	r3, [pc, #228]	@ (800404c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	015b      	lsls	r3, r3, #5
 8003f6c:	0d1b      	lsrs	r3, r3, #20
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	fb02 f303 	mul.w	r3, r2, r3
 8003f74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f76:	e054      	b.n	8004022 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7e:	d050      	beq.n	8004022 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f80:	f7fd fbae 	bl	80016e0 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d902      	bls.n	8003f96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d13d      	bne.n	8004012 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003fa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fae:	d111      	bne.n	8003fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fb8:	d004      	beq.n	8003fc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fc2:	d107      	bne.n	8003fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fdc:	d10f      	bne.n	8003ffe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ffc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e017      	b.n	8004042 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	3b01      	subs	r3, #1
 8004020:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4013      	ands	r3, r2
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	429a      	cmp	r2, r3
 8004030:	bf0c      	ite	eq
 8004032:	2301      	moveq	r3, #1
 8004034:	2300      	movne	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	429a      	cmp	r2, r3
 800403e:	d19b      	bne.n	8003f78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000080 	.word	0x20000080

08004050 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08a      	sub	sp, #40	@ 0x28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004062:	f7fd fb3d 	bl	80016e0 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	4413      	add	r3, r2
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004072:	f7fd fb35 	bl	80016e0 <HAL_GetTick>
 8004076:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004080:	4b3d      	ldr	r3, [pc, #244]	@ (8004178 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	00da      	lsls	r2, r3, #3
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	0d1b      	lsrs	r3, r3, #20
 8004090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004098:	e060      	b.n	800415c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80040a0:	d107      	bne.n	80040b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d104      	bne.n	80040b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d050      	beq.n	800415c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040ba:	f7fd fb11 	bl	80016e0 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d902      	bls.n	80040d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d13d      	bne.n	800414c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040e8:	d111      	bne.n	800410e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f2:	d004      	beq.n	80040fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040fc:	d107      	bne.n	800410e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800410c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004116:	d10f      	bne.n	8004138 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004136:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e010      	b.n	800416e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	3b01      	subs	r3, #1
 800415a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4013      	ands	r3, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	429a      	cmp	r2, r3
 800416a:	d196      	bne.n	800409a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3728      	adds	r7, #40	@ 0x28
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000080 	.word	0x20000080

0800417c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2200      	movs	r2, #0
 8004190:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f7ff ff5b 	bl	8004050 <SPI_WaitFifoStateUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d007      	beq.n	80041b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a4:	f043 0220 	orr.w	r2, r3, #32
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e027      	b.n	8004200 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2200      	movs	r2, #0
 80041b8:	2180      	movs	r1, #128	@ 0x80
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f7ff fec0 	bl	8003f40 <SPI_WaitFlagStateUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e014      	b.n	8004200 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2200      	movs	r2, #0
 80041de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7ff ff34 	bl	8004050 <SPI_WaitFifoStateUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d007      	beq.n	80041fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e000      	b.n	8004200 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004210:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004214:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	b29b      	uxth	r3, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	b29b      	uxth	r3, r3
 8004226:	4013      	ands	r3, r2
 8004228:	b29a      	uxth	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800423e:	b084      	sub	sp, #16
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	f107 0014 	add.w	r0, r7, #20
 800424c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	b004      	add	sp, #16
 800427e:	4770      	bx	lr

08004280 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800428a:	2300      	movs	r3, #0
 800428c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 800428e:	2300      	movs	r3, #0
 8004290:	703b      	strb	r3, [r7, #0]
 8004292:	2300      	movs	r3, #0
 8004294:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8004296:	4b51      	ldr	r3, [pc, #324]	@ (80043dc <BSP_GYRO_Init+0x15c>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	4798      	blx	r3
 800429c:	4603      	mov	r3, r0
 800429e:	2bd4      	cmp	r3, #212	@ 0xd4
 80042a0:	d005      	beq.n	80042ae <BSP_GYRO_Init+0x2e>
 80042a2:	4b4e      	ldr	r3, [pc, #312]	@ (80043dc <BSP_GYRO_Init+0x15c>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	4798      	blx	r3
 80042a8:	4603      	mov	r3, r0
 80042aa:	2bd5      	cmp	r3, #213	@ 0xd5
 80042ac:	d145      	bne.n	800433a <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80042ae:	4b4c      	ldr	r3, [pc, #304]	@ (80043e0 <BSP_GYRO_Init+0x160>)
 80042b0:	4a4a      	ldr	r2, [pc, #296]	@ (80043dc <BSP_GYRO_Init+0x15c>)
 80042b2:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 80042b4:	2308      	movs	r3, #8
 80042b6:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 80042b8:	2300      	movs	r3, #0
 80042ba:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 80042bc:	2307      	movs	r3, #7
 80042be:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 80042c0:	2330      	movs	r3, #48	@ 0x30
 80042c2:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80042c4:	2300      	movs	r3, #0
 80042c6:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 80042c8:	2300      	movs	r3, #0
 80042ca:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 80042cc:	2310      	movs	r3, #16
 80042ce:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80042d0:	793a      	ldrb	r2, [r7, #4]
 80042d2:	797b      	ldrb	r3, [r7, #5]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80042d8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80042da:	4313      	orrs	r3, r2
 80042dc:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80042de:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80042e0:	4313      	orrs	r3, r2
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80042e6:	7a3a      	ldrb	r2, [r7, #8]
 80042e8:	7a7b      	ldrb	r3, [r7, #9]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80042ee:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80042f0:	4313      	orrs	r3, r2
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	89bb      	ldrh	r3, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80042fe:	4b38      	ldr	r3, [pc, #224]	@ (80043e0 <BSP_GYRO_Init+0x160>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	89ba      	ldrh	r2, [r7, #12]
 8004306:	4610      	mov	r0, r2
 8004308:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 800430a:	2300      	movs	r3, #0
 800430c:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 800430e:	2300      	movs	r3, #0
 8004310:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8004312:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8004314:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8004316:	4313      	orrs	r3, r2
 8004318:	b2db      	uxtb	r3, r3
 800431a:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 800431c:	4b30      	ldr	r3, [pc, #192]	@ (80043e0 <BSP_GYRO_Init+0x160>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004322:	89ba      	ldrh	r2, [r7, #12]
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	4610      	mov	r0, r2
 8004328:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 800432a:	4b2d      	ldr	r3, [pc, #180]	@ (80043e0 <BSP_GYRO_Init+0x160>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004330:	2010      	movs	r0, #16
 8004332:	4798      	blx	r3

    ret = GYRO_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]
 8004338:	e04a      	b.n	80043d0 <BSP_GYRO_Init+0x150>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 800433a:	4b2a      	ldr	r3, [pc, #168]	@ (80043e4 <BSP_GYRO_Init+0x164>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	4798      	blx	r3
 8004340:	4603      	mov	r3, r0
 8004342:	2bd3      	cmp	r3, #211	@ 0xd3
 8004344:	d144      	bne.n	80043d0 <BSP_GYRO_Init+0x150>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8004346:	4b26      	ldr	r3, [pc, #152]	@ (80043e0 <BSP_GYRO_Init+0x160>)
 8004348:	4a26      	ldr	r2, [pc, #152]	@ (80043e4 <BSP_GYRO_Init+0x164>)
 800434a:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 800434c:	2308      	movs	r3, #8
 800434e:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 8004350:	2300      	movs	r3, #0
 8004352:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 8004354:	2307      	movs	r3, #7
 8004356:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 8004358:	2330      	movs	r3, #48	@ 0x30
 800435a:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 800435c:	2300      	movs	r3, #0
 800435e:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 8004360:	2300      	movs	r3, #0
 8004362:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 8004364:	2310      	movs	r3, #16
 8004366:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004368:	793a      	ldrb	r2, [r7, #4]
 800436a:	797b      	ldrb	r3, [r7, #5]
 800436c:	4313      	orrs	r3, r2
 800436e:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004370:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004372:	4313      	orrs	r3, r2
 8004374:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004376:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004378:	4313      	orrs	r3, r2
 800437a:	b2db      	uxtb	r3, r3
 800437c:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800437e:	7a3a      	ldrb	r2, [r7, #8]
 8004380:	7a7b      	ldrb	r3, [r7, #9]
 8004382:	4313      	orrs	r3, r2
 8004384:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8004386:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004388:	4313      	orrs	r3, r2
 800438a:	b2db      	uxtb	r3, r3
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	b29a      	uxth	r2, r3
 8004390:	89bb      	ldrh	r3, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8004396:	4b12      	ldr	r3, [pc, #72]	@ (80043e0 <BSP_GYRO_Init+0x160>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	89ba      	ldrh	r2, [r7, #12]
 800439e:	4610      	mov	r0, r2
 80043a0:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 80043a2:	2300      	movs	r3, #0
 80043a4:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80043aa:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80043ac:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80043ae:	4313      	orrs	r3, r2
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 80043b4:	4b0a      	ldr	r3, [pc, #40]	@ (80043e0 <BSP_GYRO_Init+0x160>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ba:	89ba      	ldrh	r2, [r7, #12]
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	4610      	mov	r0, r2
 80043c0:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 80043c2:	4b07      	ldr	r3, [pc, #28]	@ (80043e0 <BSP_GYRO_Init+0x160>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	2010      	movs	r0, #16
 80043ca:	4798      	blx	r3

    ret = GYRO_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	200000c0 	.word	0x200000c0
 80043e0:	20000848 	.word	0x20000848
 80043e4:	2000008c 	.word	0x2000008c

080043e8 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 80043f0:	4b06      	ldr	r3, [pc, #24]	@ (800440c <BSP_GYRO_GetXYZ+0x24>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d004      	beq.n	8004404 <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 80043fa:	4b04      	ldr	r3, [pc, #16]	@ (800440c <BSP_GYRO_GetXYZ+0x24>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	4798      	blx	r3
  }
}
 8004404:	bf00      	nop
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000848 	.word	0x20000848

08004410 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800441a:	2300      	movs	r3, #0
 800441c:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 800441e:	f000 fc77 	bl	8004d10 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8004428:	f107 030f 	add.w	r3, r7, #15
 800442c:	2201      	movs	r2, #1
 800442e:	2120      	movs	r1, #32
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fcb3 	bl	8004d9c <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	0a1b      	lsrs	r3, r3, #8
 800443a:	b29b      	uxth	r3, r3
 800443c:	b2db      	uxtb	r3, r3
 800443e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 8004440:	f107 030f 	add.w	r3, r7, #15
 8004444:	2201      	movs	r2, #1
 8004446:	2123      	movs	r1, #35	@ 0x23
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fca7 	bl	8004d9c <GYRO_IO_Write>
}
 800444e:	bf00      	nop
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8004456:	b480      	push	{r7}
 8004458:	af00      	add	r7, sp, #0
}
 800445a:	bf00      	nop
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 800446a:	f000 fc51 	bl	8004d10 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 800446e:	1dfb      	adds	r3, r7, #7
 8004470:	2201      	movs	r2, #1
 8004472:	210f      	movs	r1, #15
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fcc3 	bl	8004e00 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 800447a:	79fb      	ldrb	r3, [r7, #7]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800448a:	1dfb      	adds	r3, r7, #7
 800448c:	2201      	movs	r2, #1
 800448e:	2124      	movs	r1, #36	@ 0x24
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fcb5 	bl	8004e00 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800449c:	b2db      	uxtb	r3, r3
 800449e:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80044a0:	1dfb      	adds	r3, r7, #7
 80044a2:	2201      	movs	r2, #1
 80044a4:	2124      	movs	r1, #36	@ 0x24
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fc78 	bl	8004d9c <GYRO_IO_Write>
}
 80044ac:	bf00      	nop
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80044be:	2300      	movs	r3, #0
 80044c0:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 80044c8:	f107 030f 	add.w	r3, r7, #15
 80044cc:	2201      	movs	r2, #1
 80044ce:	2120      	movs	r1, #32
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fc63 	bl	8004d9c <GYRO_IO_Write>
}
 80044d6:	bf00      	nop
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	4603      	mov	r3, r0
 80044e6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80044e8:	2300      	movs	r3, #0
 80044ea:	73fb      	strb	r3, [r7, #15]
 80044ec:	2300      	movs	r3, #0
 80044ee:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 80044f0:	f107 030f 	add.w	r3, r7, #15
 80044f4:	2201      	movs	r2, #1
 80044f6:	2130      	movs	r1, #48	@ 0x30
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fc81 	bl	8004e00 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 80044fe:	f107 030e 	add.w	r3, r7, #14
 8004502:	2201      	movs	r2, #1
 8004504:	2122      	movs	r1, #34	@ 0x22
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fc7a 	bl	8004e00 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004512:	b2db      	uxtb	r3, r3
 8004514:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	121b      	asrs	r3, r3, #8
 800451c:	b25a      	sxtb	r2, r3
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	b25b      	sxtb	r3, r3
 8004522:	4313      	orrs	r3, r2
 8004524:	b25b      	sxtb	r3, r3
 8004526:	b2db      	uxtb	r3, r3
 8004528:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 800452a:	7bbb      	ldrb	r3, [r7, #14]
 800452c:	f023 0320 	bic.w	r3, r3, #32
 8004530:	b2db      	uxtb	r3, r3
 8004532:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8004534:	88fb      	ldrh	r3, [r7, #6]
 8004536:	b2da      	uxtb	r2, r3
 8004538:	7bbb      	ldrb	r3, [r7, #14]
 800453a:	4313      	orrs	r3, r2
 800453c:	b2db      	uxtb	r3, r3
 800453e:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8004540:	f107 030f 	add.w	r3, r7, #15
 8004544:	2201      	movs	r2, #1
 8004546:	2130      	movs	r1, #48	@ 0x30
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fc27 	bl	8004d9c <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800454e:	f107 030e 	add.w	r3, r7, #14
 8004552:	2201      	movs	r2, #1
 8004554:	2122      	movs	r1, #34	@ 0x22
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fc20 	bl	8004d9c <GYRO_IO_Write>
}
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800456e:	f107 030f 	add.w	r3, r7, #15
 8004572:	2201      	movs	r2, #1
 8004574:	2122      	movs	r1, #34	@ 0x22
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fc42 	bl	8004e00 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004588:	b2db      	uxtb	r3, r3
 800458a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004592:	b2db      	uxtb	r3, r3
 8004594:	73fb      	strb	r3, [r7, #15]
 8004596:	e00c      	b.n	80045b2 <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d109      	bne.n	80045b2 <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	f023 0308 	bic.w	r3, r3, #8
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	f043 0308 	orr.w	r3, r3, #8
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80045b2:	f107 030f 	add.w	r3, r7, #15
 80045b6:	2201      	movs	r2, #1
 80045b8:	2122      	movs	r1, #34	@ 0x22
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fbee 	bl	8004d9c <GYRO_IO_Write>
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80045d2:	f107 030f 	add.w	r3, r7, #15
 80045d6:	2201      	movs	r2, #1
 80045d8:	2122      	movs	r1, #34	@ 0x22
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fc10 	bl	8004e00 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d107      	bne.n	80045f6 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	73fb      	strb	r3, [r7, #15]
 80045f4:	e009      	b.n	800460a <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d106      	bne.n	800460a <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	f023 0308 	bic.w	r3, r3, #8
 8004602:	b2db      	uxtb	r3, r3
 8004604:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800460a:	f107 030f 	add.w	r3, r7, #15
 800460e:	2201      	movs	r2, #1
 8004610:	2122      	movs	r1, #34	@ 0x22
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fbc2 	bl	8004d9c <GYRO_IO_Write>
}
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800462a:	f107 030f 	add.w	r3, r7, #15
 800462e:	2201      	movs	r2, #1
 8004630:	2121      	movs	r1, #33	@ 0x21
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fbe4 	bl	8004e00 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800463e:	b2db      	uxtb	r3, r3
 8004640:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8004642:	7bfa      	ldrb	r2, [r7, #15]
 8004644:	79fb      	ldrb	r3, [r7, #7]
 8004646:	4313      	orrs	r3, r2
 8004648:	b2db      	uxtb	r3, r3
 800464a:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800464c:	f107 030f 	add.w	r3, r7, #15
 8004650:	2201      	movs	r2, #1
 8004652:	2121      	movs	r1, #33	@ 0x21
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fba1 	bl	8004d9c <GYRO_IO_Write>
}
 800465a:	bf00      	nop
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	4603      	mov	r3, r0
 800466a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800466c:	f107 030f 	add.w	r3, r7, #15
 8004670:	2201      	movs	r2, #1
 8004672:	2124      	movs	r1, #36	@ 0x24
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fbc3 	bl	8004e00 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 800467a:	7bfb      	ldrb	r3, [r7, #15]
 800467c:	f023 0310 	bic.w	r3, r3, #16
 8004680:	b2db      	uxtb	r3, r3
 8004682:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8004684:	7bfa      	ldrb	r2, [r7, #15]
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	4313      	orrs	r3, r2
 800468a:	b2db      	uxtb	r3, r3
 800468c:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800468e:	f107 030f 	add.w	r3, r7, #15
 8004692:	2201      	movs	r2, #1
 8004694:	2124      	movs	r1, #36	@ 0x24
 8004696:	4618      	mov	r0, r3
 8004698:	f000 fb80 	bl	8004d9c <GYRO_IO_Write>
}
 800469c:	bf00      	nop
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08a      	sub	sp, #40	@ 0x28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 80046ac:	2300      	movs	r3, #0
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	2300      	movs	r3, #0
 80046b2:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 80046b4:	f107 0310 	add.w	r3, r7, #16
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80046be:	2300      	movs	r3, #0
 80046c0:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	627b      	str	r3, [r7, #36]	@ 0x24
  int i = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 80046cc:	f107 030f 	add.w	r3, r7, #15
 80046d0:	2201      	movs	r2, #1
 80046d2:	2123      	movs	r1, #35	@ 0x23
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fb93 	bl	8004e00 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 80046da:	f107 0318 	add.w	r3, r7, #24
 80046de:	2206      	movs	r2, #6
 80046e0:	2128      	movs	r1, #40	@ 0x28
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fb8c 	bl	8004e00 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d121      	bne.n	8004736 <I3G4250D_ReadXYZAngRate+0x92>
  {
    for (i = 0; i < 3; i++)
 80046f2:	2300      	movs	r3, #0
 80046f4:	623b      	str	r3, [r7, #32]
 80046f6:	e01a      	b.n	800472e <I3G4250D_ReadXYZAngRate+0x8a>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	3301      	adds	r3, #1
 80046fe:	3328      	adds	r3, #40	@ 0x28
 8004700:	443b      	add	r3, r7
 8004702:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	b29b      	uxth	r3, r3
 800470a:	6a3a      	ldr	r2, [r7, #32]
 800470c:	0052      	lsls	r2, r2, #1
 800470e:	3228      	adds	r2, #40	@ 0x28
 8004710:	443a      	add	r2, r7
 8004712:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8004716:	4413      	add	r3, r2
 8004718:	b29b      	uxth	r3, r3
 800471a:	b21a      	sxth	r2, r3
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	3328      	adds	r3, #40	@ 0x28
 8004722:	443b      	add	r3, r7
 8004724:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	3301      	adds	r3, #1
 800472c:	623b      	str	r3, [r7, #32]
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	2b02      	cmp	r3, #2
 8004732:	dde1      	ble.n	80046f8 <I3G4250D_ReadXYZAngRate+0x54>
 8004734:	e020      	b.n	8004778 <I3G4250D_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 8004736:	2300      	movs	r3, #0
 8004738:	623b      	str	r3, [r7, #32]
 800473a:	e01a      	b.n	8004772 <I3G4250D_ReadXYZAngRate+0xce>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	3328      	adds	r3, #40	@ 0x28
 8004742:	443b      	add	r3, r7
 8004744:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	b29b      	uxth	r3, r3
 800474c:	6a3a      	ldr	r2, [r7, #32]
 800474e:	0052      	lsls	r2, r2, #1
 8004750:	3201      	adds	r2, #1
 8004752:	3228      	adds	r2, #40	@ 0x28
 8004754:	443a      	add	r2, r7
 8004756:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800475a:	4413      	add	r3, r2
 800475c:	b29b      	uxth	r3, r3
 800475e:	b21a      	sxth	r2, r3
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	3328      	adds	r3, #40	@ 0x28
 8004766:	443b      	add	r3, r7
 8004768:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	3301      	adds	r3, #1
 8004770:	623b      	str	r3, [r7, #32]
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	2b02      	cmp	r3, #2
 8004776:	dde1      	ble.n	800473c <I3G4250D_ReadXYZAngRate+0x98>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800477e:	2b20      	cmp	r3, #32
 8004780:	d00c      	beq.n	800479c <I3G4250D_ReadXYZAngRate+0xf8>
 8004782:	2b20      	cmp	r3, #32
 8004784:	dc0d      	bgt.n	80047a2 <I3G4250D_ReadXYZAngRate+0xfe>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <I3G4250D_ReadXYZAngRate+0xec>
 800478a:	2b10      	cmp	r3, #16
 800478c:	d003      	beq.n	8004796 <I3G4250D_ReadXYZAngRate+0xf2>
 800478e:	e008      	b.n	80047a2 <I3G4250D_ReadXYZAngRate+0xfe>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8004790:	4b15      	ldr	r3, [pc, #84]	@ (80047e8 <I3G4250D_ReadXYZAngRate+0x144>)
 8004792:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004794:	e005      	b.n	80047a2 <I3G4250D_ReadXYZAngRate+0xfe>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8004796:	4b15      	ldr	r3, [pc, #84]	@ (80047ec <I3G4250D_ReadXYZAngRate+0x148>)
 8004798:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800479a:	e002      	b.n	80047a2 <I3G4250D_ReadXYZAngRate+0xfe>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 800479c:	4b14      	ldr	r3, [pc, #80]	@ (80047f0 <I3G4250D_ReadXYZAngRate+0x14c>)
 800479e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80047a0:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 80047a2:	2300      	movs	r3, #0
 80047a4:	623b      	str	r3, [r7, #32]
 80047a6:	e016      	b.n	80047d6 <I3G4250D_ReadXYZAngRate+0x132>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	3328      	adds	r3, #40	@ 0x28
 80047ae:	443b      	add	r3, r7
 80047b0:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80047b4:	ee07 3a90 	vmov	s15, r3
 80047b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	4413      	add	r3, r2
 80047c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80047c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047cc:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	3301      	adds	r3, #1
 80047d4:	623b      	str	r3, [r7, #32]
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	dde5      	ble.n	80047a8 <I3G4250D_ReadXYZAngRate+0x104>
  }
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	3728      	adds	r7, #40	@ 0x28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	410c0000 	.word	0x410c0000
 80047ec:	418c0000 	.word	0x418c0000
 80047f0:	428c0000 	.word	0x428c0000

080047f4 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	4603      	mov	r3, r0
 80047fc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80047fe:	2300      	movs	r3, #0
 8004800:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8004802:	f000 fa85 	bl	8004d10 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8004806:	88fb      	ldrh	r3, [r7, #6]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800480c:	f107 030f 	add.w	r3, r7, #15
 8004810:	2201      	movs	r2, #1
 8004812:	2120      	movs	r1, #32
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fac1 	bl	8004d9c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	0a1b      	lsrs	r3, r3, #8
 800481e:	b29b      	uxth	r3, r3
 8004820:	b2db      	uxtb	r3, r3
 8004822:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8004824:	f107 030f 	add.w	r3, r7, #15
 8004828:	2201      	movs	r2, #1
 800482a:	2123      	movs	r1, #35	@ 0x23
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fab5 	bl	8004d9c <GYRO_IO_Write>
}
 8004832:	bf00      	nop
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 800483a:	b480      	push	{r7}
 800483c:	af00      	add	r7, sp, #0
}
 800483e:	bf00      	nop
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800484e:	f000 fa5f 	bl	8004d10 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8004852:	1dfb      	adds	r3, r7, #7
 8004854:	2201      	movs	r2, #1
 8004856:	210f      	movs	r1, #15
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fad1 	bl	8004e00 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800485e:	79fb      	ldrb	r3, [r7, #7]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800486e:	1dfb      	adds	r3, r7, #7
 8004870:	2201      	movs	r2, #1
 8004872:	2124      	movs	r1, #36	@ 0x24
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fac3 	bl	8004e00 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004880:	b2db      	uxtb	r3, r3
 8004882:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004884:	1dfb      	adds	r3, r7, #7
 8004886:	2201      	movs	r2, #1
 8004888:	2124      	movs	r1, #36	@ 0x24
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fa86 	bl	8004d9c <GYRO_IO_Write>
}
 8004890:	bf00      	nop
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80048a2:	2300      	movs	r3, #0
 80048a4:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80048ac:	f107 030f 	add.w	r3, r7, #15
 80048b0:	2201      	movs	r2, #1
 80048b2:	2120      	movs	r1, #32
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fa71 	bl	8004d9c <GYRO_IO_Write>
}
 80048ba:	bf00      	nop
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	4603      	mov	r3, r0
 80048ca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80048cc:	2300      	movs	r3, #0
 80048ce:	73fb      	strb	r3, [r7, #15]
 80048d0:	2300      	movs	r3, #0
 80048d2:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80048d4:	f107 030f 	add.w	r3, r7, #15
 80048d8:	2201      	movs	r2, #1
 80048da:	2130      	movs	r1, #48	@ 0x30
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fa8f 	bl	8004e00 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80048e2:	f107 030e 	add.w	r3, r7, #14
 80048e6:	2201      	movs	r2, #1
 80048e8:	2122      	movs	r1, #34	@ 0x22
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fa88 	bl	8004e00 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	121b      	asrs	r3, r3, #8
 8004900:	b25a      	sxtb	r2, r3
 8004902:	7bfb      	ldrb	r3, [r7, #15]
 8004904:	b25b      	sxtb	r3, r3
 8004906:	4313      	orrs	r3, r2
 8004908:	b25b      	sxtb	r3, r3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 800490e:	7bbb      	ldrb	r3, [r7, #14]
 8004910:	f023 0320 	bic.w	r3, r3, #32
 8004914:	b2db      	uxtb	r3, r3
 8004916:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8004918:	88fb      	ldrh	r3, [r7, #6]
 800491a:	b2da      	uxtb	r2, r3
 800491c:	7bbb      	ldrb	r3, [r7, #14]
 800491e:	4313      	orrs	r3, r2
 8004920:	b2db      	uxtb	r3, r3
 8004922:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8004924:	f107 030f 	add.w	r3, r7, #15
 8004928:	2201      	movs	r2, #1
 800492a:	2130      	movs	r1, #48	@ 0x30
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fa35 	bl	8004d9c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8004932:	f107 030e 	add.w	r3, r7, #14
 8004936:	2201      	movs	r2, #1
 8004938:	2122      	movs	r1, #34	@ 0x22
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fa2e 	bl	8004d9c <GYRO_IO_Write>
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004952:	f107 030f 	add.w	r3, r7, #15
 8004956:	2201      	movs	r2, #1
 8004958:	2122      	movs	r1, #34	@ 0x22
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fa50 	bl	8004e00 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10a      	bne.n	800497c <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800496c:	b2db      	uxtb	r3, r3
 800496e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004976:	b2db      	uxtb	r3, r3
 8004978:	73fb      	strb	r3, [r7, #15]
 800497a:	e00c      	b.n	8004996 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d109      	bne.n	8004996 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	f023 0308 	bic.w	r3, r3, #8
 8004988:	b2db      	uxtb	r3, r3
 800498a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	f043 0308 	orr.w	r3, r3, #8
 8004992:	b2db      	uxtb	r3, r3
 8004994:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004996:	f107 030f 	add.w	r3, r7, #15
 800499a:	2201      	movs	r2, #1
 800499c:	2122      	movs	r1, #34	@ 0x22
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 f9fc 	bl	8004d9c <GYRO_IO_Write>
}
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80049b6:	f107 030f 	add.w	r3, r7, #15
 80049ba:	2201      	movs	r2, #1
 80049bc:	2122      	movs	r1, #34	@ 0x22
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fa1e 	bl	8004e00 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80049c4:	79fb      	ldrb	r3, [r7, #7]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d107      	bne.n	80049da <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
 80049cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	73fb      	strb	r3, [r7, #15]
 80049d8:	e009      	b.n	80049ee <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d106      	bne.n	80049ee <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	f023 0308 	bic.w	r3, r3, #8
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80049ee:	f107 030f 	add.w	r3, r7, #15
 80049f2:	2201      	movs	r2, #1
 80049f4:	2122      	movs	r1, #34	@ 0x22
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 f9d0 	bl	8004d9c <GYRO_IO_Write>
}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8004a0e:	f107 030f 	add.w	r3, r7, #15
 8004a12:	2201      	movs	r2, #1
 8004a14:	2121      	movs	r1, #33	@ 0x21
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 f9f2 	bl	8004e00 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8004a26:	7bfa      	ldrb	r2, [r7, #15]
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8004a30:	f107 030f 	add.w	r3, r7, #15
 8004a34:	2201      	movs	r2, #1
 8004a36:	2121      	movs	r1, #33	@ 0x21
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 f9af 	bl	8004d9c <GYRO_IO_Write>
}
 8004a3e:	bf00      	nop
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004a50:	f107 030f 	add.w	r3, r7, #15
 8004a54:	2201      	movs	r2, #1
 8004a56:	2124      	movs	r1, #36	@ 0x24
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 f9d1 	bl	8004e00 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	f023 0310 	bic.w	r3, r3, #16
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8004a68:	7bfa      	ldrb	r2, [r7, #15]
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004a72:	f107 030f 	add.w	r3, r7, #15
 8004a76:	2201      	movs	r2, #1
 8004a78:	2124      	movs	r1, #36	@ 0x24
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 f98e 	bl	8004d9c <GYRO_IO_Write>
}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	@ 0x28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8004a90:	2300      	movs	r3, #0
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	2300      	movs	r3, #0
 8004a96:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8004a98:	f107 0310 	add.w	r3, r7, #16
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8004ab0:	f107 030f 	add.w	r3, r7, #15
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	2123      	movs	r1, #35	@ 0x23
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 f9a1 	bl	8004e00 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8004abe:	f107 0318 	add.w	r3, r7, #24
 8004ac2:	2206      	movs	r2, #6
 8004ac4:	2128      	movs	r1, #40	@ 0x28
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f99a 	bl	8004e00 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d121      	bne.n	8004b1a <L3GD20_ReadXYZAngRate+0x92>
  {
    for(i=0; i<3; i++)
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	623b      	str	r3, [r7, #32]
 8004ada:	e01a      	b.n	8004b12 <L3GD20_ReadXYZAngRate+0x8a>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	3328      	adds	r3, #40	@ 0x28
 8004ae4:	443b      	add	r3, r7
 8004ae6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	6a3a      	ldr	r2, [r7, #32]
 8004af0:	0052      	lsls	r2, r2, #1
 8004af2:	3228      	adds	r2, #40	@ 0x28
 8004af4:	443a      	add	r2, r7
 8004af6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8004afa:	4413      	add	r3, r2
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	b21a      	sxth	r2, r3
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	3328      	adds	r3, #40	@ 0x28
 8004b06:	443b      	add	r3, r7
 8004b08:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	623b      	str	r3, [r7, #32]
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	dde1      	ble.n	8004adc <L3GD20_ReadXYZAngRate+0x54>
 8004b18:	e020      	b.n	8004b5c <L3GD20_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	623b      	str	r3, [r7, #32]
 8004b1e:	e01a      	b.n	8004b56 <L3GD20_ReadXYZAngRate+0xce>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	3328      	adds	r3, #40	@ 0x28
 8004b26:	443b      	add	r3, r7
 8004b28:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004b2c:	021b      	lsls	r3, r3, #8
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	6a3a      	ldr	r2, [r7, #32]
 8004b32:	0052      	lsls	r2, r2, #1
 8004b34:	3201      	adds	r2, #1
 8004b36:	3228      	adds	r2, #40	@ 0x28
 8004b38:	443a      	add	r2, r7
 8004b3a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8004b3e:	4413      	add	r3, r2
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	b21a      	sxth	r2, r3
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	3328      	adds	r3, #40	@ 0x28
 8004b4a:	443b      	add	r3, r7
 8004b4c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	3301      	adds	r3, #1
 8004b54:	623b      	str	r3, [r7, #32]
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	dde1      	ble.n	8004b20 <L3GD20_ReadXYZAngRate+0x98>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d00c      	beq.n	8004b80 <L3GD20_ReadXYZAngRate+0xf8>
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	dc0d      	bgt.n	8004b86 <L3GD20_ReadXYZAngRate+0xfe>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <L3GD20_ReadXYZAngRate+0xec>
 8004b6e:	2b10      	cmp	r3, #16
 8004b70:	d003      	beq.n	8004b7a <L3GD20_ReadXYZAngRate+0xf2>
 8004b72:	e008      	b.n	8004b86 <L3GD20_ReadXYZAngRate+0xfe>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8004b74:	4b15      	ldr	r3, [pc, #84]	@ (8004bcc <L3GD20_ReadXYZAngRate+0x144>)
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8004b78:	e005      	b.n	8004b86 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8004b7a:	4b15      	ldr	r3, [pc, #84]	@ (8004bd0 <L3GD20_ReadXYZAngRate+0x148>)
 8004b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8004b7e:	e002      	b.n	8004b86 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8004b80:	4b14      	ldr	r3, [pc, #80]	@ (8004bd4 <L3GD20_ReadXYZAngRate+0x14c>)
 8004b82:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8004b84:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8004b86:	2300      	movs	r3, #0
 8004b88:	623b      	str	r3, [r7, #32]
 8004b8a:	e016      	b.n	8004bba <L3GD20_ReadXYZAngRate+0x132>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	3328      	adds	r3, #40	@ 0x28
 8004b92:	443b      	add	r3, r7
 8004b94:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8004b98:	ee07 3a90 	vmov	s15, r3
 8004b9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb0:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	623b      	str	r3, [r7, #32]
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	dde5      	ble.n	8004b8c <L3GD20_ReadXYZAngRate+0x104>
  }
}
 8004bc0:	bf00      	nop
 8004bc2:	bf00      	nop
 8004bc4:	3728      	adds	r7, #40	@ 0x28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	410c0000 	.word	0x410c0000
 8004bd0:	418c0000 	.word	0x418c0000
 8004bd4:	428c0000 	.word	0x428c0000

08004bd8 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8004bdc:	481a      	ldr	r0, [pc, #104]	@ (8004c48 <SPIx_Init+0x70>)
 8004bde:	f7ff f9a0 	bl	8003f22 <HAL_SPI_GetState>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d12c      	bne.n	8004c42 <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8004be8:	4b17      	ldr	r3, [pc, #92]	@ (8004c48 <SPIx_Init+0x70>)
 8004bea:	4a18      	ldr	r2, [pc, #96]	@ (8004c4c <SPIx_Init+0x74>)
 8004bec:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004bee:	4b16      	ldr	r3, [pc, #88]	@ (8004c48 <SPIx_Init+0x70>)
 8004bf0:	2218      	movs	r2, #24
 8004bf2:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 8004bf4:	4b14      	ldr	r3, [pc, #80]	@ (8004c48 <SPIx_Init+0x70>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004bfa:	4b13      	ldr	r3, [pc, #76]	@ (8004c48 <SPIx_Init+0x70>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c00:	4b11      	ldr	r3, [pc, #68]	@ (8004c48 <SPIx_Init+0x70>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c06:	4b10      	ldr	r3, [pc, #64]	@ (8004c48 <SPIx_Init+0x70>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8004c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8004c48 <SPIx_Init+0x70>)
 8004c0e:	2207      	movs	r2, #7
 8004c10:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c12:	4b0d      	ldr	r3, [pc, #52]	@ (8004c48 <SPIx_Init+0x70>)
 8004c14:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004c18:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c48 <SPIx_Init+0x70>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8004c20:	4b09      	ldr	r3, [pc, #36]	@ (8004c48 <SPIx_Init+0x70>)
 8004c22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c26:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c28:	4b07      	ldr	r3, [pc, #28]	@ (8004c48 <SPIx_Init+0x70>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8004c2e:	4b06      	ldr	r3, [pc, #24]	@ (8004c48 <SPIx_Init+0x70>)
 8004c30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004c34:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8004c36:	4804      	ldr	r0, [pc, #16]	@ (8004c48 <SPIx_Init+0x70>)
 8004c38:	f000 f836 	bl	8004ca8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8004c3c:	4802      	ldr	r0, [pc, #8]	@ (8004c48 <SPIx_Init+0x70>)
 8004c3e:	f7fe fe7b 	bl	8003938 <HAL_SPI_Init>
  }
}
 8004c42:	bf00      	nop
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	2000084c 	.word	0x2000084c
 8004c4c:	40013000 	.word	0x40013000

08004c50 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	4603      	mov	r3, r0
 8004c58:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c88 <SPIx_WriteRead+0x38>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f107 020f 	add.w	r2, r7, #15
 8004c66:	1df9      	adds	r1, r7, #7
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4807      	ldr	r0, [pc, #28]	@ (8004c8c <SPIx_WriteRead+0x3c>)
 8004c6e:	f7fe ff36 	bl	8003ade <HAL_SPI_TransmitReceive>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8004c78:	f000 f80a 	bl	8004c90 <SPIx_Error>
  }
  
  return receivedbyte;
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	200000f4 	.word	0x200000f4
 8004c8c:	2000084c 	.word	0x2000084c

08004c90 <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8004c94:	4803      	ldr	r0, [pc, #12]	@ (8004ca4 <SPIx_Error+0x14>)
 8004c96:	f7fe fefa 	bl	8003a8e <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8004c9a:	f7ff ff9d 	bl	8004bd8 <SPIx_Init>
}
 8004c9e:	bf00      	nop
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	2000084c 	.word	0x2000084c

08004ca8 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	@ 0x28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8004cb0:	4b16      	ldr	r3, [pc, #88]	@ (8004d0c <SPIx_MspInit+0x64>)
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	4a15      	ldr	r2, [pc, #84]	@ (8004d0c <SPIx_MspInit+0x64>)
 8004cb6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004cba:	6193      	str	r3, [r2, #24]
 8004cbc:	4b13      	ldr	r3, [pc, #76]	@ (8004d0c <SPIx_MspInit+0x64>)
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8004cc8:	4b10      	ldr	r3, [pc, #64]	@ (8004d0c <SPIx_MspInit+0x64>)
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	4a0f      	ldr	r2, [pc, #60]	@ (8004d0c <SPIx_MspInit+0x64>)
 8004cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cd2:	6153      	str	r3, [r2, #20]
 8004cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8004d0c <SPIx_MspInit+0x64>)
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8004ce0:	23e0      	movs	r3, #224	@ 0xe0
 8004ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004cec:	2303      	movs	r3, #3
 8004cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8004cf0:	2305      	movs	r3, #5
 8004cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004cfe:	f7fc fde1 	bl	80018c4 <HAL_GPIO_Init>
}
 8004d02:	bf00      	nop
 8004d04:	3728      	adds	r7, #40	@ 0x28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40021000 	.word	0x40021000

08004d10 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8004d16:	4b1f      	ldr	r3, [pc, #124]	@ (8004d94 <GYRO_IO_Init+0x84>)
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d94 <GYRO_IO_Init+0x84>)
 8004d1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d20:	6153      	str	r3, [r2, #20]
 8004d22:	4b1c      	ldr	r3, [pc, #112]	@ (8004d94 <GYRO_IO_Init+0x84>)
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d2a:	60bb      	str	r3, [r7, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8004d2e:	2308      	movs	r3, #8
 8004d30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004d32:	2301      	movs	r3, #1
 8004d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8004d3e:	f107 030c 	add.w	r3, r7, #12
 8004d42:	4619      	mov	r1, r3
 8004d44:	4814      	ldr	r0, [pc, #80]	@ (8004d98 <GYRO_IO_Init+0x88>)
 8004d46:	f7fc fdbd 	bl	80018c4 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	2108      	movs	r1, #8
 8004d4e:	4812      	ldr	r0, [pc, #72]	@ (8004d98 <GYRO_IO_Init+0x88>)
 8004d50:	f7fd f80e 	bl	8001d70 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8004d54:	4b0f      	ldr	r3, [pc, #60]	@ (8004d94 <GYRO_IO_Init+0x84>)
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	4a0e      	ldr	r2, [pc, #56]	@ (8004d94 <GYRO_IO_Init+0x84>)
 8004d5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d5e:	6153      	str	r3, [r2, #20]
 8004d60:	4b0c      	ldr	r3, [pc, #48]	@ (8004d94 <GYRO_IO_Init+0x84>)
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8004d70:	2300      	movs	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d74:	2303      	movs	r3, #3
 8004d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004d7c:	f107 030c 	add.w	r3, r7, #12
 8004d80:	4619      	mov	r1, r3
 8004d82:	4805      	ldr	r0, [pc, #20]	@ (8004d98 <GYRO_IO_Init+0x88>)
 8004d84:	f7fc fd9e 	bl	80018c4 <HAL_GPIO_Init>
  
  SPIx_Init();
 8004d88:	f7ff ff26 	bl	8004bd8 <SPIx_Init>
}
 8004d8c:	bf00      	nop
 8004d8e:	3720      	adds	r7, #32
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40021000 	.word	0x40021000
 8004d98:	48001000 	.word	0x48001000

08004d9c <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	70fb      	strb	r3, [r7, #3]
 8004da8:	4613      	mov	r3, r2
 8004daa:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8004dac:	883b      	ldrh	r3, [r7, #0]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d903      	bls.n	8004dba <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8004db2:	78fb      	ldrb	r3, [r7, #3]
 8004db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004db8:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2108      	movs	r1, #8
 8004dbe:	480f      	ldr	r0, [pc, #60]	@ (8004dfc <GYRO_IO_Write+0x60>)
 8004dc0:	f7fc ffd6 	bl	8001d70 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff ff42 	bl	8004c50 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8004dcc:	e00a      	b.n	8004de4 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff ff3c 	bl	8004c50 <SPIx_WriteRead>
    NumByteToWrite--;
 8004dd8:	883b      	ldrh	r3, [r7, #0]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3301      	adds	r3, #1
 8004de2:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8004de4:	883b      	ldrh	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f1      	bne.n	8004dce <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004dea:	2201      	movs	r2, #1
 8004dec:	2108      	movs	r1, #8
 8004dee:	4803      	ldr	r0, [pc, #12]	@ (8004dfc <GYRO_IO_Write+0x60>)
 8004df0:	f7fc ffbe 	bl	8001d70 <HAL_GPIO_WritePin>
}
 8004df4:	bf00      	nop
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	48001000 	.word	0x48001000

08004e00 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	70fb      	strb	r3, [r7, #3]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8004e10:	883b      	ldrh	r3, [r7, #0]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d904      	bls.n	8004e20 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8004e1c:	70fb      	strb	r3, [r7, #3]
 8004e1e:	e003      	b.n	8004e28 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e26:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2108      	movs	r1, #8
 8004e2c:	4810      	ldr	r0, [pc, #64]	@ (8004e70 <GYRO_IO_Read+0x70>)
 8004e2e:	f7fc ff9f 	bl	8001d70 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff ff0b 	bl	8004c50 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8004e3a:	e00c      	b.n	8004e56 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	f7ff ff07 	bl	8004c50 <SPIx_WriteRead>
 8004e42:	4603      	mov	r3, r0
 8004e44:	461a      	mov	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8004e4a:	883b      	ldrh	r3, [r7, #0]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3301      	adds	r3, #1
 8004e54:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8004e56:	883b      	ldrh	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1ef      	bne.n	8004e3c <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	2108      	movs	r1, #8
 8004e60:	4803      	ldr	r0, [pc, #12]	@ (8004e70 <GYRO_IO_Read+0x70>)
 8004e62:	f7fc ff85 	bl	8001d70 <HAL_GPIO_WritePin>
}  
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	48001000 	.word	0x48001000

08004e74 <srand>:
 8004e74:	b538      	push	{r3, r4, r5, lr}
 8004e76:	4b10      	ldr	r3, [pc, #64]	@ (8004eb8 <srand+0x44>)
 8004e78:	681d      	ldr	r5, [r3, #0]
 8004e7a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	b9b3      	cbnz	r3, 8004eae <srand+0x3a>
 8004e80:	2018      	movs	r0, #24
 8004e82:	f000 fa83 	bl	800538c <malloc>
 8004e86:	4602      	mov	r2, r0
 8004e88:	6328      	str	r0, [r5, #48]	@ 0x30
 8004e8a:	b920      	cbnz	r0, 8004e96 <srand+0x22>
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ebc <srand+0x48>)
 8004e8e:	480c      	ldr	r0, [pc, #48]	@ (8004ec0 <srand+0x4c>)
 8004e90:	2146      	movs	r1, #70	@ 0x46
 8004e92:	f000 fa13 	bl	80052bc <__assert_func>
 8004e96:	490b      	ldr	r1, [pc, #44]	@ (8004ec4 <srand+0x50>)
 8004e98:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec8 <srand+0x54>)
 8004e9a:	e9c0 1300 	strd	r1, r3, [r0]
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <srand+0x58>)
 8004ea0:	6083      	str	r3, [r0, #8]
 8004ea2:	230b      	movs	r3, #11
 8004ea4:	8183      	strh	r3, [r0, #12]
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004eae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	611c      	str	r4, [r3, #16]
 8004eb4:	615a      	str	r2, [r3, #20]
 8004eb6:	bd38      	pop	{r3, r4, r5, pc}
 8004eb8:	20000104 	.word	0x20000104
 8004ebc:	08006ad8 	.word	0x08006ad8
 8004ec0:	08006aef 	.word	0x08006aef
 8004ec4:	abcd330e 	.word	0xabcd330e
 8004ec8:	e66d1234 	.word	0xe66d1234
 8004ecc:	0005deec 	.word	0x0005deec

08004ed0 <rand>:
 8004ed0:	4b16      	ldr	r3, [pc, #88]	@ (8004f2c <rand+0x5c>)
 8004ed2:	b510      	push	{r4, lr}
 8004ed4:	681c      	ldr	r4, [r3, #0]
 8004ed6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004ed8:	b9b3      	cbnz	r3, 8004f08 <rand+0x38>
 8004eda:	2018      	movs	r0, #24
 8004edc:	f000 fa56 	bl	800538c <malloc>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	6320      	str	r0, [r4, #48]	@ 0x30
 8004ee4:	b920      	cbnz	r0, 8004ef0 <rand+0x20>
 8004ee6:	4b12      	ldr	r3, [pc, #72]	@ (8004f30 <rand+0x60>)
 8004ee8:	4812      	ldr	r0, [pc, #72]	@ (8004f34 <rand+0x64>)
 8004eea:	2152      	movs	r1, #82	@ 0x52
 8004eec:	f000 f9e6 	bl	80052bc <__assert_func>
 8004ef0:	4911      	ldr	r1, [pc, #68]	@ (8004f38 <rand+0x68>)
 8004ef2:	4b12      	ldr	r3, [pc, #72]	@ (8004f3c <rand+0x6c>)
 8004ef4:	e9c0 1300 	strd	r1, r3, [r0]
 8004ef8:	4b11      	ldr	r3, [pc, #68]	@ (8004f40 <rand+0x70>)
 8004efa:	6083      	str	r3, [r0, #8]
 8004efc:	230b      	movs	r3, #11
 8004efe:	8183      	strh	r3, [r0, #12]
 8004f00:	2100      	movs	r1, #0
 8004f02:	2001      	movs	r0, #1
 8004f04:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004f08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004f0a:	480e      	ldr	r0, [pc, #56]	@ (8004f44 <rand+0x74>)
 8004f0c:	690b      	ldr	r3, [r1, #16]
 8004f0e:	694c      	ldr	r4, [r1, #20]
 8004f10:	4a0d      	ldr	r2, [pc, #52]	@ (8004f48 <rand+0x78>)
 8004f12:	4358      	muls	r0, r3
 8004f14:	fb02 0004 	mla	r0, r2, r4, r0
 8004f18:	fba3 3202 	umull	r3, r2, r3, r2
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	eb40 0002 	adc.w	r0, r0, r2
 8004f22:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004f26:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004f2a:	bd10      	pop	{r4, pc}
 8004f2c:	20000104 	.word	0x20000104
 8004f30:	08006ad8 	.word	0x08006ad8
 8004f34:	08006aef 	.word	0x08006aef
 8004f38:	abcd330e 	.word	0xabcd330e
 8004f3c:	e66d1234 	.word	0xe66d1234
 8004f40:	0005deec 	.word	0x0005deec
 8004f44:	5851f42d 	.word	0x5851f42d
 8004f48:	4c957f2d 	.word	0x4c957f2d

08004f4c <std>:
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	b510      	push	{r4, lr}
 8004f50:	4604      	mov	r4, r0
 8004f52:	e9c0 3300 	strd	r3, r3, [r0]
 8004f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f5a:	6083      	str	r3, [r0, #8]
 8004f5c:	8181      	strh	r1, [r0, #12]
 8004f5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f60:	81c2      	strh	r2, [r0, #14]
 8004f62:	6183      	str	r3, [r0, #24]
 8004f64:	4619      	mov	r1, r3
 8004f66:	2208      	movs	r2, #8
 8004f68:	305c      	adds	r0, #92	@ 0x5c
 8004f6a:	f000 f914 	bl	8005196 <memset>
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa4 <std+0x58>)
 8004f70:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f72:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa8 <std+0x5c>)
 8004f74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f76:	4b0d      	ldr	r3, [pc, #52]	@ (8004fac <std+0x60>)
 8004f78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb0 <std+0x64>)
 8004f7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb4 <std+0x68>)
 8004f80:	6224      	str	r4, [r4, #32]
 8004f82:	429c      	cmp	r4, r3
 8004f84:	d006      	beq.n	8004f94 <std+0x48>
 8004f86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f8a:	4294      	cmp	r4, r2
 8004f8c:	d002      	beq.n	8004f94 <std+0x48>
 8004f8e:	33d0      	adds	r3, #208	@ 0xd0
 8004f90:	429c      	cmp	r4, r3
 8004f92:	d105      	bne.n	8004fa0 <std+0x54>
 8004f94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f9c:	f000 b974 	b.w	8005288 <__retarget_lock_init_recursive>
 8004fa0:	bd10      	pop	{r4, pc}
 8004fa2:	bf00      	nop
 8004fa4:	08005111 	.word	0x08005111
 8004fa8:	08005133 	.word	0x08005133
 8004fac:	0800516b 	.word	0x0800516b
 8004fb0:	0800518f 	.word	0x0800518f
 8004fb4:	200008b0 	.word	0x200008b0

08004fb8 <stdio_exit_handler>:
 8004fb8:	4a02      	ldr	r2, [pc, #8]	@ (8004fc4 <stdio_exit_handler+0xc>)
 8004fba:	4903      	ldr	r1, [pc, #12]	@ (8004fc8 <stdio_exit_handler+0x10>)
 8004fbc:	4803      	ldr	r0, [pc, #12]	@ (8004fcc <stdio_exit_handler+0x14>)
 8004fbe:	f000 b869 	b.w	8005094 <_fwalk_sglue>
 8004fc2:	bf00      	nop
 8004fc4:	200000f8 	.word	0x200000f8
 8004fc8:	08005bcd 	.word	0x08005bcd
 8004fcc:	20000108 	.word	0x20000108

08004fd0 <cleanup_stdio>:
 8004fd0:	6841      	ldr	r1, [r0, #4]
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005004 <cleanup_stdio+0x34>)
 8004fd4:	4299      	cmp	r1, r3
 8004fd6:	b510      	push	{r4, lr}
 8004fd8:	4604      	mov	r4, r0
 8004fda:	d001      	beq.n	8004fe0 <cleanup_stdio+0x10>
 8004fdc:	f000 fdf6 	bl	8005bcc <_fflush_r>
 8004fe0:	68a1      	ldr	r1, [r4, #8]
 8004fe2:	4b09      	ldr	r3, [pc, #36]	@ (8005008 <cleanup_stdio+0x38>)
 8004fe4:	4299      	cmp	r1, r3
 8004fe6:	d002      	beq.n	8004fee <cleanup_stdio+0x1e>
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f000 fdef 	bl	8005bcc <_fflush_r>
 8004fee:	68e1      	ldr	r1, [r4, #12]
 8004ff0:	4b06      	ldr	r3, [pc, #24]	@ (800500c <cleanup_stdio+0x3c>)
 8004ff2:	4299      	cmp	r1, r3
 8004ff4:	d004      	beq.n	8005000 <cleanup_stdio+0x30>
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ffc:	f000 bde6 	b.w	8005bcc <_fflush_r>
 8005000:	bd10      	pop	{r4, pc}
 8005002:	bf00      	nop
 8005004:	200008b0 	.word	0x200008b0
 8005008:	20000918 	.word	0x20000918
 800500c:	20000980 	.word	0x20000980

08005010 <global_stdio_init.part.0>:
 8005010:	b510      	push	{r4, lr}
 8005012:	4b0b      	ldr	r3, [pc, #44]	@ (8005040 <global_stdio_init.part.0+0x30>)
 8005014:	4c0b      	ldr	r4, [pc, #44]	@ (8005044 <global_stdio_init.part.0+0x34>)
 8005016:	4a0c      	ldr	r2, [pc, #48]	@ (8005048 <global_stdio_init.part.0+0x38>)
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	4620      	mov	r0, r4
 800501c:	2200      	movs	r2, #0
 800501e:	2104      	movs	r1, #4
 8005020:	f7ff ff94 	bl	8004f4c <std>
 8005024:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005028:	2201      	movs	r2, #1
 800502a:	2109      	movs	r1, #9
 800502c:	f7ff ff8e 	bl	8004f4c <std>
 8005030:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005034:	2202      	movs	r2, #2
 8005036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800503a:	2112      	movs	r1, #18
 800503c:	f7ff bf86 	b.w	8004f4c <std>
 8005040:	200009e8 	.word	0x200009e8
 8005044:	200008b0 	.word	0x200008b0
 8005048:	08004fb9 	.word	0x08004fb9

0800504c <__sfp_lock_acquire>:
 800504c:	4801      	ldr	r0, [pc, #4]	@ (8005054 <__sfp_lock_acquire+0x8>)
 800504e:	f000 b91c 	b.w	800528a <__retarget_lock_acquire_recursive>
 8005052:	bf00      	nop
 8005054:	200009f1 	.word	0x200009f1

08005058 <__sfp_lock_release>:
 8005058:	4801      	ldr	r0, [pc, #4]	@ (8005060 <__sfp_lock_release+0x8>)
 800505a:	f000 b917 	b.w	800528c <__retarget_lock_release_recursive>
 800505e:	bf00      	nop
 8005060:	200009f1 	.word	0x200009f1

08005064 <__sinit>:
 8005064:	b510      	push	{r4, lr}
 8005066:	4604      	mov	r4, r0
 8005068:	f7ff fff0 	bl	800504c <__sfp_lock_acquire>
 800506c:	6a23      	ldr	r3, [r4, #32]
 800506e:	b11b      	cbz	r3, 8005078 <__sinit+0x14>
 8005070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005074:	f7ff bff0 	b.w	8005058 <__sfp_lock_release>
 8005078:	4b04      	ldr	r3, [pc, #16]	@ (800508c <__sinit+0x28>)
 800507a:	6223      	str	r3, [r4, #32]
 800507c:	4b04      	ldr	r3, [pc, #16]	@ (8005090 <__sinit+0x2c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1f5      	bne.n	8005070 <__sinit+0xc>
 8005084:	f7ff ffc4 	bl	8005010 <global_stdio_init.part.0>
 8005088:	e7f2      	b.n	8005070 <__sinit+0xc>
 800508a:	bf00      	nop
 800508c:	08004fd1 	.word	0x08004fd1
 8005090:	200009e8 	.word	0x200009e8

08005094 <_fwalk_sglue>:
 8005094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005098:	4607      	mov	r7, r0
 800509a:	4688      	mov	r8, r1
 800509c:	4614      	mov	r4, r2
 800509e:	2600      	movs	r6, #0
 80050a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050a4:	f1b9 0901 	subs.w	r9, r9, #1
 80050a8:	d505      	bpl.n	80050b6 <_fwalk_sglue+0x22>
 80050aa:	6824      	ldr	r4, [r4, #0]
 80050ac:	2c00      	cmp	r4, #0
 80050ae:	d1f7      	bne.n	80050a0 <_fwalk_sglue+0xc>
 80050b0:	4630      	mov	r0, r6
 80050b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050b6:	89ab      	ldrh	r3, [r5, #12]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d907      	bls.n	80050cc <_fwalk_sglue+0x38>
 80050bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050c0:	3301      	adds	r3, #1
 80050c2:	d003      	beq.n	80050cc <_fwalk_sglue+0x38>
 80050c4:	4629      	mov	r1, r5
 80050c6:	4638      	mov	r0, r7
 80050c8:	47c0      	blx	r8
 80050ca:	4306      	orrs	r6, r0
 80050cc:	3568      	adds	r5, #104	@ 0x68
 80050ce:	e7e9      	b.n	80050a4 <_fwalk_sglue+0x10>

080050d0 <siprintf>:
 80050d0:	b40e      	push	{r1, r2, r3}
 80050d2:	b500      	push	{lr}
 80050d4:	b09c      	sub	sp, #112	@ 0x70
 80050d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80050d8:	9002      	str	r0, [sp, #8]
 80050da:	9006      	str	r0, [sp, #24]
 80050dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050e0:	4809      	ldr	r0, [pc, #36]	@ (8005108 <siprintf+0x38>)
 80050e2:	9107      	str	r1, [sp, #28]
 80050e4:	9104      	str	r1, [sp, #16]
 80050e6:	4909      	ldr	r1, [pc, #36]	@ (800510c <siprintf+0x3c>)
 80050e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80050ec:	9105      	str	r1, [sp, #20]
 80050ee:	6800      	ldr	r0, [r0, #0]
 80050f0:	9301      	str	r3, [sp, #4]
 80050f2:	a902      	add	r1, sp, #8
 80050f4:	f000 fa5c 	bl	80055b0 <_svfiprintf_r>
 80050f8:	9b02      	ldr	r3, [sp, #8]
 80050fa:	2200      	movs	r2, #0
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	b01c      	add	sp, #112	@ 0x70
 8005100:	f85d eb04 	ldr.w	lr, [sp], #4
 8005104:	b003      	add	sp, #12
 8005106:	4770      	bx	lr
 8005108:	20000104 	.word	0x20000104
 800510c:	ffff0208 	.word	0xffff0208

08005110 <__sread>:
 8005110:	b510      	push	{r4, lr}
 8005112:	460c      	mov	r4, r1
 8005114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005118:	f000 f868 	bl	80051ec <_read_r>
 800511c:	2800      	cmp	r0, #0
 800511e:	bfab      	itete	ge
 8005120:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005122:	89a3      	ldrhlt	r3, [r4, #12]
 8005124:	181b      	addge	r3, r3, r0
 8005126:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800512a:	bfac      	ite	ge
 800512c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800512e:	81a3      	strhlt	r3, [r4, #12]
 8005130:	bd10      	pop	{r4, pc}

08005132 <__swrite>:
 8005132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005136:	461f      	mov	r7, r3
 8005138:	898b      	ldrh	r3, [r1, #12]
 800513a:	05db      	lsls	r3, r3, #23
 800513c:	4605      	mov	r5, r0
 800513e:	460c      	mov	r4, r1
 8005140:	4616      	mov	r6, r2
 8005142:	d505      	bpl.n	8005150 <__swrite+0x1e>
 8005144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005148:	2302      	movs	r3, #2
 800514a:	2200      	movs	r2, #0
 800514c:	f000 f83c 	bl	80051c8 <_lseek_r>
 8005150:	89a3      	ldrh	r3, [r4, #12]
 8005152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005156:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800515a:	81a3      	strh	r3, [r4, #12]
 800515c:	4632      	mov	r2, r6
 800515e:	463b      	mov	r3, r7
 8005160:	4628      	mov	r0, r5
 8005162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005166:	f000 b853 	b.w	8005210 <_write_r>

0800516a <__sseek>:
 800516a:	b510      	push	{r4, lr}
 800516c:	460c      	mov	r4, r1
 800516e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005172:	f000 f829 	bl	80051c8 <_lseek_r>
 8005176:	1c43      	adds	r3, r0, #1
 8005178:	89a3      	ldrh	r3, [r4, #12]
 800517a:	bf15      	itete	ne
 800517c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800517e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005182:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005186:	81a3      	strheq	r3, [r4, #12]
 8005188:	bf18      	it	ne
 800518a:	81a3      	strhne	r3, [r4, #12]
 800518c:	bd10      	pop	{r4, pc}

0800518e <__sclose>:
 800518e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005192:	f000 b809 	b.w	80051a8 <_close_r>

08005196 <memset>:
 8005196:	4402      	add	r2, r0
 8005198:	4603      	mov	r3, r0
 800519a:	4293      	cmp	r3, r2
 800519c:	d100      	bne.n	80051a0 <memset+0xa>
 800519e:	4770      	bx	lr
 80051a0:	f803 1b01 	strb.w	r1, [r3], #1
 80051a4:	e7f9      	b.n	800519a <memset+0x4>
	...

080051a8 <_close_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4d06      	ldr	r5, [pc, #24]	@ (80051c4 <_close_r+0x1c>)
 80051ac:	2300      	movs	r3, #0
 80051ae:	4604      	mov	r4, r0
 80051b0:	4608      	mov	r0, r1
 80051b2:	602b      	str	r3, [r5, #0]
 80051b4:	f7fc f881 	bl	80012ba <_close>
 80051b8:	1c43      	adds	r3, r0, #1
 80051ba:	d102      	bne.n	80051c2 <_close_r+0x1a>
 80051bc:	682b      	ldr	r3, [r5, #0]
 80051be:	b103      	cbz	r3, 80051c2 <_close_r+0x1a>
 80051c0:	6023      	str	r3, [r4, #0]
 80051c2:	bd38      	pop	{r3, r4, r5, pc}
 80051c4:	200009ec 	.word	0x200009ec

080051c8 <_lseek_r>:
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	4d07      	ldr	r5, [pc, #28]	@ (80051e8 <_lseek_r+0x20>)
 80051cc:	4604      	mov	r4, r0
 80051ce:	4608      	mov	r0, r1
 80051d0:	4611      	mov	r1, r2
 80051d2:	2200      	movs	r2, #0
 80051d4:	602a      	str	r2, [r5, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	f7fc f896 	bl	8001308 <_lseek>
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	d102      	bne.n	80051e6 <_lseek_r+0x1e>
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	b103      	cbz	r3, 80051e6 <_lseek_r+0x1e>
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	bd38      	pop	{r3, r4, r5, pc}
 80051e8:	200009ec 	.word	0x200009ec

080051ec <_read_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4d07      	ldr	r5, [pc, #28]	@ (800520c <_read_r+0x20>)
 80051f0:	4604      	mov	r4, r0
 80051f2:	4608      	mov	r0, r1
 80051f4:	4611      	mov	r1, r2
 80051f6:	2200      	movs	r2, #0
 80051f8:	602a      	str	r2, [r5, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	f7fc f824 	bl	8001248 <_read>
 8005200:	1c43      	adds	r3, r0, #1
 8005202:	d102      	bne.n	800520a <_read_r+0x1e>
 8005204:	682b      	ldr	r3, [r5, #0]
 8005206:	b103      	cbz	r3, 800520a <_read_r+0x1e>
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	bd38      	pop	{r3, r4, r5, pc}
 800520c:	200009ec 	.word	0x200009ec

08005210 <_write_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	4d07      	ldr	r5, [pc, #28]	@ (8005230 <_write_r+0x20>)
 8005214:	4604      	mov	r4, r0
 8005216:	4608      	mov	r0, r1
 8005218:	4611      	mov	r1, r2
 800521a:	2200      	movs	r2, #0
 800521c:	602a      	str	r2, [r5, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	f7fc f82f 	bl	8001282 <_write>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d102      	bne.n	800522e <_write_r+0x1e>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	b103      	cbz	r3, 800522e <_write_r+0x1e>
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	bd38      	pop	{r3, r4, r5, pc}
 8005230:	200009ec 	.word	0x200009ec

08005234 <__errno>:
 8005234:	4b01      	ldr	r3, [pc, #4]	@ (800523c <__errno+0x8>)
 8005236:	6818      	ldr	r0, [r3, #0]
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20000104 	.word	0x20000104

08005240 <__libc_init_array>:
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	4d0d      	ldr	r5, [pc, #52]	@ (8005278 <__libc_init_array+0x38>)
 8005244:	4c0d      	ldr	r4, [pc, #52]	@ (800527c <__libc_init_array+0x3c>)
 8005246:	1b64      	subs	r4, r4, r5
 8005248:	10a4      	asrs	r4, r4, #2
 800524a:	2600      	movs	r6, #0
 800524c:	42a6      	cmp	r6, r4
 800524e:	d109      	bne.n	8005264 <__libc_init_array+0x24>
 8005250:	4d0b      	ldr	r5, [pc, #44]	@ (8005280 <__libc_init_array+0x40>)
 8005252:	4c0c      	ldr	r4, [pc, #48]	@ (8005284 <__libc_init_array+0x44>)
 8005254:	f000 fff8 	bl	8006248 <_init>
 8005258:	1b64      	subs	r4, r4, r5
 800525a:	10a4      	asrs	r4, r4, #2
 800525c:	2600      	movs	r6, #0
 800525e:	42a6      	cmp	r6, r4
 8005260:	d105      	bne.n	800526e <__libc_init_array+0x2e>
 8005262:	bd70      	pop	{r4, r5, r6, pc}
 8005264:	f855 3b04 	ldr.w	r3, [r5], #4
 8005268:	4798      	blx	r3
 800526a:	3601      	adds	r6, #1
 800526c:	e7ee      	b.n	800524c <__libc_init_array+0xc>
 800526e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005272:	4798      	blx	r3
 8005274:	3601      	adds	r6, #1
 8005276:	e7f2      	b.n	800525e <__libc_init_array+0x1e>
 8005278:	08006bc0 	.word	0x08006bc0
 800527c:	08006bc0 	.word	0x08006bc0
 8005280:	08006bc0 	.word	0x08006bc0
 8005284:	08006bc4 	.word	0x08006bc4

08005288 <__retarget_lock_init_recursive>:
 8005288:	4770      	bx	lr

0800528a <__retarget_lock_acquire_recursive>:
 800528a:	4770      	bx	lr

0800528c <__retarget_lock_release_recursive>:
 800528c:	4770      	bx	lr

0800528e <strcpy>:
 800528e:	4603      	mov	r3, r0
 8005290:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005294:	f803 2b01 	strb.w	r2, [r3], #1
 8005298:	2a00      	cmp	r2, #0
 800529a:	d1f9      	bne.n	8005290 <strcpy+0x2>
 800529c:	4770      	bx	lr

0800529e <memcpy>:
 800529e:	440a      	add	r2, r1
 80052a0:	4291      	cmp	r1, r2
 80052a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80052a6:	d100      	bne.n	80052aa <memcpy+0xc>
 80052a8:	4770      	bx	lr
 80052aa:	b510      	push	{r4, lr}
 80052ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052b4:	4291      	cmp	r1, r2
 80052b6:	d1f9      	bne.n	80052ac <memcpy+0xe>
 80052b8:	bd10      	pop	{r4, pc}
	...

080052bc <__assert_func>:
 80052bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052be:	4614      	mov	r4, r2
 80052c0:	461a      	mov	r2, r3
 80052c2:	4b09      	ldr	r3, [pc, #36]	@ (80052e8 <__assert_func+0x2c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4605      	mov	r5, r0
 80052c8:	68d8      	ldr	r0, [r3, #12]
 80052ca:	b954      	cbnz	r4, 80052e2 <__assert_func+0x26>
 80052cc:	4b07      	ldr	r3, [pc, #28]	@ (80052ec <__assert_func+0x30>)
 80052ce:	461c      	mov	r4, r3
 80052d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80052d4:	9100      	str	r1, [sp, #0]
 80052d6:	462b      	mov	r3, r5
 80052d8:	4905      	ldr	r1, [pc, #20]	@ (80052f0 <__assert_func+0x34>)
 80052da:	f000 fc9f 	bl	8005c1c <fiprintf>
 80052de:	f000 fcd9 	bl	8005c94 <abort>
 80052e2:	4b04      	ldr	r3, [pc, #16]	@ (80052f4 <__assert_func+0x38>)
 80052e4:	e7f4      	b.n	80052d0 <__assert_func+0x14>
 80052e6:	bf00      	nop
 80052e8:	20000104 	.word	0x20000104
 80052ec:	08006b82 	.word	0x08006b82
 80052f0:	08006b54 	.word	0x08006b54
 80052f4:	08006b47 	.word	0x08006b47

080052f8 <_free_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4605      	mov	r5, r0
 80052fc:	2900      	cmp	r1, #0
 80052fe:	d041      	beq.n	8005384 <_free_r+0x8c>
 8005300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005304:	1f0c      	subs	r4, r1, #4
 8005306:	2b00      	cmp	r3, #0
 8005308:	bfb8      	it	lt
 800530a:	18e4      	addlt	r4, r4, r3
 800530c:	f000 f8e8 	bl	80054e0 <__malloc_lock>
 8005310:	4a1d      	ldr	r2, [pc, #116]	@ (8005388 <_free_r+0x90>)
 8005312:	6813      	ldr	r3, [r2, #0]
 8005314:	b933      	cbnz	r3, 8005324 <_free_r+0x2c>
 8005316:	6063      	str	r3, [r4, #4]
 8005318:	6014      	str	r4, [r2, #0]
 800531a:	4628      	mov	r0, r5
 800531c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005320:	f000 b8e4 	b.w	80054ec <__malloc_unlock>
 8005324:	42a3      	cmp	r3, r4
 8005326:	d908      	bls.n	800533a <_free_r+0x42>
 8005328:	6820      	ldr	r0, [r4, #0]
 800532a:	1821      	adds	r1, r4, r0
 800532c:	428b      	cmp	r3, r1
 800532e:	bf01      	itttt	eq
 8005330:	6819      	ldreq	r1, [r3, #0]
 8005332:	685b      	ldreq	r3, [r3, #4]
 8005334:	1809      	addeq	r1, r1, r0
 8005336:	6021      	streq	r1, [r4, #0]
 8005338:	e7ed      	b.n	8005316 <_free_r+0x1e>
 800533a:	461a      	mov	r2, r3
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	b10b      	cbz	r3, 8005344 <_free_r+0x4c>
 8005340:	42a3      	cmp	r3, r4
 8005342:	d9fa      	bls.n	800533a <_free_r+0x42>
 8005344:	6811      	ldr	r1, [r2, #0]
 8005346:	1850      	adds	r0, r2, r1
 8005348:	42a0      	cmp	r0, r4
 800534a:	d10b      	bne.n	8005364 <_free_r+0x6c>
 800534c:	6820      	ldr	r0, [r4, #0]
 800534e:	4401      	add	r1, r0
 8005350:	1850      	adds	r0, r2, r1
 8005352:	4283      	cmp	r3, r0
 8005354:	6011      	str	r1, [r2, #0]
 8005356:	d1e0      	bne.n	800531a <_free_r+0x22>
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	6053      	str	r3, [r2, #4]
 800535e:	4408      	add	r0, r1
 8005360:	6010      	str	r0, [r2, #0]
 8005362:	e7da      	b.n	800531a <_free_r+0x22>
 8005364:	d902      	bls.n	800536c <_free_r+0x74>
 8005366:	230c      	movs	r3, #12
 8005368:	602b      	str	r3, [r5, #0]
 800536a:	e7d6      	b.n	800531a <_free_r+0x22>
 800536c:	6820      	ldr	r0, [r4, #0]
 800536e:	1821      	adds	r1, r4, r0
 8005370:	428b      	cmp	r3, r1
 8005372:	bf04      	itt	eq
 8005374:	6819      	ldreq	r1, [r3, #0]
 8005376:	685b      	ldreq	r3, [r3, #4]
 8005378:	6063      	str	r3, [r4, #4]
 800537a:	bf04      	itt	eq
 800537c:	1809      	addeq	r1, r1, r0
 800537e:	6021      	streq	r1, [r4, #0]
 8005380:	6054      	str	r4, [r2, #4]
 8005382:	e7ca      	b.n	800531a <_free_r+0x22>
 8005384:	bd38      	pop	{r3, r4, r5, pc}
 8005386:	bf00      	nop
 8005388:	200009f8 	.word	0x200009f8

0800538c <malloc>:
 800538c:	4b02      	ldr	r3, [pc, #8]	@ (8005398 <malloc+0xc>)
 800538e:	4601      	mov	r1, r0
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	f000 b825 	b.w	80053e0 <_malloc_r>
 8005396:	bf00      	nop
 8005398:	20000104 	.word	0x20000104

0800539c <sbrk_aligned>:
 800539c:	b570      	push	{r4, r5, r6, lr}
 800539e:	4e0f      	ldr	r6, [pc, #60]	@ (80053dc <sbrk_aligned+0x40>)
 80053a0:	460c      	mov	r4, r1
 80053a2:	6831      	ldr	r1, [r6, #0]
 80053a4:	4605      	mov	r5, r0
 80053a6:	b911      	cbnz	r1, 80053ae <sbrk_aligned+0x12>
 80053a8:	f000 fc64 	bl	8005c74 <_sbrk_r>
 80053ac:	6030      	str	r0, [r6, #0]
 80053ae:	4621      	mov	r1, r4
 80053b0:	4628      	mov	r0, r5
 80053b2:	f000 fc5f 	bl	8005c74 <_sbrk_r>
 80053b6:	1c43      	adds	r3, r0, #1
 80053b8:	d103      	bne.n	80053c2 <sbrk_aligned+0x26>
 80053ba:	f04f 34ff 	mov.w	r4, #4294967295
 80053be:	4620      	mov	r0, r4
 80053c0:	bd70      	pop	{r4, r5, r6, pc}
 80053c2:	1cc4      	adds	r4, r0, #3
 80053c4:	f024 0403 	bic.w	r4, r4, #3
 80053c8:	42a0      	cmp	r0, r4
 80053ca:	d0f8      	beq.n	80053be <sbrk_aligned+0x22>
 80053cc:	1a21      	subs	r1, r4, r0
 80053ce:	4628      	mov	r0, r5
 80053d0:	f000 fc50 	bl	8005c74 <_sbrk_r>
 80053d4:	3001      	adds	r0, #1
 80053d6:	d1f2      	bne.n	80053be <sbrk_aligned+0x22>
 80053d8:	e7ef      	b.n	80053ba <sbrk_aligned+0x1e>
 80053da:	bf00      	nop
 80053dc:	200009f4 	.word	0x200009f4

080053e0 <_malloc_r>:
 80053e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053e4:	1ccd      	adds	r5, r1, #3
 80053e6:	f025 0503 	bic.w	r5, r5, #3
 80053ea:	3508      	adds	r5, #8
 80053ec:	2d0c      	cmp	r5, #12
 80053ee:	bf38      	it	cc
 80053f0:	250c      	movcc	r5, #12
 80053f2:	2d00      	cmp	r5, #0
 80053f4:	4606      	mov	r6, r0
 80053f6:	db01      	blt.n	80053fc <_malloc_r+0x1c>
 80053f8:	42a9      	cmp	r1, r5
 80053fa:	d904      	bls.n	8005406 <_malloc_r+0x26>
 80053fc:	230c      	movs	r3, #12
 80053fe:	6033      	str	r3, [r6, #0]
 8005400:	2000      	movs	r0, #0
 8005402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005406:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054dc <_malloc_r+0xfc>
 800540a:	f000 f869 	bl	80054e0 <__malloc_lock>
 800540e:	f8d8 3000 	ldr.w	r3, [r8]
 8005412:	461c      	mov	r4, r3
 8005414:	bb44      	cbnz	r4, 8005468 <_malloc_r+0x88>
 8005416:	4629      	mov	r1, r5
 8005418:	4630      	mov	r0, r6
 800541a:	f7ff ffbf 	bl	800539c <sbrk_aligned>
 800541e:	1c43      	adds	r3, r0, #1
 8005420:	4604      	mov	r4, r0
 8005422:	d158      	bne.n	80054d6 <_malloc_r+0xf6>
 8005424:	f8d8 4000 	ldr.w	r4, [r8]
 8005428:	4627      	mov	r7, r4
 800542a:	2f00      	cmp	r7, #0
 800542c:	d143      	bne.n	80054b6 <_malloc_r+0xd6>
 800542e:	2c00      	cmp	r4, #0
 8005430:	d04b      	beq.n	80054ca <_malloc_r+0xea>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	4639      	mov	r1, r7
 8005436:	4630      	mov	r0, r6
 8005438:	eb04 0903 	add.w	r9, r4, r3
 800543c:	f000 fc1a 	bl	8005c74 <_sbrk_r>
 8005440:	4581      	cmp	r9, r0
 8005442:	d142      	bne.n	80054ca <_malloc_r+0xea>
 8005444:	6821      	ldr	r1, [r4, #0]
 8005446:	1a6d      	subs	r5, r5, r1
 8005448:	4629      	mov	r1, r5
 800544a:	4630      	mov	r0, r6
 800544c:	f7ff ffa6 	bl	800539c <sbrk_aligned>
 8005450:	3001      	adds	r0, #1
 8005452:	d03a      	beq.n	80054ca <_malloc_r+0xea>
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	442b      	add	r3, r5
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	f8d8 3000 	ldr.w	r3, [r8]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	bb62      	cbnz	r2, 80054bc <_malloc_r+0xdc>
 8005462:	f8c8 7000 	str.w	r7, [r8]
 8005466:	e00f      	b.n	8005488 <_malloc_r+0xa8>
 8005468:	6822      	ldr	r2, [r4, #0]
 800546a:	1b52      	subs	r2, r2, r5
 800546c:	d420      	bmi.n	80054b0 <_malloc_r+0xd0>
 800546e:	2a0b      	cmp	r2, #11
 8005470:	d917      	bls.n	80054a2 <_malloc_r+0xc2>
 8005472:	1961      	adds	r1, r4, r5
 8005474:	42a3      	cmp	r3, r4
 8005476:	6025      	str	r5, [r4, #0]
 8005478:	bf18      	it	ne
 800547a:	6059      	strne	r1, [r3, #4]
 800547c:	6863      	ldr	r3, [r4, #4]
 800547e:	bf08      	it	eq
 8005480:	f8c8 1000 	streq.w	r1, [r8]
 8005484:	5162      	str	r2, [r4, r5]
 8005486:	604b      	str	r3, [r1, #4]
 8005488:	4630      	mov	r0, r6
 800548a:	f000 f82f 	bl	80054ec <__malloc_unlock>
 800548e:	f104 000b 	add.w	r0, r4, #11
 8005492:	1d23      	adds	r3, r4, #4
 8005494:	f020 0007 	bic.w	r0, r0, #7
 8005498:	1ac2      	subs	r2, r0, r3
 800549a:	bf1c      	itt	ne
 800549c:	1a1b      	subne	r3, r3, r0
 800549e:	50a3      	strne	r3, [r4, r2]
 80054a0:	e7af      	b.n	8005402 <_malloc_r+0x22>
 80054a2:	6862      	ldr	r2, [r4, #4]
 80054a4:	42a3      	cmp	r3, r4
 80054a6:	bf0c      	ite	eq
 80054a8:	f8c8 2000 	streq.w	r2, [r8]
 80054ac:	605a      	strne	r2, [r3, #4]
 80054ae:	e7eb      	b.n	8005488 <_malloc_r+0xa8>
 80054b0:	4623      	mov	r3, r4
 80054b2:	6864      	ldr	r4, [r4, #4]
 80054b4:	e7ae      	b.n	8005414 <_malloc_r+0x34>
 80054b6:	463c      	mov	r4, r7
 80054b8:	687f      	ldr	r7, [r7, #4]
 80054ba:	e7b6      	b.n	800542a <_malloc_r+0x4a>
 80054bc:	461a      	mov	r2, r3
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	42a3      	cmp	r3, r4
 80054c2:	d1fb      	bne.n	80054bc <_malloc_r+0xdc>
 80054c4:	2300      	movs	r3, #0
 80054c6:	6053      	str	r3, [r2, #4]
 80054c8:	e7de      	b.n	8005488 <_malloc_r+0xa8>
 80054ca:	230c      	movs	r3, #12
 80054cc:	6033      	str	r3, [r6, #0]
 80054ce:	4630      	mov	r0, r6
 80054d0:	f000 f80c 	bl	80054ec <__malloc_unlock>
 80054d4:	e794      	b.n	8005400 <_malloc_r+0x20>
 80054d6:	6005      	str	r5, [r0, #0]
 80054d8:	e7d6      	b.n	8005488 <_malloc_r+0xa8>
 80054da:	bf00      	nop
 80054dc:	200009f8 	.word	0x200009f8

080054e0 <__malloc_lock>:
 80054e0:	4801      	ldr	r0, [pc, #4]	@ (80054e8 <__malloc_lock+0x8>)
 80054e2:	f7ff bed2 	b.w	800528a <__retarget_lock_acquire_recursive>
 80054e6:	bf00      	nop
 80054e8:	200009f0 	.word	0x200009f0

080054ec <__malloc_unlock>:
 80054ec:	4801      	ldr	r0, [pc, #4]	@ (80054f4 <__malloc_unlock+0x8>)
 80054ee:	f7ff becd 	b.w	800528c <__retarget_lock_release_recursive>
 80054f2:	bf00      	nop
 80054f4:	200009f0 	.word	0x200009f0

080054f8 <__ssputs_r>:
 80054f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054fc:	688e      	ldr	r6, [r1, #8]
 80054fe:	461f      	mov	r7, r3
 8005500:	42be      	cmp	r6, r7
 8005502:	680b      	ldr	r3, [r1, #0]
 8005504:	4682      	mov	sl, r0
 8005506:	460c      	mov	r4, r1
 8005508:	4690      	mov	r8, r2
 800550a:	d82d      	bhi.n	8005568 <__ssputs_r+0x70>
 800550c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005510:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005514:	d026      	beq.n	8005564 <__ssputs_r+0x6c>
 8005516:	6965      	ldr	r5, [r4, #20]
 8005518:	6909      	ldr	r1, [r1, #16]
 800551a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800551e:	eba3 0901 	sub.w	r9, r3, r1
 8005522:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005526:	1c7b      	adds	r3, r7, #1
 8005528:	444b      	add	r3, r9
 800552a:	106d      	asrs	r5, r5, #1
 800552c:	429d      	cmp	r5, r3
 800552e:	bf38      	it	cc
 8005530:	461d      	movcc	r5, r3
 8005532:	0553      	lsls	r3, r2, #21
 8005534:	d527      	bpl.n	8005586 <__ssputs_r+0x8e>
 8005536:	4629      	mov	r1, r5
 8005538:	f7ff ff52 	bl	80053e0 <_malloc_r>
 800553c:	4606      	mov	r6, r0
 800553e:	b360      	cbz	r0, 800559a <__ssputs_r+0xa2>
 8005540:	6921      	ldr	r1, [r4, #16]
 8005542:	464a      	mov	r2, r9
 8005544:	f7ff feab 	bl	800529e <memcpy>
 8005548:	89a3      	ldrh	r3, [r4, #12]
 800554a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800554e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005552:	81a3      	strh	r3, [r4, #12]
 8005554:	6126      	str	r6, [r4, #16]
 8005556:	6165      	str	r5, [r4, #20]
 8005558:	444e      	add	r6, r9
 800555a:	eba5 0509 	sub.w	r5, r5, r9
 800555e:	6026      	str	r6, [r4, #0]
 8005560:	60a5      	str	r5, [r4, #8]
 8005562:	463e      	mov	r6, r7
 8005564:	42be      	cmp	r6, r7
 8005566:	d900      	bls.n	800556a <__ssputs_r+0x72>
 8005568:	463e      	mov	r6, r7
 800556a:	6820      	ldr	r0, [r4, #0]
 800556c:	4632      	mov	r2, r6
 800556e:	4641      	mov	r1, r8
 8005570:	f000 fb66 	bl	8005c40 <memmove>
 8005574:	68a3      	ldr	r3, [r4, #8]
 8005576:	1b9b      	subs	r3, r3, r6
 8005578:	60a3      	str	r3, [r4, #8]
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	4433      	add	r3, r6
 800557e:	6023      	str	r3, [r4, #0]
 8005580:	2000      	movs	r0, #0
 8005582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005586:	462a      	mov	r2, r5
 8005588:	f000 fb8b 	bl	8005ca2 <_realloc_r>
 800558c:	4606      	mov	r6, r0
 800558e:	2800      	cmp	r0, #0
 8005590:	d1e0      	bne.n	8005554 <__ssputs_r+0x5c>
 8005592:	6921      	ldr	r1, [r4, #16]
 8005594:	4650      	mov	r0, sl
 8005596:	f7ff feaf 	bl	80052f8 <_free_r>
 800559a:	230c      	movs	r3, #12
 800559c:	f8ca 3000 	str.w	r3, [sl]
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055a6:	81a3      	strh	r3, [r4, #12]
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ac:	e7e9      	b.n	8005582 <__ssputs_r+0x8a>
	...

080055b0 <_svfiprintf_r>:
 80055b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b4:	4698      	mov	r8, r3
 80055b6:	898b      	ldrh	r3, [r1, #12]
 80055b8:	061b      	lsls	r3, r3, #24
 80055ba:	b09d      	sub	sp, #116	@ 0x74
 80055bc:	4607      	mov	r7, r0
 80055be:	460d      	mov	r5, r1
 80055c0:	4614      	mov	r4, r2
 80055c2:	d510      	bpl.n	80055e6 <_svfiprintf_r+0x36>
 80055c4:	690b      	ldr	r3, [r1, #16]
 80055c6:	b973      	cbnz	r3, 80055e6 <_svfiprintf_r+0x36>
 80055c8:	2140      	movs	r1, #64	@ 0x40
 80055ca:	f7ff ff09 	bl	80053e0 <_malloc_r>
 80055ce:	6028      	str	r0, [r5, #0]
 80055d0:	6128      	str	r0, [r5, #16]
 80055d2:	b930      	cbnz	r0, 80055e2 <_svfiprintf_r+0x32>
 80055d4:	230c      	movs	r3, #12
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295
 80055dc:	b01d      	add	sp, #116	@ 0x74
 80055de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e2:	2340      	movs	r3, #64	@ 0x40
 80055e4:	616b      	str	r3, [r5, #20]
 80055e6:	2300      	movs	r3, #0
 80055e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80055ea:	2320      	movs	r3, #32
 80055ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80055f4:	2330      	movs	r3, #48	@ 0x30
 80055f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005794 <_svfiprintf_r+0x1e4>
 80055fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055fe:	f04f 0901 	mov.w	r9, #1
 8005602:	4623      	mov	r3, r4
 8005604:	469a      	mov	sl, r3
 8005606:	f813 2b01 	ldrb.w	r2, [r3], #1
 800560a:	b10a      	cbz	r2, 8005610 <_svfiprintf_r+0x60>
 800560c:	2a25      	cmp	r2, #37	@ 0x25
 800560e:	d1f9      	bne.n	8005604 <_svfiprintf_r+0x54>
 8005610:	ebba 0b04 	subs.w	fp, sl, r4
 8005614:	d00b      	beq.n	800562e <_svfiprintf_r+0x7e>
 8005616:	465b      	mov	r3, fp
 8005618:	4622      	mov	r2, r4
 800561a:	4629      	mov	r1, r5
 800561c:	4638      	mov	r0, r7
 800561e:	f7ff ff6b 	bl	80054f8 <__ssputs_r>
 8005622:	3001      	adds	r0, #1
 8005624:	f000 80a7 	beq.w	8005776 <_svfiprintf_r+0x1c6>
 8005628:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800562a:	445a      	add	r2, fp
 800562c:	9209      	str	r2, [sp, #36]	@ 0x24
 800562e:	f89a 3000 	ldrb.w	r3, [sl]
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 809f 	beq.w	8005776 <_svfiprintf_r+0x1c6>
 8005638:	2300      	movs	r3, #0
 800563a:	f04f 32ff 	mov.w	r2, #4294967295
 800563e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005642:	f10a 0a01 	add.w	sl, sl, #1
 8005646:	9304      	str	r3, [sp, #16]
 8005648:	9307      	str	r3, [sp, #28]
 800564a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800564e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005650:	4654      	mov	r4, sl
 8005652:	2205      	movs	r2, #5
 8005654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005658:	484e      	ldr	r0, [pc, #312]	@ (8005794 <_svfiprintf_r+0x1e4>)
 800565a:	f7fa fdb9 	bl	80001d0 <memchr>
 800565e:	9a04      	ldr	r2, [sp, #16]
 8005660:	b9d8      	cbnz	r0, 800569a <_svfiprintf_r+0xea>
 8005662:	06d0      	lsls	r0, r2, #27
 8005664:	bf44      	itt	mi
 8005666:	2320      	movmi	r3, #32
 8005668:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800566c:	0711      	lsls	r1, r2, #28
 800566e:	bf44      	itt	mi
 8005670:	232b      	movmi	r3, #43	@ 0x2b
 8005672:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005676:	f89a 3000 	ldrb.w	r3, [sl]
 800567a:	2b2a      	cmp	r3, #42	@ 0x2a
 800567c:	d015      	beq.n	80056aa <_svfiprintf_r+0xfa>
 800567e:	9a07      	ldr	r2, [sp, #28]
 8005680:	4654      	mov	r4, sl
 8005682:	2000      	movs	r0, #0
 8005684:	f04f 0c0a 	mov.w	ip, #10
 8005688:	4621      	mov	r1, r4
 800568a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800568e:	3b30      	subs	r3, #48	@ 0x30
 8005690:	2b09      	cmp	r3, #9
 8005692:	d94b      	bls.n	800572c <_svfiprintf_r+0x17c>
 8005694:	b1b0      	cbz	r0, 80056c4 <_svfiprintf_r+0x114>
 8005696:	9207      	str	r2, [sp, #28]
 8005698:	e014      	b.n	80056c4 <_svfiprintf_r+0x114>
 800569a:	eba0 0308 	sub.w	r3, r0, r8
 800569e:	fa09 f303 	lsl.w	r3, r9, r3
 80056a2:	4313      	orrs	r3, r2
 80056a4:	9304      	str	r3, [sp, #16]
 80056a6:	46a2      	mov	sl, r4
 80056a8:	e7d2      	b.n	8005650 <_svfiprintf_r+0xa0>
 80056aa:	9b03      	ldr	r3, [sp, #12]
 80056ac:	1d19      	adds	r1, r3, #4
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	9103      	str	r1, [sp, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	bfbb      	ittet	lt
 80056b6:	425b      	neglt	r3, r3
 80056b8:	f042 0202 	orrlt.w	r2, r2, #2
 80056bc:	9307      	strge	r3, [sp, #28]
 80056be:	9307      	strlt	r3, [sp, #28]
 80056c0:	bfb8      	it	lt
 80056c2:	9204      	strlt	r2, [sp, #16]
 80056c4:	7823      	ldrb	r3, [r4, #0]
 80056c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80056c8:	d10a      	bne.n	80056e0 <_svfiprintf_r+0x130>
 80056ca:	7863      	ldrb	r3, [r4, #1]
 80056cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80056ce:	d132      	bne.n	8005736 <_svfiprintf_r+0x186>
 80056d0:	9b03      	ldr	r3, [sp, #12]
 80056d2:	1d1a      	adds	r2, r3, #4
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	9203      	str	r2, [sp, #12]
 80056d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056dc:	3402      	adds	r4, #2
 80056de:	9305      	str	r3, [sp, #20]
 80056e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80057a4 <_svfiprintf_r+0x1f4>
 80056e4:	7821      	ldrb	r1, [r4, #0]
 80056e6:	2203      	movs	r2, #3
 80056e8:	4650      	mov	r0, sl
 80056ea:	f7fa fd71 	bl	80001d0 <memchr>
 80056ee:	b138      	cbz	r0, 8005700 <_svfiprintf_r+0x150>
 80056f0:	9b04      	ldr	r3, [sp, #16]
 80056f2:	eba0 000a 	sub.w	r0, r0, sl
 80056f6:	2240      	movs	r2, #64	@ 0x40
 80056f8:	4082      	lsls	r2, r0
 80056fa:	4313      	orrs	r3, r2
 80056fc:	3401      	adds	r4, #1
 80056fe:	9304      	str	r3, [sp, #16]
 8005700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005704:	4824      	ldr	r0, [pc, #144]	@ (8005798 <_svfiprintf_r+0x1e8>)
 8005706:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800570a:	2206      	movs	r2, #6
 800570c:	f7fa fd60 	bl	80001d0 <memchr>
 8005710:	2800      	cmp	r0, #0
 8005712:	d036      	beq.n	8005782 <_svfiprintf_r+0x1d2>
 8005714:	4b21      	ldr	r3, [pc, #132]	@ (800579c <_svfiprintf_r+0x1ec>)
 8005716:	bb1b      	cbnz	r3, 8005760 <_svfiprintf_r+0x1b0>
 8005718:	9b03      	ldr	r3, [sp, #12]
 800571a:	3307      	adds	r3, #7
 800571c:	f023 0307 	bic.w	r3, r3, #7
 8005720:	3308      	adds	r3, #8
 8005722:	9303      	str	r3, [sp, #12]
 8005724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005726:	4433      	add	r3, r6
 8005728:	9309      	str	r3, [sp, #36]	@ 0x24
 800572a:	e76a      	b.n	8005602 <_svfiprintf_r+0x52>
 800572c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005730:	460c      	mov	r4, r1
 8005732:	2001      	movs	r0, #1
 8005734:	e7a8      	b.n	8005688 <_svfiprintf_r+0xd8>
 8005736:	2300      	movs	r3, #0
 8005738:	3401      	adds	r4, #1
 800573a:	9305      	str	r3, [sp, #20]
 800573c:	4619      	mov	r1, r3
 800573e:	f04f 0c0a 	mov.w	ip, #10
 8005742:	4620      	mov	r0, r4
 8005744:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005748:	3a30      	subs	r2, #48	@ 0x30
 800574a:	2a09      	cmp	r2, #9
 800574c:	d903      	bls.n	8005756 <_svfiprintf_r+0x1a6>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0c6      	beq.n	80056e0 <_svfiprintf_r+0x130>
 8005752:	9105      	str	r1, [sp, #20]
 8005754:	e7c4      	b.n	80056e0 <_svfiprintf_r+0x130>
 8005756:	fb0c 2101 	mla	r1, ip, r1, r2
 800575a:	4604      	mov	r4, r0
 800575c:	2301      	movs	r3, #1
 800575e:	e7f0      	b.n	8005742 <_svfiprintf_r+0x192>
 8005760:	ab03      	add	r3, sp, #12
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	462a      	mov	r2, r5
 8005766:	4b0e      	ldr	r3, [pc, #56]	@ (80057a0 <_svfiprintf_r+0x1f0>)
 8005768:	a904      	add	r1, sp, #16
 800576a:	4638      	mov	r0, r7
 800576c:	f3af 8000 	nop.w
 8005770:	1c42      	adds	r2, r0, #1
 8005772:	4606      	mov	r6, r0
 8005774:	d1d6      	bne.n	8005724 <_svfiprintf_r+0x174>
 8005776:	89ab      	ldrh	r3, [r5, #12]
 8005778:	065b      	lsls	r3, r3, #25
 800577a:	f53f af2d 	bmi.w	80055d8 <_svfiprintf_r+0x28>
 800577e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005780:	e72c      	b.n	80055dc <_svfiprintf_r+0x2c>
 8005782:	ab03      	add	r3, sp, #12
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	462a      	mov	r2, r5
 8005788:	4b05      	ldr	r3, [pc, #20]	@ (80057a0 <_svfiprintf_r+0x1f0>)
 800578a:	a904      	add	r1, sp, #16
 800578c:	4638      	mov	r0, r7
 800578e:	f000 f879 	bl	8005884 <_printf_i>
 8005792:	e7ed      	b.n	8005770 <_svfiprintf_r+0x1c0>
 8005794:	08006b83 	.word	0x08006b83
 8005798:	08006b8d 	.word	0x08006b8d
 800579c:	00000000 	.word	0x00000000
 80057a0:	080054f9 	.word	0x080054f9
 80057a4:	08006b89 	.word	0x08006b89

080057a8 <_printf_common>:
 80057a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057ac:	4616      	mov	r6, r2
 80057ae:	4698      	mov	r8, r3
 80057b0:	688a      	ldr	r2, [r1, #8]
 80057b2:	690b      	ldr	r3, [r1, #16]
 80057b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057b8:	4293      	cmp	r3, r2
 80057ba:	bfb8      	it	lt
 80057bc:	4613      	movlt	r3, r2
 80057be:	6033      	str	r3, [r6, #0]
 80057c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057c4:	4607      	mov	r7, r0
 80057c6:	460c      	mov	r4, r1
 80057c8:	b10a      	cbz	r2, 80057ce <_printf_common+0x26>
 80057ca:	3301      	adds	r3, #1
 80057cc:	6033      	str	r3, [r6, #0]
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	0699      	lsls	r1, r3, #26
 80057d2:	bf42      	ittt	mi
 80057d4:	6833      	ldrmi	r3, [r6, #0]
 80057d6:	3302      	addmi	r3, #2
 80057d8:	6033      	strmi	r3, [r6, #0]
 80057da:	6825      	ldr	r5, [r4, #0]
 80057dc:	f015 0506 	ands.w	r5, r5, #6
 80057e0:	d106      	bne.n	80057f0 <_printf_common+0x48>
 80057e2:	f104 0a19 	add.w	sl, r4, #25
 80057e6:	68e3      	ldr	r3, [r4, #12]
 80057e8:	6832      	ldr	r2, [r6, #0]
 80057ea:	1a9b      	subs	r3, r3, r2
 80057ec:	42ab      	cmp	r3, r5
 80057ee:	dc26      	bgt.n	800583e <_printf_common+0x96>
 80057f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057f4:	6822      	ldr	r2, [r4, #0]
 80057f6:	3b00      	subs	r3, #0
 80057f8:	bf18      	it	ne
 80057fa:	2301      	movne	r3, #1
 80057fc:	0692      	lsls	r2, r2, #26
 80057fe:	d42b      	bmi.n	8005858 <_printf_common+0xb0>
 8005800:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005804:	4641      	mov	r1, r8
 8005806:	4638      	mov	r0, r7
 8005808:	47c8      	blx	r9
 800580a:	3001      	adds	r0, #1
 800580c:	d01e      	beq.n	800584c <_printf_common+0xa4>
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	6922      	ldr	r2, [r4, #16]
 8005812:	f003 0306 	and.w	r3, r3, #6
 8005816:	2b04      	cmp	r3, #4
 8005818:	bf02      	ittt	eq
 800581a:	68e5      	ldreq	r5, [r4, #12]
 800581c:	6833      	ldreq	r3, [r6, #0]
 800581e:	1aed      	subeq	r5, r5, r3
 8005820:	68a3      	ldr	r3, [r4, #8]
 8005822:	bf0c      	ite	eq
 8005824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005828:	2500      	movne	r5, #0
 800582a:	4293      	cmp	r3, r2
 800582c:	bfc4      	itt	gt
 800582e:	1a9b      	subgt	r3, r3, r2
 8005830:	18ed      	addgt	r5, r5, r3
 8005832:	2600      	movs	r6, #0
 8005834:	341a      	adds	r4, #26
 8005836:	42b5      	cmp	r5, r6
 8005838:	d11a      	bne.n	8005870 <_printf_common+0xc8>
 800583a:	2000      	movs	r0, #0
 800583c:	e008      	b.n	8005850 <_printf_common+0xa8>
 800583e:	2301      	movs	r3, #1
 8005840:	4652      	mov	r2, sl
 8005842:	4641      	mov	r1, r8
 8005844:	4638      	mov	r0, r7
 8005846:	47c8      	blx	r9
 8005848:	3001      	adds	r0, #1
 800584a:	d103      	bne.n	8005854 <_printf_common+0xac>
 800584c:	f04f 30ff 	mov.w	r0, #4294967295
 8005850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005854:	3501      	adds	r5, #1
 8005856:	e7c6      	b.n	80057e6 <_printf_common+0x3e>
 8005858:	18e1      	adds	r1, r4, r3
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	2030      	movs	r0, #48	@ 0x30
 800585e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005862:	4422      	add	r2, r4
 8005864:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005868:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800586c:	3302      	adds	r3, #2
 800586e:	e7c7      	b.n	8005800 <_printf_common+0x58>
 8005870:	2301      	movs	r3, #1
 8005872:	4622      	mov	r2, r4
 8005874:	4641      	mov	r1, r8
 8005876:	4638      	mov	r0, r7
 8005878:	47c8      	blx	r9
 800587a:	3001      	adds	r0, #1
 800587c:	d0e6      	beq.n	800584c <_printf_common+0xa4>
 800587e:	3601      	adds	r6, #1
 8005880:	e7d9      	b.n	8005836 <_printf_common+0x8e>
	...

08005884 <_printf_i>:
 8005884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005888:	7e0f      	ldrb	r7, [r1, #24]
 800588a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800588c:	2f78      	cmp	r7, #120	@ 0x78
 800588e:	4691      	mov	r9, r2
 8005890:	4680      	mov	r8, r0
 8005892:	460c      	mov	r4, r1
 8005894:	469a      	mov	sl, r3
 8005896:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800589a:	d807      	bhi.n	80058ac <_printf_i+0x28>
 800589c:	2f62      	cmp	r7, #98	@ 0x62
 800589e:	d80a      	bhi.n	80058b6 <_printf_i+0x32>
 80058a0:	2f00      	cmp	r7, #0
 80058a2:	f000 80d2 	beq.w	8005a4a <_printf_i+0x1c6>
 80058a6:	2f58      	cmp	r7, #88	@ 0x58
 80058a8:	f000 80b9 	beq.w	8005a1e <_printf_i+0x19a>
 80058ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058b4:	e03a      	b.n	800592c <_printf_i+0xa8>
 80058b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058ba:	2b15      	cmp	r3, #21
 80058bc:	d8f6      	bhi.n	80058ac <_printf_i+0x28>
 80058be:	a101      	add	r1, pc, #4	@ (adr r1, 80058c4 <_printf_i+0x40>)
 80058c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058c4:	0800591d 	.word	0x0800591d
 80058c8:	08005931 	.word	0x08005931
 80058cc:	080058ad 	.word	0x080058ad
 80058d0:	080058ad 	.word	0x080058ad
 80058d4:	080058ad 	.word	0x080058ad
 80058d8:	080058ad 	.word	0x080058ad
 80058dc:	08005931 	.word	0x08005931
 80058e0:	080058ad 	.word	0x080058ad
 80058e4:	080058ad 	.word	0x080058ad
 80058e8:	080058ad 	.word	0x080058ad
 80058ec:	080058ad 	.word	0x080058ad
 80058f0:	08005a31 	.word	0x08005a31
 80058f4:	0800595b 	.word	0x0800595b
 80058f8:	080059eb 	.word	0x080059eb
 80058fc:	080058ad 	.word	0x080058ad
 8005900:	080058ad 	.word	0x080058ad
 8005904:	08005a53 	.word	0x08005a53
 8005908:	080058ad 	.word	0x080058ad
 800590c:	0800595b 	.word	0x0800595b
 8005910:	080058ad 	.word	0x080058ad
 8005914:	080058ad 	.word	0x080058ad
 8005918:	080059f3 	.word	0x080059f3
 800591c:	6833      	ldr	r3, [r6, #0]
 800591e:	1d1a      	adds	r2, r3, #4
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6032      	str	r2, [r6, #0]
 8005924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005928:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800592c:	2301      	movs	r3, #1
 800592e:	e09d      	b.n	8005a6c <_printf_i+0x1e8>
 8005930:	6833      	ldr	r3, [r6, #0]
 8005932:	6820      	ldr	r0, [r4, #0]
 8005934:	1d19      	adds	r1, r3, #4
 8005936:	6031      	str	r1, [r6, #0]
 8005938:	0606      	lsls	r6, r0, #24
 800593a:	d501      	bpl.n	8005940 <_printf_i+0xbc>
 800593c:	681d      	ldr	r5, [r3, #0]
 800593e:	e003      	b.n	8005948 <_printf_i+0xc4>
 8005940:	0645      	lsls	r5, r0, #25
 8005942:	d5fb      	bpl.n	800593c <_printf_i+0xb8>
 8005944:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005948:	2d00      	cmp	r5, #0
 800594a:	da03      	bge.n	8005954 <_printf_i+0xd0>
 800594c:	232d      	movs	r3, #45	@ 0x2d
 800594e:	426d      	negs	r5, r5
 8005950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005954:	4859      	ldr	r0, [pc, #356]	@ (8005abc <_printf_i+0x238>)
 8005956:	230a      	movs	r3, #10
 8005958:	e011      	b.n	800597e <_printf_i+0xfa>
 800595a:	6821      	ldr	r1, [r4, #0]
 800595c:	6833      	ldr	r3, [r6, #0]
 800595e:	0608      	lsls	r0, r1, #24
 8005960:	f853 5b04 	ldr.w	r5, [r3], #4
 8005964:	d402      	bmi.n	800596c <_printf_i+0xe8>
 8005966:	0649      	lsls	r1, r1, #25
 8005968:	bf48      	it	mi
 800596a:	b2ad      	uxthmi	r5, r5
 800596c:	2f6f      	cmp	r7, #111	@ 0x6f
 800596e:	4853      	ldr	r0, [pc, #332]	@ (8005abc <_printf_i+0x238>)
 8005970:	6033      	str	r3, [r6, #0]
 8005972:	bf14      	ite	ne
 8005974:	230a      	movne	r3, #10
 8005976:	2308      	moveq	r3, #8
 8005978:	2100      	movs	r1, #0
 800597a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800597e:	6866      	ldr	r6, [r4, #4]
 8005980:	60a6      	str	r6, [r4, #8]
 8005982:	2e00      	cmp	r6, #0
 8005984:	bfa2      	ittt	ge
 8005986:	6821      	ldrge	r1, [r4, #0]
 8005988:	f021 0104 	bicge.w	r1, r1, #4
 800598c:	6021      	strge	r1, [r4, #0]
 800598e:	b90d      	cbnz	r5, 8005994 <_printf_i+0x110>
 8005990:	2e00      	cmp	r6, #0
 8005992:	d04b      	beq.n	8005a2c <_printf_i+0x1a8>
 8005994:	4616      	mov	r6, r2
 8005996:	fbb5 f1f3 	udiv	r1, r5, r3
 800599a:	fb03 5711 	mls	r7, r3, r1, r5
 800599e:	5dc7      	ldrb	r7, [r0, r7]
 80059a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059a4:	462f      	mov	r7, r5
 80059a6:	42bb      	cmp	r3, r7
 80059a8:	460d      	mov	r5, r1
 80059aa:	d9f4      	bls.n	8005996 <_printf_i+0x112>
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d10b      	bne.n	80059c8 <_printf_i+0x144>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	07df      	lsls	r7, r3, #31
 80059b4:	d508      	bpl.n	80059c8 <_printf_i+0x144>
 80059b6:	6923      	ldr	r3, [r4, #16]
 80059b8:	6861      	ldr	r1, [r4, #4]
 80059ba:	4299      	cmp	r1, r3
 80059bc:	bfde      	ittt	le
 80059be:	2330      	movle	r3, #48	@ 0x30
 80059c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059c8:	1b92      	subs	r2, r2, r6
 80059ca:	6122      	str	r2, [r4, #16]
 80059cc:	f8cd a000 	str.w	sl, [sp]
 80059d0:	464b      	mov	r3, r9
 80059d2:	aa03      	add	r2, sp, #12
 80059d4:	4621      	mov	r1, r4
 80059d6:	4640      	mov	r0, r8
 80059d8:	f7ff fee6 	bl	80057a8 <_printf_common>
 80059dc:	3001      	adds	r0, #1
 80059de:	d14a      	bne.n	8005a76 <_printf_i+0x1f2>
 80059e0:	f04f 30ff 	mov.w	r0, #4294967295
 80059e4:	b004      	add	sp, #16
 80059e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	f043 0320 	orr.w	r3, r3, #32
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	4833      	ldr	r0, [pc, #204]	@ (8005ac0 <_printf_i+0x23c>)
 80059f4:	2778      	movs	r7, #120	@ 0x78
 80059f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	6831      	ldr	r1, [r6, #0]
 80059fe:	061f      	lsls	r7, r3, #24
 8005a00:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a04:	d402      	bmi.n	8005a0c <_printf_i+0x188>
 8005a06:	065f      	lsls	r7, r3, #25
 8005a08:	bf48      	it	mi
 8005a0a:	b2ad      	uxthmi	r5, r5
 8005a0c:	6031      	str	r1, [r6, #0]
 8005a0e:	07d9      	lsls	r1, r3, #31
 8005a10:	bf44      	itt	mi
 8005a12:	f043 0320 	orrmi.w	r3, r3, #32
 8005a16:	6023      	strmi	r3, [r4, #0]
 8005a18:	b11d      	cbz	r5, 8005a22 <_printf_i+0x19e>
 8005a1a:	2310      	movs	r3, #16
 8005a1c:	e7ac      	b.n	8005978 <_printf_i+0xf4>
 8005a1e:	4827      	ldr	r0, [pc, #156]	@ (8005abc <_printf_i+0x238>)
 8005a20:	e7e9      	b.n	80059f6 <_printf_i+0x172>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	f023 0320 	bic.w	r3, r3, #32
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	e7f6      	b.n	8005a1a <_printf_i+0x196>
 8005a2c:	4616      	mov	r6, r2
 8005a2e:	e7bd      	b.n	80059ac <_printf_i+0x128>
 8005a30:	6833      	ldr	r3, [r6, #0]
 8005a32:	6825      	ldr	r5, [r4, #0]
 8005a34:	6961      	ldr	r1, [r4, #20]
 8005a36:	1d18      	adds	r0, r3, #4
 8005a38:	6030      	str	r0, [r6, #0]
 8005a3a:	062e      	lsls	r6, r5, #24
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	d501      	bpl.n	8005a44 <_printf_i+0x1c0>
 8005a40:	6019      	str	r1, [r3, #0]
 8005a42:	e002      	b.n	8005a4a <_printf_i+0x1c6>
 8005a44:	0668      	lsls	r0, r5, #25
 8005a46:	d5fb      	bpl.n	8005a40 <_printf_i+0x1bc>
 8005a48:	8019      	strh	r1, [r3, #0]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	6123      	str	r3, [r4, #16]
 8005a4e:	4616      	mov	r6, r2
 8005a50:	e7bc      	b.n	80059cc <_printf_i+0x148>
 8005a52:	6833      	ldr	r3, [r6, #0]
 8005a54:	1d1a      	adds	r2, r3, #4
 8005a56:	6032      	str	r2, [r6, #0]
 8005a58:	681e      	ldr	r6, [r3, #0]
 8005a5a:	6862      	ldr	r2, [r4, #4]
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4630      	mov	r0, r6
 8005a60:	f7fa fbb6 	bl	80001d0 <memchr>
 8005a64:	b108      	cbz	r0, 8005a6a <_printf_i+0x1e6>
 8005a66:	1b80      	subs	r0, r0, r6
 8005a68:	6060      	str	r0, [r4, #4]
 8005a6a:	6863      	ldr	r3, [r4, #4]
 8005a6c:	6123      	str	r3, [r4, #16]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a74:	e7aa      	b.n	80059cc <_printf_i+0x148>
 8005a76:	6923      	ldr	r3, [r4, #16]
 8005a78:	4632      	mov	r2, r6
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	4640      	mov	r0, r8
 8005a7e:	47d0      	blx	sl
 8005a80:	3001      	adds	r0, #1
 8005a82:	d0ad      	beq.n	80059e0 <_printf_i+0x15c>
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	079b      	lsls	r3, r3, #30
 8005a88:	d413      	bmi.n	8005ab2 <_printf_i+0x22e>
 8005a8a:	68e0      	ldr	r0, [r4, #12]
 8005a8c:	9b03      	ldr	r3, [sp, #12]
 8005a8e:	4298      	cmp	r0, r3
 8005a90:	bfb8      	it	lt
 8005a92:	4618      	movlt	r0, r3
 8005a94:	e7a6      	b.n	80059e4 <_printf_i+0x160>
 8005a96:	2301      	movs	r3, #1
 8005a98:	4632      	mov	r2, r6
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	4640      	mov	r0, r8
 8005a9e:	47d0      	blx	sl
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d09d      	beq.n	80059e0 <_printf_i+0x15c>
 8005aa4:	3501      	adds	r5, #1
 8005aa6:	68e3      	ldr	r3, [r4, #12]
 8005aa8:	9903      	ldr	r1, [sp, #12]
 8005aaa:	1a5b      	subs	r3, r3, r1
 8005aac:	42ab      	cmp	r3, r5
 8005aae:	dcf2      	bgt.n	8005a96 <_printf_i+0x212>
 8005ab0:	e7eb      	b.n	8005a8a <_printf_i+0x206>
 8005ab2:	2500      	movs	r5, #0
 8005ab4:	f104 0619 	add.w	r6, r4, #25
 8005ab8:	e7f5      	b.n	8005aa6 <_printf_i+0x222>
 8005aba:	bf00      	nop
 8005abc:	08006b94 	.word	0x08006b94
 8005ac0:	08006ba5 	.word	0x08006ba5

08005ac4 <__sflush_r>:
 8005ac4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005acc:	0716      	lsls	r6, r2, #28
 8005ace:	4605      	mov	r5, r0
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	d454      	bmi.n	8005b7e <__sflush_r+0xba>
 8005ad4:	684b      	ldr	r3, [r1, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	dc02      	bgt.n	8005ae0 <__sflush_r+0x1c>
 8005ada:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dd48      	ble.n	8005b72 <__sflush_r+0xae>
 8005ae0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ae2:	2e00      	cmp	r6, #0
 8005ae4:	d045      	beq.n	8005b72 <__sflush_r+0xae>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005aec:	682f      	ldr	r7, [r5, #0]
 8005aee:	6a21      	ldr	r1, [r4, #32]
 8005af0:	602b      	str	r3, [r5, #0]
 8005af2:	d030      	beq.n	8005b56 <__sflush_r+0x92>
 8005af4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	0759      	lsls	r1, r3, #29
 8005afa:	d505      	bpl.n	8005b08 <__sflush_r+0x44>
 8005afc:	6863      	ldr	r3, [r4, #4]
 8005afe:	1ad2      	subs	r2, r2, r3
 8005b00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b02:	b10b      	cbz	r3, 8005b08 <__sflush_r+0x44>
 8005b04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b06:	1ad2      	subs	r2, r2, r3
 8005b08:	2300      	movs	r3, #0
 8005b0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b0c:	6a21      	ldr	r1, [r4, #32]
 8005b0e:	4628      	mov	r0, r5
 8005b10:	47b0      	blx	r6
 8005b12:	1c43      	adds	r3, r0, #1
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	d106      	bne.n	8005b26 <__sflush_r+0x62>
 8005b18:	6829      	ldr	r1, [r5, #0]
 8005b1a:	291d      	cmp	r1, #29
 8005b1c:	d82b      	bhi.n	8005b76 <__sflush_r+0xb2>
 8005b1e:	4a2a      	ldr	r2, [pc, #168]	@ (8005bc8 <__sflush_r+0x104>)
 8005b20:	410a      	asrs	r2, r1
 8005b22:	07d6      	lsls	r6, r2, #31
 8005b24:	d427      	bmi.n	8005b76 <__sflush_r+0xb2>
 8005b26:	2200      	movs	r2, #0
 8005b28:	6062      	str	r2, [r4, #4]
 8005b2a:	04d9      	lsls	r1, r3, #19
 8005b2c:	6922      	ldr	r2, [r4, #16]
 8005b2e:	6022      	str	r2, [r4, #0]
 8005b30:	d504      	bpl.n	8005b3c <__sflush_r+0x78>
 8005b32:	1c42      	adds	r2, r0, #1
 8005b34:	d101      	bne.n	8005b3a <__sflush_r+0x76>
 8005b36:	682b      	ldr	r3, [r5, #0]
 8005b38:	b903      	cbnz	r3, 8005b3c <__sflush_r+0x78>
 8005b3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005b3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b3e:	602f      	str	r7, [r5, #0]
 8005b40:	b1b9      	cbz	r1, 8005b72 <__sflush_r+0xae>
 8005b42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b46:	4299      	cmp	r1, r3
 8005b48:	d002      	beq.n	8005b50 <__sflush_r+0x8c>
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f7ff fbd4 	bl	80052f8 <_free_r>
 8005b50:	2300      	movs	r3, #0
 8005b52:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b54:	e00d      	b.n	8005b72 <__sflush_r+0xae>
 8005b56:	2301      	movs	r3, #1
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b0      	blx	r6
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	1c50      	adds	r0, r2, #1
 8005b60:	d1c9      	bne.n	8005af6 <__sflush_r+0x32>
 8005b62:	682b      	ldr	r3, [r5, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0c6      	beq.n	8005af6 <__sflush_r+0x32>
 8005b68:	2b1d      	cmp	r3, #29
 8005b6a:	d001      	beq.n	8005b70 <__sflush_r+0xac>
 8005b6c:	2b16      	cmp	r3, #22
 8005b6e:	d11e      	bne.n	8005bae <__sflush_r+0xea>
 8005b70:	602f      	str	r7, [r5, #0]
 8005b72:	2000      	movs	r0, #0
 8005b74:	e022      	b.n	8005bbc <__sflush_r+0xf8>
 8005b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b7a:	b21b      	sxth	r3, r3
 8005b7c:	e01b      	b.n	8005bb6 <__sflush_r+0xf2>
 8005b7e:	690f      	ldr	r7, [r1, #16]
 8005b80:	2f00      	cmp	r7, #0
 8005b82:	d0f6      	beq.n	8005b72 <__sflush_r+0xae>
 8005b84:	0793      	lsls	r3, r2, #30
 8005b86:	680e      	ldr	r6, [r1, #0]
 8005b88:	bf08      	it	eq
 8005b8a:	694b      	ldreq	r3, [r1, #20]
 8005b8c:	600f      	str	r7, [r1, #0]
 8005b8e:	bf18      	it	ne
 8005b90:	2300      	movne	r3, #0
 8005b92:	eba6 0807 	sub.w	r8, r6, r7
 8005b96:	608b      	str	r3, [r1, #8]
 8005b98:	f1b8 0f00 	cmp.w	r8, #0
 8005b9c:	dde9      	ble.n	8005b72 <__sflush_r+0xae>
 8005b9e:	6a21      	ldr	r1, [r4, #32]
 8005ba0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005ba2:	4643      	mov	r3, r8
 8005ba4:	463a      	mov	r2, r7
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	47b0      	blx	r6
 8005baa:	2800      	cmp	r0, #0
 8005bac:	dc08      	bgt.n	8005bc0 <__sflush_r+0xfc>
 8005bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bb6:	81a3      	strh	r3, [r4, #12]
 8005bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bc0:	4407      	add	r7, r0
 8005bc2:	eba8 0800 	sub.w	r8, r8, r0
 8005bc6:	e7e7      	b.n	8005b98 <__sflush_r+0xd4>
 8005bc8:	dfbffffe 	.word	0xdfbffffe

08005bcc <_fflush_r>:
 8005bcc:	b538      	push	{r3, r4, r5, lr}
 8005bce:	690b      	ldr	r3, [r1, #16]
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	b913      	cbnz	r3, 8005bdc <_fflush_r+0x10>
 8005bd6:	2500      	movs	r5, #0
 8005bd8:	4628      	mov	r0, r5
 8005bda:	bd38      	pop	{r3, r4, r5, pc}
 8005bdc:	b118      	cbz	r0, 8005be6 <_fflush_r+0x1a>
 8005bde:	6a03      	ldr	r3, [r0, #32]
 8005be0:	b90b      	cbnz	r3, 8005be6 <_fflush_r+0x1a>
 8005be2:	f7ff fa3f 	bl	8005064 <__sinit>
 8005be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f3      	beq.n	8005bd6 <_fflush_r+0xa>
 8005bee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005bf0:	07d0      	lsls	r0, r2, #31
 8005bf2:	d404      	bmi.n	8005bfe <_fflush_r+0x32>
 8005bf4:	0599      	lsls	r1, r3, #22
 8005bf6:	d402      	bmi.n	8005bfe <_fflush_r+0x32>
 8005bf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bfa:	f7ff fb46 	bl	800528a <__retarget_lock_acquire_recursive>
 8005bfe:	4628      	mov	r0, r5
 8005c00:	4621      	mov	r1, r4
 8005c02:	f7ff ff5f 	bl	8005ac4 <__sflush_r>
 8005c06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c08:	07da      	lsls	r2, r3, #31
 8005c0a:	4605      	mov	r5, r0
 8005c0c:	d4e4      	bmi.n	8005bd8 <_fflush_r+0xc>
 8005c0e:	89a3      	ldrh	r3, [r4, #12]
 8005c10:	059b      	lsls	r3, r3, #22
 8005c12:	d4e1      	bmi.n	8005bd8 <_fflush_r+0xc>
 8005c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c16:	f7ff fb39 	bl	800528c <__retarget_lock_release_recursive>
 8005c1a:	e7dd      	b.n	8005bd8 <_fflush_r+0xc>

08005c1c <fiprintf>:
 8005c1c:	b40e      	push	{r1, r2, r3}
 8005c1e:	b503      	push	{r0, r1, lr}
 8005c20:	4601      	mov	r1, r0
 8005c22:	ab03      	add	r3, sp, #12
 8005c24:	4805      	ldr	r0, [pc, #20]	@ (8005c3c <fiprintf+0x20>)
 8005c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c2a:	6800      	ldr	r0, [r0, #0]
 8005c2c:	9301      	str	r3, [sp, #4]
 8005c2e:	f000 f88f 	bl	8005d50 <_vfiprintf_r>
 8005c32:	b002      	add	sp, #8
 8005c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c38:	b003      	add	sp, #12
 8005c3a:	4770      	bx	lr
 8005c3c:	20000104 	.word	0x20000104

08005c40 <memmove>:
 8005c40:	4288      	cmp	r0, r1
 8005c42:	b510      	push	{r4, lr}
 8005c44:	eb01 0402 	add.w	r4, r1, r2
 8005c48:	d902      	bls.n	8005c50 <memmove+0x10>
 8005c4a:	4284      	cmp	r4, r0
 8005c4c:	4623      	mov	r3, r4
 8005c4e:	d807      	bhi.n	8005c60 <memmove+0x20>
 8005c50:	1e43      	subs	r3, r0, #1
 8005c52:	42a1      	cmp	r1, r4
 8005c54:	d008      	beq.n	8005c68 <memmove+0x28>
 8005c56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c5e:	e7f8      	b.n	8005c52 <memmove+0x12>
 8005c60:	4402      	add	r2, r0
 8005c62:	4601      	mov	r1, r0
 8005c64:	428a      	cmp	r2, r1
 8005c66:	d100      	bne.n	8005c6a <memmove+0x2a>
 8005c68:	bd10      	pop	{r4, pc}
 8005c6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c72:	e7f7      	b.n	8005c64 <memmove+0x24>

08005c74 <_sbrk_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	4d06      	ldr	r5, [pc, #24]	@ (8005c90 <_sbrk_r+0x1c>)
 8005c78:	2300      	movs	r3, #0
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	602b      	str	r3, [r5, #0]
 8005c80:	f7fb fb50 	bl	8001324 <_sbrk>
 8005c84:	1c43      	adds	r3, r0, #1
 8005c86:	d102      	bne.n	8005c8e <_sbrk_r+0x1a>
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	b103      	cbz	r3, 8005c8e <_sbrk_r+0x1a>
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	bd38      	pop	{r3, r4, r5, pc}
 8005c90:	200009ec 	.word	0x200009ec

08005c94 <abort>:
 8005c94:	b508      	push	{r3, lr}
 8005c96:	2006      	movs	r0, #6
 8005c98:	f000 fa2e 	bl	80060f8 <raise>
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	f7fb fac8 	bl	8001232 <_exit>

08005ca2 <_realloc_r>:
 8005ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca6:	4680      	mov	r8, r0
 8005ca8:	4615      	mov	r5, r2
 8005caa:	460c      	mov	r4, r1
 8005cac:	b921      	cbnz	r1, 8005cb8 <_realloc_r+0x16>
 8005cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	f7ff bb94 	b.w	80053e0 <_malloc_r>
 8005cb8:	b92a      	cbnz	r2, 8005cc6 <_realloc_r+0x24>
 8005cba:	f7ff fb1d 	bl	80052f8 <_free_r>
 8005cbe:	2400      	movs	r4, #0
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc6:	f000 fa33 	bl	8006130 <_malloc_usable_size_r>
 8005cca:	4285      	cmp	r5, r0
 8005ccc:	4606      	mov	r6, r0
 8005cce:	d802      	bhi.n	8005cd6 <_realloc_r+0x34>
 8005cd0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005cd4:	d8f4      	bhi.n	8005cc0 <_realloc_r+0x1e>
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	4640      	mov	r0, r8
 8005cda:	f7ff fb81 	bl	80053e0 <_malloc_r>
 8005cde:	4607      	mov	r7, r0
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d0ec      	beq.n	8005cbe <_realloc_r+0x1c>
 8005ce4:	42b5      	cmp	r5, r6
 8005ce6:	462a      	mov	r2, r5
 8005ce8:	4621      	mov	r1, r4
 8005cea:	bf28      	it	cs
 8005cec:	4632      	movcs	r2, r6
 8005cee:	f7ff fad6 	bl	800529e <memcpy>
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	4640      	mov	r0, r8
 8005cf6:	f7ff faff 	bl	80052f8 <_free_r>
 8005cfa:	463c      	mov	r4, r7
 8005cfc:	e7e0      	b.n	8005cc0 <_realloc_r+0x1e>

08005cfe <__sfputc_r>:
 8005cfe:	6893      	ldr	r3, [r2, #8]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	b410      	push	{r4}
 8005d06:	6093      	str	r3, [r2, #8]
 8005d08:	da08      	bge.n	8005d1c <__sfputc_r+0x1e>
 8005d0a:	6994      	ldr	r4, [r2, #24]
 8005d0c:	42a3      	cmp	r3, r4
 8005d0e:	db01      	blt.n	8005d14 <__sfputc_r+0x16>
 8005d10:	290a      	cmp	r1, #10
 8005d12:	d103      	bne.n	8005d1c <__sfputc_r+0x1e>
 8005d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d18:	f000 b932 	b.w	8005f80 <__swbuf_r>
 8005d1c:	6813      	ldr	r3, [r2, #0]
 8005d1e:	1c58      	adds	r0, r3, #1
 8005d20:	6010      	str	r0, [r2, #0]
 8005d22:	7019      	strb	r1, [r3, #0]
 8005d24:	4608      	mov	r0, r1
 8005d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <__sfputs_r>:
 8005d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2e:	4606      	mov	r6, r0
 8005d30:	460f      	mov	r7, r1
 8005d32:	4614      	mov	r4, r2
 8005d34:	18d5      	adds	r5, r2, r3
 8005d36:	42ac      	cmp	r4, r5
 8005d38:	d101      	bne.n	8005d3e <__sfputs_r+0x12>
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	e007      	b.n	8005d4e <__sfputs_r+0x22>
 8005d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d42:	463a      	mov	r2, r7
 8005d44:	4630      	mov	r0, r6
 8005d46:	f7ff ffda 	bl	8005cfe <__sfputc_r>
 8005d4a:	1c43      	adds	r3, r0, #1
 8005d4c:	d1f3      	bne.n	8005d36 <__sfputs_r+0xa>
 8005d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d50 <_vfiprintf_r>:
 8005d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d54:	460d      	mov	r5, r1
 8005d56:	b09d      	sub	sp, #116	@ 0x74
 8005d58:	4614      	mov	r4, r2
 8005d5a:	4698      	mov	r8, r3
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	b118      	cbz	r0, 8005d68 <_vfiprintf_r+0x18>
 8005d60:	6a03      	ldr	r3, [r0, #32]
 8005d62:	b90b      	cbnz	r3, 8005d68 <_vfiprintf_r+0x18>
 8005d64:	f7ff f97e 	bl	8005064 <__sinit>
 8005d68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d6a:	07d9      	lsls	r1, r3, #31
 8005d6c:	d405      	bmi.n	8005d7a <_vfiprintf_r+0x2a>
 8005d6e:	89ab      	ldrh	r3, [r5, #12]
 8005d70:	059a      	lsls	r2, r3, #22
 8005d72:	d402      	bmi.n	8005d7a <_vfiprintf_r+0x2a>
 8005d74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d76:	f7ff fa88 	bl	800528a <__retarget_lock_acquire_recursive>
 8005d7a:	89ab      	ldrh	r3, [r5, #12]
 8005d7c:	071b      	lsls	r3, r3, #28
 8005d7e:	d501      	bpl.n	8005d84 <_vfiprintf_r+0x34>
 8005d80:	692b      	ldr	r3, [r5, #16]
 8005d82:	b99b      	cbnz	r3, 8005dac <_vfiprintf_r+0x5c>
 8005d84:	4629      	mov	r1, r5
 8005d86:	4630      	mov	r0, r6
 8005d88:	f000 f938 	bl	8005ffc <__swsetup_r>
 8005d8c:	b170      	cbz	r0, 8005dac <_vfiprintf_r+0x5c>
 8005d8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d90:	07dc      	lsls	r4, r3, #31
 8005d92:	d504      	bpl.n	8005d9e <_vfiprintf_r+0x4e>
 8005d94:	f04f 30ff 	mov.w	r0, #4294967295
 8005d98:	b01d      	add	sp, #116	@ 0x74
 8005d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9e:	89ab      	ldrh	r3, [r5, #12]
 8005da0:	0598      	lsls	r0, r3, #22
 8005da2:	d4f7      	bmi.n	8005d94 <_vfiprintf_r+0x44>
 8005da4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005da6:	f7ff fa71 	bl	800528c <__retarget_lock_release_recursive>
 8005daa:	e7f3      	b.n	8005d94 <_vfiprintf_r+0x44>
 8005dac:	2300      	movs	r3, #0
 8005dae:	9309      	str	r3, [sp, #36]	@ 0x24
 8005db0:	2320      	movs	r3, #32
 8005db2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dba:	2330      	movs	r3, #48	@ 0x30
 8005dbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005f6c <_vfiprintf_r+0x21c>
 8005dc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005dc4:	f04f 0901 	mov.w	r9, #1
 8005dc8:	4623      	mov	r3, r4
 8005dca:	469a      	mov	sl, r3
 8005dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dd0:	b10a      	cbz	r2, 8005dd6 <_vfiprintf_r+0x86>
 8005dd2:	2a25      	cmp	r2, #37	@ 0x25
 8005dd4:	d1f9      	bne.n	8005dca <_vfiprintf_r+0x7a>
 8005dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8005dda:	d00b      	beq.n	8005df4 <_vfiprintf_r+0xa4>
 8005ddc:	465b      	mov	r3, fp
 8005dde:	4622      	mov	r2, r4
 8005de0:	4629      	mov	r1, r5
 8005de2:	4630      	mov	r0, r6
 8005de4:	f7ff ffa2 	bl	8005d2c <__sfputs_r>
 8005de8:	3001      	adds	r0, #1
 8005dea:	f000 80a7 	beq.w	8005f3c <_vfiprintf_r+0x1ec>
 8005dee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005df0:	445a      	add	r2, fp
 8005df2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005df4:	f89a 3000 	ldrb.w	r3, [sl]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 809f 	beq.w	8005f3c <_vfiprintf_r+0x1ec>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f04f 32ff 	mov.w	r2, #4294967295
 8005e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e08:	f10a 0a01 	add.w	sl, sl, #1
 8005e0c:	9304      	str	r3, [sp, #16]
 8005e0e:	9307      	str	r3, [sp, #28]
 8005e10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e14:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e16:	4654      	mov	r4, sl
 8005e18:	2205      	movs	r2, #5
 8005e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e1e:	4853      	ldr	r0, [pc, #332]	@ (8005f6c <_vfiprintf_r+0x21c>)
 8005e20:	f7fa f9d6 	bl	80001d0 <memchr>
 8005e24:	9a04      	ldr	r2, [sp, #16]
 8005e26:	b9d8      	cbnz	r0, 8005e60 <_vfiprintf_r+0x110>
 8005e28:	06d1      	lsls	r1, r2, #27
 8005e2a:	bf44      	itt	mi
 8005e2c:	2320      	movmi	r3, #32
 8005e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e32:	0713      	lsls	r3, r2, #28
 8005e34:	bf44      	itt	mi
 8005e36:	232b      	movmi	r3, #43	@ 0x2b
 8005e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e40:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e42:	d015      	beq.n	8005e70 <_vfiprintf_r+0x120>
 8005e44:	9a07      	ldr	r2, [sp, #28]
 8005e46:	4654      	mov	r4, sl
 8005e48:	2000      	movs	r0, #0
 8005e4a:	f04f 0c0a 	mov.w	ip, #10
 8005e4e:	4621      	mov	r1, r4
 8005e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e54:	3b30      	subs	r3, #48	@ 0x30
 8005e56:	2b09      	cmp	r3, #9
 8005e58:	d94b      	bls.n	8005ef2 <_vfiprintf_r+0x1a2>
 8005e5a:	b1b0      	cbz	r0, 8005e8a <_vfiprintf_r+0x13a>
 8005e5c:	9207      	str	r2, [sp, #28]
 8005e5e:	e014      	b.n	8005e8a <_vfiprintf_r+0x13a>
 8005e60:	eba0 0308 	sub.w	r3, r0, r8
 8005e64:	fa09 f303 	lsl.w	r3, r9, r3
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	9304      	str	r3, [sp, #16]
 8005e6c:	46a2      	mov	sl, r4
 8005e6e:	e7d2      	b.n	8005e16 <_vfiprintf_r+0xc6>
 8005e70:	9b03      	ldr	r3, [sp, #12]
 8005e72:	1d19      	adds	r1, r3, #4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	9103      	str	r1, [sp, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bfbb      	ittet	lt
 8005e7c:	425b      	neglt	r3, r3
 8005e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8005e82:	9307      	strge	r3, [sp, #28]
 8005e84:	9307      	strlt	r3, [sp, #28]
 8005e86:	bfb8      	it	lt
 8005e88:	9204      	strlt	r2, [sp, #16]
 8005e8a:	7823      	ldrb	r3, [r4, #0]
 8005e8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e8e:	d10a      	bne.n	8005ea6 <_vfiprintf_r+0x156>
 8005e90:	7863      	ldrb	r3, [r4, #1]
 8005e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e94:	d132      	bne.n	8005efc <_vfiprintf_r+0x1ac>
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	1d1a      	adds	r2, r3, #4
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	9203      	str	r2, [sp, #12]
 8005e9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ea2:	3402      	adds	r4, #2
 8005ea4:	9305      	str	r3, [sp, #20]
 8005ea6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005f7c <_vfiprintf_r+0x22c>
 8005eaa:	7821      	ldrb	r1, [r4, #0]
 8005eac:	2203      	movs	r2, #3
 8005eae:	4650      	mov	r0, sl
 8005eb0:	f7fa f98e 	bl	80001d0 <memchr>
 8005eb4:	b138      	cbz	r0, 8005ec6 <_vfiprintf_r+0x176>
 8005eb6:	9b04      	ldr	r3, [sp, #16]
 8005eb8:	eba0 000a 	sub.w	r0, r0, sl
 8005ebc:	2240      	movs	r2, #64	@ 0x40
 8005ebe:	4082      	lsls	r2, r0
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	3401      	adds	r4, #1
 8005ec4:	9304      	str	r3, [sp, #16]
 8005ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eca:	4829      	ldr	r0, [pc, #164]	@ (8005f70 <_vfiprintf_r+0x220>)
 8005ecc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ed0:	2206      	movs	r2, #6
 8005ed2:	f7fa f97d 	bl	80001d0 <memchr>
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	d03f      	beq.n	8005f5a <_vfiprintf_r+0x20a>
 8005eda:	4b26      	ldr	r3, [pc, #152]	@ (8005f74 <_vfiprintf_r+0x224>)
 8005edc:	bb1b      	cbnz	r3, 8005f26 <_vfiprintf_r+0x1d6>
 8005ede:	9b03      	ldr	r3, [sp, #12]
 8005ee0:	3307      	adds	r3, #7
 8005ee2:	f023 0307 	bic.w	r3, r3, #7
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	9303      	str	r3, [sp, #12]
 8005eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eec:	443b      	add	r3, r7
 8005eee:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ef0:	e76a      	b.n	8005dc8 <_vfiprintf_r+0x78>
 8005ef2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	2001      	movs	r0, #1
 8005efa:	e7a8      	b.n	8005e4e <_vfiprintf_r+0xfe>
 8005efc:	2300      	movs	r3, #0
 8005efe:	3401      	adds	r4, #1
 8005f00:	9305      	str	r3, [sp, #20]
 8005f02:	4619      	mov	r1, r3
 8005f04:	f04f 0c0a 	mov.w	ip, #10
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f0e:	3a30      	subs	r2, #48	@ 0x30
 8005f10:	2a09      	cmp	r2, #9
 8005f12:	d903      	bls.n	8005f1c <_vfiprintf_r+0x1cc>
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0c6      	beq.n	8005ea6 <_vfiprintf_r+0x156>
 8005f18:	9105      	str	r1, [sp, #20]
 8005f1a:	e7c4      	b.n	8005ea6 <_vfiprintf_r+0x156>
 8005f1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f20:	4604      	mov	r4, r0
 8005f22:	2301      	movs	r3, #1
 8005f24:	e7f0      	b.n	8005f08 <_vfiprintf_r+0x1b8>
 8005f26:	ab03      	add	r3, sp, #12
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	462a      	mov	r2, r5
 8005f2c:	4b12      	ldr	r3, [pc, #72]	@ (8005f78 <_vfiprintf_r+0x228>)
 8005f2e:	a904      	add	r1, sp, #16
 8005f30:	4630      	mov	r0, r6
 8005f32:	f3af 8000 	nop.w
 8005f36:	4607      	mov	r7, r0
 8005f38:	1c78      	adds	r0, r7, #1
 8005f3a:	d1d6      	bne.n	8005eea <_vfiprintf_r+0x19a>
 8005f3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f3e:	07d9      	lsls	r1, r3, #31
 8005f40:	d405      	bmi.n	8005f4e <_vfiprintf_r+0x1fe>
 8005f42:	89ab      	ldrh	r3, [r5, #12]
 8005f44:	059a      	lsls	r2, r3, #22
 8005f46:	d402      	bmi.n	8005f4e <_vfiprintf_r+0x1fe>
 8005f48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f4a:	f7ff f99f 	bl	800528c <__retarget_lock_release_recursive>
 8005f4e:	89ab      	ldrh	r3, [r5, #12]
 8005f50:	065b      	lsls	r3, r3, #25
 8005f52:	f53f af1f 	bmi.w	8005d94 <_vfiprintf_r+0x44>
 8005f56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f58:	e71e      	b.n	8005d98 <_vfiprintf_r+0x48>
 8005f5a:	ab03      	add	r3, sp, #12
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	462a      	mov	r2, r5
 8005f60:	4b05      	ldr	r3, [pc, #20]	@ (8005f78 <_vfiprintf_r+0x228>)
 8005f62:	a904      	add	r1, sp, #16
 8005f64:	4630      	mov	r0, r6
 8005f66:	f7ff fc8d 	bl	8005884 <_printf_i>
 8005f6a:	e7e4      	b.n	8005f36 <_vfiprintf_r+0x1e6>
 8005f6c:	08006b83 	.word	0x08006b83
 8005f70:	08006b8d 	.word	0x08006b8d
 8005f74:	00000000 	.word	0x00000000
 8005f78:	08005d2d 	.word	0x08005d2d
 8005f7c:	08006b89 	.word	0x08006b89

08005f80 <__swbuf_r>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	460e      	mov	r6, r1
 8005f84:	4614      	mov	r4, r2
 8005f86:	4605      	mov	r5, r0
 8005f88:	b118      	cbz	r0, 8005f92 <__swbuf_r+0x12>
 8005f8a:	6a03      	ldr	r3, [r0, #32]
 8005f8c:	b90b      	cbnz	r3, 8005f92 <__swbuf_r+0x12>
 8005f8e:	f7ff f869 	bl	8005064 <__sinit>
 8005f92:	69a3      	ldr	r3, [r4, #24]
 8005f94:	60a3      	str	r3, [r4, #8]
 8005f96:	89a3      	ldrh	r3, [r4, #12]
 8005f98:	071a      	lsls	r2, r3, #28
 8005f9a:	d501      	bpl.n	8005fa0 <__swbuf_r+0x20>
 8005f9c:	6923      	ldr	r3, [r4, #16]
 8005f9e:	b943      	cbnz	r3, 8005fb2 <__swbuf_r+0x32>
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	f000 f82a 	bl	8005ffc <__swsetup_r>
 8005fa8:	b118      	cbz	r0, 8005fb2 <__swbuf_r+0x32>
 8005faa:	f04f 37ff 	mov.w	r7, #4294967295
 8005fae:	4638      	mov	r0, r7
 8005fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	6922      	ldr	r2, [r4, #16]
 8005fb6:	1a98      	subs	r0, r3, r2
 8005fb8:	6963      	ldr	r3, [r4, #20]
 8005fba:	b2f6      	uxtb	r6, r6
 8005fbc:	4283      	cmp	r3, r0
 8005fbe:	4637      	mov	r7, r6
 8005fc0:	dc05      	bgt.n	8005fce <__swbuf_r+0x4e>
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f7ff fe01 	bl	8005bcc <_fflush_r>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	d1ed      	bne.n	8005faa <__swbuf_r+0x2a>
 8005fce:	68a3      	ldr	r3, [r4, #8]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	60a3      	str	r3, [r4, #8]
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	6022      	str	r2, [r4, #0]
 8005fda:	701e      	strb	r6, [r3, #0]
 8005fdc:	6962      	ldr	r2, [r4, #20]
 8005fde:	1c43      	adds	r3, r0, #1
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d004      	beq.n	8005fee <__swbuf_r+0x6e>
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	07db      	lsls	r3, r3, #31
 8005fe8:	d5e1      	bpl.n	8005fae <__swbuf_r+0x2e>
 8005fea:	2e0a      	cmp	r6, #10
 8005fec:	d1df      	bne.n	8005fae <__swbuf_r+0x2e>
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	f7ff fdeb 	bl	8005bcc <_fflush_r>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d0d9      	beq.n	8005fae <__swbuf_r+0x2e>
 8005ffa:	e7d6      	b.n	8005faa <__swbuf_r+0x2a>

08005ffc <__swsetup_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	4b29      	ldr	r3, [pc, #164]	@ (80060a4 <__swsetup_r+0xa8>)
 8006000:	4605      	mov	r5, r0
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	460c      	mov	r4, r1
 8006006:	b118      	cbz	r0, 8006010 <__swsetup_r+0x14>
 8006008:	6a03      	ldr	r3, [r0, #32]
 800600a:	b90b      	cbnz	r3, 8006010 <__swsetup_r+0x14>
 800600c:	f7ff f82a 	bl	8005064 <__sinit>
 8006010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006014:	0719      	lsls	r1, r3, #28
 8006016:	d422      	bmi.n	800605e <__swsetup_r+0x62>
 8006018:	06da      	lsls	r2, r3, #27
 800601a:	d407      	bmi.n	800602c <__swsetup_r+0x30>
 800601c:	2209      	movs	r2, #9
 800601e:	602a      	str	r2, [r5, #0]
 8006020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006024:	81a3      	strh	r3, [r4, #12]
 8006026:	f04f 30ff 	mov.w	r0, #4294967295
 800602a:	e033      	b.n	8006094 <__swsetup_r+0x98>
 800602c:	0758      	lsls	r0, r3, #29
 800602e:	d512      	bpl.n	8006056 <__swsetup_r+0x5a>
 8006030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006032:	b141      	cbz	r1, 8006046 <__swsetup_r+0x4a>
 8006034:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006038:	4299      	cmp	r1, r3
 800603a:	d002      	beq.n	8006042 <__swsetup_r+0x46>
 800603c:	4628      	mov	r0, r5
 800603e:	f7ff f95b 	bl	80052f8 <_free_r>
 8006042:	2300      	movs	r3, #0
 8006044:	6363      	str	r3, [r4, #52]	@ 0x34
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800604c:	81a3      	strh	r3, [r4, #12]
 800604e:	2300      	movs	r3, #0
 8006050:	6063      	str	r3, [r4, #4]
 8006052:	6923      	ldr	r3, [r4, #16]
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	89a3      	ldrh	r3, [r4, #12]
 8006058:	f043 0308 	orr.w	r3, r3, #8
 800605c:	81a3      	strh	r3, [r4, #12]
 800605e:	6923      	ldr	r3, [r4, #16]
 8006060:	b94b      	cbnz	r3, 8006076 <__swsetup_r+0x7a>
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800606c:	d003      	beq.n	8006076 <__swsetup_r+0x7a>
 800606e:	4621      	mov	r1, r4
 8006070:	4628      	mov	r0, r5
 8006072:	f000 f88b 	bl	800618c <__smakebuf_r>
 8006076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800607a:	f013 0201 	ands.w	r2, r3, #1
 800607e:	d00a      	beq.n	8006096 <__swsetup_r+0x9a>
 8006080:	2200      	movs	r2, #0
 8006082:	60a2      	str	r2, [r4, #8]
 8006084:	6962      	ldr	r2, [r4, #20]
 8006086:	4252      	negs	r2, r2
 8006088:	61a2      	str	r2, [r4, #24]
 800608a:	6922      	ldr	r2, [r4, #16]
 800608c:	b942      	cbnz	r2, 80060a0 <__swsetup_r+0xa4>
 800608e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006092:	d1c5      	bne.n	8006020 <__swsetup_r+0x24>
 8006094:	bd38      	pop	{r3, r4, r5, pc}
 8006096:	0799      	lsls	r1, r3, #30
 8006098:	bf58      	it	pl
 800609a:	6962      	ldrpl	r2, [r4, #20]
 800609c:	60a2      	str	r2, [r4, #8]
 800609e:	e7f4      	b.n	800608a <__swsetup_r+0x8e>
 80060a0:	2000      	movs	r0, #0
 80060a2:	e7f7      	b.n	8006094 <__swsetup_r+0x98>
 80060a4:	20000104 	.word	0x20000104

080060a8 <_raise_r>:
 80060a8:	291f      	cmp	r1, #31
 80060aa:	b538      	push	{r3, r4, r5, lr}
 80060ac:	4605      	mov	r5, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	d904      	bls.n	80060bc <_raise_r+0x14>
 80060b2:	2316      	movs	r3, #22
 80060b4:	6003      	str	r3, [r0, #0]
 80060b6:	f04f 30ff 	mov.w	r0, #4294967295
 80060ba:	bd38      	pop	{r3, r4, r5, pc}
 80060bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80060be:	b112      	cbz	r2, 80060c6 <_raise_r+0x1e>
 80060c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060c4:	b94b      	cbnz	r3, 80060da <_raise_r+0x32>
 80060c6:	4628      	mov	r0, r5
 80060c8:	f000 f830 	bl	800612c <_getpid_r>
 80060cc:	4622      	mov	r2, r4
 80060ce:	4601      	mov	r1, r0
 80060d0:	4628      	mov	r0, r5
 80060d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060d6:	f000 b817 	b.w	8006108 <_kill_r>
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d00a      	beq.n	80060f4 <_raise_r+0x4c>
 80060de:	1c59      	adds	r1, r3, #1
 80060e0:	d103      	bne.n	80060ea <_raise_r+0x42>
 80060e2:	2316      	movs	r3, #22
 80060e4:	6003      	str	r3, [r0, #0]
 80060e6:	2001      	movs	r0, #1
 80060e8:	e7e7      	b.n	80060ba <_raise_r+0x12>
 80060ea:	2100      	movs	r1, #0
 80060ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80060f0:	4620      	mov	r0, r4
 80060f2:	4798      	blx	r3
 80060f4:	2000      	movs	r0, #0
 80060f6:	e7e0      	b.n	80060ba <_raise_r+0x12>

080060f8 <raise>:
 80060f8:	4b02      	ldr	r3, [pc, #8]	@ (8006104 <raise+0xc>)
 80060fa:	4601      	mov	r1, r0
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	f7ff bfd3 	b.w	80060a8 <_raise_r>
 8006102:	bf00      	nop
 8006104:	20000104 	.word	0x20000104

08006108 <_kill_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	4d07      	ldr	r5, [pc, #28]	@ (8006128 <_kill_r+0x20>)
 800610c:	2300      	movs	r3, #0
 800610e:	4604      	mov	r4, r0
 8006110:	4608      	mov	r0, r1
 8006112:	4611      	mov	r1, r2
 8006114:	602b      	str	r3, [r5, #0]
 8006116:	f7fb f87c 	bl	8001212 <_kill>
 800611a:	1c43      	adds	r3, r0, #1
 800611c:	d102      	bne.n	8006124 <_kill_r+0x1c>
 800611e:	682b      	ldr	r3, [r5, #0]
 8006120:	b103      	cbz	r3, 8006124 <_kill_r+0x1c>
 8006122:	6023      	str	r3, [r4, #0]
 8006124:	bd38      	pop	{r3, r4, r5, pc}
 8006126:	bf00      	nop
 8006128:	200009ec 	.word	0x200009ec

0800612c <_getpid_r>:
 800612c:	f7fb b869 	b.w	8001202 <_getpid>

08006130 <_malloc_usable_size_r>:
 8006130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006134:	1f18      	subs	r0, r3, #4
 8006136:	2b00      	cmp	r3, #0
 8006138:	bfbc      	itt	lt
 800613a:	580b      	ldrlt	r3, [r1, r0]
 800613c:	18c0      	addlt	r0, r0, r3
 800613e:	4770      	bx	lr

08006140 <__swhatbuf_r>:
 8006140:	b570      	push	{r4, r5, r6, lr}
 8006142:	460c      	mov	r4, r1
 8006144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006148:	2900      	cmp	r1, #0
 800614a:	b096      	sub	sp, #88	@ 0x58
 800614c:	4615      	mov	r5, r2
 800614e:	461e      	mov	r6, r3
 8006150:	da0d      	bge.n	800616e <__swhatbuf_r+0x2e>
 8006152:	89a3      	ldrh	r3, [r4, #12]
 8006154:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006158:	f04f 0100 	mov.w	r1, #0
 800615c:	bf14      	ite	ne
 800615e:	2340      	movne	r3, #64	@ 0x40
 8006160:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006164:	2000      	movs	r0, #0
 8006166:	6031      	str	r1, [r6, #0]
 8006168:	602b      	str	r3, [r5, #0]
 800616a:	b016      	add	sp, #88	@ 0x58
 800616c:	bd70      	pop	{r4, r5, r6, pc}
 800616e:	466a      	mov	r2, sp
 8006170:	f000 f848 	bl	8006204 <_fstat_r>
 8006174:	2800      	cmp	r0, #0
 8006176:	dbec      	blt.n	8006152 <__swhatbuf_r+0x12>
 8006178:	9901      	ldr	r1, [sp, #4]
 800617a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800617e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006182:	4259      	negs	r1, r3
 8006184:	4159      	adcs	r1, r3
 8006186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800618a:	e7eb      	b.n	8006164 <__swhatbuf_r+0x24>

0800618c <__smakebuf_r>:
 800618c:	898b      	ldrh	r3, [r1, #12]
 800618e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006190:	079d      	lsls	r5, r3, #30
 8006192:	4606      	mov	r6, r0
 8006194:	460c      	mov	r4, r1
 8006196:	d507      	bpl.n	80061a8 <__smakebuf_r+0x1c>
 8006198:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800619c:	6023      	str	r3, [r4, #0]
 800619e:	6123      	str	r3, [r4, #16]
 80061a0:	2301      	movs	r3, #1
 80061a2:	6163      	str	r3, [r4, #20]
 80061a4:	b003      	add	sp, #12
 80061a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061a8:	ab01      	add	r3, sp, #4
 80061aa:	466a      	mov	r2, sp
 80061ac:	f7ff ffc8 	bl	8006140 <__swhatbuf_r>
 80061b0:	9f00      	ldr	r7, [sp, #0]
 80061b2:	4605      	mov	r5, r0
 80061b4:	4639      	mov	r1, r7
 80061b6:	4630      	mov	r0, r6
 80061b8:	f7ff f912 	bl	80053e0 <_malloc_r>
 80061bc:	b948      	cbnz	r0, 80061d2 <__smakebuf_r+0x46>
 80061be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061c2:	059a      	lsls	r2, r3, #22
 80061c4:	d4ee      	bmi.n	80061a4 <__smakebuf_r+0x18>
 80061c6:	f023 0303 	bic.w	r3, r3, #3
 80061ca:	f043 0302 	orr.w	r3, r3, #2
 80061ce:	81a3      	strh	r3, [r4, #12]
 80061d0:	e7e2      	b.n	8006198 <__smakebuf_r+0xc>
 80061d2:	89a3      	ldrh	r3, [r4, #12]
 80061d4:	6020      	str	r0, [r4, #0]
 80061d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061da:	81a3      	strh	r3, [r4, #12]
 80061dc:	9b01      	ldr	r3, [sp, #4]
 80061de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80061e2:	b15b      	cbz	r3, 80061fc <__smakebuf_r+0x70>
 80061e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061e8:	4630      	mov	r0, r6
 80061ea:	f000 f81d 	bl	8006228 <_isatty_r>
 80061ee:	b128      	cbz	r0, 80061fc <__smakebuf_r+0x70>
 80061f0:	89a3      	ldrh	r3, [r4, #12]
 80061f2:	f023 0303 	bic.w	r3, r3, #3
 80061f6:	f043 0301 	orr.w	r3, r3, #1
 80061fa:	81a3      	strh	r3, [r4, #12]
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	431d      	orrs	r5, r3
 8006200:	81a5      	strh	r5, [r4, #12]
 8006202:	e7cf      	b.n	80061a4 <__smakebuf_r+0x18>

08006204 <_fstat_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	4d07      	ldr	r5, [pc, #28]	@ (8006224 <_fstat_r+0x20>)
 8006208:	2300      	movs	r3, #0
 800620a:	4604      	mov	r4, r0
 800620c:	4608      	mov	r0, r1
 800620e:	4611      	mov	r1, r2
 8006210:	602b      	str	r3, [r5, #0]
 8006212:	f7fb f85e 	bl	80012d2 <_fstat>
 8006216:	1c43      	adds	r3, r0, #1
 8006218:	d102      	bne.n	8006220 <_fstat_r+0x1c>
 800621a:	682b      	ldr	r3, [r5, #0]
 800621c:	b103      	cbz	r3, 8006220 <_fstat_r+0x1c>
 800621e:	6023      	str	r3, [r4, #0]
 8006220:	bd38      	pop	{r3, r4, r5, pc}
 8006222:	bf00      	nop
 8006224:	200009ec 	.word	0x200009ec

08006228 <_isatty_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4d06      	ldr	r5, [pc, #24]	@ (8006244 <_isatty_r+0x1c>)
 800622c:	2300      	movs	r3, #0
 800622e:	4604      	mov	r4, r0
 8006230:	4608      	mov	r0, r1
 8006232:	602b      	str	r3, [r5, #0]
 8006234:	f7fb f85d 	bl	80012f2 <_isatty>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d102      	bne.n	8006242 <_isatty_r+0x1a>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	b103      	cbz	r3, 8006242 <_isatty_r+0x1a>
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	200009ec 	.word	0x200009ec

08006248 <_init>:
 8006248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624a:	bf00      	nop
 800624c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624e:	bc08      	pop	{r3}
 8006250:	469e      	mov	lr, r3
 8006252:	4770      	bx	lr

08006254 <_fini>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	bf00      	nop
 8006258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625a:	bc08      	pop	{r3}
 800625c:	469e      	mov	lr, r3
 800625e:	4770      	bx	lr
