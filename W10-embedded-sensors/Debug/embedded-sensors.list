
embedded-sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a1c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08007bb0  08007bb0  00008bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f90  08007f90  00009280  2**0
                  CONTENTS
  4 .ARM          00000008  08007f90  08007f90  00008f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f98  08007f98  00009280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f98  08007f98  00008f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f9c  08007f9c  00008f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  08007fa0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009280  2**0
                  CONTENTS
 10 .bss          00000588  20000280  20000280  00009280  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000808  20000808  00009280  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009280  2**0
                  CONTENTS, READONLY
 13 .debug_info   000106bd  00000000  00000000  000092b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e2a  00000000  00000000  0001996d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  0001c798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b29  00000000  00000000  0001d658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003d12e  00000000  00000000  0001e181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014729  00000000  00000000  0005b2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7abb  00000000  00000000  0006f9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00157493  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c54  00000000  00000000  001574d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000aa  00000000  00000000  0015c12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000280 	.word	0x20000280
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b94 	.word	0x08007b94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000284 	.word	0x20000284
 80001cc:	08007b94 	.word	0x08007b94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <initialise_board>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_USB_PCD_Init(void);

void initialise_board() {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fd62 	bl	8001674 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f828 	bl	8000c04 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 f928 	bl	8000e08 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bb8:	f000 f886 	bl	8000cc8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000bbc:	f000 f8c4 	bl	8000d48 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000bc0:	f000 f900 	bl	8000dc4 <MX_USB_PCD_Init>
  
  BSP_GYRO_Init();
 8000bc4:	f003 fba4 	bl	8004310 <BSP_GYRO_Init>

  RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <initialise_board+0x54>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000bfc <initialise_board+0x54>)
 8000bce:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 8000bd2:	6153      	str	r3, [r2, #20]

  RCC->APB1ENR |=  RCC_APB1ENR_TIM2EN;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <initialise_board+0x54>)
 8000bd6:	69db      	ldr	r3, [r3, #28]
 8000bd8:	4a08      	ldr	r2, [pc, #32]	@ (8000bfc <initialise_board+0x54>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	61d3      	str	r3, [r2, #28]
  RCC->APB1ENR |=  RCC_APB1ENR_TIM3EN;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <initialise_board+0x54>)
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	4a05      	ldr	r2, [pc, #20]	@ (8000bfc <initialise_board+0x54>)
 8000be6:	f043 0302 	orr.w	r3, r3, #2
 8000bea:	61d3      	str	r3, [r2, #28]

  SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000bec:	2200      	movs	r2, #0
 8000bee:	4904      	ldr	r1, [pc, #16]	@ (8000c00 <initialise_board+0x58>)
 8000bf0:	2004      	movs	r0, #4
 8000bf2:	f000 fa1d 	bl	8001030 <SerialInitialise>
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	20000000 	.word	0x20000000

08000c04 <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b09e      	sub	sp, #120	@ 0x78
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c0e:	2228      	movs	r2, #40	@ 0x28
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f004 fef3 	bl	80059fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c28:	463b      	mov	r3, r7
 8000c2a:	223c      	movs	r2, #60	@ 0x3c
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f004 fee5 	bl	80059fe <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c34:	2303      	movs	r3, #3
 8000c36:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c38:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c3c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c42:	2301      	movs	r3, #1
 8000c44:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c46:	2310      	movs	r3, #16
 8000c48:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c52:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c54:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c58:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 fade 	bl	8002220 <HAL_RCC_OscConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c6a:	f000 f94b 	bl	8000f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	230f      	movs	r3, #15
 8000c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c72:	2302      	movs	r3, #2
 8000c74:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c84:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f002 fb06 	bl	800329c <HAL_RCC_ClockConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c96:	f000 f935 	bl	8000f04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <SystemClock_Config+0xc0>)
 8000c9c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000ca2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 fcdc 	bl	8003668 <HAL_RCCEx_PeriphCLKConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000cb6:	f000 f925 	bl	8000f04 <Error_Handler>
  }
}
 8000cba:	bf00      	nop
 8000cbc:	3778      	adds	r7, #120	@ 0x78
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	00020020 	.word	0x00020020

08000cc8 <MX_I2C1_Init>:

// I2C1 Initialization Function
static void MX_I2C1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000cce:	4a1c      	ldr	r2, [pc, #112]	@ (8000d40 <MX_I2C1_Init+0x78>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d44 <MX_I2C1_Init+0x7c>)
 8000cd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cde:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cea:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d02:	480e      	ldr	r0, [pc, #56]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000d04:	f001 f894 	bl	8001e30 <HAL_I2C_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d0e:	f000 f8f9 	bl	8000f04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d12:	2100      	movs	r1, #0
 8000d14:	4809      	ldr	r0, [pc, #36]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000d16:	f001 f91a 	bl	8001f4e <HAL_I2CEx_ConfigAnalogFilter>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d20:	f000 f8f0 	bl	8000f04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d24:	2100      	movs	r1, #0
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_I2C1_Init+0x74>)
 8000d28:	f001 f95c 	bl	8001fe4 <HAL_I2CEx_ConfigDigitalFilter>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d32:	f000 f8e7 	bl	8000f04 <Error_Handler>
  }
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000029c 	.word	0x2000029c
 8000d40:	40005400 	.word	0x40005400
 8000d44:	2000090e 	.word	0x2000090e

08000d48 <MX_SPI1_Init>:

// SPI1 Initialization Function
static void MX_SPI1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dbc <MX_SPI1_Init+0x74>)
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc0 <MX_SPI1_Init+0x78>)
 8000d50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <MX_SPI1_Init+0x74>)
 8000d54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d5a:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <MX_SPI1_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d60:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <MX_SPI1_Init+0x74>)
 8000d62:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d68:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <MX_SPI1_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <MX_SPI1_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d74:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <MX_SPI1_Init+0x74>)
 8000d76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <MX_SPI1_Init+0x74>)
 8000d7e:	2208      	movs	r2, #8
 8000d80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <MX_SPI1_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <MX_SPI1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <MX_SPI1_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d94:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <MX_SPI1_Init+0x74>)
 8000d96:	2207      	movs	r2, #7
 8000d98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <MX_SPI1_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <MX_SPI1_Init+0x74>)
 8000da2:	2208      	movs	r2, #8
 8000da4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <MX_SPI1_Init+0x74>)
 8000da8:	f002 fe0e 	bl	80039c8 <HAL_SPI_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000db2:	f000 f8a7 	bl	8000f04 <Error_Handler>
  }
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200002f0 	.word	0x200002f0
 8000dc0:	40013000 	.word	0x40013000

08000dc4 <MX_USB_PCD_Init>:

// USB Initialization Function
static void MX_USB_PCD_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  hpcd_USB_FS.Instance = USB;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <MX_USB_PCD_Init+0x3c>)
 8000dca:	4a0e      	ldr	r2, [pc, #56]	@ (8000e04 <MX_USB_PCD_Init+0x40>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <MX_USB_PCD_Init+0x3c>)
 8000dd0:	2208      	movs	r2, #8
 8000dd2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <MX_USB_PCD_Init+0x3c>)
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <MX_USB_PCD_Init+0x3c>)
 8000ddc:	2202      	movs	r2, #2
 8000dde:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <MX_USB_PCD_Init+0x3c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <MX_USB_PCD_Init+0x3c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000dec:	4804      	ldr	r0, [pc, #16]	@ (8000e00 <MX_USB_PCD_Init+0x3c>)
 8000dee:	f001 f945 	bl	800207c <HAL_PCD_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000df8:	f000 f884 	bl	8000f04 <Error_Handler>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000354 	.word	0x20000354
 8000e04:	40005c00 	.word	0x40005c00

08000e08 <MX_GPIO_Init>:

// GPIO Initialization Function
static void MX_GPIO_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1e:	4b37      	ldr	r3, [pc, #220]	@ (8000efc <MX_GPIO_Init+0xf4>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	4a36      	ldr	r2, [pc, #216]	@ (8000efc <MX_GPIO_Init+0xf4>)
 8000e24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e28:	6153      	str	r3, [r2, #20]
 8000e2a:	4b34      	ldr	r3, [pc, #208]	@ (8000efc <MX_GPIO_Init+0xf4>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	4b31      	ldr	r3, [pc, #196]	@ (8000efc <MX_GPIO_Init+0xf4>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a30      	ldr	r2, [pc, #192]	@ (8000efc <MX_GPIO_Init+0xf4>)
 8000e3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e40:	6153      	str	r3, [r2, #20]
 8000e42:	4b2e      	ldr	r3, [pc, #184]	@ (8000efc <MX_GPIO_Init+0xf4>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000efc <MX_GPIO_Init+0xf4>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	4a2a      	ldr	r2, [pc, #168]	@ (8000efc <MX_GPIO_Init+0xf4>)
 8000e54:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e58:	6153      	str	r3, [r2, #20]
 8000e5a:	4b28      	ldr	r3, [pc, #160]	@ (8000efc <MX_GPIO_Init+0xf4>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b25      	ldr	r3, [pc, #148]	@ (8000efc <MX_GPIO_Init+0xf4>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4a24      	ldr	r2, [pc, #144]	@ (8000efc <MX_GPIO_Init+0xf4>)
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e70:	6153      	str	r3, [r2, #20]
 8000e72:	4b22      	ldr	r3, [pc, #136]	@ (8000efc <MX_GPIO_Init+0xf4>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <MX_GPIO_Init+0xf4>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	4a1e      	ldr	r2, [pc, #120]	@ (8000efc <MX_GPIO_Init+0xf4>)
 8000e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e88:	6153      	str	r3, [r2, #20]
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <MX_GPIO_Init+0xf4>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000e96:	2200      	movs	r2, #0
 8000e98:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000e9c:	4818      	ldr	r0, [pc, #96]	@ (8000f00 <MX_GPIO_Init+0xf8>)
 8000e9e:	f000 ffaf 	bl	8001e00 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000ea2:	2337      	movs	r3, #55	@ 0x37
 8000ea4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ea6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4812      	ldr	r0, [pc, #72]	@ (8000f00 <MX_GPIO_Init+0xf8>)
 8000eb8:	f000 fd4c 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000ebc:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000ec0:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480a      	ldr	r0, [pc, #40]	@ (8000f00 <MX_GPIO_Init+0xf8>)
 8000ed6:	f000 fd3d 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eda:	2301      	movs	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef0:	f000 fd30 	bl	8001954 <HAL_GPIO_Init>
}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	@ 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40021000 	.word	0x40021000
 8000f00:	48001000 	.word	0x48001000

08000f04 <Error_Handler>:

// This function is executed in case of error occurrence.
void Error_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
}
 8000f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <Error_Handler+0x8>

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b5b0      	push	{r4, r5, r7, lr}
 8000f12:	b094      	sub	sp, #80	@ 0x50
 8000f14:	af00      	add	r7, sp, #0
	initialise_board();
 8000f16:	f7ff fe47 	bl	8000ba8 <initialise_board>

	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	493d      	ldr	r1, [pc, #244]	@ (8001014 <main+0x104>)
 8000f1e:	2004      	movs	r0, #4
 8000f20:	f000 f886 	bl	8001030 <SerialInitialise>
	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000f24:	4b3c      	ldr	r3, [pc, #240]	@ (8001018 <main+0x108>)
 8000f26:	f107 040c 	add.w	r4, r7, #12
 8000f2a:	461d      	mov	r5, r3
 8000f2c:	6828      	ldr	r0, [r5, #0]
 8000f2e:	6869      	ldr	r1, [r5, #4]
 8000f30:	68aa      	ldr	r2, [r5, #8]
 8000f32:	68eb      	ldr	r3, [r5, #12]
 8000f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f36:	6928      	ldr	r0, [r5, #16]
 8000f38:	6020      	str	r0, [r4, #0]
 8000f3a:	7d2b      	ldrb	r3, [r5, #20]
 8000f3c:	7123      	strb	r3, [r4, #4]
 8000f3e:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8000f42:	222b      	movs	r2, #43	@ 0x2b
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f004 fd59 	bl	80059fe <memset>
	uint8_t outcome;

	while (1){
		//trigger_oneshot(10000,&set_timesUp);

		while (*timesUp == 0) {
 8000f4c:	e050      	b.n	8000ff0 <main+0xe0>
			outcome = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

			while (!outcome){
 8000f54:	e023      	b.n	8000f9e <main+0x8e>
				BSP_GYRO_GetXYZ(&gyro_values[0]);
 8000f56:	463b      	mov	r3, r7
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f003 fa8d 	bl	8004478 <BSP_GYRO_GetXYZ>
				if (gyro_values[1]/20000 <= -25){
 8000f5e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f62:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 800101c <main+0x10c>
 8000f66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6a:	eebb 7a09 	vmov.f32	s14, #185	@ 0xc1c80000 -25.0
 8000f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f76:	d802      	bhi.n	8000f7e <main+0x6e>
					outcome = 1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				}
				if (gyro_values[1]/20000 >= 25){
 8000f7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f82:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800101c <main+0x10c>
 8000f86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f8a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f96:	db02      	blt.n	8000f9e <main+0x8e>
					outcome = 2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			while (!outcome){
 8000f9e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0d7      	beq.n	8000f56 <main+0x46>
				}
			}

			if (outcome == 1){
 8000fa6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d10c      	bne.n	8000fc8 <main+0xb8>
				sprintf(string_to_send, "Correct!\r\n");
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	491b      	ldr	r1, [pc, #108]	@ (8001020 <main+0x110>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 fcbf 	bl	8005938 <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	4915      	ldr	r1, [pc, #84]	@ (8001014 <main+0x104>)
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f8c2 	bl	800114a <SerialOutputString>
 8000fc6:	e00f      	b.n	8000fe8 <main+0xd8>
			}
			else if (outcome == 2){
 8000fc8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d10b      	bne.n	8000fe8 <main+0xd8>
				sprintf(string_to_send, "Pass!\r\n");
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	4913      	ldr	r1, [pc, #76]	@ (8001024 <main+0x114>)
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f004 fcae 	bl	8005938 <siprintf>
				SerialOutputString(string_to_send, &USART1_PORT);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	490c      	ldr	r1, [pc, #48]	@ (8001014 <main+0x104>)
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f8b1 	bl	800114a <SerialOutputString>
			}
			HAL_Delay(500);
 8000fe8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fec:	f000 fba8 	bl	8001740 <HAL_Delay>
		while (*timesUp == 0) {
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <main+0x118>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0a9      	beq.n	8000f4e <main+0x3e>
		}

		sprintf(string_to_send, "Time's Up!\r\n");
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	490b      	ldr	r1, [pc, #44]	@ (800102c <main+0x11c>)
 8001000:	4618      	mov	r0, r3
 8001002:	f004 fc99 	bl	8005938 <siprintf>
		SerialOutputString(string_to_send, &USART1_PORT);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4902      	ldr	r1, [pc, #8]	@ (8001014 <main+0x104>)
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f89c 	bl	800114a <SerialOutputString>
		while (*timesUp == 0) {
 8001012:	e7ed      	b.n	8000ff0 <main+0xe0>
 8001014:	20000000 	.word	0x20000000
 8001018:	08007bd4 	.word	0x08007bd4
 800101c:	469c4000 	.word	0x469c4000
 8001020:	08007bb0 	.word	0x08007bb0
 8001024:	08007bbc 	.word	0x08007bbc
 8001028:	20000640 	.word	0x20000640
 800102c:	08007bc4 	.word	0x08007bc4

08001030 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	63da      	str	r2, [r3, #60]	@ 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001042:	4b34      	ldr	r3, [pc, #208]	@ (8001114 <SerialInitialise+0xe4>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	4a33      	ldr	r2, [pc, #204]	@ (8001114 <SerialInitialise+0xe4>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800104c:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800104e:	4b31      	ldr	r3, [pc, #196]	@ (8001114 <SerialInitialise+0xe4>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	4a30      	ldr	r2, [pc, #192]	@ (8001114 <SerialInitialise+0xe4>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d106      	bne.n	8001070 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8001062:	4b2c      	ldr	r3, [pc, #176]	@ (8001114 <SerialInitialise+0xe4>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a2b      	ldr	r2, [pc, #172]	@ (8001114 <SerialInitialise+0xe4>)
 8001068:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800106c:	6153      	str	r3, [r2, #20]
		break;
 800106e:	e000      	b.n	8001072 <SerialInitialise+0x42>
	default:
		break;
 8001070:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800107a:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001084:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	69d9      	ldr	r1, [r3, #28]
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d821      	bhi.n	80010f6 <SerialInitialise+0xc6>
 80010b2:	a201      	add	r2, pc, #4	@ (adr r2, 80010b8 <SerialInitialise+0x88>)
 80010b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b8:	080010cd 	.word	0x080010cd
 80010bc:	080010d5 	.word	0x080010d5
 80010c0:	080010dd 	.word	0x080010dd
 80010c4:	080010e5 	.word	0x080010e5
 80010c8:	080010ed 	.word	0x080010ed
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	2246      	movs	r2, #70	@ 0x46
 80010d0:	801a      	strh	r2, [r3, #0]
		break;
 80010d2:	e010      	b.n	80010f6 <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	2246      	movs	r2, #70	@ 0x46
 80010d8:	801a      	strh	r2, [r3, #0]
		break;
 80010da:	e00c      	b.n	80010f6 <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	2246      	movs	r2, #70	@ 0x46
 80010e0:	801a      	strh	r2, [r3, #0]
		break;
 80010e2:	e008      	b.n	80010f6 <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	2246      	movs	r2, #70	@ 0x46
 80010e8:	801a      	strh	r2, [r3, #0]
		break;
 80010ea:	e004      	b.n	80010f6 <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 80010f2:	801a      	strh	r2, [r3, #0]
		break;
 80010f4:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f042 020d 	orr.w	r2, r2, #13
 8001104:	601a      	str	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000

08001118 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8001124:	bf00      	nop
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f8      	beq.n	8001126 <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	79fa      	ldrb	r2, [r7, #7]
 800113a:	b292      	uxth	r2, r2
 800113c:	801a      	strh	r2, [r3, #0]
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8001158:	e00b      	b.n	8001172 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	6839      	ldr	r1, [r7, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ffd9 	bl	8001118 <SerialOutputChar>
		counter++;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
		pt++;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3301      	adds	r3, #1
 8001170:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1ef      	bne.n	800115a <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	4798      	blx	r3
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <HAL_MspInit+0x44>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	4a0e      	ldr	r2, [pc, #56]	@ (80011d8 <HAL_MspInit+0x44>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6193      	str	r3, [r2, #24]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <HAL_MspInit+0x44>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <HAL_MspInit+0x44>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4a08      	ldr	r2, [pc, #32]	@ (80011d8 <HAL_MspInit+0x44>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011bc:	61d3      	str	r3, [r2, #28]
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <HAL_MspInit+0x44>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ca:	2007      	movs	r0, #7
 80011cc:	f000 fb8e 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40021000 	.word	0x40021000

080011dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a17      	ldr	r2, [pc, #92]	@ (8001258 <HAL_I2C_MspInit+0x7c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d127      	bne.n	800124e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b17      	ldr	r3, [pc, #92]	@ (800125c <HAL_I2C_MspInit+0x80>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a16      	ldr	r2, [pc, #88]	@ (800125c <HAL_I2C_MspInit+0x80>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001208:	6153      	str	r3, [r2, #20]
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <HAL_I2C_MspInit+0x80>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001216:	23c0      	movs	r3, #192	@ 0xc0
 8001218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800121a:	2312      	movs	r3, #18
 800121c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800121e:	2301      	movs	r3, #1
 8001220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001226:	2304      	movs	r3, #4
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	480b      	ldr	r0, [pc, #44]	@ (8001260 <HAL_I2C_MspInit+0x84>)
 8001232:	f000 fb8f 	bl	8001954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <HAL_I2C_MspInit+0x80>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a08      	ldr	r2, [pc, #32]	@ (800125c <HAL_I2C_MspInit+0x80>)
 800123c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_I2C_MspInit+0x80>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	@ 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40005400 	.word	0x40005400
 800125c:	40021000 	.word	0x40021000
 8001260:	48000400 	.word	0x48000400

08001264 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a17      	ldr	r2, [pc, #92]	@ (80012e0 <HAL_SPI_MspInit+0x7c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d128      	bne.n	80012d8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <HAL_SPI_MspInit+0x80>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	4a16      	ldr	r2, [pc, #88]	@ (80012e4 <HAL_SPI_MspInit+0x80>)
 800128c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001290:	6193      	str	r3, [r2, #24]
 8001292:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <HAL_SPI_MspInit+0x80>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <HAL_SPI_MspInit+0x80>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	4a10      	ldr	r2, [pc, #64]	@ (80012e4 <HAL_SPI_MspInit+0x80>)
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a8:	6153      	str	r3, [r2, #20]
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <HAL_SPI_MspInit+0x80>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80012b6:	23e0      	movs	r3, #224	@ 0xe0
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012c6:	2305      	movs	r3, #5
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d4:	f000 fb3e 	bl	8001954 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	@ 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40013000 	.word	0x40013000
 80012e4:	40021000 	.word	0x40021000

080012e8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a08      	ldr	r2, [pc, #32]	@ (8001318 <HAL_SPI_MspDeInit+0x30>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d10a      	bne.n	8001310 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80012fa:	4b08      	ldr	r3, [pc, #32]	@ (800131c <HAL_SPI_MspDeInit+0x34>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	4a07      	ldr	r2, [pc, #28]	@ (800131c <HAL_SPI_MspDeInit+0x34>)
 8001300:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001304:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 8001306:	21e0      	movs	r1, #224	@ 0xe0
 8001308:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130c:	f000 fc9c 	bl	8001c48 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40013000 	.word	0x40013000
 800131c:	40021000 	.word	0x40021000

08001320 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a18      	ldr	r2, [pc, #96]	@ (80013a0 <HAL_PCD_MspInit+0x80>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d129      	bne.n	8001396 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <HAL_PCD_MspInit+0x84>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <HAL_PCD_MspInit+0x84>)
 8001348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800134c:	6153      	str	r3, [r2, #20]
 800134e:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <HAL_PCD_MspInit+0x84>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800135a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800136c:	230e      	movs	r3, #14
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137a:	f000 faeb 	bl	8001954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <HAL_PCD_MspInit+0x84>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a08      	ldr	r2, [pc, #32]	@ (80013a4 <HAL_PCD_MspInit+0x84>)
 8001384:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <HAL_PCD_MspInit+0x84>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	@ 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40005c00 	.word	0x40005c00
 80013a4:	40021000 	.word	0x40021000

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <NMI_Handler+0x4>

080013b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <HardFault_Handler+0x4>

080013b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <MemManage_Handler+0x4>

080013c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <UsageFault_Handler+0x4>

080013d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fe:	f000 f97f 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}

08001406 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
	return 1;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <_kill>:

int _kill(int pid, int sig)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001420:	f004 fb40 	bl	8005aa4 <__errno>
 8001424:	4603      	mov	r3, r0
 8001426:	2216      	movs	r2, #22
 8001428:	601a      	str	r2, [r3, #0]
	return -1;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <_exit>:

void _exit (int status)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800143e:	f04f 31ff 	mov.w	r1, #4294967295
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffe7 	bl	8001416 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <_exit+0x12>

0800144c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	e00a      	b.n	8001474 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800145e:	f3af 8000 	nop.w
 8001462:	4601      	mov	r1, r0
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	60ba      	str	r2, [r7, #8]
 800146a:	b2ca      	uxtb	r2, r1
 800146c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	dbf0      	blt.n	800145e <_read+0x12>
	}

return len;
 800147c:	687b      	ldr	r3, [r7, #4]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	e009      	b.n	80014ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	60ba      	str	r2, [r7, #8]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbf1      	blt.n	8001498 <_write+0x12>
	}
	return len;
 80014b4:	687b      	ldr	r3, [r7, #4]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_close>:

int _close(int file)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
	return -1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014e6:	605a      	str	r2, [r3, #4]
	return 0;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <_isatty>:

int _isatty(int file)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
	return 1;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
	return 0;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001530:	4a14      	ldr	r2, [pc, #80]	@ (8001584 <_sbrk+0x5c>)
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <_sbrk+0x60>)
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800153c:	4b13      	ldr	r3, [pc, #76]	@ (800158c <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <_sbrk+0x64>)
 8001546:	4a12      	ldr	r2, [pc, #72]	@ (8001590 <_sbrk+0x68>)
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <_sbrk+0x64>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	429a      	cmp	r2, r3
 8001556:	d207      	bcs.n	8001568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001558:	f004 faa4 	bl	8005aa4 <__errno>
 800155c:	4603      	mov	r3, r0
 800155e:	220c      	movs	r2, #12
 8001560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
 8001566:	e009      	b.n	800157c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156e:	4b07      	ldr	r3, [pc, #28]	@ (800158c <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	4a05      	ldr	r2, [pc, #20]	@ (800158c <_sbrk+0x64>)
 8001578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	2000a000 	.word	0x2000a000
 8001588:	00000400 	.word	0x00000400
 800158c:	20000644 	.word	0x20000644
 8001590:	20000808 	.word	0x20000808

08001594 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	@ (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <TIM2_IRQHandler>:

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}

void TIM2_IRQHandler(){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	// run the continuous timer interrupt handler
	if (TIM2->SR & TIM_SR_UIF) {
 80015bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00a      	beq.n	80015e0 <TIM2_IRQHandler+0x28>
		TIM2->SR &= ~TIM_SR_UIF; // clear continuous timer interrupt
 80015ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	6113      	str	r3, [r2, #16]
		continuous_callback_function();
 80015da:	4b02      	ldr	r3, [pc, #8]	@ (80015e4 <TIM2_IRQHandler+0x2c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4798      	blx	r3
	}

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000648 	.word	0x20000648

080015e8 <TIM3_IRQHandler>:

	enable_interrupt(TIM2_IRQn);

}

void TIM3_IRQHandler(){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
// run the oneshot timer interrupt handler
	if (TIM3->SR & TIM_SR_UIF) {
 80015ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <TIM3_IRQHandler+0x30>)
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00c      	beq.n	8001612 <TIM3_IRQHandler+0x2a>
		// clear oneshot timer interrupt
		TIM3->SR &= ~TIM_SR_UIF;
 80015f8:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <TIM3_IRQHandler+0x30>)
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	4a06      	ldr	r2, [pc, #24]	@ (8001618 <TIM3_IRQHandler+0x30>)
 80015fe:	f023 0301 	bic.w	r3, r3, #1
 8001602:	6113      	str	r3, [r2, #16]

		if (oneshot_callback_function != NULL)
 8001604:	4b05      	ldr	r3, [pc, #20]	@ (800161c <TIM3_IRQHandler+0x34>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <TIM3_IRQHandler+0x2a>
		{
			oneshot_callback_function();
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <TIM3_IRQHandler+0x34>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4798      	blx	r3
		}

	}

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40000400 	.word	0x40000400
 800161c:	2000064c 	.word	0x2000064c

08001620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001620:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001658 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001624:	f7ff ffb6 	bl	8001594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001628:	480c      	ldr	r0, [pc, #48]	@ (800165c <LoopForever+0x6>)
  ldr r1, =_edata
 800162a:	490d      	ldr	r1, [pc, #52]	@ (8001660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800162c:	4a0d      	ldr	r2, [pc, #52]	@ (8001664 <LoopForever+0xe>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001640:	4c0a      	ldr	r4, [pc, #40]	@ (800166c <LoopForever+0x16>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164e:	f004 fa2f 	bl	8005ab0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001652:	f7ff fc5d 	bl	8000f10 <main>

08001656 <LoopForever>:

LoopForever:
    b LoopForever
 8001656:	e7fe      	b.n	8001656 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001658:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8001664:	08007fa0 	.word	0x08007fa0
  ldr r2, =_sbss
 8001668:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 800166c:	20000808 	.word	0x20000808

08001670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC1_2_IRQHandler>
	...

08001674 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <HAL_Init+0x28>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a07      	ldr	r2, [pc, #28]	@ (800169c <HAL_Init+0x28>)
 800167e:	f043 0310 	orr.w	r3, r3, #16
 8001682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001684:	2003      	movs	r0, #3
 8001686:	f000 f931 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168a:	2000      	movs	r0, #0
 800168c:	f000 f808 	bl	80016a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001690:	f7ff fd80 	bl	8001194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40022000 	.word	0x40022000

080016a0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <HAL_InitTick+0x54>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <HAL_InitTick+0x58>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f93b 	bl	800193a <HAL_SYSTICK_Config>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00e      	b.n	80016ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d80a      	bhi.n	80016ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f000 f911 	bl	8001902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e0:	4a06      	ldr	r2, [pc, #24]	@ (80016fc <HAL_InitTick+0x5c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000040 	.word	0x20000040
 80016f8:	20000048 	.word	0x20000048
 80016fc:	20000044 	.word	0x20000044

08001700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000048 	.word	0x20000048
 8001724:	20000650 	.word	0x20000650

08001728 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;  
 800172c:	4b03      	ldr	r3, [pc, #12]	@ (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000650 	.word	0x20000650

08001740 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff ffee 	bl	8001728 <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d005      	beq.n	8001766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175a:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <HAL_Delay+0x44>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001766:	bf00      	nop
 8001768:	f7ff ffde 	bl	8001728 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	429a      	cmp	r2, r3
 8001776:	d8f7      	bhi.n	8001768 <HAL_Delay+0x28>
  {
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000048 	.word	0x20000048

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	@ (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	@ (800183c <__NVIC_SetPriority+0x50>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	@ 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
         );
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	@ 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b8:	d301      	bcc.n	80018be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00f      	b.n	80018de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <SysTick_Config+0x40>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c6:	210f      	movs	r1, #15
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f7ff ff8e 	bl	80017ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <SysTick_Config+0x40>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d6:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <SysTick_Config+0x40>)
 80018d8:	2207      	movs	r2, #7
 80018da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	e000e010 	.word	0xe000e010

080018ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff47 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001914:	f7ff ff5c 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 8001918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff ff8e 	bl	8001840 <NVIC_EncodePriority>
 8001924:	4602      	mov	r2, r0
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff5d 	bl	80017ec <__NVIC_SetPriority>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffb0 	bl	80018a8 <SysTick_Config>
 8001948:	4603      	mov	r3, r0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001954:	b480      	push	{r7}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001962:	e154      	b.n	8001c0e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2101      	movs	r1, #1
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	4013      	ands	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8146 	beq.w	8001c08 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d005      	beq.n	8001994 <HAL_GPIO_Init+0x40>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d130      	bne.n	80019f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ca:	2201      	movs	r2, #1
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	f003 0201 	and.w	r2, r3, #1
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d017      	beq.n	8001a32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d123      	bne.n	8001a86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	08da      	lsrs	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3208      	adds	r2, #8
 8001a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	220f      	movs	r2, #15
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	08da      	lsrs	r2, r3, #3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3208      	adds	r2, #8
 8001a80:	6939      	ldr	r1, [r7, #16]
 8001a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	2203      	movs	r2, #3
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0203 	and.w	r2, r3, #3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 80a0 	beq.w	8001c08 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac8:	4b58      	ldr	r3, [pc, #352]	@ (8001c2c <HAL_GPIO_Init+0x2d8>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a57      	ldr	r2, [pc, #348]	@ (8001c2c <HAL_GPIO_Init+0x2d8>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b55      	ldr	r3, [pc, #340]	@ (8001c2c <HAL_GPIO_Init+0x2d8>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ae0:	4a53      	ldr	r2, [pc, #332]	@ (8001c30 <HAL_GPIO_Init+0x2dc>)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	220f      	movs	r2, #15
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b0a:	d019      	beq.n	8001b40 <HAL_GPIO_Init+0x1ec>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a49      	ldr	r2, [pc, #292]	@ (8001c34 <HAL_GPIO_Init+0x2e0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d013      	beq.n	8001b3c <HAL_GPIO_Init+0x1e8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a48      	ldr	r2, [pc, #288]	@ (8001c38 <HAL_GPIO_Init+0x2e4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d00d      	beq.n	8001b38 <HAL_GPIO_Init+0x1e4>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a47      	ldr	r2, [pc, #284]	@ (8001c3c <HAL_GPIO_Init+0x2e8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d007      	beq.n	8001b34 <HAL_GPIO_Init+0x1e0>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a46      	ldr	r2, [pc, #280]	@ (8001c40 <HAL_GPIO_Init+0x2ec>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d101      	bne.n	8001b30 <HAL_GPIO_Init+0x1dc>
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	e008      	b.n	8001b42 <HAL_GPIO_Init+0x1ee>
 8001b30:	2305      	movs	r3, #5
 8001b32:	e006      	b.n	8001b42 <HAL_GPIO_Init+0x1ee>
 8001b34:	2303      	movs	r3, #3
 8001b36:	e004      	b.n	8001b42 <HAL_GPIO_Init+0x1ee>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e002      	b.n	8001b42 <HAL_GPIO_Init+0x1ee>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <HAL_GPIO_Init+0x1ee>
 8001b40:	2300      	movs	r3, #0
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	f002 0203 	and.w	r2, r2, #3
 8001b48:	0092      	lsls	r2, r2, #2
 8001b4a:	4093      	lsls	r3, r2
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b52:	4937      	ldr	r1, [pc, #220]	@ (8001c30 <HAL_GPIO_Init+0x2dc>)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	3302      	adds	r3, #2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b60:	4b38      	ldr	r3, [pc, #224]	@ (8001c44 <HAL_GPIO_Init+0x2f0>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b84:	4a2f      	ldr	r2, [pc, #188]	@ (8001c44 <HAL_GPIO_Init+0x2f0>)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c44 <HAL_GPIO_Init+0x2f0>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bae:	4a25      	ldr	r2, [pc, #148]	@ (8001c44 <HAL_GPIO_Init+0x2f0>)
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bb4:	4b23      	ldr	r3, [pc, #140]	@ (8001c44 <HAL_GPIO_Init+0x2f0>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c44 <HAL_GPIO_Init+0x2f0>)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bde:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_GPIO_Init+0x2f0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c02:	4a10      	ldr	r2, [pc, #64]	@ (8001c44 <HAL_GPIO_Init+0x2f0>)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f47f aea3 	bne.w	8001964 <HAL_GPIO_Init+0x10>
  }
}
 8001c1e:	bf00      	nop
 8001c20:	bf00      	nop
 8001c22:	371c      	adds	r7, #28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010000 	.word	0x40010000
 8001c34:	48000400 	.word	0x48000400
 8001c38:	48000800 	.word	0x48000800
 8001c3c:	48000c00 	.word	0x48000c00
 8001c40:	48001000 	.word	0x48001000
 8001c44:	40010400 	.word	0x40010400

08001c48 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001c56:	e0b8      	b.n	8001dca <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80ab 	beq.w	8001dc4 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001c6e:	4a5e      	ldr	r2, [pc, #376]	@ (8001de8 <HAL_GPIO_DeInit+0x1a0>)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	089b      	lsrs	r3, r3, #2
 8001c74:	3302      	adds	r3, #2
 8001c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	220f      	movs	r2, #15
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c96:	d019      	beq.n	8001ccc <HAL_GPIO_DeInit+0x84>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a54      	ldr	r2, [pc, #336]	@ (8001dec <HAL_GPIO_DeInit+0x1a4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d013      	beq.n	8001cc8 <HAL_GPIO_DeInit+0x80>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a53      	ldr	r2, [pc, #332]	@ (8001df0 <HAL_GPIO_DeInit+0x1a8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d00d      	beq.n	8001cc4 <HAL_GPIO_DeInit+0x7c>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a52      	ldr	r2, [pc, #328]	@ (8001df4 <HAL_GPIO_DeInit+0x1ac>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d007      	beq.n	8001cc0 <HAL_GPIO_DeInit+0x78>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a51      	ldr	r2, [pc, #324]	@ (8001df8 <HAL_GPIO_DeInit+0x1b0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d101      	bne.n	8001cbc <HAL_GPIO_DeInit+0x74>
 8001cb8:	2304      	movs	r3, #4
 8001cba:	e008      	b.n	8001cce <HAL_GPIO_DeInit+0x86>
 8001cbc:	2305      	movs	r3, #5
 8001cbe:	e006      	b.n	8001cce <HAL_GPIO_DeInit+0x86>
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e004      	b.n	8001cce <HAL_GPIO_DeInit+0x86>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e002      	b.n	8001cce <HAL_GPIO_DeInit+0x86>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <HAL_GPIO_DeInit+0x86>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	f002 0203 	and.w	r2, r2, #3
 8001cd4:	0092      	lsls	r2, r2, #2
 8001cd6:	4093      	lsls	r3, r2
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d132      	bne.n	8001d44 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001cde:	4b47      	ldr	r3, [pc, #284]	@ (8001dfc <HAL_GPIO_DeInit+0x1b4>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	4945      	ldr	r1, [pc, #276]	@ (8001dfc <HAL_GPIO_DeInit+0x1b4>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001cec:	4b43      	ldr	r3, [pc, #268]	@ (8001dfc <HAL_GPIO_DeInit+0x1b4>)
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	4941      	ldr	r1, [pc, #260]	@ (8001dfc <HAL_GPIO_DeInit+0x1b4>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001cfa:	4b40      	ldr	r3, [pc, #256]	@ (8001dfc <HAL_GPIO_DeInit+0x1b4>)
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	493e      	ldr	r1, [pc, #248]	@ (8001dfc <HAL_GPIO_DeInit+0x1b4>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001d08:	4b3c      	ldr	r3, [pc, #240]	@ (8001dfc <HAL_GPIO_DeInit+0x1b4>)
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	493a      	ldr	r1, [pc, #232]	@ (8001dfc <HAL_GPIO_DeInit+0x1b4>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001d26:	4a30      	ldr	r2, [pc, #192]	@ (8001de8 <HAL_GPIO_DeInit+0x1a0>)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	43da      	mvns	r2, r3
 8001d36:	482c      	ldr	r0, [pc, #176]	@ (8001de8 <HAL_GPIO_DeInit+0x1a0>)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	3302      	adds	r3, #2
 8001d40:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2103      	movs	r1, #3
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	401a      	ands	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	08da      	lsrs	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3208      	adds	r2, #8
 8001d62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	220f      	movs	r2, #15
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	08d2      	lsrs	r2, r2, #3
 8001d7a:	4019      	ands	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3208      	adds	r2, #8
 8001d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	2103      	movs	r1, #3
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	401a      	ands	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	2101      	movs	r1, #1
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	401a      	ands	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2103      	movs	r1, #3
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f47f af40 	bne.w	8001c58 <HAL_GPIO_DeInit+0x10>
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	371c      	adds	r7, #28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40010000 	.word	0x40010000
 8001dec:	48000400 	.word	0x48000400
 8001df0:	48000800 	.word	0x48000800
 8001df4:	48000c00 	.word	0x48000c00
 8001df8:	48001000 	.word	0x48001000
 8001dfc:	40010400 	.word	0x40010400

08001e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	807b      	strh	r3, [r7, #2]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e10:	787b      	ldrb	r3, [r7, #1]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e1c:	e002      	b.n	8001e24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e081      	b.n	8001f46 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff f9c0 	bl	80011dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2224      	movs	r2, #36	@ 0x24
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d107      	bne.n	8001eaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	e006      	b.n	8001eb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001eb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d104      	bne.n	8001eca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ec8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ed8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001edc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691a      	ldr	r2, [r3, #16]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69d9      	ldr	r1, [r3, #28]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1a      	ldr	r2, [r3, #32]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2220      	movs	r2, #32
 8001f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b20      	cmp	r3, #32
 8001f62:	d138      	bne.n	8001fd6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e032      	b.n	8001fd8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2224      	movs	r2, #36	@ 0x24
 8001f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0201 	bic.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001fa0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0201 	orr.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e000      	b.n	8001fd8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fd6:	2302      	movs	r3, #2
  }
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b20      	cmp	r3, #32
 8001ff8:	d139      	bne.n	800206e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002004:	2302      	movs	r3, #2
 8002006:	e033      	b.n	8002070 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2224      	movs	r2, #36	@ 0x24
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002036:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0201 	orr.w	r2, r2, #1
 8002058:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	e000      	b.n	8002070 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800206e:	2302      	movs	r3, #2
  }
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800207c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207e:	b08b      	sub	sp, #44	@ 0x2c
 8002080:	af06      	add	r7, sp, #24
 8002082:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0c4      	b.n	8002218 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff f93c 	bl	8001320 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2203      	movs	r2, #3
 80020ac:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f002 f8ef 	bl	8004298 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	e040      	b.n	8002142 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	3301      	adds	r3, #1
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	440b      	add	r3, r1
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	3303      	adds	r3, #3
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	440b      	add	r3, r1
 800210e:	3338      	adds	r3, #56	@ 0x38
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	333c      	adds	r3, #60	@ 0x3c
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	3340      	adds	r3, #64	@ 0x40
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	3301      	adds	r3, #1
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	d3b9      	bcc.n	80020c0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800214c:	2300      	movs	r3, #0
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	e044      	b.n	80021dc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	440b      	add	r3, r1
 8002160:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	440b      	add	r3, r1
 8002176:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	440b      	add	r3, r1
 800218c:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	440b      	add	r3, r1
 80021a2:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	440b      	add	r3, r1
 80021b8:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	440b      	add	r3, r1
 80021ce:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	3301      	adds	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d3b5      	bcc.n	8002152 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	687e      	ldr	r6, [r7, #4]
 80021ee:	466d      	mov	r5, sp
 80021f0:	f106 0410 	add.w	r4, r6, #16
 80021f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	602b      	str	r3, [r5, #0]
 80021fc:	1d33      	adds	r3, r6, #4
 80021fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002200:	6838      	ldr	r0, [r7, #0]
 8002202:	f002 f864 	bl	80042ce <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002226:	af00      	add	r7, sp, #0
 8002228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002230:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002232:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002236:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	f001 b823 	b.w	800328c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 817d 	beq.w	8002556 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800225c:	4bbc      	ldr	r3, [pc, #752]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	2b04      	cmp	r3, #4
 8002266:	d00c      	beq.n	8002282 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002268:	4bb9      	ldr	r3, [pc, #740]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b08      	cmp	r3, #8
 8002272:	d15c      	bne.n	800232e <HAL_RCC_OscConfig+0x10e>
 8002274:	4bb6      	ldr	r3, [pc, #728]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002280:	d155      	bne.n	800232e <HAL_RCC_OscConfig+0x10e>
 8002282:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002286:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002296:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d102      	bne.n	80022b4 <HAL_RCC_OscConfig+0x94>
 80022ae:	4ba8      	ldr	r3, [pc, #672]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	e015      	b.n	80022e0 <HAL_RCC_OscConfig+0xc0>
 80022b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022b8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80022c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022cc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80022d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80022dc:	4b9c      	ldr	r3, [pc, #624]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022e4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80022e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80022ec:	fa92 f2a2 	rbit	r2, r2
 80022f0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80022f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80022f8:	fab2 f282 	clz	r2, r2
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	f042 0220 	orr.w	r2, r2, #32
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	f002 021f 	and.w	r2, r2, #31
 8002308:	2101      	movs	r1, #1
 800230a:	fa01 f202 	lsl.w	r2, r1, r2
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 811f 	beq.w	8002554 <HAL_RCC_OscConfig+0x334>
 8002316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 8116 	bne.w	8002554 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	f000 bfaf 	b.w	800328c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800232e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002332:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x12e>
 8002340:	4b83      	ldr	r3, [pc, #524]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a82      	ldr	r2, [pc, #520]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 8002346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	e036      	b.n	80023bc <HAL_RCC_OscConfig+0x19c>
 800234e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002352:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x158>
 800235e:	4b7c      	ldr	r3, [pc, #496]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a7b      	ldr	r2, [pc, #492]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 8002364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b79      	ldr	r3, [pc, #484]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a78      	ldr	r2, [pc, #480]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 8002370:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e021      	b.n	80023bc <HAL_RCC_OscConfig+0x19c>
 8002378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002388:	d10c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x184>
 800238a:	4b71      	ldr	r3, [pc, #452]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a70      	ldr	r2, [pc, #448]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 8002390:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b6e      	ldr	r3, [pc, #440]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a6d      	ldr	r2, [pc, #436]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e00b      	b.n	80023bc <HAL_RCC_OscConfig+0x19c>
 80023a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a69      	ldr	r2, [pc, #420]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 80023aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b67      	ldr	r3, [pc, #412]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a66      	ldr	r2, [pc, #408]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 80023b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023bc:	4b64      	ldr	r3, [pc, #400]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 80023be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c0:	f023 020f 	bic.w	r2, r3, #15
 80023c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	495f      	ldr	r1, [pc, #380]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d059      	beq.n	800249a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7ff f99f 	bl	8001728 <HAL_GetTick>
 80023ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ee:	e00a      	b.n	8002406 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f0:	f7ff f99a 	bl	8001728 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b64      	cmp	r3, #100	@ 0x64
 80023fe:	d902      	bls.n	8002406 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	f000 bf43 	b.w	800328c <HAL_RCC_OscConfig+0x106c>
 8002406:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800240a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800241a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d102      	bne.n	8002438 <HAL_RCC_OscConfig+0x218>
 8002432:	4b47      	ldr	r3, [pc, #284]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	e015      	b.n	8002464 <HAL_RCC_OscConfig+0x244>
 8002438:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800243c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800244c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002450:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002454:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002460:	4b3b      	ldr	r3, [pc, #236]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 8002462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002464:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002468:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800246c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002470:	fa92 f2a2 	rbit	r2, r2
 8002474:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002478:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800247c:	fab2 f282 	clz	r2, r2
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	f042 0220 	orr.w	r2, r2, #32
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	f002 021f 	and.w	r2, r2, #31
 800248c:	2101      	movs	r1, #1
 800248e:	fa01 f202 	lsl.w	r2, r1, r2
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0ab      	beq.n	80023f0 <HAL_RCC_OscConfig+0x1d0>
 8002498:	e05d      	b.n	8002556 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7ff f945 	bl	8001728 <HAL_GetTick>
 800249e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a2:	e00a      	b.n	80024ba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a4:	f7ff f940 	bl	8001728 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b64      	cmp	r3, #100	@ 0x64
 80024b2:	d902      	bls.n	80024ba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	f000 bee9 	b.w	800328c <HAL_RCC_OscConfig+0x106c>
 80024ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024be:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80024ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	095b      	lsrs	r3, r3, #5
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d102      	bne.n	80024ec <HAL_RCC_OscConfig+0x2cc>
 80024e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	e015      	b.n	8002518 <HAL_RCC_OscConfig+0x2f8>
 80024ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024f0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002500:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002504:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002508:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002514:	4b0e      	ldr	r3, [pc, #56]	@ (8002550 <HAL_RCC_OscConfig+0x330>)
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800251c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002520:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002524:	fa92 f2a2 	rbit	r2, r2
 8002528:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800252c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002530:	fab2 f282 	clz	r2, r2
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	f042 0220 	orr.w	r2, r2, #32
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	f002 021f 	and.w	r2, r2, #31
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f202 	lsl.w	r2, r1, r2
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ab      	bne.n	80024a4 <HAL_RCC_OscConfig+0x284>
 800254c:	e003      	b.n	8002556 <HAL_RCC_OscConfig+0x336>
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 817d 	beq.w	8002866 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800256c:	4ba6      	ldr	r3, [pc, #664]	@ (8002808 <HAL_RCC_OscConfig+0x5e8>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00b      	beq.n	8002590 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002578:	4ba3      	ldr	r3, [pc, #652]	@ (8002808 <HAL_RCC_OscConfig+0x5e8>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d172      	bne.n	800266a <HAL_RCC_OscConfig+0x44a>
 8002584:	4ba0      	ldr	r3, [pc, #640]	@ (8002808 <HAL_RCC_OscConfig+0x5e8>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d16c      	bne.n	800266a <HAL_RCC_OscConfig+0x44a>
 8002590:	2302      	movs	r3, #2
 8002592:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80025a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d102      	bne.n	80025c0 <HAL_RCC_OscConfig+0x3a0>
 80025ba:	4b93      	ldr	r3, [pc, #588]	@ (8002808 <HAL_RCC_OscConfig+0x5e8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	e013      	b.n	80025e8 <HAL_RCC_OscConfig+0x3c8>
 80025c0:	2302      	movs	r3, #2
 80025c2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80025d2:	2302      	movs	r3, #2
 80025d4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80025d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80025e4:	4b88      	ldr	r3, [pc, #544]	@ (8002808 <HAL_RCC_OscConfig+0x5e8>)
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	2202      	movs	r2, #2
 80025ea:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80025ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80025f2:	fa92 f2a2 	rbit	r2, r2
 80025f6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80025fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80025fe:	fab2 f282 	clz	r2, r2
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	f042 0220 	orr.w	r2, r2, #32
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	f002 021f 	and.w	r2, r2, #31
 800260e:	2101      	movs	r1, #1
 8002610:	fa01 f202 	lsl.w	r2, r1, r2
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_RCC_OscConfig+0x410>
 800261a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d002      	beq.n	8002630 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	f000 be2e 	b.w	800328c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b75      	ldr	r3, [pc, #468]	@ (8002808 <HAL_RCC_OscConfig+0x5e8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	21f8      	movs	r1, #248	@ 0xf8
 8002646:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800264e:	fa91 f1a1 	rbit	r1, r1
 8002652:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002656:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800265a:	fab1 f181 	clz	r1, r1
 800265e:	b2c9      	uxtb	r1, r1
 8002660:	408b      	lsls	r3, r1
 8002662:	4969      	ldr	r1, [pc, #420]	@ (8002808 <HAL_RCC_OscConfig+0x5e8>)
 8002664:	4313      	orrs	r3, r2
 8002666:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002668:	e0fd      	b.n	8002866 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800266a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8088 	beq.w	800278c <HAL_RCC_OscConfig+0x56c>
 800267c:	2301      	movs	r3, #1
 800267e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800268e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800269c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	461a      	mov	r2, r3
 80026a4:	2301      	movs	r3, #1
 80026a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7ff f83e 	bl	8001728 <HAL_GetTick>
 80026ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b2:	f7ff f839 	bl	8001728 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d902      	bls.n	80026c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	f000 bde2 	b.w	800328c <HAL_RCC_OscConfig+0x106c>
 80026c8:	2302      	movs	r3, #2
 80026ca:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80026da:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	095b      	lsrs	r3, r3, #5
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d102      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4d8>
 80026f2:	4b45      	ldr	r3, [pc, #276]	@ (8002808 <HAL_RCC_OscConfig+0x5e8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	e013      	b.n	8002720 <HAL_RCC_OscConfig+0x500>
 80026f8:	2302      	movs	r3, #2
 80026fa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800270a:	2302      	movs	r3, #2
 800270c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002710:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800271c:	4b3a      	ldr	r3, [pc, #232]	@ (8002808 <HAL_RCC_OscConfig+0x5e8>)
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002720:	2202      	movs	r2, #2
 8002722:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002726:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800272a:	fa92 f2a2 	rbit	r2, r2
 800272e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002732:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002736:	fab2 f282 	clz	r2, r2
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	f042 0220 	orr.w	r2, r2, #32
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	f002 021f 	and.w	r2, r2, #31
 8002746:	2101      	movs	r1, #1
 8002748:	fa01 f202 	lsl.w	r2, r1, r2
 800274c:	4013      	ands	r3, r2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0af      	beq.n	80026b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002752:	4b2d      	ldr	r3, [pc, #180]	@ (8002808 <HAL_RCC_OscConfig+0x5e8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800275a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	21f8      	movs	r1, #248	@ 0xf8
 8002768:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002770:	fa91 f1a1 	rbit	r1, r1
 8002774:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002778:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800277c:	fab1 f181 	clz	r1, r1
 8002780:	b2c9      	uxtb	r1, r1
 8002782:	408b      	lsls	r3, r1
 8002784:	4920      	ldr	r1, [pc, #128]	@ (8002808 <HAL_RCC_OscConfig+0x5e8>)
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]
 800278a:	e06c      	b.n	8002866 <HAL_RCC_OscConfig+0x646>
 800278c:	2301      	movs	r3, #1
 800278e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800279e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	461a      	mov	r2, r3
 80027b4:	2300      	movs	r3, #0
 80027b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe ffb6 	bl	8001728 <HAL_GetTick>
 80027bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c0:	e00a      	b.n	80027d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c2:	f7fe ffb1 	bl	8001728 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d902      	bls.n	80027d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	f000 bd5a 	b.w	800328c <HAL_RCC_OscConfig+0x106c>
 80027d8:	2302      	movs	r3, #2
 80027da:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80027ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ee:	fab3 f383 	clz	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d104      	bne.n	800280c <HAL_RCC_OscConfig+0x5ec>
 8002802:	4b01      	ldr	r3, [pc, #4]	@ (8002808 <HAL_RCC_OscConfig+0x5e8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	e015      	b.n	8002834 <HAL_RCC_OscConfig+0x614>
 8002808:	40021000 	.word	0x40021000
 800280c:	2302      	movs	r3, #2
 800280e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800281e:	2302      	movs	r3, #2
 8002820:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002824:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002830:	4bc8      	ldr	r3, [pc, #800]	@ (8002b54 <HAL_RCC_OscConfig+0x934>)
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	2202      	movs	r2, #2
 8002836:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800283a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800283e:	fa92 f2a2 	rbit	r2, r2
 8002842:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002846:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800284a:	fab2 f282 	clz	r2, r2
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	f042 0220 	orr.w	r2, r2, #32
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	f002 021f 	and.w	r2, r2, #31
 800285a:	2101      	movs	r1, #1
 800285c:	fa01 f202 	lsl.w	r2, r1, r2
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1ad      	bne.n	80027c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8110 	beq.w	8002a9c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800287c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002880:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d079      	beq.n	8002980 <HAL_RCC_OscConfig+0x760>
 800288c:	2301      	movs	r3, #1
 800288e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800289e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	4bab      	ldr	r3, [pc, #684]	@ (8002b58 <HAL_RCC_OscConfig+0x938>)
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	461a      	mov	r2, r3
 80028b2:	2301      	movs	r3, #1
 80028b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b6:	f7fe ff37 	bl	8001728 <HAL_GetTick>
 80028ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c0:	f7fe ff32 	bl	8001728 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d902      	bls.n	80028d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	f000 bcdb 	b.w	800328c <HAL_RCC_OscConfig+0x106c>
 80028d6:	2302      	movs	r3, #2
 80028d8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80028e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028f0:	2202      	movs	r2, #2
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	fa93 f2a3 	rbit	r2, r3
 8002902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002906:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002914:	2202      	movs	r2, #2
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	fa93 f2a3 	rbit	r2, r3
 8002926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800292e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002930:	4b88      	ldr	r3, [pc, #544]	@ (8002b54 <HAL_RCC_OscConfig+0x934>)
 8002932:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002938:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800293c:	2102      	movs	r1, #2
 800293e:	6019      	str	r1, [r3, #0]
 8002940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002944:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	fa93 f1a3 	rbit	r1, r3
 800294e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002952:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002956:	6019      	str	r1, [r3, #0]
  return result;
 8002958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	fab3 f383 	clz	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	2101      	movs	r1, #1
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0a0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x6a0>
 800297e:	e08d      	b.n	8002a9c <HAL_RCC_OscConfig+0x87c>
 8002980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002984:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002990:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	fa93 f2a3 	rbit	r2, r3
 800299a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029a2:	601a      	str	r2, [r3, #0]
  return result;
 80029a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b68      	ldr	r3, [pc, #416]	@ (8002b58 <HAL_RCC_OscConfig+0x938>)
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	461a      	mov	r2, r3
 80029be:	2300      	movs	r3, #0
 80029c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c2:	f7fe feb1 	bl	8001728 <HAL_GetTick>
 80029c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029cc:	f7fe feac 	bl	8001728 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d902      	bls.n	80029e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	f000 bc55 	b.w	800328c <HAL_RCC_OscConfig+0x106c>
 80029e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80029ea:	2202      	movs	r2, #2
 80029ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	fa93 f2a3 	rbit	r2, r3
 80029fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a00:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a0e:	2202      	movs	r2, #2
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a16:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f2a3 	rbit	r2, r3
 8002a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a32:	2202      	movs	r2, #2
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	fa93 f2a3 	rbit	r2, r3
 8002a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a48:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002a4c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4e:	4b41      	ldr	r3, [pc, #260]	@ (8002b54 <HAL_RCC_OscConfig+0x934>)
 8002a50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a56:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	6019      	str	r1, [r3, #0]
 8002a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a62:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	fa93 f1a3 	rbit	r1, r3
 8002a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a74:	6019      	str	r1, [r3, #0]
  return result;
 8002a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d197      	bne.n	80029cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 81a1 	beq.w	8002df4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab8:	4b26      	ldr	r3, [pc, #152]	@ (8002b54 <HAL_RCC_OscConfig+0x934>)
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d116      	bne.n	8002af2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac4:	4b23      	ldr	r3, [pc, #140]	@ (8002b54 <HAL_RCC_OscConfig+0x934>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	4a22      	ldr	r2, [pc, #136]	@ (8002b54 <HAL_RCC_OscConfig+0x934>)
 8002aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	61d3      	str	r3, [r2, #28]
 8002ad0:	4b20      	ldr	r3, [pc, #128]	@ (8002b54 <HAL_RCC_OscConfig+0x934>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002adc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002aea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b5c <HAL_RCC_OscConfig+0x93c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d11a      	bne.n	8002b34 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afe:	4b17      	ldr	r3, [pc, #92]	@ (8002b5c <HAL_RCC_OscConfig+0x93c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a16      	ldr	r2, [pc, #88]	@ (8002b5c <HAL_RCC_OscConfig+0x93c>)
 8002b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0a:	f7fe fe0d 	bl	8001728 <HAL_GetTick>
 8002b0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b12:	e009      	b.n	8002b28 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b14:	f7fe fe08 	bl	8001728 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b64      	cmp	r3, #100	@ 0x64
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e3b1      	b.n	800328c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <HAL_RCC_OscConfig+0x93c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0ef      	beq.n	8002b14 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d10d      	bne.n	8002b60 <HAL_RCC_OscConfig+0x940>
 8002b44:	4b03      	ldr	r3, [pc, #12]	@ (8002b54 <HAL_RCC_OscConfig+0x934>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	4a02      	ldr	r2, [pc, #8]	@ (8002b54 <HAL_RCC_OscConfig+0x934>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6213      	str	r3, [r2, #32]
 8002b50:	e03c      	b.n	8002bcc <HAL_RCC_OscConfig+0x9ac>
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	10908120 	.word	0x10908120
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10c      	bne.n	8002b8a <HAL_RCC_OscConfig+0x96a>
 8002b70:	4bc1      	ldr	r3, [pc, #772]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	4ac0      	ldr	r2, [pc, #768]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	6213      	str	r3, [r2, #32]
 8002b7c:	4bbe      	ldr	r3, [pc, #760]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	4abd      	ldr	r2, [pc, #756]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002b82:	f023 0304 	bic.w	r3, r3, #4
 8002b86:	6213      	str	r3, [r2, #32]
 8002b88:	e020      	b.n	8002bcc <HAL_RCC_OscConfig+0x9ac>
 8002b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b05      	cmp	r3, #5
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x994>
 8002b9a:	4bb7      	ldr	r3, [pc, #732]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	4ab6      	ldr	r2, [pc, #728]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	6213      	str	r3, [r2, #32]
 8002ba6:	4bb4      	ldr	r3, [pc, #720]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	4ab3      	ldr	r2, [pc, #716]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6213      	str	r3, [r2, #32]
 8002bb2:	e00b      	b.n	8002bcc <HAL_RCC_OscConfig+0x9ac>
 8002bb4:	4bb0      	ldr	r3, [pc, #704]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4aaf      	ldr	r2, [pc, #700]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	6213      	str	r3, [r2, #32]
 8002bc0:	4bad      	ldr	r3, [pc, #692]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	4aac      	ldr	r2, [pc, #688]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002bc6:	f023 0304 	bic.w	r3, r3, #4
 8002bca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8081 	beq.w	8002ce0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bde:	f7fe fda3 	bl	8001728 <HAL_GetTick>
 8002be2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be8:	f7fe fd9e 	bl	8001728 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e345      	b.n	800328c <HAL_RCC_OscConfig+0x106c>
 8002c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c04:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c08:	2202      	movs	r2, #2
 8002c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c10:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	fa93 f2a3 	rbit	r2, r3
 8002c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c28:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c34:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	fa93 f2a3 	rbit	r2, r3
 8002c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c42:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002c46:	601a      	str	r2, [r3, #0]
  return result;
 8002c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002c50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f043 0302 	orr.w	r3, r3, #2
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d102      	bne.n	8002c6c <HAL_RCC_OscConfig+0xa4c>
 8002c66:	4b84      	ldr	r3, [pc, #528]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	e013      	b.n	8002c94 <HAL_RCC_OscConfig+0xa74>
 8002c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c70:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002c74:	2202      	movs	r2, #2
 8002c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	fa93 f2a3 	rbit	r2, r3
 8002c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c8a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	4b79      	ldr	r3, [pc, #484]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c98:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002c9c:	2102      	movs	r1, #2
 8002c9e:	6011      	str	r1, [r2, #0]
 8002ca0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ca4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	fa92 f1a2 	rbit	r1, r2
 8002cae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cb2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002cb6:	6011      	str	r1, [r2, #0]
  return result;
 8002cb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cbc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	fab2 f282 	clz	r2, r2
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	f002 021f 	and.w	r2, r2, #31
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d084      	beq.n	8002be8 <HAL_RCC_OscConfig+0x9c8>
 8002cde:	e07f      	b.n	8002de0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce0:	f7fe fd22 	bl	8001728 <HAL_GetTick>
 8002ce4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce8:	e00b      	b.n	8002d02 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fe fd1d 	bl	8001728 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e2c4      	b.n	800328c <HAL_RCC_OscConfig+0x106c>
 8002d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d06:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d12:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	fa93 f2a3 	rbit	r2, r3
 8002d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d20:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d2e:	2202      	movs	r2, #2
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d36:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	fa93 f2a3 	rbit	r2, r3
 8002d40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d44:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d48:	601a      	str	r2, [r3, #0]
  return result;
 8002d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f043 0302 	orr.w	r3, r3, #2
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d102      	bne.n	8002d6e <HAL_RCC_OscConfig+0xb4e>
 8002d68:	4b43      	ldr	r3, [pc, #268]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	e013      	b.n	8002d96 <HAL_RCC_OscConfig+0xb76>
 8002d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d72:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d76:	2202      	movs	r2, #2
 8002d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	fa93 f2a3 	rbit	r2, r3
 8002d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	4b39      	ldr	r3, [pc, #228]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d9a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002d9e:	2102      	movs	r1, #2
 8002da0:	6011      	str	r1, [r2, #0]
 8002da2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002da6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	fa92 f1a2 	rbit	r1, r2
 8002db0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002db4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002db8:	6011      	str	r1, [r2, #0]
  return result;
 8002dba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dbe:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	fab2 f282 	clz	r2, r2
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f002 021f 	and.w	r2, r2, #31
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d184      	bne.n	8002cea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002de0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d105      	bne.n	8002df4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de8:	4b23      	ldr	r3, [pc, #140]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	4a22      	ldr	r2, [pc, #136]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002dee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002df2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8242 	beq.w	800328a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e06:	4b1c      	ldr	r3, [pc, #112]	@ (8002e78 <HAL_RCC_OscConfig+0xc58>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	f000 8213 	beq.w	800323a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	f040 8162 	bne.w	80030ea <HAL_RCC_OscConfig+0xeca>
 8002e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002e2e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e38:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	fa93 f2a3 	rbit	r2, r3
 8002e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e46:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002e4a:	601a      	str	r2, [r3, #0]
  return result;
 8002e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e50:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002e54:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	461a      	mov	r2, r3
 8002e68:	2300      	movs	r3, #0
 8002e6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7fe fc5c 	bl	8001728 <HAL_GetTick>
 8002e70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e74:	e00c      	b.n	8002e90 <HAL_RCC_OscConfig+0xc70>
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7fe fc54 	bl	8001728 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e1fd      	b.n	800328c <HAL_RCC_OscConfig+0x106c>
 8002e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e94:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	fa93 f2a3 	rbit	r2, r3
 8002eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002eb4:	601a      	str	r2, [r3, #0]
  return result;
 8002eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eba:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ebe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d102      	bne.n	8002eda <HAL_RCC_OscConfig+0xcba>
 8002ed4:	4bb0      	ldr	r3, [pc, #704]	@ (8003198 <HAL_RCC_OscConfig+0xf78>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	e027      	b.n	8002f2a <HAL_RCC_OscConfig+0xd0a>
 8002eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ede:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ee2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eec:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	fa93 f2a3 	rbit	r2, r3
 8002ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f04:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002f08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f12:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	fa93 f2a3 	rbit	r2, r3
 8002f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f20:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	4b9c      	ldr	r3, [pc, #624]	@ (8003198 <HAL_RCC_OscConfig+0xf78>)
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f2e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002f32:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f36:	6011      	str	r1, [r2, #0]
 8002f38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f3c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	fa92 f1a2 	rbit	r1, r2
 8002f46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f4a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002f4e:	6011      	str	r1, [r2, #0]
  return result;
 8002f50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f54:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	fab2 f282 	clz	r2, r2
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	f042 0220 	orr.w	r2, r2, #32
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	f002 021f 	and.w	r2, r2, #31
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d182      	bne.n	8002e7c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f76:	4b88      	ldr	r3, [pc, #544]	@ (8003198 <HAL_RCC_OscConfig+0xf78>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	430b      	orrs	r3, r1
 8002f98:	497f      	ldr	r1, [pc, #508]	@ (8003198 <HAL_RCC_OscConfig+0xf78>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
 8002f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002fa6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	fa93 f2a3 	rbit	r2, r3
 8002fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbe:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002fc2:	601a      	str	r2, [r3, #0]
  return result;
 8002fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002fcc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fd8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fba0 	bl	8001728 <HAL_GetTick>
 8002fe8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fec:	e009      	b.n	8003002 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fe fb9b 	bl	8001728 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e144      	b.n	800328c <HAL_RCC_OscConfig+0x106c>
 8003002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003006:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800300a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800300e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003014:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	fa93 f2a3 	rbit	r2, r3
 800301e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003022:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003026:	601a      	str	r2, [r3, #0]
  return result;
 8003028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003030:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b01      	cmp	r3, #1
 8003044:	d102      	bne.n	800304c <HAL_RCC_OscConfig+0xe2c>
 8003046:	4b54      	ldr	r3, [pc, #336]	@ (8003198 <HAL_RCC_OscConfig+0xf78>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	e027      	b.n	800309c <HAL_RCC_OscConfig+0xe7c>
 800304c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003050:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003054:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	fa93 f2a3 	rbit	r2, r3
 8003068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003076:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800307a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003084:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	fa93 f2a3 	rbit	r2, r3
 800308e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003092:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	4b3f      	ldr	r3, [pc, #252]	@ (8003198 <HAL_RCC_OscConfig+0xf78>)
 800309a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030a0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80030a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80030a8:	6011      	str	r1, [r2, #0]
 80030aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030ae:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	fa92 f1a2 	rbit	r1, r2
 80030b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030bc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80030c0:	6011      	str	r1, [r2, #0]
  return result;
 80030c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030c6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	fab2 f282 	clz	r2, r2
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	f042 0220 	orr.w	r2, r2, #32
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	f002 021f 	and.w	r2, r2, #31
 80030dc:	2101      	movs	r1, #1
 80030de:	fa01 f202 	lsl.w	r2, r1, r2
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d082      	beq.n	8002fee <HAL_RCC_OscConfig+0xdce>
 80030e8:	e0cf      	b.n	800328a <HAL_RCC_OscConfig+0x106a>
 80030ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ee:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80030f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	fa93 f2a3 	rbit	r2, r3
 8003106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800310e:	601a      	str	r2, [r3, #0]
  return result;
 8003110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003114:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003118:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311a:	fab3 f383 	clz	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003124:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	461a      	mov	r2, r3
 800312c:	2300      	movs	r3, #0
 800312e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fe fafa 	bl	8001728 <HAL_GetTick>
 8003134:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003138:	e009      	b.n	800314e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313a:	f7fe faf5 	bl	8001728 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e09e      	b.n	800328c <HAL_RCC_OscConfig+0x106c>
 800314e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003152:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003156:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800315a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003160:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	fa93 f2a3 	rbit	r2, r3
 800316a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003172:	601a      	str	r2, [r3, #0]
  return result;
 8003174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003178:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800317c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	b2db      	uxtb	r3, r3
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d104      	bne.n	800319c <HAL_RCC_OscConfig+0xf7c>
 8003192:	4b01      	ldr	r3, [pc, #4]	@ (8003198 <HAL_RCC_OscConfig+0xf78>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	e029      	b.n	80031ec <HAL_RCC_OscConfig+0xfcc>
 8003198:	40021000 	.word	0x40021000
 800319c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80031a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	fa93 f2a3 	rbit	r2, r3
 80031b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031bc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80031ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	fa93 f2a3 	rbit	r2, r3
 80031de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003298 <HAL_RCC_OscConfig+0x1078>)
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031f0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80031f4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80031f8:	6011      	str	r1, [r2, #0]
 80031fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031fe:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	fa92 f1a2 	rbit	r1, r2
 8003208:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800320c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003210:	6011      	str	r1, [r2, #0]
  return result;
 8003212:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003216:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	fab2 f282 	clz	r2, r2
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	f042 0220 	orr.w	r2, r2, #32
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	f002 021f 	and.w	r2, r2, #31
 800322c:	2101      	movs	r1, #1
 800322e:	fa01 f202 	lsl.w	r2, r1, r2
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d180      	bne.n	800313a <HAL_RCC_OscConfig+0xf1a>
 8003238:	e027      	b.n	800328a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800323a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e01e      	b.n	800328c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800324e:	4b12      	ldr	r3, [pc, #72]	@ (8003298 <HAL_RCC_OscConfig+0x1078>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003256:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800325a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800325e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003262:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	429a      	cmp	r2, r3
 800326c:	d10b      	bne.n	8003286 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800326e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003272:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003282:	429a      	cmp	r2, r3
 8003284:	d001      	beq.n	800328a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000

0800329c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b09e      	sub	sp, #120	@ 0x78
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e162      	b.n	800357a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032b4:	4b90      	ldr	r3, [pc, #576]	@ (80034f8 <HAL_RCC_ClockConfig+0x25c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d910      	bls.n	80032e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b8d      	ldr	r3, [pc, #564]	@ (80034f8 <HAL_RCC_ClockConfig+0x25c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f023 0207 	bic.w	r2, r3, #7
 80032ca:	498b      	ldr	r1, [pc, #556]	@ (80034f8 <HAL_RCC_ClockConfig+0x25c>)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b89      	ldr	r3, [pc, #548]	@ (80034f8 <HAL_RCC_ClockConfig+0x25c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e14a      	b.n	800357a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f0:	4b82      	ldr	r3, [pc, #520]	@ (80034fc <HAL_RCC_ClockConfig+0x260>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	497f      	ldr	r1, [pc, #508]	@ (80034fc <HAL_RCC_ClockConfig+0x260>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80dc 	beq.w	80034c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d13c      	bne.n	8003392 <HAL_RCC_ClockConfig+0xf6>
 8003318:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800331c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	b2db      	uxtb	r3, r3
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d102      	bne.n	8003342 <HAL_RCC_ClockConfig+0xa6>
 800333c:	4b6f      	ldr	r3, [pc, #444]	@ (80034fc <HAL_RCC_ClockConfig+0x260>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	e00f      	b.n	8003362 <HAL_RCC_ClockConfig+0xc6>
 8003342:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003346:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003350:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003354:	663b      	str	r3, [r7, #96]	@ 0x60
 8003356:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003358:	fa93 f3a3 	rbit	r3, r3
 800335c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800335e:	4b67      	ldr	r3, [pc, #412]	@ (80034fc <HAL_RCC_ClockConfig+0x260>)
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003366:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003368:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800336a:	fa92 f2a2 	rbit	r2, r2
 800336e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003370:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003372:	fab2 f282 	clz	r2, r2
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	f042 0220 	orr.w	r2, r2, #32
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	f002 021f 	and.w	r2, r2, #31
 8003382:	2101      	movs	r1, #1
 8003384:	fa01 f202 	lsl.w	r2, r1, r2
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d17b      	bne.n	8003486 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e0f3      	b.n	800357a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d13c      	bne.n	8003414 <HAL_RCC_ClockConfig+0x178>
 800339a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800339e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80033a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d102      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x128>
 80033be:	4b4f      	ldr	r3, [pc, #316]	@ (80034fc <HAL_RCC_ClockConfig+0x260>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	e00f      	b.n	80033e4 <HAL_RCC_ClockConfig+0x148>
 80033c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033cc:	fa93 f3a3 	rbit	r3, r3
 80033d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80033d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80033d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033e0:	4b46      	ldr	r3, [pc, #280]	@ (80034fc <HAL_RCC_ClockConfig+0x260>)
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033e8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80033ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80033ec:	fa92 f2a2 	rbit	r2, r2
 80033f0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80033f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033f4:	fab2 f282 	clz	r2, r2
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	f042 0220 	orr.w	r2, r2, #32
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	f002 021f 	and.w	r2, r2, #31
 8003404:	2101      	movs	r1, #1
 8003406:	fa01 f202 	lsl.w	r2, r1, r2
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d13a      	bne.n	8003486 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0b2      	b.n	800357a <HAL_RCC_ClockConfig+0x2de>
 8003414:	2302      	movs	r3, #2
 8003416:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b01      	cmp	r3, #1
 8003434:	d102      	bne.n	800343c <HAL_RCC_ClockConfig+0x1a0>
 8003436:	4b31      	ldr	r3, [pc, #196]	@ (80034fc <HAL_RCC_ClockConfig+0x260>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	e00d      	b.n	8003458 <HAL_RCC_ClockConfig+0x1bc>
 800343c:	2302      	movs	r3, #2
 800343e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	627b      	str	r3, [r7, #36]	@ 0x24
 8003448:	2302      	movs	r3, #2
 800344a:	623b      	str	r3, [r7, #32]
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	4b29      	ldr	r3, [pc, #164]	@ (80034fc <HAL_RCC_ClockConfig+0x260>)
 8003456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003458:	2202      	movs	r2, #2
 800345a:	61ba      	str	r2, [r7, #24]
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	fa92 f2a2 	rbit	r2, r2
 8003462:	617a      	str	r2, [r7, #20]
  return result;
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	fab2 f282 	clz	r2, r2
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	f042 0220 	orr.w	r2, r2, #32
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	f002 021f 	and.w	r2, r2, #31
 8003476:	2101      	movs	r1, #1
 8003478:	fa01 f202 	lsl.w	r2, r1, r2
 800347c:	4013      	ands	r3, r2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e079      	b.n	800357a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003486:	4b1d      	ldr	r3, [pc, #116]	@ (80034fc <HAL_RCC_ClockConfig+0x260>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f023 0203 	bic.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	491a      	ldr	r1, [pc, #104]	@ (80034fc <HAL_RCC_ClockConfig+0x260>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003498:	f7fe f946 	bl	8001728 <HAL_GetTick>
 800349c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a0:	f7fe f942 	bl	8001728 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e061      	b.n	800357a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	4b11      	ldr	r3, [pc, #68]	@ (80034fc <HAL_RCC_ClockConfig+0x260>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 020c 	and.w	r2, r3, #12
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d1eb      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c8:	4b0b      	ldr	r3, [pc, #44]	@ (80034f8 <HAL_RCC_ClockConfig+0x25c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d214      	bcs.n	8003500 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b08      	ldr	r3, [pc, #32]	@ (80034f8 <HAL_RCC_ClockConfig+0x25c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 0207 	bic.w	r2, r3, #7
 80034de:	4906      	ldr	r1, [pc, #24]	@ (80034f8 <HAL_RCC_ClockConfig+0x25c>)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b04      	ldr	r3, [pc, #16]	@ (80034f8 <HAL_RCC_ClockConfig+0x25c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d005      	beq.n	8003500 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e040      	b.n	800357a <HAL_RCC_ClockConfig+0x2de>
 80034f8:	40022000 	.word	0x40022000
 80034fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800350c:	4b1d      	ldr	r3, [pc, #116]	@ (8003584 <HAL_RCC_ClockConfig+0x2e8>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	491a      	ldr	r1, [pc, #104]	@ (8003584 <HAL_RCC_ClockConfig+0x2e8>)
 800351a:	4313      	orrs	r3, r2
 800351c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800352a:	4b16      	ldr	r3, [pc, #88]	@ (8003584 <HAL_RCC_ClockConfig+0x2e8>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4912      	ldr	r1, [pc, #72]	@ (8003584 <HAL_RCC_ClockConfig+0x2e8>)
 800353a:	4313      	orrs	r3, r2
 800353c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800353e:	f000 f829 	bl	8003594 <HAL_RCC_GetSysClockFreq>
 8003542:	4601      	mov	r1, r0
 8003544:	4b0f      	ldr	r3, [pc, #60]	@ (8003584 <HAL_RCC_ClockConfig+0x2e8>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800354c:	22f0      	movs	r2, #240	@ 0xf0
 800354e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	fa92 f2a2 	rbit	r2, r2
 8003556:	60fa      	str	r2, [r7, #12]
  return result;
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	fab2 f282 	clz	r2, r2
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	40d3      	lsrs	r3, r2
 8003562:	4a09      	ldr	r2, [pc, #36]	@ (8003588 <HAL_RCC_ClockConfig+0x2ec>)
 8003564:	5cd3      	ldrb	r3, [r2, r3]
 8003566:	fa21 f303 	lsr.w	r3, r1, r3
 800356a:	4a08      	ldr	r2, [pc, #32]	@ (800358c <HAL_RCC_ClockConfig+0x2f0>)
 800356c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800356e:	4b08      	ldr	r3, [pc, #32]	@ (8003590 <HAL_RCC_ClockConfig+0x2f4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe f894 	bl	80016a0 <HAL_InitTick>
  
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3778      	adds	r7, #120	@ 0x78
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	08007bec 	.word	0x08007bec
 800358c:	20000040 	.word	0x20000040
 8003590:	20000044 	.word	0x20000044

08003594 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003594:	b480      	push	{r7}
 8003596:	b08b      	sub	sp, #44	@ 0x2c
 8003598:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	2300      	movs	r3, #0
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80035ae:	4b29      	ldr	r3, [pc, #164]	@ (8003654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d002      	beq.n	80035c4 <HAL_RCC_GetSysClockFreq+0x30>
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d003      	beq.n	80035ca <HAL_RCC_GetSysClockFreq+0x36>
 80035c2:	e03c      	b.n	800363e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035c4:	4b24      	ldr	r3, [pc, #144]	@ (8003658 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035c6:	623b      	str	r3, [r7, #32]
      break;
 80035c8:	e03c      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80035d0:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80035d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	fa92 f2a2 	rbit	r2, r2
 80035dc:	607a      	str	r2, [r7, #4]
  return result;
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	fab2 f282 	clz	r2, r2
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	40d3      	lsrs	r3, r2
 80035e8:	4a1c      	ldr	r2, [pc, #112]	@ (800365c <HAL_RCC_GetSysClockFreq+0xc8>)
 80035ea:	5cd3      	ldrb	r3, [r2, r3]
 80035ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035ee:	4b19      	ldr	r3, [pc, #100]	@ (8003654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	220f      	movs	r2, #15
 80035f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	fa92 f2a2 	rbit	r2, r2
 8003600:	60fa      	str	r2, [r7, #12]
  return result;
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	fab2 f282 	clz	r2, r2
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	40d3      	lsrs	r3, r2
 800360c:	4a14      	ldr	r2, [pc, #80]	@ (8003660 <HAL_RCC_GetSysClockFreq+0xcc>)
 800360e:	5cd3      	ldrb	r3, [r2, r3]
 8003610:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800361c:	4a0e      	ldr	r2, [pc, #56]	@ (8003658 <HAL_RCC_GetSysClockFreq+0xc4>)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	fbb2 f2f3 	udiv	r2, r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	627b      	str	r3, [r7, #36]	@ 0x24
 800362c:	e004      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	4a0c      	ldr	r2, [pc, #48]	@ (8003664 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	623b      	str	r3, [r7, #32]
      break;
 800363c:	e002      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800363e:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003640:	623b      	str	r3, [r7, #32]
      break;
 8003642:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003644:	6a3b      	ldr	r3, [r7, #32]
}
 8003646:	4618      	mov	r0, r3
 8003648:	372c      	adds	r7, #44	@ 0x2c
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40021000 	.word	0x40021000
 8003658:	007a1200 	.word	0x007a1200
 800365c:	08007bfc 	.word	0x08007bfc
 8003660:	08007c0c 	.word	0x08007c0c
 8003664:	003d0900 	.word	0x003d0900

08003668 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b092      	sub	sp, #72	@ 0x48
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003678:	2300      	movs	r3, #0
 800367a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80d4 	beq.w	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800368c:	4b4e      	ldr	r3, [pc, #312]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10e      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003698:	4b4b      	ldr	r3, [pc, #300]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	4a4a      	ldr	r2, [pc, #296]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036a2:	61d3      	str	r3, [r2, #28]
 80036a4:	4b48      	ldr	r3, [pc, #288]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b6:	4b45      	ldr	r3, [pc, #276]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d118      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c2:	4b42      	ldr	r3, [pc, #264]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a41      	ldr	r2, [pc, #260]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ce:	f7fe f82b 	bl	8001728 <HAL_GetTick>
 80036d2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d4:	e008      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d6:	f7fe f827 	bl	8001728 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b64      	cmp	r3, #100	@ 0x64
 80036e2:	d901      	bls.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e169      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e8:	4b38      	ldr	r3, [pc, #224]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036f4:	4b34      	ldr	r3, [pc, #208]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8084 	beq.w	800380e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800370e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003710:	429a      	cmp	r2, r3
 8003712:	d07c      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003714:	4b2c      	ldr	r3, [pc, #176]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800371c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800371e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003722:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800372c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	4b26      	ldr	r3, [pc, #152]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	461a      	mov	r2, r3
 800373e:	2301      	movs	r3, #1
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003746:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374a:	fa93 f3a3 	rbit	r3, r3
 800374e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	4b1d      	ldr	r3, [pc, #116]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	461a      	mov	r2, r3
 8003762:	2300      	movs	r3, #0
 8003764:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003766:	4a18      	ldr	r2, [pc, #96]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800376a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800376c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d04b      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003776:	f7fd ffd7 	bl	8001728 <HAL_GetTick>
 800377a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377c:	e00a      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377e:	f7fd ffd3 	bl	8001728 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e113      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003794:	2302      	movs	r3, #2
 8003796:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379a:	fa93 f3a3 	rbit	r3, r3
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a0:	2302      	movs	r3, #2
 80037a2:	623b      	str	r3, [r7, #32]
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	fa93 f3a3 	rbit	r3, r3
 80037aa:	61fb      	str	r3, [r7, #28]
  return result;
 80037ac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	f043 0302 	orr.w	r3, r3, #2
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d108      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80037c2:	4b01      	ldr	r3, [pc, #4]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	e00d      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40007000 	.word	0x40007000
 80037d0:	10908100 	.word	0x10908100
 80037d4:	2302      	movs	r3, #2
 80037d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	4b78      	ldr	r3, [pc, #480]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	2202      	movs	r2, #2
 80037e6:	613a      	str	r2, [r7, #16]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	fa92 f2a2 	rbit	r2, r2
 80037ee:	60fa      	str	r2, [r7, #12]
  return result;
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	fab2 f282 	clz	r2, r2
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	f002 021f 	and.w	r2, r2, #31
 8003802:	2101      	movs	r1, #1
 8003804:	fa01 f202 	lsl.w	r2, r1, r2
 8003808:	4013      	ands	r3, r2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0b7      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800380e:	4b6d      	ldr	r3, [pc, #436]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	496a      	ldr	r1, [pc, #424]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800381c:	4313      	orrs	r3, r2
 800381e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003820:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003824:	2b01      	cmp	r3, #1
 8003826:	d105      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003828:	4b66      	ldr	r3, [pc, #408]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	4a65      	ldr	r2, [pc, #404]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800382e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003832:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003840:	4b60      	ldr	r3, [pc, #384]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003844:	f023 0203 	bic.w	r2, r3, #3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	495d      	ldr	r1, [pc, #372]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800384e:	4313      	orrs	r3, r2
 8003850:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800385e:	4b59      	ldr	r3, [pc, #356]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	4956      	ldr	r1, [pc, #344]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800386c:	4313      	orrs	r3, r2
 800386e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800387c:	4b51      	ldr	r3, [pc, #324]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	494e      	ldr	r1, [pc, #312]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800388a:	4313      	orrs	r3, r2
 800388c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800389a:	4b4a      	ldr	r3, [pc, #296]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	f023 0210 	bic.w	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	4947      	ldr	r1, [pc, #284]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80038b8:	4b42      	ldr	r3, [pc, #264]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c4:	493f      	ldr	r1, [pc, #252]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038d6:	4b3b      	ldr	r3, [pc, #236]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	f023 0220 	bic.w	r2, r3, #32
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	4938      	ldr	r1, [pc, #224]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038f4:	4b33      	ldr	r3, [pc, #204]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	4930      	ldr	r1, [pc, #192]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003902:	4313      	orrs	r3, r2
 8003904:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003912:	4b2c      	ldr	r3, [pc, #176]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003916:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	4929      	ldr	r1, [pc, #164]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003920:	4313      	orrs	r3, r2
 8003922:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003930:	4b24      	ldr	r3, [pc, #144]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393c:	4921      	ldr	r1, [pc, #132]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800394e:	4b1d      	ldr	r3, [pc, #116]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003952:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	491a      	ldr	r1, [pc, #104]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800395c:	4313      	orrs	r3, r2
 800395e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800396c:	4b15      	ldr	r3, [pc, #84]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800396e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003970:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	4912      	ldr	r1, [pc, #72]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800397a:	4313      	orrs	r3, r2
 800397c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800398a:	4b0e      	ldr	r3, [pc, #56]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	490b      	ldr	r1, [pc, #44]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003998:	4313      	orrs	r3, r2
 800399a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80039a8:	4b06      	ldr	r3, [pc, #24]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b4:	4903      	ldr	r1, [pc, #12]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3748      	adds	r7, #72	@ 0x48
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40021000 	.word	0x40021000

080039c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e09d      	b.n	8003b16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d108      	bne.n	80039f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039ea:	d009      	beq.n	8003a00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	61da      	str	r2, [r3, #28]
 80039f2:	e005      	b.n	8003a00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd fc22 	bl	8001264 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a40:	d902      	bls.n	8003a48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	e002      	b.n	8003a4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003a56:	d007      	beq.n	8003a68 <HAL_SPI_Init+0xa0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a60:	d002      	beq.n	8003a68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aaa:	ea42 0103 	orr.w	r1, r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	0c1b      	lsrs	r3, r3, #16
 8003ac4:	f003 0204 	and.w	r2, r3, #4
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003ae4:	ea42 0103 	orr.w	r1, r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e01a      	b.n	8003b66 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b46:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fd fbcd 	bl	80012e8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b08a      	sub	sp, #40	@ 0x28
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_SPI_TransmitReceive+0x26>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e20a      	b.n	8003faa <HAL_SPI_TransmitReceive+0x43c>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b9c:	f7fd fdc4 	bl	8001728 <HAL_GetTick>
 8003ba0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ba8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003bb0:	887b      	ldrh	r3, [r7, #2]
 8003bb2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003bb4:	887b      	ldrh	r3, [r7, #2]
 8003bb6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bb8:	7efb      	ldrb	r3, [r7, #27]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d00e      	beq.n	8003bdc <HAL_SPI_TransmitReceive+0x6e>
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bc4:	d106      	bne.n	8003bd4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <HAL_SPI_TransmitReceive+0x66>
 8003bce:	7efb      	ldrb	r3, [r7, #27]
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d003      	beq.n	8003bdc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003bda:	e1e0      	b.n	8003f9e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d005      	beq.n	8003bee <HAL_SPI_TransmitReceive+0x80>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_SPI_TransmitReceive+0x80>
 8003be8:	887b      	ldrh	r3, [r7, #2]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d103      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003bf4:	e1d3      	b.n	8003f9e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d003      	beq.n	8003c0a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2205      	movs	r2, #5
 8003c06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	887a      	ldrh	r2, [r7, #2]
 8003c1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	887a      	ldrh	r2, [r7, #2]
 8003c22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	887a      	ldrh	r2, [r7, #2]
 8003c30:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	887a      	ldrh	r2, [r7, #2]
 8003c36:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c4c:	d802      	bhi.n	8003c54 <HAL_SPI_TransmitReceive+0xe6>
 8003c4e:	8a3b      	ldrh	r3, [r7, #16]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d908      	bls.n	8003c66 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c62:	605a      	str	r2, [r3, #4]
 8003c64:	e007      	b.n	8003c76 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c74:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c80:	2b40      	cmp	r3, #64	@ 0x40
 8003c82:	d007      	beq.n	8003c94 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c9c:	f240 8081 	bls.w	8003da2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_SPI_TransmitReceive+0x140>
 8003ca8:	8a7b      	ldrh	r3, [r7, #18]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d16d      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb2:	881a      	ldrh	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cbe:	1c9a      	adds	r2, r3, #2
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cd2:	e05a      	b.n	8003d8a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d11b      	bne.n	8003d1a <HAL_SPI_TransmitReceive+0x1ac>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d016      	beq.n	8003d1a <HAL_SPI_TransmitReceive+0x1ac>
 8003cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d113      	bne.n	8003d1a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf6:	881a      	ldrh	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d02:	1c9a      	adds	r2, r3, #2
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d11c      	bne.n	8003d62 <HAL_SPI_TransmitReceive+0x1f4>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d016      	beq.n	8003d62 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	b292      	uxth	r2, r2
 8003d40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	1c9a      	adds	r2, r3, #2
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d62:	f7fd fce1 	bl	8001728 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d80b      	bhi.n	8003d8a <HAL_SPI_TransmitReceive+0x21c>
 8003d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d78:	d007      	beq.n	8003d8a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003d88:	e109      	b.n	8003f9e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d19f      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x166>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d199      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x166>
 8003da0:	e0e3      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_SPI_TransmitReceive+0x244>
 8003daa:	8a7b      	ldrh	r3, [r7, #18]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	f040 80cf 	bne.w	8003f50 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d912      	bls.n	8003de2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc0:	881a      	ldrh	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dcc:	1c9a      	adds	r2, r3, #2
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b02      	subs	r3, #2
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003de0:	e0b6      	b.n	8003f50 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e08:	e0a2      	b.n	8003f50 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d134      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x314>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d02f      	beq.n	8003e82 <HAL_SPI_TransmitReceive+0x314>
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d12c      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d912      	bls.n	8003e58 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e36:	881a      	ldrh	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e42:	1c9a      	adds	r2, r3, #2
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b02      	subs	r3, #2
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e56:	e012      	b.n	8003e7e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	7812      	ldrb	r2, [r2, #0]
 8003e64:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d148      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x3b4>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d042      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d923      	bls.n	8003ef0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb2:	b292      	uxth	r2, r2
 8003eb4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	1c9a      	adds	r2, r3, #2
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b02      	subs	r3, #2
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d81f      	bhi.n	8003f1e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	e016      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f103 020c 	add.w	r2, r3, #12
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efc:	7812      	ldrb	r2, [r2, #0]
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f22:	f7fd fc01 	bl	8001728 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d803      	bhi.n	8003f3a <HAL_SPI_TransmitReceive+0x3cc>
 8003f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f38:	d102      	bne.n	8003f40 <HAL_SPI_TransmitReceive+0x3d2>
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d107      	bne.n	8003f50 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003f4e:	e026      	b.n	8003f9e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f47f af57 	bne.w	8003e0a <HAL_SPI_TransmitReceive+0x29c>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f47f af50 	bne.w	8003e0a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f94c 	bl	800420c <SPI_EndRxTxTransaction>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f94:	e003      	b.n	8003f9e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3728      	adds	r7, #40	@ 0x28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003fc0:	b2db      	uxtb	r3, r3
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
	...

08003fd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fe0:	f7fd fba2 	bl	8001728 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	4413      	add	r3, r2
 8003fee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ff0:	f7fd fb9a 	bl	8001728 <HAL_GetTick>
 8003ff4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ff6:	4b39      	ldr	r3, [pc, #228]	@ (80040dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	015b      	lsls	r3, r3, #5
 8003ffc:	0d1b      	lsrs	r3, r3, #20
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	fb02 f303 	mul.w	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004006:	e054      	b.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400e:	d050      	beq.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004010:	f7fd fb8a 	bl	8001728 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	429a      	cmp	r2, r3
 800401e:	d902      	bls.n	8004026 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d13d      	bne.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004034:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800403e:	d111      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004048:	d004      	beq.n	8004054 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004052:	d107      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004062:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800406c:	d10f      	bne.n	800408e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800408c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e017      	b.n	80040d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4013      	ands	r3, r2
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	429a      	cmp	r2, r3
 80040c0:	bf0c      	ite	eq
 80040c2:	2301      	moveq	r3, #1
 80040c4:	2300      	movne	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d19b      	bne.n	8004008 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3720      	adds	r7, #32
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000040 	.word	0x20000040

080040e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	@ 0x28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80040f2:	f7fd fb19 	bl	8001728 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	4413      	add	r3, r2
 8004100:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004102:	f7fd fb11 	bl	8001728 <HAL_GetTick>
 8004106:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004110:	4b3d      	ldr	r3, [pc, #244]	@ (8004208 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	00da      	lsls	r2, r3, #3
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	0d1b      	lsrs	r3, r3, #20
 8004120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004122:	fb02 f303 	mul.w	r3, r2, r3
 8004126:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004128:	e060      	b.n	80041ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004130:	d107      	bne.n	8004142 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004140:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004148:	d050      	beq.n	80041ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800414a:	f7fd faed 	bl	8001728 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004156:	429a      	cmp	r2, r3
 8004158:	d902      	bls.n	8004160 <SPI_WaitFifoStateUntilTimeout+0x80>
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	2b00      	cmp	r3, #0
 800415e:	d13d      	bne.n	80041dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800416e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004178:	d111      	bne.n	800419e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004182:	d004      	beq.n	800418e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800418c:	d107      	bne.n	800419e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800419c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041a6:	d10f      	bne.n	80041c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e010      	b.n	80041fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4013      	ands	r3, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d196      	bne.n	800412a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3728      	adds	r7, #40	@ 0x28
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000040 	.word	0x20000040

0800420c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2200      	movs	r2, #0
 8004220:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff ff5b 	bl	80040e0 <SPI_WaitFifoStateUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004234:	f043 0220 	orr.w	r2, r3, #32
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e027      	b.n	8004290 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2200      	movs	r2, #0
 8004248:	2180      	movs	r1, #128	@ 0x80
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff fec0 	bl	8003fd0 <SPI_WaitFlagStateUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d007      	beq.n	8004266 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800425a:	f043 0220 	orr.w	r2, r3, #32
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e014      	b.n	8004290 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2200      	movs	r2, #0
 800426e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f7ff ff34 	bl	80040e0 <SPI_WaitFifoStateUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004282:	f043 0220 	orr.w	r2, r3, #32
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e000      	b.n	8004290 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042a0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80042a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	43db      	mvns	r3, r3
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	4013      	ands	r3, r2
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042ce:	b084      	sub	sp, #16
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	f107 0014 	add.w	r0, r7, #20
 80042dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	b004      	add	sp, #16
 800430e:	4770      	bx	lr

08004310 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800431a:	2300      	movs	r3, #0
 800431c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 800431e:	2300      	movs	r3, #0
 8004320:	703b      	strb	r3, [r7, #0]
 8004322:	2300      	movs	r3, #0
 8004324:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8004326:	4b51      	ldr	r3, [pc, #324]	@ (800446c <BSP_GYRO_Init+0x15c>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	4798      	blx	r3
 800432c:	4603      	mov	r3, r0
 800432e:	2bd4      	cmp	r3, #212	@ 0xd4
 8004330:	d005      	beq.n	800433e <BSP_GYRO_Init+0x2e>
 8004332:	4b4e      	ldr	r3, [pc, #312]	@ (800446c <BSP_GYRO_Init+0x15c>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	4798      	blx	r3
 8004338:	4603      	mov	r3, r0
 800433a:	2bd5      	cmp	r3, #213	@ 0xd5
 800433c:	d145      	bne.n	80043ca <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800433e:	4b4c      	ldr	r3, [pc, #304]	@ (8004470 <BSP_GYRO_Init+0x160>)
 8004340:	4a4a      	ldr	r2, [pc, #296]	@ (800446c <BSP_GYRO_Init+0x15c>)
 8004342:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8004344:	2308      	movs	r3, #8
 8004346:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8004348:	2300      	movs	r3, #0
 800434a:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 800434c:	2307      	movs	r3, #7
 800434e:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8004350:	2330      	movs	r3, #48	@ 0x30
 8004352:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8004354:	2300      	movs	r3, #0
 8004356:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8004358:	2300      	movs	r3, #0
 800435a:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 800435c:	2310      	movs	r3, #16
 800435e:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004360:	793a      	ldrb	r2, [r7, #4]
 8004362:	797b      	ldrb	r3, [r7, #5]
 8004364:	4313      	orrs	r3, r2
 8004366:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004368:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800436a:	4313      	orrs	r3, r2
 800436c:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800436e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004370:	4313      	orrs	r3, r2
 8004372:	b2db      	uxtb	r3, r3
 8004374:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004376:	7a3a      	ldrb	r2, [r7, #8]
 8004378:	7a7b      	ldrb	r3, [r7, #9]
 800437a:	4313      	orrs	r3, r2
 800437c:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 800437e:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004380:	4313      	orrs	r3, r2
 8004382:	b2db      	uxtb	r3, r3
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	b29a      	uxth	r2, r3
 8004388:	89bb      	ldrh	r3, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 800438e:	4b38      	ldr	r3, [pc, #224]	@ (8004470 <BSP_GYRO_Init+0x160>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	89ba      	ldrh	r2, [r7, #12]
 8004396:	4610      	mov	r0, r2
 8004398:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 800439a:	2300      	movs	r3, #0
 800439c:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 800439e:	2300      	movs	r3, #0
 80043a0:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80043a2:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80043a4:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80043a6:	4313      	orrs	r3, r2
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80043ac:	4b30      	ldr	r3, [pc, #192]	@ (8004470 <BSP_GYRO_Init+0x160>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b2:	89ba      	ldrh	r2, [r7, #12]
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	4610      	mov	r0, r2
 80043b8:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80043ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004470 <BSP_GYRO_Init+0x160>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c0:	2010      	movs	r0, #16
 80043c2:	4798      	blx	r3

    ret = GYRO_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	73fb      	strb	r3, [r7, #15]
 80043c8:	e04a      	b.n	8004460 <BSP_GYRO_Init+0x150>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 80043ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004474 <BSP_GYRO_Init+0x164>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	4798      	blx	r3
 80043d0:	4603      	mov	r3, r0
 80043d2:	2bd3      	cmp	r3, #211	@ 0xd3
 80043d4:	d144      	bne.n	8004460 <BSP_GYRO_Init+0x150>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 80043d6:	4b26      	ldr	r3, [pc, #152]	@ (8004470 <BSP_GYRO_Init+0x160>)
 80043d8:	4a26      	ldr	r2, [pc, #152]	@ (8004474 <BSP_GYRO_Init+0x164>)
 80043da:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 80043dc:	2308      	movs	r3, #8
 80043de:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 80043e0:	2300      	movs	r3, #0
 80043e2:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 80043e4:	2307      	movs	r3, #7
 80043e6:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 80043e8:	2330      	movs	r3, #48	@ 0x30
 80043ea:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 80043ec:	2300      	movs	r3, #0
 80043ee:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 80043f0:	2300      	movs	r3, #0
 80043f2:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 80043f4:	2310      	movs	r3, #16
 80043f6:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80043f8:	793a      	ldrb	r2, [r7, #4]
 80043fa:	797b      	ldrb	r3, [r7, #5]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004400:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004402:	4313      	orrs	r3, r2
 8004404:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004406:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004408:	4313      	orrs	r3, r2
 800440a:	b2db      	uxtb	r3, r3
 800440c:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800440e:	7a3a      	ldrb	r2, [r7, #8]
 8004410:	7a7b      	ldrb	r3, [r7, #9]
 8004412:	4313      	orrs	r3, r2
 8004414:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8004416:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004418:	4313      	orrs	r3, r2
 800441a:	b2db      	uxtb	r3, r3
 800441c:	021b      	lsls	r3, r3, #8
 800441e:	b29a      	uxth	r2, r3
 8004420:	89bb      	ldrh	r3, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8004426:	4b12      	ldr	r3, [pc, #72]	@ (8004470 <BSP_GYRO_Init+0x160>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	89ba      	ldrh	r2, [r7, #12]
 800442e:	4610      	mov	r0, r2
 8004430:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 8004432:	2300      	movs	r3, #0
 8004434:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 8004436:	2300      	movs	r3, #0
 8004438:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800443a:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800443c:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800443e:	4313      	orrs	r3, r2
 8004440:	b2db      	uxtb	r3, r3
 8004442:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8004444:	4b0a      	ldr	r3, [pc, #40]	@ (8004470 <BSP_GYRO_Init+0x160>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444a:	89ba      	ldrh	r2, [r7, #12]
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	4610      	mov	r0, r2
 8004450:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 8004452:	4b07      	ldr	r3, [pc, #28]	@ (8004470 <BSP_GYRO_Init+0x160>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004458:	2010      	movs	r0, #16
 800445a:	4798      	blx	r3

    ret = GYRO_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004460:	7bfb      	ldrb	r3, [r7, #15]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000080 	.word	0x20000080
 8004470:	20000654 	.word	0x20000654
 8004474:	2000004c 	.word	0x2000004c

08004478 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8004480:	4b06      	ldr	r3, [pc, #24]	@ (800449c <BSP_GYRO_GetXYZ+0x24>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004486:	2b00      	cmp	r3, #0
 8004488:	d004      	beq.n	8004494 <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 800448a:	4b04      	ldr	r3, [pc, #16]	@ (800449c <BSP_GYRO_GetXYZ+0x24>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	4798      	blx	r3
  }
}
 8004494:	bf00      	nop
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20000654 	.word	0x20000654

080044a0 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 80044ae:	f000 fc77 	bl	8004da0 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 80044b8:	f107 030f 	add.w	r3, r7, #15
 80044bc:	2201      	movs	r2, #1
 80044be:	2120      	movs	r1, #32
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fcb3 	bl	8004e2c <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	0a1b      	lsrs	r3, r3, #8
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 80044d0:	f107 030f 	add.w	r3, r7, #15
 80044d4:	2201      	movs	r2, #1
 80044d6:	2123      	movs	r1, #35	@ 0x23
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fca7 	bl	8004e2c <GYRO_IO_Write>
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 80044e6:	b480      	push	{r7}
 80044e8:	af00      	add	r7, sp, #0
}
 80044ea:	bf00      	nop
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 80044fa:	f000 fc51 	bl	8004da0 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 80044fe:	1dfb      	adds	r3, r7, #7
 8004500:	2201      	movs	r2, #1
 8004502:	210f      	movs	r1, #15
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fcc3 	bl	8004e90 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 800450a:	79fb      	ldrb	r3, [r7, #7]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800451a:	1dfb      	adds	r3, r7, #7
 800451c:	2201      	movs	r2, #1
 800451e:	2124      	movs	r1, #36	@ 0x24
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fcb5 	bl	8004e90 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800452c:	b2db      	uxtb	r3, r3
 800452e:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8004530:	1dfb      	adds	r3, r7, #7
 8004532:	2201      	movs	r2, #1
 8004534:	2124      	movs	r1, #36	@ 0x24
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fc78 	bl	8004e2c <GYRO_IO_Write>
}
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800454e:	2300      	movs	r3, #0
 8004550:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8004558:	f107 030f 	add.w	r3, r7, #15
 800455c:	2201      	movs	r2, #1
 800455e:	2120      	movs	r1, #32
 8004560:	4618      	mov	r0, r3
 8004562:	f000 fc63 	bl	8004e2c <GYRO_IO_Write>
}
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	4603      	mov	r3, r0
 8004576:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8004578:	2300      	movs	r3, #0
 800457a:	73fb      	strb	r3, [r7, #15]
 800457c:	2300      	movs	r3, #0
 800457e:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8004580:	f107 030f 	add.w	r3, r7, #15
 8004584:	2201      	movs	r2, #1
 8004586:	2130      	movs	r1, #48	@ 0x30
 8004588:	4618      	mov	r0, r3
 800458a:	f000 fc81 	bl	8004e90 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800458e:	f107 030e 	add.w	r3, r7, #14
 8004592:	2201      	movs	r2, #1
 8004594:	2122      	movs	r1, #34	@ 0x22
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fc7a 	bl	8004e90 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	121b      	asrs	r3, r3, #8
 80045ac:	b25a      	sxtb	r2, r3
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	b25b      	sxtb	r3, r3
 80045b2:	4313      	orrs	r3, r2
 80045b4:	b25b      	sxtb	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 80045ba:	7bbb      	ldrb	r3, [r7, #14]
 80045bc:	f023 0320 	bic.w	r3, r3, #32
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	7bbb      	ldrb	r3, [r7, #14]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 80045d0:	f107 030f 	add.w	r3, r7, #15
 80045d4:	2201      	movs	r2, #1
 80045d6:	2130      	movs	r1, #48	@ 0x30
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fc27 	bl	8004e2c <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 80045de:	f107 030e 	add.w	r3, r7, #14
 80045e2:	2201      	movs	r2, #1
 80045e4:	2122      	movs	r1, #34	@ 0x22
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fc20 	bl	8004e2c <GYRO_IO_Write>
}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80045fe:	f107 030f 	add.w	r3, r7, #15
 8004602:	2201      	movs	r2, #1
 8004604:	2122      	movs	r1, #34	@ 0x22
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fc42 	bl	8004e90 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800460c:	79fb      	ldrb	r3, [r7, #7]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004618:	b2db      	uxtb	r3, r3
 800461a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004622:	b2db      	uxtb	r3, r3
 8004624:	73fb      	strb	r3, [r7, #15]
 8004626:	e00c      	b.n	8004642 <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d109      	bne.n	8004642 <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	f023 0308 	bic.w	r3, r3, #8
 8004634:	b2db      	uxtb	r3, r3
 8004636:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	f043 0308 	orr.w	r3, r3, #8
 800463e:	b2db      	uxtb	r3, r3
 8004640:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8004642:	f107 030f 	add.w	r3, r7, #15
 8004646:	2201      	movs	r2, #1
 8004648:	2122      	movs	r1, #34	@ 0x22
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fbee 	bl	8004e2c <GYRO_IO_Write>
}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8004662:	f107 030f 	add.w	r3, r7, #15
 8004666:	2201      	movs	r2, #1
 8004668:	2122      	movs	r1, #34	@ 0x22
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fc10 	bl	8004e90 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d107      	bne.n	8004686 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800467c:	b2db      	uxtb	r3, r3
 800467e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	73fb      	strb	r3, [r7, #15]
 8004684:	e009      	b.n	800469a <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d106      	bne.n	800469a <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	f023 0308 	bic.w	r3, r3, #8
 8004692:	b2db      	uxtb	r3, r3
 8004694:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800469a:	f107 030f 	add.w	r3, r7, #15
 800469e:	2201      	movs	r2, #1
 80046a0:	2122      	movs	r1, #34	@ 0x22
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fbc2 	bl	8004e2c <GYRO_IO_Write>
}
 80046a8:	bf00      	nop
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80046ba:	f107 030f 	add.w	r3, r7, #15
 80046be:	2201      	movs	r2, #1
 80046c0:	2121      	movs	r1, #33	@ 0x21
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fbe4 	bl	8004e90 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80046d2:	7bfa      	ldrb	r2, [r7, #15]
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80046dc:	f107 030f 	add.w	r3, r7, #15
 80046e0:	2201      	movs	r2, #1
 80046e2:	2121      	movs	r1, #33	@ 0x21
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fba1 	bl	8004e2c <GYRO_IO_Write>
}
 80046ea:	bf00      	nop
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	4603      	mov	r3, r0
 80046fa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80046fc:	f107 030f 	add.w	r3, r7, #15
 8004700:	2201      	movs	r2, #1
 8004702:	2124      	movs	r1, #36	@ 0x24
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fbc3 	bl	8004e90 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	f023 0310 	bic.w	r3, r3, #16
 8004710:	b2db      	uxtb	r3, r3
 8004712:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8004714:	7bfa      	ldrb	r2, [r7, #15]
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	4313      	orrs	r3, r2
 800471a:	b2db      	uxtb	r3, r3
 800471c:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800471e:	f107 030f 	add.w	r3, r7, #15
 8004722:	2201      	movs	r2, #1
 8004724:	2124      	movs	r1, #36	@ 0x24
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fb80 	bl	8004e2c <GYRO_IO_Write>
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	@ 0x28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 800473c:	2300      	movs	r3, #0
 800473e:	61bb      	str	r3, [r7, #24]
 8004740:	2300      	movs	r3, #0
 8004742:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8004744:	f107 0310 	add.w	r3, r7, #16
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
  int i = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800475c:	f107 030f 	add.w	r3, r7, #15
 8004760:	2201      	movs	r2, #1
 8004762:	2123      	movs	r1, #35	@ 0x23
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fb93 	bl	8004e90 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 800476a:	f107 0318 	add.w	r3, r7, #24
 800476e:	2206      	movs	r2, #6
 8004770:	2128      	movs	r1, #40	@ 0x28
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fb8c 	bl	8004e90 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	d121      	bne.n	80047c6 <I3G4250D_ReadXYZAngRate+0x92>
  {
    for (i = 0; i < 3; i++)
 8004782:	2300      	movs	r3, #0
 8004784:	623b      	str	r3, [r7, #32]
 8004786:	e01a      	b.n	80047be <I3G4250D_ReadXYZAngRate+0x8a>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	3301      	adds	r3, #1
 800478e:	3328      	adds	r3, #40	@ 0x28
 8004790:	443b      	add	r3, r7
 8004792:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	b29b      	uxth	r3, r3
 800479a:	6a3a      	ldr	r2, [r7, #32]
 800479c:	0052      	lsls	r2, r2, #1
 800479e:	3228      	adds	r2, #40	@ 0x28
 80047a0:	443a      	add	r2, r7
 80047a2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80047a6:	4413      	add	r3, r2
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	b21a      	sxth	r2, r3
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	3328      	adds	r3, #40	@ 0x28
 80047b2:	443b      	add	r3, r7
 80047b4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	3301      	adds	r3, #1
 80047bc:	623b      	str	r3, [r7, #32]
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	dde1      	ble.n	8004788 <I3G4250D_ReadXYZAngRate+0x54>
 80047c4:	e020      	b.n	8004808 <I3G4250D_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 80047c6:	2300      	movs	r3, #0
 80047c8:	623b      	str	r3, [r7, #32]
 80047ca:	e01a      	b.n	8004802 <I3G4250D_ReadXYZAngRate+0xce>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	3328      	adds	r3, #40	@ 0x28
 80047d2:	443b      	add	r3, r7
 80047d4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80047d8:	021b      	lsls	r3, r3, #8
 80047da:	b29b      	uxth	r3, r3
 80047dc:	6a3a      	ldr	r2, [r7, #32]
 80047de:	0052      	lsls	r2, r2, #1
 80047e0:	3201      	adds	r2, #1
 80047e2:	3228      	adds	r2, #40	@ 0x28
 80047e4:	443a      	add	r2, r7
 80047e6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80047ea:	4413      	add	r3, r2
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	b21a      	sxth	r2, r3
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	3328      	adds	r3, #40	@ 0x28
 80047f6:	443b      	add	r3, r7
 80047f8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	3301      	adds	r3, #1
 8004800:	623b      	str	r3, [r7, #32]
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	2b02      	cmp	r3, #2
 8004806:	dde1      	ble.n	80047cc <I3G4250D_ReadXYZAngRate+0x98>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800480e:	2b20      	cmp	r3, #32
 8004810:	d00c      	beq.n	800482c <I3G4250D_ReadXYZAngRate+0xf8>
 8004812:	2b20      	cmp	r3, #32
 8004814:	dc0d      	bgt.n	8004832 <I3G4250D_ReadXYZAngRate+0xfe>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <I3G4250D_ReadXYZAngRate+0xec>
 800481a:	2b10      	cmp	r3, #16
 800481c:	d003      	beq.n	8004826 <I3G4250D_ReadXYZAngRate+0xf2>
 800481e:	e008      	b.n	8004832 <I3G4250D_ReadXYZAngRate+0xfe>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8004820:	4b15      	ldr	r3, [pc, #84]	@ (8004878 <I3G4250D_ReadXYZAngRate+0x144>)
 8004822:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004824:	e005      	b.n	8004832 <I3G4250D_ReadXYZAngRate+0xfe>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8004826:	4b15      	ldr	r3, [pc, #84]	@ (800487c <I3G4250D_ReadXYZAngRate+0x148>)
 8004828:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800482a:	e002      	b.n	8004832 <I3G4250D_ReadXYZAngRate+0xfe>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 800482c:	4b14      	ldr	r3, [pc, #80]	@ (8004880 <I3G4250D_ReadXYZAngRate+0x14c>)
 800482e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004830:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 8004832:	2300      	movs	r3, #0
 8004834:	623b      	str	r3, [r7, #32]
 8004836:	e016      	b.n	8004866 <I3G4250D_ReadXYZAngRate+0x132>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	3328      	adds	r3, #40	@ 0x28
 800483e:	443b      	add	r3, r7
 8004840:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8004844:	ee07 3a90 	vmov	s15, r3
 8004848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	4413      	add	r3, r2
 8004854:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485c:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	3301      	adds	r3, #1
 8004864:	623b      	str	r3, [r7, #32]
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	2b02      	cmp	r3, #2
 800486a:	dde5      	ble.n	8004838 <I3G4250D_ReadXYZAngRate+0x104>
  }
}
 800486c:	bf00      	nop
 800486e:	bf00      	nop
 8004870:	3728      	adds	r7, #40	@ 0x28
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	410c0000 	.word	0x410c0000
 800487c:	418c0000 	.word	0x418c0000
 8004880:	428c0000 	.word	0x428c0000

08004884 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800488e:	2300      	movs	r3, #0
 8004890:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8004892:	f000 fa85 	bl	8004da0 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800489c:	f107 030f 	add.w	r3, r7, #15
 80048a0:	2201      	movs	r2, #1
 80048a2:	2120      	movs	r1, #32
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fac1 	bl	8004e2c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	0a1b      	lsrs	r3, r3, #8
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80048b4:	f107 030f 	add.w	r3, r7, #15
 80048b8:	2201      	movs	r2, #1
 80048ba:	2123      	movs	r1, #35	@ 0x23
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fab5 	bl	8004e2c <GYRO_IO_Write>
}
 80048c2:	bf00      	nop
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80048ca:	b480      	push	{r7}
 80048cc:	af00      	add	r7, sp, #0
}
 80048ce:	bf00      	nop
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80048de:	f000 fa5f 	bl	8004da0 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80048e2:	1dfb      	adds	r3, r7, #7
 80048e4:	2201      	movs	r2, #1
 80048e6:	210f      	movs	r1, #15
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 fad1 	bl	8004e90 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80048ee:	79fb      	ldrb	r3, [r7, #7]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80048fe:	1dfb      	adds	r3, r7, #7
 8004900:	2201      	movs	r2, #1
 8004902:	2124      	movs	r1, #36	@ 0x24
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fac3 	bl	8004e90 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004910:	b2db      	uxtb	r3, r3
 8004912:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004914:	1dfb      	adds	r3, r7, #7
 8004916:	2201      	movs	r2, #1
 8004918:	2124      	movs	r1, #36	@ 0x24
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fa86 	bl	8004e2c <GYRO_IO_Write>
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004932:	2300      	movs	r3, #0
 8004934:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800493c:	f107 030f 	add.w	r3, r7, #15
 8004940:	2201      	movs	r2, #1
 8004942:	2120      	movs	r1, #32
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fa71 	bl	8004e2c <GYRO_IO_Write>
}
 800494a:	bf00      	nop
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	4603      	mov	r3, r0
 800495a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800495c:	2300      	movs	r3, #0
 800495e:	73fb      	strb	r3, [r7, #15]
 8004960:	2300      	movs	r3, #0
 8004962:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8004964:	f107 030f 	add.w	r3, r7, #15
 8004968:	2201      	movs	r2, #1
 800496a:	2130      	movs	r1, #48	@ 0x30
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fa8f 	bl	8004e90 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8004972:	f107 030e 	add.w	r3, r7, #14
 8004976:	2201      	movs	r2, #1
 8004978:	2122      	movs	r1, #34	@ 0x22
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fa88 	bl	8004e90 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004986:	b2db      	uxtb	r3, r3
 8004988:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	b2db      	uxtb	r3, r3
 800498e:	121b      	asrs	r3, r3, #8
 8004990:	b25a      	sxtb	r2, r3
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	b25b      	sxtb	r3, r3
 8004996:	4313      	orrs	r3, r2
 8004998:	b25b      	sxtb	r3, r3
 800499a:	b2db      	uxtb	r3, r3
 800499c:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 800499e:	7bbb      	ldrb	r3, [r7, #14]
 80049a0:	f023 0320 	bic.w	r3, r3, #32
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	7bbb      	ldrb	r3, [r7, #14]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80049b4:	f107 030f 	add.w	r3, r7, #15
 80049b8:	2201      	movs	r2, #1
 80049ba:	2130      	movs	r1, #48	@ 0x30
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fa35 	bl	8004e2c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80049c2:	f107 030e 	add.w	r3, r7, #14
 80049c6:	2201      	movs	r2, #1
 80049c8:	2122      	movs	r1, #34	@ 0x22
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fa2e 	bl	8004e2c <GYRO_IO_Write>
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4603      	mov	r3, r0
 80049e0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80049e2:	f107 030f 	add.w	r3, r7, #15
 80049e6:	2201      	movs	r2, #1
 80049e8:	2122      	movs	r1, #34	@ 0x22
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fa50 	bl	8004e90 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	73fb      	strb	r3, [r7, #15]
 8004a0a:	e00c      	b.n	8004a26 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8004a0c:	79fb      	ldrb	r3, [r7, #7]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d109      	bne.n	8004a26 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	f023 0308 	bic.w	r3, r3, #8
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	f043 0308 	orr.w	r3, r3, #8
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004a26:	f107 030f 	add.w	r3, r7, #15
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	2122      	movs	r1, #34	@ 0x22
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 f9fc 	bl	8004e2c <GYRO_IO_Write>
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004a46:	f107 030f 	add.w	r3, r7, #15
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	2122      	movs	r1, #34	@ 0x22
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fa1e 	bl	8004e90 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d107      	bne.n	8004a6a <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	73fb      	strb	r3, [r7, #15]
 8004a68:	e009      	b.n	8004a7e <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d106      	bne.n	8004a7e <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	f023 0308 	bic.w	r3, r3, #8
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004a7e:	f107 030f 	add.w	r3, r7, #15
 8004a82:	2201      	movs	r2, #1
 8004a84:	2122      	movs	r1, #34	@ 0x22
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 f9d0 	bl	8004e2c <GYRO_IO_Write>
}
 8004a8c:	bf00      	nop
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8004a9e:	f107 030f 	add.w	r3, r7, #15
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	2121      	movs	r1, #33	@ 0x21
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 f9f2 	bl	8004e90 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8004ab6:	7bfa      	ldrb	r2, [r7, #15]
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8004ac0:	f107 030f 	add.w	r3, r7, #15
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	2121      	movs	r1, #33	@ 0x21
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 f9af 	bl	8004e2c <GYRO_IO_Write>
}
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	4603      	mov	r3, r0
 8004ade:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004ae0:	f107 030f 	add.w	r3, r7, #15
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	2124      	movs	r1, #36	@ 0x24
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 f9d1 	bl	8004e90 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	f023 0310 	bic.w	r3, r3, #16
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8004af8:	7bfa      	ldrb	r2, [r7, #15]
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004b02:	f107 030f 	add.w	r3, r7, #15
 8004b06:	2201      	movs	r2, #1
 8004b08:	2124      	movs	r1, #36	@ 0x24
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 f98e 	bl	8004e2c <GYRO_IO_Write>
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	@ 0x28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8004b20:	2300      	movs	r3, #0
 8004b22:	61bb      	str	r3, [r7, #24]
 8004b24:	2300      	movs	r3, #0
 8004b26:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8004b28:	f107 0310 	add.w	r3, r7, #16
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8004b40:	f107 030f 	add.w	r3, r7, #15
 8004b44:	2201      	movs	r2, #1
 8004b46:	2123      	movs	r1, #35	@ 0x23
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 f9a1 	bl	8004e90 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8004b4e:	f107 0318 	add.w	r3, r7, #24
 8004b52:	2206      	movs	r2, #6
 8004b54:	2128      	movs	r1, #40	@ 0x28
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 f99a 	bl	8004e90 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d121      	bne.n	8004baa <L3GD20_ReadXYZAngRate+0x92>
  {
    for(i=0; i<3; i++)
 8004b66:	2300      	movs	r3, #0
 8004b68:	623b      	str	r3, [r7, #32]
 8004b6a:	e01a      	b.n	8004ba2 <L3GD20_ReadXYZAngRate+0x8a>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	3301      	adds	r3, #1
 8004b72:	3328      	adds	r3, #40	@ 0x28
 8004b74:	443b      	add	r3, r7
 8004b76:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	6a3a      	ldr	r2, [r7, #32]
 8004b80:	0052      	lsls	r2, r2, #1
 8004b82:	3228      	adds	r2, #40	@ 0x28
 8004b84:	443a      	add	r2, r7
 8004b86:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	b21a      	sxth	r2, r3
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	3328      	adds	r3, #40	@ 0x28
 8004b96:	443b      	add	r3, r7
 8004b98:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	623b      	str	r3, [r7, #32]
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	dde1      	ble.n	8004b6c <L3GD20_ReadXYZAngRate+0x54>
 8004ba8:	e020      	b.n	8004bec <L3GD20_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8004baa:	2300      	movs	r3, #0
 8004bac:	623b      	str	r3, [r7, #32]
 8004bae:	e01a      	b.n	8004be6 <L3GD20_ReadXYZAngRate+0xce>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	3328      	adds	r3, #40	@ 0x28
 8004bb6:	443b      	add	r3, r7
 8004bb8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	6a3a      	ldr	r2, [r7, #32]
 8004bc2:	0052      	lsls	r2, r2, #1
 8004bc4:	3201      	adds	r2, #1
 8004bc6:	3228      	adds	r2, #40	@ 0x28
 8004bc8:	443a      	add	r2, r7
 8004bca:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8004bce:	4413      	add	r3, r2
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	b21a      	sxth	r2, r3
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	3328      	adds	r3, #40	@ 0x28
 8004bda:	443b      	add	r3, r7
 8004bdc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	3301      	adds	r3, #1
 8004be4:	623b      	str	r3, [r7, #32]
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	dde1      	ble.n	8004bb0 <L3GD20_ReadXYZAngRate+0x98>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d00c      	beq.n	8004c10 <L3GD20_ReadXYZAngRate+0xf8>
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	dc0d      	bgt.n	8004c16 <L3GD20_ReadXYZAngRate+0xfe>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <L3GD20_ReadXYZAngRate+0xec>
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d003      	beq.n	8004c0a <L3GD20_ReadXYZAngRate+0xf2>
 8004c02:	e008      	b.n	8004c16 <L3GD20_ReadXYZAngRate+0xfe>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8004c04:	4b15      	ldr	r3, [pc, #84]	@ (8004c5c <L3GD20_ReadXYZAngRate+0x144>)
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8004c08:	e005      	b.n	8004c16 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8004c0a:	4b15      	ldr	r3, [pc, #84]	@ (8004c60 <L3GD20_ReadXYZAngRate+0x148>)
 8004c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8004c0e:	e002      	b.n	8004c16 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8004c10:	4b14      	ldr	r3, [pc, #80]	@ (8004c64 <L3GD20_ReadXYZAngRate+0x14c>)
 8004c12:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8004c14:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8004c16:	2300      	movs	r3, #0
 8004c18:	623b      	str	r3, [r7, #32]
 8004c1a:	e016      	b.n	8004c4a <L3GD20_ReadXYZAngRate+0x132>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	3328      	adds	r3, #40	@ 0x28
 8004c22:	443b      	add	r3, r7
 8004c24:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8004c28:	ee07 3a90 	vmov	s15, r3
 8004c2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	4413      	add	r3, r2
 8004c38:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c40:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	3301      	adds	r3, #1
 8004c48:	623b      	str	r3, [r7, #32]
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	dde5      	ble.n	8004c1c <L3GD20_ReadXYZAngRate+0x104>
  }
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	3728      	adds	r7, #40	@ 0x28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	410c0000 	.word	0x410c0000
 8004c60:	418c0000 	.word	0x418c0000
 8004c64:	428c0000 	.word	0x428c0000

08004c68 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8004c6c:	481a      	ldr	r0, [pc, #104]	@ (8004cd8 <SPIx_Init+0x70>)
 8004c6e:	f7ff f9a0 	bl	8003fb2 <HAL_SPI_GetState>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d12c      	bne.n	8004cd2 <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8004c78:	4b17      	ldr	r3, [pc, #92]	@ (8004cd8 <SPIx_Init+0x70>)
 8004c7a:	4a18      	ldr	r2, [pc, #96]	@ (8004cdc <SPIx_Init+0x74>)
 8004c7c:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004c7e:	4b16      	ldr	r3, [pc, #88]	@ (8004cd8 <SPIx_Init+0x70>)
 8004c80:	2218      	movs	r2, #24
 8004c82:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 8004c84:	4b14      	ldr	r3, [pc, #80]	@ (8004cd8 <SPIx_Init+0x70>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c8a:	4b13      	ldr	r3, [pc, #76]	@ (8004cd8 <SPIx_Init+0x70>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c90:	4b11      	ldr	r3, [pc, #68]	@ (8004cd8 <SPIx_Init+0x70>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c96:	4b10      	ldr	r3, [pc, #64]	@ (8004cd8 <SPIx_Init+0x70>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8004c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004cd8 <SPIx_Init+0x70>)
 8004c9e:	2207      	movs	r2, #7
 8004ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd8 <SPIx_Init+0x70>)
 8004ca4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004ca8:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004caa:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd8 <SPIx_Init+0x70>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8004cb0:	4b09      	ldr	r3, [pc, #36]	@ (8004cd8 <SPIx_Init+0x70>)
 8004cb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cb6:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8004cb8:	4b07      	ldr	r3, [pc, #28]	@ (8004cd8 <SPIx_Init+0x70>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8004cbe:	4b06      	ldr	r3, [pc, #24]	@ (8004cd8 <SPIx_Init+0x70>)
 8004cc0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004cc4:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8004cc6:	4804      	ldr	r0, [pc, #16]	@ (8004cd8 <SPIx_Init+0x70>)
 8004cc8:	f000 f836 	bl	8004d38 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8004ccc:	4802      	ldr	r0, [pc, #8]	@ (8004cd8 <SPIx_Init+0x70>)
 8004cce:	f7fe fe7b 	bl	80039c8 <HAL_SPI_Init>
  }
}
 8004cd2:	bf00      	nop
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000658 	.word	0x20000658
 8004cdc:	40013000 	.word	0x40013000

08004ce0 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8004cee:	4b0a      	ldr	r3, [pc, #40]	@ (8004d18 <SPIx_WriteRead+0x38>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f107 020f 	add.w	r2, r7, #15
 8004cf6:	1df9      	adds	r1, r7, #7
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	4807      	ldr	r0, [pc, #28]	@ (8004d1c <SPIx_WriteRead+0x3c>)
 8004cfe:	f7fe ff36 	bl	8003b6e <HAL_SPI_TransmitReceive>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8004d08:	f000 f80a 	bl	8004d20 <SPIx_Error>
  }
  
  return receivedbyte;
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	200000b4 	.word	0x200000b4
 8004d1c:	20000658 	.word	0x20000658

08004d20 <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8004d24:	4803      	ldr	r0, [pc, #12]	@ (8004d34 <SPIx_Error+0x14>)
 8004d26:	f7fe fefa 	bl	8003b1e <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8004d2a:	f7ff ff9d 	bl	8004c68 <SPIx_Init>
}
 8004d2e:	bf00      	nop
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20000658 	.word	0x20000658

08004d38 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	@ 0x28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8004d40:	4b16      	ldr	r3, [pc, #88]	@ (8004d9c <SPIx_MspInit+0x64>)
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	4a15      	ldr	r2, [pc, #84]	@ (8004d9c <SPIx_MspInit+0x64>)
 8004d46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d4a:	6193      	str	r3, [r2, #24]
 8004d4c:	4b13      	ldr	r3, [pc, #76]	@ (8004d9c <SPIx_MspInit+0x64>)
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8004d58:	4b10      	ldr	r3, [pc, #64]	@ (8004d9c <SPIx_MspInit+0x64>)
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	4a0f      	ldr	r2, [pc, #60]	@ (8004d9c <SPIx_MspInit+0x64>)
 8004d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d62:	6153      	str	r3, [r2, #20]
 8004d64:	4b0d      	ldr	r3, [pc, #52]	@ (8004d9c <SPIx_MspInit+0x64>)
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8004d70:	23e0      	movs	r3, #224	@ 0xe0
 8004d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004d74:	2302      	movs	r3, #2
 8004d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8004d78:	2300      	movs	r3, #0
 8004d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8004d80:	2305      	movs	r3, #5
 8004d82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8004d84:	f107 0314 	add.w	r3, r7, #20
 8004d88:	4619      	mov	r1, r3
 8004d8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d8e:	f7fc fde1 	bl	8001954 <HAL_GPIO_Init>
}
 8004d92:	bf00      	nop
 8004d94:	3728      	adds	r7, #40	@ 0x28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000

08004da0 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8004da6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e24 <GYRO_IO_Init+0x84>)
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	4a1e      	ldr	r2, [pc, #120]	@ (8004e24 <GYRO_IO_Init+0x84>)
 8004dac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004db0:	6153      	str	r3, [r2, #20]
 8004db2:	4b1c      	ldr	r3, [pc, #112]	@ (8004e24 <GYRO_IO_Init+0x84>)
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dba:	60bb      	str	r3, [r7, #8]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8004dce:	f107 030c 	add.w	r3, r7, #12
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4814      	ldr	r0, [pc, #80]	@ (8004e28 <GYRO_IO_Init+0x88>)
 8004dd6:	f7fc fdbd 	bl	8001954 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8004dda:	2201      	movs	r2, #1
 8004ddc:	2108      	movs	r1, #8
 8004dde:	4812      	ldr	r0, [pc, #72]	@ (8004e28 <GYRO_IO_Init+0x88>)
 8004de0:	f7fd f80e 	bl	8001e00 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8004de4:	4b0f      	ldr	r3, [pc, #60]	@ (8004e24 <GYRO_IO_Init+0x84>)
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	4a0e      	ldr	r2, [pc, #56]	@ (8004e24 <GYRO_IO_Init+0x84>)
 8004dea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004dee:	6153      	str	r3, [r2, #20]
 8004df0:	4b0c      	ldr	r3, [pc, #48]	@ (8004e24 <GYRO_IO_Init+0x84>)
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8004e00:	2300      	movs	r3, #0
 8004e02:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e04:	2303      	movs	r3, #3
 8004e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004e0c:	f107 030c 	add.w	r3, r7, #12
 8004e10:	4619      	mov	r1, r3
 8004e12:	4805      	ldr	r0, [pc, #20]	@ (8004e28 <GYRO_IO_Init+0x88>)
 8004e14:	f7fc fd9e 	bl	8001954 <HAL_GPIO_Init>
  
  SPIx_Init();
 8004e18:	f7ff ff26 	bl	8004c68 <SPIx_Init>
}
 8004e1c:	bf00      	nop
 8004e1e:	3720      	adds	r7, #32
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40021000 	.word	0x40021000
 8004e28:	48001000 	.word	0x48001000

08004e2c <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	70fb      	strb	r3, [r7, #3]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8004e3c:	883b      	ldrh	r3, [r7, #0]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d903      	bls.n	8004e4a <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e48:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2108      	movs	r1, #8
 8004e4e:	480f      	ldr	r0, [pc, #60]	@ (8004e8c <GYRO_IO_Write+0x60>)
 8004e50:	f7fc ffd6 	bl	8001e00 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8004e54:	78fb      	ldrb	r3, [r7, #3]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff ff42 	bl	8004ce0 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8004e5c:	e00a      	b.n	8004e74 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff ff3c 	bl	8004ce0 <SPIx_WriteRead>
    NumByteToWrite--;
 8004e68:	883b      	ldrh	r3, [r7, #0]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3301      	adds	r3, #1
 8004e72:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8004e74:	883b      	ldrh	r3, [r7, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f1      	bne.n	8004e5e <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	2108      	movs	r1, #8
 8004e7e:	4803      	ldr	r0, [pc, #12]	@ (8004e8c <GYRO_IO_Write+0x60>)
 8004e80:	f7fc ffbe 	bl	8001e00 <HAL_GPIO_WritePin>
}
 8004e84:	bf00      	nop
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	48001000 	.word	0x48001000

08004e90 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	70fb      	strb	r3, [r7, #3]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8004ea0:	883b      	ldrh	r3, [r7, #0]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d904      	bls.n	8004eb0 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8004eac:	70fb      	strb	r3, [r7, #3]
 8004eae:	e003      	b.n	8004eb8 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004eb6:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2108      	movs	r1, #8
 8004ebc:	4810      	ldr	r0, [pc, #64]	@ (8004f00 <GYRO_IO_Read+0x70>)
 8004ebe:	f7fc ff9f 	bl	8001e00 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8004ec2:	78fb      	ldrb	r3, [r7, #3]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff ff0b 	bl	8004ce0 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8004eca:	e00c      	b.n	8004ee6 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8004ecc:	2000      	movs	r0, #0
 8004ece:	f7ff ff07 	bl	8004ce0 <SPIx_WriteRead>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8004eda:	883b      	ldrh	r3, [r7, #0]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8004ee6:	883b      	ldrh	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1ef      	bne.n	8004ecc <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004eec:	2201      	movs	r2, #1
 8004eee:	2108      	movs	r1, #8
 8004ef0:	4803      	ldr	r0, [pc, #12]	@ (8004f00 <GYRO_IO_Read+0x70>)
 8004ef2:	f7fc ff85 	bl	8001e00 <HAL_GPIO_WritePin>
}  
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	48001000 	.word	0x48001000

08004f04 <__cvt>:
 8004f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f08:	ec57 6b10 	vmov	r6, r7, d0
 8004f0c:	2f00      	cmp	r7, #0
 8004f0e:	460c      	mov	r4, r1
 8004f10:	4619      	mov	r1, r3
 8004f12:	463b      	mov	r3, r7
 8004f14:	bfbb      	ittet	lt
 8004f16:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004f1a:	461f      	movlt	r7, r3
 8004f1c:	2300      	movge	r3, #0
 8004f1e:	232d      	movlt	r3, #45	@ 0x2d
 8004f20:	700b      	strb	r3, [r1, #0]
 8004f22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f24:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004f28:	4691      	mov	r9, r2
 8004f2a:	f023 0820 	bic.w	r8, r3, #32
 8004f2e:	bfbc      	itt	lt
 8004f30:	4632      	movlt	r2, r6
 8004f32:	4616      	movlt	r6, r2
 8004f34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f38:	d005      	beq.n	8004f46 <__cvt+0x42>
 8004f3a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004f3e:	d100      	bne.n	8004f42 <__cvt+0x3e>
 8004f40:	3401      	adds	r4, #1
 8004f42:	2102      	movs	r1, #2
 8004f44:	e000      	b.n	8004f48 <__cvt+0x44>
 8004f46:	2103      	movs	r1, #3
 8004f48:	ab03      	add	r3, sp, #12
 8004f4a:	9301      	str	r3, [sp, #4]
 8004f4c:	ab02      	add	r3, sp, #8
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	ec47 6b10 	vmov	d0, r6, r7
 8004f54:	4653      	mov	r3, sl
 8004f56:	4622      	mov	r2, r4
 8004f58:	f000 fe6a 	bl	8005c30 <_dtoa_r>
 8004f5c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004f60:	4605      	mov	r5, r0
 8004f62:	d119      	bne.n	8004f98 <__cvt+0x94>
 8004f64:	f019 0f01 	tst.w	r9, #1
 8004f68:	d00e      	beq.n	8004f88 <__cvt+0x84>
 8004f6a:	eb00 0904 	add.w	r9, r0, r4
 8004f6e:	2200      	movs	r2, #0
 8004f70:	2300      	movs	r3, #0
 8004f72:	4630      	mov	r0, r6
 8004f74:	4639      	mov	r1, r7
 8004f76:	f7fb fda7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f7a:	b108      	cbz	r0, 8004f80 <__cvt+0x7c>
 8004f7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f80:	2230      	movs	r2, #48	@ 0x30
 8004f82:	9b03      	ldr	r3, [sp, #12]
 8004f84:	454b      	cmp	r3, r9
 8004f86:	d31e      	bcc.n	8004fc6 <__cvt+0xc2>
 8004f88:	9b03      	ldr	r3, [sp, #12]
 8004f8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f8c:	1b5b      	subs	r3, r3, r5
 8004f8e:	4628      	mov	r0, r5
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	b004      	add	sp, #16
 8004f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f9c:	eb00 0904 	add.w	r9, r0, r4
 8004fa0:	d1e5      	bne.n	8004f6e <__cvt+0x6a>
 8004fa2:	7803      	ldrb	r3, [r0, #0]
 8004fa4:	2b30      	cmp	r3, #48	@ 0x30
 8004fa6:	d10a      	bne.n	8004fbe <__cvt+0xba>
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2300      	movs	r3, #0
 8004fac:	4630      	mov	r0, r6
 8004fae:	4639      	mov	r1, r7
 8004fb0:	f7fb fd8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fb4:	b918      	cbnz	r0, 8004fbe <__cvt+0xba>
 8004fb6:	f1c4 0401 	rsb	r4, r4, #1
 8004fba:	f8ca 4000 	str.w	r4, [sl]
 8004fbe:	f8da 3000 	ldr.w	r3, [sl]
 8004fc2:	4499      	add	r9, r3
 8004fc4:	e7d3      	b.n	8004f6e <__cvt+0x6a>
 8004fc6:	1c59      	adds	r1, r3, #1
 8004fc8:	9103      	str	r1, [sp, #12]
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	e7d9      	b.n	8004f82 <__cvt+0x7e>

08004fce <__exponent>:
 8004fce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fd0:	2900      	cmp	r1, #0
 8004fd2:	bfba      	itte	lt
 8004fd4:	4249      	neglt	r1, r1
 8004fd6:	232d      	movlt	r3, #45	@ 0x2d
 8004fd8:	232b      	movge	r3, #43	@ 0x2b
 8004fda:	2909      	cmp	r1, #9
 8004fdc:	7002      	strb	r2, [r0, #0]
 8004fde:	7043      	strb	r3, [r0, #1]
 8004fe0:	dd29      	ble.n	8005036 <__exponent+0x68>
 8004fe2:	f10d 0307 	add.w	r3, sp, #7
 8004fe6:	461d      	mov	r5, r3
 8004fe8:	270a      	movs	r7, #10
 8004fea:	461a      	mov	r2, r3
 8004fec:	fbb1 f6f7 	udiv	r6, r1, r7
 8004ff0:	fb07 1416 	mls	r4, r7, r6, r1
 8004ff4:	3430      	adds	r4, #48	@ 0x30
 8004ff6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	2c63      	cmp	r4, #99	@ 0x63
 8004ffe:	f103 33ff 	add.w	r3, r3, #4294967295
 8005002:	4631      	mov	r1, r6
 8005004:	dcf1      	bgt.n	8004fea <__exponent+0x1c>
 8005006:	3130      	adds	r1, #48	@ 0x30
 8005008:	1e94      	subs	r4, r2, #2
 800500a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800500e:	1c41      	adds	r1, r0, #1
 8005010:	4623      	mov	r3, r4
 8005012:	42ab      	cmp	r3, r5
 8005014:	d30a      	bcc.n	800502c <__exponent+0x5e>
 8005016:	f10d 0309 	add.w	r3, sp, #9
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	42ac      	cmp	r4, r5
 800501e:	bf88      	it	hi
 8005020:	2300      	movhi	r3, #0
 8005022:	3302      	adds	r3, #2
 8005024:	4403      	add	r3, r0
 8005026:	1a18      	subs	r0, r3, r0
 8005028:	b003      	add	sp, #12
 800502a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800502c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005030:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005034:	e7ed      	b.n	8005012 <__exponent+0x44>
 8005036:	2330      	movs	r3, #48	@ 0x30
 8005038:	3130      	adds	r1, #48	@ 0x30
 800503a:	7083      	strb	r3, [r0, #2]
 800503c:	70c1      	strb	r1, [r0, #3]
 800503e:	1d03      	adds	r3, r0, #4
 8005040:	e7f1      	b.n	8005026 <__exponent+0x58>
	...

08005044 <_printf_float>:
 8005044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005048:	b08d      	sub	sp, #52	@ 0x34
 800504a:	460c      	mov	r4, r1
 800504c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005050:	4616      	mov	r6, r2
 8005052:	461f      	mov	r7, r3
 8005054:	4605      	mov	r5, r0
 8005056:	f000 fcdb 	bl	8005a10 <_localeconv_r>
 800505a:	6803      	ldr	r3, [r0, #0]
 800505c:	9304      	str	r3, [sp, #16]
 800505e:	4618      	mov	r0, r3
 8005060:	f7fb f906 	bl	8000270 <strlen>
 8005064:	2300      	movs	r3, #0
 8005066:	930a      	str	r3, [sp, #40]	@ 0x28
 8005068:	f8d8 3000 	ldr.w	r3, [r8]
 800506c:	9005      	str	r0, [sp, #20]
 800506e:	3307      	adds	r3, #7
 8005070:	f023 0307 	bic.w	r3, r3, #7
 8005074:	f103 0208 	add.w	r2, r3, #8
 8005078:	f894 a018 	ldrb.w	sl, [r4, #24]
 800507c:	f8d4 b000 	ldr.w	fp, [r4]
 8005080:	f8c8 2000 	str.w	r2, [r8]
 8005084:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005088:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800508c:	9307      	str	r3, [sp, #28]
 800508e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005092:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800509a:	4b9c      	ldr	r3, [pc, #624]	@ (800530c <_printf_float+0x2c8>)
 800509c:	f04f 32ff 	mov.w	r2, #4294967295
 80050a0:	f7fb fd44 	bl	8000b2c <__aeabi_dcmpun>
 80050a4:	bb70      	cbnz	r0, 8005104 <_printf_float+0xc0>
 80050a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050aa:	4b98      	ldr	r3, [pc, #608]	@ (800530c <_printf_float+0x2c8>)
 80050ac:	f04f 32ff 	mov.w	r2, #4294967295
 80050b0:	f7fb fd1e 	bl	8000af0 <__aeabi_dcmple>
 80050b4:	bb30      	cbnz	r0, 8005104 <_printf_float+0xc0>
 80050b6:	2200      	movs	r2, #0
 80050b8:	2300      	movs	r3, #0
 80050ba:	4640      	mov	r0, r8
 80050bc:	4649      	mov	r1, r9
 80050be:	f7fb fd0d 	bl	8000adc <__aeabi_dcmplt>
 80050c2:	b110      	cbz	r0, 80050ca <_printf_float+0x86>
 80050c4:	232d      	movs	r3, #45	@ 0x2d
 80050c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050ca:	4a91      	ldr	r2, [pc, #580]	@ (8005310 <_printf_float+0x2cc>)
 80050cc:	4b91      	ldr	r3, [pc, #580]	@ (8005314 <_printf_float+0x2d0>)
 80050ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80050d2:	bf94      	ite	ls
 80050d4:	4690      	movls	r8, r2
 80050d6:	4698      	movhi	r8, r3
 80050d8:	2303      	movs	r3, #3
 80050da:	6123      	str	r3, [r4, #16]
 80050dc:	f02b 0304 	bic.w	r3, fp, #4
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	f04f 0900 	mov.w	r9, #0
 80050e6:	9700      	str	r7, [sp, #0]
 80050e8:	4633      	mov	r3, r6
 80050ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80050ec:	4621      	mov	r1, r4
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 f9d2 	bl	8005498 <_printf_common>
 80050f4:	3001      	adds	r0, #1
 80050f6:	f040 808d 	bne.w	8005214 <_printf_float+0x1d0>
 80050fa:	f04f 30ff 	mov.w	r0, #4294967295
 80050fe:	b00d      	add	sp, #52	@ 0x34
 8005100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005104:	4642      	mov	r2, r8
 8005106:	464b      	mov	r3, r9
 8005108:	4640      	mov	r0, r8
 800510a:	4649      	mov	r1, r9
 800510c:	f7fb fd0e 	bl	8000b2c <__aeabi_dcmpun>
 8005110:	b140      	cbz	r0, 8005124 <_printf_float+0xe0>
 8005112:	464b      	mov	r3, r9
 8005114:	2b00      	cmp	r3, #0
 8005116:	bfbc      	itt	lt
 8005118:	232d      	movlt	r3, #45	@ 0x2d
 800511a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800511e:	4a7e      	ldr	r2, [pc, #504]	@ (8005318 <_printf_float+0x2d4>)
 8005120:	4b7e      	ldr	r3, [pc, #504]	@ (800531c <_printf_float+0x2d8>)
 8005122:	e7d4      	b.n	80050ce <_printf_float+0x8a>
 8005124:	6863      	ldr	r3, [r4, #4]
 8005126:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800512a:	9206      	str	r2, [sp, #24]
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	d13b      	bne.n	80051a8 <_printf_float+0x164>
 8005130:	2306      	movs	r3, #6
 8005132:	6063      	str	r3, [r4, #4]
 8005134:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005138:	2300      	movs	r3, #0
 800513a:	6022      	str	r2, [r4, #0]
 800513c:	9303      	str	r3, [sp, #12]
 800513e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005140:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005144:	ab09      	add	r3, sp, #36	@ 0x24
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	6861      	ldr	r1, [r4, #4]
 800514a:	ec49 8b10 	vmov	d0, r8, r9
 800514e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005152:	4628      	mov	r0, r5
 8005154:	f7ff fed6 	bl	8004f04 <__cvt>
 8005158:	9b06      	ldr	r3, [sp, #24]
 800515a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800515c:	2b47      	cmp	r3, #71	@ 0x47
 800515e:	4680      	mov	r8, r0
 8005160:	d129      	bne.n	80051b6 <_printf_float+0x172>
 8005162:	1cc8      	adds	r0, r1, #3
 8005164:	db02      	blt.n	800516c <_printf_float+0x128>
 8005166:	6863      	ldr	r3, [r4, #4]
 8005168:	4299      	cmp	r1, r3
 800516a:	dd41      	ble.n	80051f0 <_printf_float+0x1ac>
 800516c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005170:	fa5f fa8a 	uxtb.w	sl, sl
 8005174:	3901      	subs	r1, #1
 8005176:	4652      	mov	r2, sl
 8005178:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800517c:	9109      	str	r1, [sp, #36]	@ 0x24
 800517e:	f7ff ff26 	bl	8004fce <__exponent>
 8005182:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005184:	1813      	adds	r3, r2, r0
 8005186:	2a01      	cmp	r2, #1
 8005188:	4681      	mov	r9, r0
 800518a:	6123      	str	r3, [r4, #16]
 800518c:	dc02      	bgt.n	8005194 <_printf_float+0x150>
 800518e:	6822      	ldr	r2, [r4, #0]
 8005190:	07d2      	lsls	r2, r2, #31
 8005192:	d501      	bpl.n	8005198 <_printf_float+0x154>
 8005194:	3301      	adds	r3, #1
 8005196:	6123      	str	r3, [r4, #16]
 8005198:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0a2      	beq.n	80050e6 <_printf_float+0xa2>
 80051a0:	232d      	movs	r3, #45	@ 0x2d
 80051a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051a6:	e79e      	b.n	80050e6 <_printf_float+0xa2>
 80051a8:	9a06      	ldr	r2, [sp, #24]
 80051aa:	2a47      	cmp	r2, #71	@ 0x47
 80051ac:	d1c2      	bne.n	8005134 <_printf_float+0xf0>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1c0      	bne.n	8005134 <_printf_float+0xf0>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e7bd      	b.n	8005132 <_printf_float+0xee>
 80051b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051ba:	d9db      	bls.n	8005174 <_printf_float+0x130>
 80051bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80051c0:	d118      	bne.n	80051f4 <_printf_float+0x1b0>
 80051c2:	2900      	cmp	r1, #0
 80051c4:	6863      	ldr	r3, [r4, #4]
 80051c6:	dd0b      	ble.n	80051e0 <_printf_float+0x19c>
 80051c8:	6121      	str	r1, [r4, #16]
 80051ca:	b913      	cbnz	r3, 80051d2 <_printf_float+0x18e>
 80051cc:	6822      	ldr	r2, [r4, #0]
 80051ce:	07d0      	lsls	r0, r2, #31
 80051d0:	d502      	bpl.n	80051d8 <_printf_float+0x194>
 80051d2:	3301      	adds	r3, #1
 80051d4:	440b      	add	r3, r1
 80051d6:	6123      	str	r3, [r4, #16]
 80051d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80051da:	f04f 0900 	mov.w	r9, #0
 80051de:	e7db      	b.n	8005198 <_printf_float+0x154>
 80051e0:	b913      	cbnz	r3, 80051e8 <_printf_float+0x1a4>
 80051e2:	6822      	ldr	r2, [r4, #0]
 80051e4:	07d2      	lsls	r2, r2, #31
 80051e6:	d501      	bpl.n	80051ec <_printf_float+0x1a8>
 80051e8:	3302      	adds	r3, #2
 80051ea:	e7f4      	b.n	80051d6 <_printf_float+0x192>
 80051ec:	2301      	movs	r3, #1
 80051ee:	e7f2      	b.n	80051d6 <_printf_float+0x192>
 80051f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80051f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051f6:	4299      	cmp	r1, r3
 80051f8:	db05      	blt.n	8005206 <_printf_float+0x1c2>
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	6121      	str	r1, [r4, #16]
 80051fe:	07d8      	lsls	r0, r3, #31
 8005200:	d5ea      	bpl.n	80051d8 <_printf_float+0x194>
 8005202:	1c4b      	adds	r3, r1, #1
 8005204:	e7e7      	b.n	80051d6 <_printf_float+0x192>
 8005206:	2900      	cmp	r1, #0
 8005208:	bfd4      	ite	le
 800520a:	f1c1 0202 	rsble	r2, r1, #2
 800520e:	2201      	movgt	r2, #1
 8005210:	4413      	add	r3, r2
 8005212:	e7e0      	b.n	80051d6 <_printf_float+0x192>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	055a      	lsls	r2, r3, #21
 8005218:	d407      	bmi.n	800522a <_printf_float+0x1e6>
 800521a:	6923      	ldr	r3, [r4, #16]
 800521c:	4642      	mov	r2, r8
 800521e:	4631      	mov	r1, r6
 8005220:	4628      	mov	r0, r5
 8005222:	47b8      	blx	r7
 8005224:	3001      	adds	r0, #1
 8005226:	d12b      	bne.n	8005280 <_printf_float+0x23c>
 8005228:	e767      	b.n	80050fa <_printf_float+0xb6>
 800522a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800522e:	f240 80dd 	bls.w	80053ec <_printf_float+0x3a8>
 8005232:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005236:	2200      	movs	r2, #0
 8005238:	2300      	movs	r3, #0
 800523a:	f7fb fc45 	bl	8000ac8 <__aeabi_dcmpeq>
 800523e:	2800      	cmp	r0, #0
 8005240:	d033      	beq.n	80052aa <_printf_float+0x266>
 8005242:	4a37      	ldr	r2, [pc, #220]	@ (8005320 <_printf_float+0x2dc>)
 8005244:	2301      	movs	r3, #1
 8005246:	4631      	mov	r1, r6
 8005248:	4628      	mov	r0, r5
 800524a:	47b8      	blx	r7
 800524c:	3001      	adds	r0, #1
 800524e:	f43f af54 	beq.w	80050fa <_printf_float+0xb6>
 8005252:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005256:	4543      	cmp	r3, r8
 8005258:	db02      	blt.n	8005260 <_printf_float+0x21c>
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	07d8      	lsls	r0, r3, #31
 800525e:	d50f      	bpl.n	8005280 <_printf_float+0x23c>
 8005260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005264:	4631      	mov	r1, r6
 8005266:	4628      	mov	r0, r5
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	f43f af45 	beq.w	80050fa <_printf_float+0xb6>
 8005270:	f04f 0900 	mov.w	r9, #0
 8005274:	f108 38ff 	add.w	r8, r8, #4294967295
 8005278:	f104 0a1a 	add.w	sl, r4, #26
 800527c:	45c8      	cmp	r8, r9
 800527e:	dc09      	bgt.n	8005294 <_printf_float+0x250>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	079b      	lsls	r3, r3, #30
 8005284:	f100 8103 	bmi.w	800548e <_printf_float+0x44a>
 8005288:	68e0      	ldr	r0, [r4, #12]
 800528a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800528c:	4298      	cmp	r0, r3
 800528e:	bfb8      	it	lt
 8005290:	4618      	movlt	r0, r3
 8005292:	e734      	b.n	80050fe <_printf_float+0xba>
 8005294:	2301      	movs	r3, #1
 8005296:	4652      	mov	r2, sl
 8005298:	4631      	mov	r1, r6
 800529a:	4628      	mov	r0, r5
 800529c:	47b8      	blx	r7
 800529e:	3001      	adds	r0, #1
 80052a0:	f43f af2b 	beq.w	80050fa <_printf_float+0xb6>
 80052a4:	f109 0901 	add.w	r9, r9, #1
 80052a8:	e7e8      	b.n	800527c <_printf_float+0x238>
 80052aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	dc39      	bgt.n	8005324 <_printf_float+0x2e0>
 80052b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005320 <_printf_float+0x2dc>)
 80052b2:	2301      	movs	r3, #1
 80052b4:	4631      	mov	r1, r6
 80052b6:	4628      	mov	r0, r5
 80052b8:	47b8      	blx	r7
 80052ba:	3001      	adds	r0, #1
 80052bc:	f43f af1d 	beq.w	80050fa <_printf_float+0xb6>
 80052c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80052c4:	ea59 0303 	orrs.w	r3, r9, r3
 80052c8:	d102      	bne.n	80052d0 <_printf_float+0x28c>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	07d9      	lsls	r1, r3, #31
 80052ce:	d5d7      	bpl.n	8005280 <_printf_float+0x23c>
 80052d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052d4:	4631      	mov	r1, r6
 80052d6:	4628      	mov	r0, r5
 80052d8:	47b8      	blx	r7
 80052da:	3001      	adds	r0, #1
 80052dc:	f43f af0d 	beq.w	80050fa <_printf_float+0xb6>
 80052e0:	f04f 0a00 	mov.w	sl, #0
 80052e4:	f104 0b1a 	add.w	fp, r4, #26
 80052e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052ea:	425b      	negs	r3, r3
 80052ec:	4553      	cmp	r3, sl
 80052ee:	dc01      	bgt.n	80052f4 <_printf_float+0x2b0>
 80052f0:	464b      	mov	r3, r9
 80052f2:	e793      	b.n	800521c <_printf_float+0x1d8>
 80052f4:	2301      	movs	r3, #1
 80052f6:	465a      	mov	r2, fp
 80052f8:	4631      	mov	r1, r6
 80052fa:	4628      	mov	r0, r5
 80052fc:	47b8      	blx	r7
 80052fe:	3001      	adds	r0, #1
 8005300:	f43f aefb 	beq.w	80050fa <_printf_float+0xb6>
 8005304:	f10a 0a01 	add.w	sl, sl, #1
 8005308:	e7ee      	b.n	80052e8 <_printf_float+0x2a4>
 800530a:	bf00      	nop
 800530c:	7fefffff 	.word	0x7fefffff
 8005310:	08007c1c 	.word	0x08007c1c
 8005314:	08007c20 	.word	0x08007c20
 8005318:	08007c24 	.word	0x08007c24
 800531c:	08007c28 	.word	0x08007c28
 8005320:	08007c2c 	.word	0x08007c2c
 8005324:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005326:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800532a:	4553      	cmp	r3, sl
 800532c:	bfa8      	it	ge
 800532e:	4653      	movge	r3, sl
 8005330:	2b00      	cmp	r3, #0
 8005332:	4699      	mov	r9, r3
 8005334:	dc36      	bgt.n	80053a4 <_printf_float+0x360>
 8005336:	f04f 0b00 	mov.w	fp, #0
 800533a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800533e:	f104 021a 	add.w	r2, r4, #26
 8005342:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005344:	9306      	str	r3, [sp, #24]
 8005346:	eba3 0309 	sub.w	r3, r3, r9
 800534a:	455b      	cmp	r3, fp
 800534c:	dc31      	bgt.n	80053b2 <_printf_float+0x36e>
 800534e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005350:	459a      	cmp	sl, r3
 8005352:	dc3a      	bgt.n	80053ca <_printf_float+0x386>
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	07da      	lsls	r2, r3, #31
 8005358:	d437      	bmi.n	80053ca <_printf_float+0x386>
 800535a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800535c:	ebaa 0903 	sub.w	r9, sl, r3
 8005360:	9b06      	ldr	r3, [sp, #24]
 8005362:	ebaa 0303 	sub.w	r3, sl, r3
 8005366:	4599      	cmp	r9, r3
 8005368:	bfa8      	it	ge
 800536a:	4699      	movge	r9, r3
 800536c:	f1b9 0f00 	cmp.w	r9, #0
 8005370:	dc33      	bgt.n	80053da <_printf_float+0x396>
 8005372:	f04f 0800 	mov.w	r8, #0
 8005376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800537a:	f104 0b1a 	add.w	fp, r4, #26
 800537e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005380:	ebaa 0303 	sub.w	r3, sl, r3
 8005384:	eba3 0309 	sub.w	r3, r3, r9
 8005388:	4543      	cmp	r3, r8
 800538a:	f77f af79 	ble.w	8005280 <_printf_float+0x23c>
 800538e:	2301      	movs	r3, #1
 8005390:	465a      	mov	r2, fp
 8005392:	4631      	mov	r1, r6
 8005394:	4628      	mov	r0, r5
 8005396:	47b8      	blx	r7
 8005398:	3001      	adds	r0, #1
 800539a:	f43f aeae 	beq.w	80050fa <_printf_float+0xb6>
 800539e:	f108 0801 	add.w	r8, r8, #1
 80053a2:	e7ec      	b.n	800537e <_printf_float+0x33a>
 80053a4:	4642      	mov	r2, r8
 80053a6:	4631      	mov	r1, r6
 80053a8:	4628      	mov	r0, r5
 80053aa:	47b8      	blx	r7
 80053ac:	3001      	adds	r0, #1
 80053ae:	d1c2      	bne.n	8005336 <_printf_float+0x2f2>
 80053b0:	e6a3      	b.n	80050fa <_printf_float+0xb6>
 80053b2:	2301      	movs	r3, #1
 80053b4:	4631      	mov	r1, r6
 80053b6:	4628      	mov	r0, r5
 80053b8:	9206      	str	r2, [sp, #24]
 80053ba:	47b8      	blx	r7
 80053bc:	3001      	adds	r0, #1
 80053be:	f43f ae9c 	beq.w	80050fa <_printf_float+0xb6>
 80053c2:	9a06      	ldr	r2, [sp, #24]
 80053c4:	f10b 0b01 	add.w	fp, fp, #1
 80053c8:	e7bb      	b.n	8005342 <_printf_float+0x2fe>
 80053ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ce:	4631      	mov	r1, r6
 80053d0:	4628      	mov	r0, r5
 80053d2:	47b8      	blx	r7
 80053d4:	3001      	adds	r0, #1
 80053d6:	d1c0      	bne.n	800535a <_printf_float+0x316>
 80053d8:	e68f      	b.n	80050fa <_printf_float+0xb6>
 80053da:	9a06      	ldr	r2, [sp, #24]
 80053dc:	464b      	mov	r3, r9
 80053de:	4442      	add	r2, r8
 80053e0:	4631      	mov	r1, r6
 80053e2:	4628      	mov	r0, r5
 80053e4:	47b8      	blx	r7
 80053e6:	3001      	adds	r0, #1
 80053e8:	d1c3      	bne.n	8005372 <_printf_float+0x32e>
 80053ea:	e686      	b.n	80050fa <_printf_float+0xb6>
 80053ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80053f0:	f1ba 0f01 	cmp.w	sl, #1
 80053f4:	dc01      	bgt.n	80053fa <_printf_float+0x3b6>
 80053f6:	07db      	lsls	r3, r3, #31
 80053f8:	d536      	bpl.n	8005468 <_printf_float+0x424>
 80053fa:	2301      	movs	r3, #1
 80053fc:	4642      	mov	r2, r8
 80053fe:	4631      	mov	r1, r6
 8005400:	4628      	mov	r0, r5
 8005402:	47b8      	blx	r7
 8005404:	3001      	adds	r0, #1
 8005406:	f43f ae78 	beq.w	80050fa <_printf_float+0xb6>
 800540a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800540e:	4631      	mov	r1, r6
 8005410:	4628      	mov	r0, r5
 8005412:	47b8      	blx	r7
 8005414:	3001      	adds	r0, #1
 8005416:	f43f ae70 	beq.w	80050fa <_printf_float+0xb6>
 800541a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800541e:	2200      	movs	r2, #0
 8005420:	2300      	movs	r3, #0
 8005422:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005426:	f7fb fb4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800542a:	b9c0      	cbnz	r0, 800545e <_printf_float+0x41a>
 800542c:	4653      	mov	r3, sl
 800542e:	f108 0201 	add.w	r2, r8, #1
 8005432:	4631      	mov	r1, r6
 8005434:	4628      	mov	r0, r5
 8005436:	47b8      	blx	r7
 8005438:	3001      	adds	r0, #1
 800543a:	d10c      	bne.n	8005456 <_printf_float+0x412>
 800543c:	e65d      	b.n	80050fa <_printf_float+0xb6>
 800543e:	2301      	movs	r3, #1
 8005440:	465a      	mov	r2, fp
 8005442:	4631      	mov	r1, r6
 8005444:	4628      	mov	r0, r5
 8005446:	47b8      	blx	r7
 8005448:	3001      	adds	r0, #1
 800544a:	f43f ae56 	beq.w	80050fa <_printf_float+0xb6>
 800544e:	f108 0801 	add.w	r8, r8, #1
 8005452:	45d0      	cmp	r8, sl
 8005454:	dbf3      	blt.n	800543e <_printf_float+0x3fa>
 8005456:	464b      	mov	r3, r9
 8005458:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800545c:	e6df      	b.n	800521e <_printf_float+0x1da>
 800545e:	f04f 0800 	mov.w	r8, #0
 8005462:	f104 0b1a 	add.w	fp, r4, #26
 8005466:	e7f4      	b.n	8005452 <_printf_float+0x40e>
 8005468:	2301      	movs	r3, #1
 800546a:	4642      	mov	r2, r8
 800546c:	e7e1      	b.n	8005432 <_printf_float+0x3ee>
 800546e:	2301      	movs	r3, #1
 8005470:	464a      	mov	r2, r9
 8005472:	4631      	mov	r1, r6
 8005474:	4628      	mov	r0, r5
 8005476:	47b8      	blx	r7
 8005478:	3001      	adds	r0, #1
 800547a:	f43f ae3e 	beq.w	80050fa <_printf_float+0xb6>
 800547e:	f108 0801 	add.w	r8, r8, #1
 8005482:	68e3      	ldr	r3, [r4, #12]
 8005484:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005486:	1a5b      	subs	r3, r3, r1
 8005488:	4543      	cmp	r3, r8
 800548a:	dcf0      	bgt.n	800546e <_printf_float+0x42a>
 800548c:	e6fc      	b.n	8005288 <_printf_float+0x244>
 800548e:	f04f 0800 	mov.w	r8, #0
 8005492:	f104 0919 	add.w	r9, r4, #25
 8005496:	e7f4      	b.n	8005482 <_printf_float+0x43e>

08005498 <_printf_common>:
 8005498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800549c:	4616      	mov	r6, r2
 800549e:	4698      	mov	r8, r3
 80054a0:	688a      	ldr	r2, [r1, #8]
 80054a2:	690b      	ldr	r3, [r1, #16]
 80054a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054a8:	4293      	cmp	r3, r2
 80054aa:	bfb8      	it	lt
 80054ac:	4613      	movlt	r3, r2
 80054ae:	6033      	str	r3, [r6, #0]
 80054b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054b4:	4607      	mov	r7, r0
 80054b6:	460c      	mov	r4, r1
 80054b8:	b10a      	cbz	r2, 80054be <_printf_common+0x26>
 80054ba:	3301      	adds	r3, #1
 80054bc:	6033      	str	r3, [r6, #0]
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	0699      	lsls	r1, r3, #26
 80054c2:	bf42      	ittt	mi
 80054c4:	6833      	ldrmi	r3, [r6, #0]
 80054c6:	3302      	addmi	r3, #2
 80054c8:	6033      	strmi	r3, [r6, #0]
 80054ca:	6825      	ldr	r5, [r4, #0]
 80054cc:	f015 0506 	ands.w	r5, r5, #6
 80054d0:	d106      	bne.n	80054e0 <_printf_common+0x48>
 80054d2:	f104 0a19 	add.w	sl, r4, #25
 80054d6:	68e3      	ldr	r3, [r4, #12]
 80054d8:	6832      	ldr	r2, [r6, #0]
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	42ab      	cmp	r3, r5
 80054de:	dc26      	bgt.n	800552e <_printf_common+0x96>
 80054e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054e4:	6822      	ldr	r2, [r4, #0]
 80054e6:	3b00      	subs	r3, #0
 80054e8:	bf18      	it	ne
 80054ea:	2301      	movne	r3, #1
 80054ec:	0692      	lsls	r2, r2, #26
 80054ee:	d42b      	bmi.n	8005548 <_printf_common+0xb0>
 80054f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054f4:	4641      	mov	r1, r8
 80054f6:	4638      	mov	r0, r7
 80054f8:	47c8      	blx	r9
 80054fa:	3001      	adds	r0, #1
 80054fc:	d01e      	beq.n	800553c <_printf_common+0xa4>
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	6922      	ldr	r2, [r4, #16]
 8005502:	f003 0306 	and.w	r3, r3, #6
 8005506:	2b04      	cmp	r3, #4
 8005508:	bf02      	ittt	eq
 800550a:	68e5      	ldreq	r5, [r4, #12]
 800550c:	6833      	ldreq	r3, [r6, #0]
 800550e:	1aed      	subeq	r5, r5, r3
 8005510:	68a3      	ldr	r3, [r4, #8]
 8005512:	bf0c      	ite	eq
 8005514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005518:	2500      	movne	r5, #0
 800551a:	4293      	cmp	r3, r2
 800551c:	bfc4      	itt	gt
 800551e:	1a9b      	subgt	r3, r3, r2
 8005520:	18ed      	addgt	r5, r5, r3
 8005522:	2600      	movs	r6, #0
 8005524:	341a      	adds	r4, #26
 8005526:	42b5      	cmp	r5, r6
 8005528:	d11a      	bne.n	8005560 <_printf_common+0xc8>
 800552a:	2000      	movs	r0, #0
 800552c:	e008      	b.n	8005540 <_printf_common+0xa8>
 800552e:	2301      	movs	r3, #1
 8005530:	4652      	mov	r2, sl
 8005532:	4641      	mov	r1, r8
 8005534:	4638      	mov	r0, r7
 8005536:	47c8      	blx	r9
 8005538:	3001      	adds	r0, #1
 800553a:	d103      	bne.n	8005544 <_printf_common+0xac>
 800553c:	f04f 30ff 	mov.w	r0, #4294967295
 8005540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005544:	3501      	adds	r5, #1
 8005546:	e7c6      	b.n	80054d6 <_printf_common+0x3e>
 8005548:	18e1      	adds	r1, r4, r3
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	2030      	movs	r0, #48	@ 0x30
 800554e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005552:	4422      	add	r2, r4
 8005554:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005558:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800555c:	3302      	adds	r3, #2
 800555e:	e7c7      	b.n	80054f0 <_printf_common+0x58>
 8005560:	2301      	movs	r3, #1
 8005562:	4622      	mov	r2, r4
 8005564:	4641      	mov	r1, r8
 8005566:	4638      	mov	r0, r7
 8005568:	47c8      	blx	r9
 800556a:	3001      	adds	r0, #1
 800556c:	d0e6      	beq.n	800553c <_printf_common+0xa4>
 800556e:	3601      	adds	r6, #1
 8005570:	e7d9      	b.n	8005526 <_printf_common+0x8e>
	...

08005574 <_printf_i>:
 8005574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005578:	7e0f      	ldrb	r7, [r1, #24]
 800557a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800557c:	2f78      	cmp	r7, #120	@ 0x78
 800557e:	4691      	mov	r9, r2
 8005580:	4680      	mov	r8, r0
 8005582:	460c      	mov	r4, r1
 8005584:	469a      	mov	sl, r3
 8005586:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800558a:	d807      	bhi.n	800559c <_printf_i+0x28>
 800558c:	2f62      	cmp	r7, #98	@ 0x62
 800558e:	d80a      	bhi.n	80055a6 <_printf_i+0x32>
 8005590:	2f00      	cmp	r7, #0
 8005592:	f000 80d2 	beq.w	800573a <_printf_i+0x1c6>
 8005596:	2f58      	cmp	r7, #88	@ 0x58
 8005598:	f000 80b9 	beq.w	800570e <_printf_i+0x19a>
 800559c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055a4:	e03a      	b.n	800561c <_printf_i+0xa8>
 80055a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055aa:	2b15      	cmp	r3, #21
 80055ac:	d8f6      	bhi.n	800559c <_printf_i+0x28>
 80055ae:	a101      	add	r1, pc, #4	@ (adr r1, 80055b4 <_printf_i+0x40>)
 80055b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055b4:	0800560d 	.word	0x0800560d
 80055b8:	08005621 	.word	0x08005621
 80055bc:	0800559d 	.word	0x0800559d
 80055c0:	0800559d 	.word	0x0800559d
 80055c4:	0800559d 	.word	0x0800559d
 80055c8:	0800559d 	.word	0x0800559d
 80055cc:	08005621 	.word	0x08005621
 80055d0:	0800559d 	.word	0x0800559d
 80055d4:	0800559d 	.word	0x0800559d
 80055d8:	0800559d 	.word	0x0800559d
 80055dc:	0800559d 	.word	0x0800559d
 80055e0:	08005721 	.word	0x08005721
 80055e4:	0800564b 	.word	0x0800564b
 80055e8:	080056db 	.word	0x080056db
 80055ec:	0800559d 	.word	0x0800559d
 80055f0:	0800559d 	.word	0x0800559d
 80055f4:	08005743 	.word	0x08005743
 80055f8:	0800559d 	.word	0x0800559d
 80055fc:	0800564b 	.word	0x0800564b
 8005600:	0800559d 	.word	0x0800559d
 8005604:	0800559d 	.word	0x0800559d
 8005608:	080056e3 	.word	0x080056e3
 800560c:	6833      	ldr	r3, [r6, #0]
 800560e:	1d1a      	adds	r2, r3, #4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6032      	str	r2, [r6, #0]
 8005614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005618:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800561c:	2301      	movs	r3, #1
 800561e:	e09d      	b.n	800575c <_printf_i+0x1e8>
 8005620:	6833      	ldr	r3, [r6, #0]
 8005622:	6820      	ldr	r0, [r4, #0]
 8005624:	1d19      	adds	r1, r3, #4
 8005626:	6031      	str	r1, [r6, #0]
 8005628:	0606      	lsls	r6, r0, #24
 800562a:	d501      	bpl.n	8005630 <_printf_i+0xbc>
 800562c:	681d      	ldr	r5, [r3, #0]
 800562e:	e003      	b.n	8005638 <_printf_i+0xc4>
 8005630:	0645      	lsls	r5, r0, #25
 8005632:	d5fb      	bpl.n	800562c <_printf_i+0xb8>
 8005634:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005638:	2d00      	cmp	r5, #0
 800563a:	da03      	bge.n	8005644 <_printf_i+0xd0>
 800563c:	232d      	movs	r3, #45	@ 0x2d
 800563e:	426d      	negs	r5, r5
 8005640:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005644:	4859      	ldr	r0, [pc, #356]	@ (80057ac <_printf_i+0x238>)
 8005646:	230a      	movs	r3, #10
 8005648:	e011      	b.n	800566e <_printf_i+0xfa>
 800564a:	6821      	ldr	r1, [r4, #0]
 800564c:	6833      	ldr	r3, [r6, #0]
 800564e:	0608      	lsls	r0, r1, #24
 8005650:	f853 5b04 	ldr.w	r5, [r3], #4
 8005654:	d402      	bmi.n	800565c <_printf_i+0xe8>
 8005656:	0649      	lsls	r1, r1, #25
 8005658:	bf48      	it	mi
 800565a:	b2ad      	uxthmi	r5, r5
 800565c:	2f6f      	cmp	r7, #111	@ 0x6f
 800565e:	4853      	ldr	r0, [pc, #332]	@ (80057ac <_printf_i+0x238>)
 8005660:	6033      	str	r3, [r6, #0]
 8005662:	bf14      	ite	ne
 8005664:	230a      	movne	r3, #10
 8005666:	2308      	moveq	r3, #8
 8005668:	2100      	movs	r1, #0
 800566a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800566e:	6866      	ldr	r6, [r4, #4]
 8005670:	60a6      	str	r6, [r4, #8]
 8005672:	2e00      	cmp	r6, #0
 8005674:	bfa2      	ittt	ge
 8005676:	6821      	ldrge	r1, [r4, #0]
 8005678:	f021 0104 	bicge.w	r1, r1, #4
 800567c:	6021      	strge	r1, [r4, #0]
 800567e:	b90d      	cbnz	r5, 8005684 <_printf_i+0x110>
 8005680:	2e00      	cmp	r6, #0
 8005682:	d04b      	beq.n	800571c <_printf_i+0x1a8>
 8005684:	4616      	mov	r6, r2
 8005686:	fbb5 f1f3 	udiv	r1, r5, r3
 800568a:	fb03 5711 	mls	r7, r3, r1, r5
 800568e:	5dc7      	ldrb	r7, [r0, r7]
 8005690:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005694:	462f      	mov	r7, r5
 8005696:	42bb      	cmp	r3, r7
 8005698:	460d      	mov	r5, r1
 800569a:	d9f4      	bls.n	8005686 <_printf_i+0x112>
 800569c:	2b08      	cmp	r3, #8
 800569e:	d10b      	bne.n	80056b8 <_printf_i+0x144>
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	07df      	lsls	r7, r3, #31
 80056a4:	d508      	bpl.n	80056b8 <_printf_i+0x144>
 80056a6:	6923      	ldr	r3, [r4, #16]
 80056a8:	6861      	ldr	r1, [r4, #4]
 80056aa:	4299      	cmp	r1, r3
 80056ac:	bfde      	ittt	le
 80056ae:	2330      	movle	r3, #48	@ 0x30
 80056b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056b8:	1b92      	subs	r2, r2, r6
 80056ba:	6122      	str	r2, [r4, #16]
 80056bc:	f8cd a000 	str.w	sl, [sp]
 80056c0:	464b      	mov	r3, r9
 80056c2:	aa03      	add	r2, sp, #12
 80056c4:	4621      	mov	r1, r4
 80056c6:	4640      	mov	r0, r8
 80056c8:	f7ff fee6 	bl	8005498 <_printf_common>
 80056cc:	3001      	adds	r0, #1
 80056ce:	d14a      	bne.n	8005766 <_printf_i+0x1f2>
 80056d0:	f04f 30ff 	mov.w	r0, #4294967295
 80056d4:	b004      	add	sp, #16
 80056d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	f043 0320 	orr.w	r3, r3, #32
 80056e0:	6023      	str	r3, [r4, #0]
 80056e2:	4833      	ldr	r0, [pc, #204]	@ (80057b0 <_printf_i+0x23c>)
 80056e4:	2778      	movs	r7, #120	@ 0x78
 80056e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	6831      	ldr	r1, [r6, #0]
 80056ee:	061f      	lsls	r7, r3, #24
 80056f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80056f4:	d402      	bmi.n	80056fc <_printf_i+0x188>
 80056f6:	065f      	lsls	r7, r3, #25
 80056f8:	bf48      	it	mi
 80056fa:	b2ad      	uxthmi	r5, r5
 80056fc:	6031      	str	r1, [r6, #0]
 80056fe:	07d9      	lsls	r1, r3, #31
 8005700:	bf44      	itt	mi
 8005702:	f043 0320 	orrmi.w	r3, r3, #32
 8005706:	6023      	strmi	r3, [r4, #0]
 8005708:	b11d      	cbz	r5, 8005712 <_printf_i+0x19e>
 800570a:	2310      	movs	r3, #16
 800570c:	e7ac      	b.n	8005668 <_printf_i+0xf4>
 800570e:	4827      	ldr	r0, [pc, #156]	@ (80057ac <_printf_i+0x238>)
 8005710:	e7e9      	b.n	80056e6 <_printf_i+0x172>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	f023 0320 	bic.w	r3, r3, #32
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	e7f6      	b.n	800570a <_printf_i+0x196>
 800571c:	4616      	mov	r6, r2
 800571e:	e7bd      	b.n	800569c <_printf_i+0x128>
 8005720:	6833      	ldr	r3, [r6, #0]
 8005722:	6825      	ldr	r5, [r4, #0]
 8005724:	6961      	ldr	r1, [r4, #20]
 8005726:	1d18      	adds	r0, r3, #4
 8005728:	6030      	str	r0, [r6, #0]
 800572a:	062e      	lsls	r6, r5, #24
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	d501      	bpl.n	8005734 <_printf_i+0x1c0>
 8005730:	6019      	str	r1, [r3, #0]
 8005732:	e002      	b.n	800573a <_printf_i+0x1c6>
 8005734:	0668      	lsls	r0, r5, #25
 8005736:	d5fb      	bpl.n	8005730 <_printf_i+0x1bc>
 8005738:	8019      	strh	r1, [r3, #0]
 800573a:	2300      	movs	r3, #0
 800573c:	6123      	str	r3, [r4, #16]
 800573e:	4616      	mov	r6, r2
 8005740:	e7bc      	b.n	80056bc <_printf_i+0x148>
 8005742:	6833      	ldr	r3, [r6, #0]
 8005744:	1d1a      	adds	r2, r3, #4
 8005746:	6032      	str	r2, [r6, #0]
 8005748:	681e      	ldr	r6, [r3, #0]
 800574a:	6862      	ldr	r2, [r4, #4]
 800574c:	2100      	movs	r1, #0
 800574e:	4630      	mov	r0, r6
 8005750:	f7fa fd3e 	bl	80001d0 <memchr>
 8005754:	b108      	cbz	r0, 800575a <_printf_i+0x1e6>
 8005756:	1b80      	subs	r0, r0, r6
 8005758:	6060      	str	r0, [r4, #4]
 800575a:	6863      	ldr	r3, [r4, #4]
 800575c:	6123      	str	r3, [r4, #16]
 800575e:	2300      	movs	r3, #0
 8005760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005764:	e7aa      	b.n	80056bc <_printf_i+0x148>
 8005766:	6923      	ldr	r3, [r4, #16]
 8005768:	4632      	mov	r2, r6
 800576a:	4649      	mov	r1, r9
 800576c:	4640      	mov	r0, r8
 800576e:	47d0      	blx	sl
 8005770:	3001      	adds	r0, #1
 8005772:	d0ad      	beq.n	80056d0 <_printf_i+0x15c>
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	079b      	lsls	r3, r3, #30
 8005778:	d413      	bmi.n	80057a2 <_printf_i+0x22e>
 800577a:	68e0      	ldr	r0, [r4, #12]
 800577c:	9b03      	ldr	r3, [sp, #12]
 800577e:	4298      	cmp	r0, r3
 8005780:	bfb8      	it	lt
 8005782:	4618      	movlt	r0, r3
 8005784:	e7a6      	b.n	80056d4 <_printf_i+0x160>
 8005786:	2301      	movs	r3, #1
 8005788:	4632      	mov	r2, r6
 800578a:	4649      	mov	r1, r9
 800578c:	4640      	mov	r0, r8
 800578e:	47d0      	blx	sl
 8005790:	3001      	adds	r0, #1
 8005792:	d09d      	beq.n	80056d0 <_printf_i+0x15c>
 8005794:	3501      	adds	r5, #1
 8005796:	68e3      	ldr	r3, [r4, #12]
 8005798:	9903      	ldr	r1, [sp, #12]
 800579a:	1a5b      	subs	r3, r3, r1
 800579c:	42ab      	cmp	r3, r5
 800579e:	dcf2      	bgt.n	8005786 <_printf_i+0x212>
 80057a0:	e7eb      	b.n	800577a <_printf_i+0x206>
 80057a2:	2500      	movs	r5, #0
 80057a4:	f104 0619 	add.w	r6, r4, #25
 80057a8:	e7f5      	b.n	8005796 <_printf_i+0x222>
 80057aa:	bf00      	nop
 80057ac:	08007c2e 	.word	0x08007c2e
 80057b0:	08007c3f 	.word	0x08007c3f

080057b4 <std>:
 80057b4:	2300      	movs	r3, #0
 80057b6:	b510      	push	{r4, lr}
 80057b8:	4604      	mov	r4, r0
 80057ba:	e9c0 3300 	strd	r3, r3, [r0]
 80057be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057c2:	6083      	str	r3, [r0, #8]
 80057c4:	8181      	strh	r1, [r0, #12]
 80057c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80057c8:	81c2      	strh	r2, [r0, #14]
 80057ca:	6183      	str	r3, [r0, #24]
 80057cc:	4619      	mov	r1, r3
 80057ce:	2208      	movs	r2, #8
 80057d0:	305c      	adds	r0, #92	@ 0x5c
 80057d2:	f000 f914 	bl	80059fe <memset>
 80057d6:	4b0d      	ldr	r3, [pc, #52]	@ (800580c <std+0x58>)
 80057d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80057da:	4b0d      	ldr	r3, [pc, #52]	@ (8005810 <std+0x5c>)
 80057dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057de:	4b0d      	ldr	r3, [pc, #52]	@ (8005814 <std+0x60>)
 80057e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005818 <std+0x64>)
 80057e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80057e6:	4b0d      	ldr	r3, [pc, #52]	@ (800581c <std+0x68>)
 80057e8:	6224      	str	r4, [r4, #32]
 80057ea:	429c      	cmp	r4, r3
 80057ec:	d006      	beq.n	80057fc <std+0x48>
 80057ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057f2:	4294      	cmp	r4, r2
 80057f4:	d002      	beq.n	80057fc <std+0x48>
 80057f6:	33d0      	adds	r3, #208	@ 0xd0
 80057f8:	429c      	cmp	r4, r3
 80057fa:	d105      	bne.n	8005808 <std+0x54>
 80057fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005804:	f000 b978 	b.w	8005af8 <__retarget_lock_init_recursive>
 8005808:	bd10      	pop	{r4, pc}
 800580a:	bf00      	nop
 800580c:	08005979 	.word	0x08005979
 8005810:	0800599b 	.word	0x0800599b
 8005814:	080059d3 	.word	0x080059d3
 8005818:	080059f7 	.word	0x080059f7
 800581c:	200006bc 	.word	0x200006bc

08005820 <stdio_exit_handler>:
 8005820:	4a02      	ldr	r2, [pc, #8]	@ (800582c <stdio_exit_handler+0xc>)
 8005822:	4903      	ldr	r1, [pc, #12]	@ (8005830 <stdio_exit_handler+0x10>)
 8005824:	4803      	ldr	r0, [pc, #12]	@ (8005834 <stdio_exit_handler+0x14>)
 8005826:	f000 b869 	b.w	80058fc <_fwalk_sglue>
 800582a:	bf00      	nop
 800582c:	200000b8 	.word	0x200000b8
 8005830:	08007475 	.word	0x08007475
 8005834:	200000c8 	.word	0x200000c8

08005838 <cleanup_stdio>:
 8005838:	6841      	ldr	r1, [r0, #4]
 800583a:	4b0c      	ldr	r3, [pc, #48]	@ (800586c <cleanup_stdio+0x34>)
 800583c:	4299      	cmp	r1, r3
 800583e:	b510      	push	{r4, lr}
 8005840:	4604      	mov	r4, r0
 8005842:	d001      	beq.n	8005848 <cleanup_stdio+0x10>
 8005844:	f001 fe16 	bl	8007474 <_fflush_r>
 8005848:	68a1      	ldr	r1, [r4, #8]
 800584a:	4b09      	ldr	r3, [pc, #36]	@ (8005870 <cleanup_stdio+0x38>)
 800584c:	4299      	cmp	r1, r3
 800584e:	d002      	beq.n	8005856 <cleanup_stdio+0x1e>
 8005850:	4620      	mov	r0, r4
 8005852:	f001 fe0f 	bl	8007474 <_fflush_r>
 8005856:	68e1      	ldr	r1, [r4, #12]
 8005858:	4b06      	ldr	r3, [pc, #24]	@ (8005874 <cleanup_stdio+0x3c>)
 800585a:	4299      	cmp	r1, r3
 800585c:	d004      	beq.n	8005868 <cleanup_stdio+0x30>
 800585e:	4620      	mov	r0, r4
 8005860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005864:	f001 be06 	b.w	8007474 <_fflush_r>
 8005868:	bd10      	pop	{r4, pc}
 800586a:	bf00      	nop
 800586c:	200006bc 	.word	0x200006bc
 8005870:	20000724 	.word	0x20000724
 8005874:	2000078c 	.word	0x2000078c

08005878 <global_stdio_init.part.0>:
 8005878:	b510      	push	{r4, lr}
 800587a:	4b0b      	ldr	r3, [pc, #44]	@ (80058a8 <global_stdio_init.part.0+0x30>)
 800587c:	4c0b      	ldr	r4, [pc, #44]	@ (80058ac <global_stdio_init.part.0+0x34>)
 800587e:	4a0c      	ldr	r2, [pc, #48]	@ (80058b0 <global_stdio_init.part.0+0x38>)
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	4620      	mov	r0, r4
 8005884:	2200      	movs	r2, #0
 8005886:	2104      	movs	r1, #4
 8005888:	f7ff ff94 	bl	80057b4 <std>
 800588c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005890:	2201      	movs	r2, #1
 8005892:	2109      	movs	r1, #9
 8005894:	f7ff ff8e 	bl	80057b4 <std>
 8005898:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800589c:	2202      	movs	r2, #2
 800589e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a2:	2112      	movs	r1, #18
 80058a4:	f7ff bf86 	b.w	80057b4 <std>
 80058a8:	200007f4 	.word	0x200007f4
 80058ac:	200006bc 	.word	0x200006bc
 80058b0:	08005821 	.word	0x08005821

080058b4 <__sfp_lock_acquire>:
 80058b4:	4801      	ldr	r0, [pc, #4]	@ (80058bc <__sfp_lock_acquire+0x8>)
 80058b6:	f000 b920 	b.w	8005afa <__retarget_lock_acquire_recursive>
 80058ba:	bf00      	nop
 80058bc:	200007fd 	.word	0x200007fd

080058c0 <__sfp_lock_release>:
 80058c0:	4801      	ldr	r0, [pc, #4]	@ (80058c8 <__sfp_lock_release+0x8>)
 80058c2:	f000 b91b 	b.w	8005afc <__retarget_lock_release_recursive>
 80058c6:	bf00      	nop
 80058c8:	200007fd 	.word	0x200007fd

080058cc <__sinit>:
 80058cc:	b510      	push	{r4, lr}
 80058ce:	4604      	mov	r4, r0
 80058d0:	f7ff fff0 	bl	80058b4 <__sfp_lock_acquire>
 80058d4:	6a23      	ldr	r3, [r4, #32]
 80058d6:	b11b      	cbz	r3, 80058e0 <__sinit+0x14>
 80058d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058dc:	f7ff bff0 	b.w	80058c0 <__sfp_lock_release>
 80058e0:	4b04      	ldr	r3, [pc, #16]	@ (80058f4 <__sinit+0x28>)
 80058e2:	6223      	str	r3, [r4, #32]
 80058e4:	4b04      	ldr	r3, [pc, #16]	@ (80058f8 <__sinit+0x2c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1f5      	bne.n	80058d8 <__sinit+0xc>
 80058ec:	f7ff ffc4 	bl	8005878 <global_stdio_init.part.0>
 80058f0:	e7f2      	b.n	80058d8 <__sinit+0xc>
 80058f2:	bf00      	nop
 80058f4:	08005839 	.word	0x08005839
 80058f8:	200007f4 	.word	0x200007f4

080058fc <_fwalk_sglue>:
 80058fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005900:	4607      	mov	r7, r0
 8005902:	4688      	mov	r8, r1
 8005904:	4614      	mov	r4, r2
 8005906:	2600      	movs	r6, #0
 8005908:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800590c:	f1b9 0901 	subs.w	r9, r9, #1
 8005910:	d505      	bpl.n	800591e <_fwalk_sglue+0x22>
 8005912:	6824      	ldr	r4, [r4, #0]
 8005914:	2c00      	cmp	r4, #0
 8005916:	d1f7      	bne.n	8005908 <_fwalk_sglue+0xc>
 8005918:	4630      	mov	r0, r6
 800591a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800591e:	89ab      	ldrh	r3, [r5, #12]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d907      	bls.n	8005934 <_fwalk_sglue+0x38>
 8005924:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005928:	3301      	adds	r3, #1
 800592a:	d003      	beq.n	8005934 <_fwalk_sglue+0x38>
 800592c:	4629      	mov	r1, r5
 800592e:	4638      	mov	r0, r7
 8005930:	47c0      	blx	r8
 8005932:	4306      	orrs	r6, r0
 8005934:	3568      	adds	r5, #104	@ 0x68
 8005936:	e7e9      	b.n	800590c <_fwalk_sglue+0x10>

08005938 <siprintf>:
 8005938:	b40e      	push	{r1, r2, r3}
 800593a:	b500      	push	{lr}
 800593c:	b09c      	sub	sp, #112	@ 0x70
 800593e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005940:	9002      	str	r0, [sp, #8]
 8005942:	9006      	str	r0, [sp, #24]
 8005944:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005948:	4809      	ldr	r0, [pc, #36]	@ (8005970 <siprintf+0x38>)
 800594a:	9107      	str	r1, [sp, #28]
 800594c:	9104      	str	r1, [sp, #16]
 800594e:	4909      	ldr	r1, [pc, #36]	@ (8005974 <siprintf+0x3c>)
 8005950:	f853 2b04 	ldr.w	r2, [r3], #4
 8005954:	9105      	str	r1, [sp, #20]
 8005956:	6800      	ldr	r0, [r0, #0]
 8005958:	9301      	str	r3, [sp, #4]
 800595a:	a902      	add	r1, sp, #8
 800595c:	f001 fc0a 	bl	8007174 <_svfiprintf_r>
 8005960:	9b02      	ldr	r3, [sp, #8]
 8005962:	2200      	movs	r2, #0
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	b01c      	add	sp, #112	@ 0x70
 8005968:	f85d eb04 	ldr.w	lr, [sp], #4
 800596c:	b003      	add	sp, #12
 800596e:	4770      	bx	lr
 8005970:	200000c4 	.word	0x200000c4
 8005974:	ffff0208 	.word	0xffff0208

08005978 <__sread>:
 8005978:	b510      	push	{r4, lr}
 800597a:	460c      	mov	r4, r1
 800597c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005980:	f000 f86c 	bl	8005a5c <_read_r>
 8005984:	2800      	cmp	r0, #0
 8005986:	bfab      	itete	ge
 8005988:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800598a:	89a3      	ldrhlt	r3, [r4, #12]
 800598c:	181b      	addge	r3, r3, r0
 800598e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005992:	bfac      	ite	ge
 8005994:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005996:	81a3      	strhlt	r3, [r4, #12]
 8005998:	bd10      	pop	{r4, pc}

0800599a <__swrite>:
 800599a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800599e:	461f      	mov	r7, r3
 80059a0:	898b      	ldrh	r3, [r1, #12]
 80059a2:	05db      	lsls	r3, r3, #23
 80059a4:	4605      	mov	r5, r0
 80059a6:	460c      	mov	r4, r1
 80059a8:	4616      	mov	r6, r2
 80059aa:	d505      	bpl.n	80059b8 <__swrite+0x1e>
 80059ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b0:	2302      	movs	r3, #2
 80059b2:	2200      	movs	r2, #0
 80059b4:	f000 f840 	bl	8005a38 <_lseek_r>
 80059b8:	89a3      	ldrh	r3, [r4, #12]
 80059ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059c2:	81a3      	strh	r3, [r4, #12]
 80059c4:	4632      	mov	r2, r6
 80059c6:	463b      	mov	r3, r7
 80059c8:	4628      	mov	r0, r5
 80059ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059ce:	f000 b857 	b.w	8005a80 <_write_r>

080059d2 <__sseek>:
 80059d2:	b510      	push	{r4, lr}
 80059d4:	460c      	mov	r4, r1
 80059d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059da:	f000 f82d 	bl	8005a38 <_lseek_r>
 80059de:	1c43      	adds	r3, r0, #1
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	bf15      	itete	ne
 80059e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80059ee:	81a3      	strheq	r3, [r4, #12]
 80059f0:	bf18      	it	ne
 80059f2:	81a3      	strhne	r3, [r4, #12]
 80059f4:	bd10      	pop	{r4, pc}

080059f6 <__sclose>:
 80059f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059fa:	f000 b80d 	b.w	8005a18 <_close_r>

080059fe <memset>:
 80059fe:	4402      	add	r2, r0
 8005a00:	4603      	mov	r3, r0
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d100      	bne.n	8005a08 <memset+0xa>
 8005a06:	4770      	bx	lr
 8005a08:	f803 1b01 	strb.w	r1, [r3], #1
 8005a0c:	e7f9      	b.n	8005a02 <memset+0x4>
	...

08005a10 <_localeconv_r>:
 8005a10:	4800      	ldr	r0, [pc, #0]	@ (8005a14 <_localeconv_r+0x4>)
 8005a12:	4770      	bx	lr
 8005a14:	20000204 	.word	0x20000204

08005a18 <_close_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4d06      	ldr	r5, [pc, #24]	@ (8005a34 <_close_r+0x1c>)
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	4604      	mov	r4, r0
 8005a20:	4608      	mov	r0, r1
 8005a22:	602b      	str	r3, [r5, #0]
 8005a24:	f7fb fd4b 	bl	80014be <_close>
 8005a28:	1c43      	adds	r3, r0, #1
 8005a2a:	d102      	bne.n	8005a32 <_close_r+0x1a>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	b103      	cbz	r3, 8005a32 <_close_r+0x1a>
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	bd38      	pop	{r3, r4, r5, pc}
 8005a34:	200007f8 	.word	0x200007f8

08005a38 <_lseek_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4d07      	ldr	r5, [pc, #28]	@ (8005a58 <_lseek_r+0x20>)
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	4608      	mov	r0, r1
 8005a40:	4611      	mov	r1, r2
 8005a42:	2200      	movs	r2, #0
 8005a44:	602a      	str	r2, [r5, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	f7fb fd60 	bl	800150c <_lseek>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d102      	bne.n	8005a56 <_lseek_r+0x1e>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	b103      	cbz	r3, 8005a56 <_lseek_r+0x1e>
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	200007f8 	.word	0x200007f8

08005a5c <_read_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4d07      	ldr	r5, [pc, #28]	@ (8005a7c <_read_r+0x20>)
 8005a60:	4604      	mov	r4, r0
 8005a62:	4608      	mov	r0, r1
 8005a64:	4611      	mov	r1, r2
 8005a66:	2200      	movs	r2, #0
 8005a68:	602a      	str	r2, [r5, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f7fb fcee 	bl	800144c <_read>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d102      	bne.n	8005a7a <_read_r+0x1e>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	b103      	cbz	r3, 8005a7a <_read_r+0x1e>
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
 8005a7c:	200007f8 	.word	0x200007f8

08005a80 <_write_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4d07      	ldr	r5, [pc, #28]	@ (8005aa0 <_write_r+0x20>)
 8005a84:	4604      	mov	r4, r0
 8005a86:	4608      	mov	r0, r1
 8005a88:	4611      	mov	r1, r2
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	602a      	str	r2, [r5, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f7fb fcf9 	bl	8001486 <_write>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_write_r+0x1e>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_write_r+0x1e>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	200007f8 	.word	0x200007f8

08005aa4 <__errno>:
 8005aa4:	4b01      	ldr	r3, [pc, #4]	@ (8005aac <__errno+0x8>)
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	200000c4 	.word	0x200000c4

08005ab0 <__libc_init_array>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	4d0d      	ldr	r5, [pc, #52]	@ (8005ae8 <__libc_init_array+0x38>)
 8005ab4:	4c0d      	ldr	r4, [pc, #52]	@ (8005aec <__libc_init_array+0x3c>)
 8005ab6:	1b64      	subs	r4, r4, r5
 8005ab8:	10a4      	asrs	r4, r4, #2
 8005aba:	2600      	movs	r6, #0
 8005abc:	42a6      	cmp	r6, r4
 8005abe:	d109      	bne.n	8005ad4 <__libc_init_array+0x24>
 8005ac0:	4d0b      	ldr	r5, [pc, #44]	@ (8005af0 <__libc_init_array+0x40>)
 8005ac2:	4c0c      	ldr	r4, [pc, #48]	@ (8005af4 <__libc_init_array+0x44>)
 8005ac4:	f002 f866 	bl	8007b94 <_init>
 8005ac8:	1b64      	subs	r4, r4, r5
 8005aca:	10a4      	asrs	r4, r4, #2
 8005acc:	2600      	movs	r6, #0
 8005ace:	42a6      	cmp	r6, r4
 8005ad0:	d105      	bne.n	8005ade <__libc_init_array+0x2e>
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad8:	4798      	blx	r3
 8005ada:	3601      	adds	r6, #1
 8005adc:	e7ee      	b.n	8005abc <__libc_init_array+0xc>
 8005ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae2:	4798      	blx	r3
 8005ae4:	3601      	adds	r6, #1
 8005ae6:	e7f2      	b.n	8005ace <__libc_init_array+0x1e>
 8005ae8:	08007f98 	.word	0x08007f98
 8005aec:	08007f98 	.word	0x08007f98
 8005af0:	08007f98 	.word	0x08007f98
 8005af4:	08007f9c 	.word	0x08007f9c

08005af8 <__retarget_lock_init_recursive>:
 8005af8:	4770      	bx	lr

08005afa <__retarget_lock_acquire_recursive>:
 8005afa:	4770      	bx	lr

08005afc <__retarget_lock_release_recursive>:
 8005afc:	4770      	bx	lr

08005afe <memcpy>:
 8005afe:	440a      	add	r2, r1
 8005b00:	4291      	cmp	r1, r2
 8005b02:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b06:	d100      	bne.n	8005b0a <memcpy+0xc>
 8005b08:	4770      	bx	lr
 8005b0a:	b510      	push	{r4, lr}
 8005b0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b14:	4291      	cmp	r1, r2
 8005b16:	d1f9      	bne.n	8005b0c <memcpy+0xe>
 8005b18:	bd10      	pop	{r4, pc}

08005b1a <quorem>:
 8005b1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1e:	6903      	ldr	r3, [r0, #16]
 8005b20:	690c      	ldr	r4, [r1, #16]
 8005b22:	42a3      	cmp	r3, r4
 8005b24:	4607      	mov	r7, r0
 8005b26:	db7e      	blt.n	8005c26 <quorem+0x10c>
 8005b28:	3c01      	subs	r4, #1
 8005b2a:	f101 0814 	add.w	r8, r1, #20
 8005b2e:	00a3      	lsls	r3, r4, #2
 8005b30:	f100 0514 	add.w	r5, r0, #20
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b44:	3301      	adds	r3, #1
 8005b46:	429a      	cmp	r2, r3
 8005b48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b50:	d32e      	bcc.n	8005bb0 <quorem+0x96>
 8005b52:	f04f 0a00 	mov.w	sl, #0
 8005b56:	46c4      	mov	ip, r8
 8005b58:	46ae      	mov	lr, r5
 8005b5a:	46d3      	mov	fp, sl
 8005b5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b60:	b298      	uxth	r0, r3
 8005b62:	fb06 a000 	mla	r0, r6, r0, sl
 8005b66:	0c02      	lsrs	r2, r0, #16
 8005b68:	0c1b      	lsrs	r3, r3, #16
 8005b6a:	fb06 2303 	mla	r3, r6, r3, r2
 8005b6e:	f8de 2000 	ldr.w	r2, [lr]
 8005b72:	b280      	uxth	r0, r0
 8005b74:	b292      	uxth	r2, r2
 8005b76:	1a12      	subs	r2, r2, r0
 8005b78:	445a      	add	r2, fp
 8005b7a:	f8de 0000 	ldr.w	r0, [lr]
 8005b7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b88:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b8c:	b292      	uxth	r2, r2
 8005b8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b92:	45e1      	cmp	r9, ip
 8005b94:	f84e 2b04 	str.w	r2, [lr], #4
 8005b98:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b9c:	d2de      	bcs.n	8005b5c <quorem+0x42>
 8005b9e:	9b00      	ldr	r3, [sp, #0]
 8005ba0:	58eb      	ldr	r3, [r5, r3]
 8005ba2:	b92b      	cbnz	r3, 8005bb0 <quorem+0x96>
 8005ba4:	9b01      	ldr	r3, [sp, #4]
 8005ba6:	3b04      	subs	r3, #4
 8005ba8:	429d      	cmp	r5, r3
 8005baa:	461a      	mov	r2, r3
 8005bac:	d32f      	bcc.n	8005c0e <quorem+0xf4>
 8005bae:	613c      	str	r4, [r7, #16]
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	f001 f97b 	bl	8006eac <__mcmp>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	db25      	blt.n	8005c06 <quorem+0xec>
 8005bba:	4629      	mov	r1, r5
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bc2:	f8d1 c000 	ldr.w	ip, [r1]
 8005bc6:	fa1f fe82 	uxth.w	lr, r2
 8005bca:	fa1f f38c 	uxth.w	r3, ip
 8005bce:	eba3 030e 	sub.w	r3, r3, lr
 8005bd2:	4403      	add	r3, r0
 8005bd4:	0c12      	lsrs	r2, r2, #16
 8005bd6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bda:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005be4:	45c1      	cmp	r9, r8
 8005be6:	f841 3b04 	str.w	r3, [r1], #4
 8005bea:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005bee:	d2e6      	bcs.n	8005bbe <quorem+0xa4>
 8005bf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bf4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bf8:	b922      	cbnz	r2, 8005c04 <quorem+0xea>
 8005bfa:	3b04      	subs	r3, #4
 8005bfc:	429d      	cmp	r5, r3
 8005bfe:	461a      	mov	r2, r3
 8005c00:	d30b      	bcc.n	8005c1a <quorem+0x100>
 8005c02:	613c      	str	r4, [r7, #16]
 8005c04:	3601      	adds	r6, #1
 8005c06:	4630      	mov	r0, r6
 8005c08:	b003      	add	sp, #12
 8005c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	3b04      	subs	r3, #4
 8005c12:	2a00      	cmp	r2, #0
 8005c14:	d1cb      	bne.n	8005bae <quorem+0x94>
 8005c16:	3c01      	subs	r4, #1
 8005c18:	e7c6      	b.n	8005ba8 <quorem+0x8e>
 8005c1a:	6812      	ldr	r2, [r2, #0]
 8005c1c:	3b04      	subs	r3, #4
 8005c1e:	2a00      	cmp	r2, #0
 8005c20:	d1ef      	bne.n	8005c02 <quorem+0xe8>
 8005c22:	3c01      	subs	r4, #1
 8005c24:	e7ea      	b.n	8005bfc <quorem+0xe2>
 8005c26:	2000      	movs	r0, #0
 8005c28:	e7ee      	b.n	8005c08 <quorem+0xee>
 8005c2a:	0000      	movs	r0, r0
 8005c2c:	0000      	movs	r0, r0
	...

08005c30 <_dtoa_r>:
 8005c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c34:	69c7      	ldr	r7, [r0, #28]
 8005c36:	b099      	sub	sp, #100	@ 0x64
 8005c38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005c3c:	ec55 4b10 	vmov	r4, r5, d0
 8005c40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005c42:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c44:	4683      	mov	fp, r0
 8005c46:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c4a:	b97f      	cbnz	r7, 8005c6c <_dtoa_r+0x3c>
 8005c4c:	2010      	movs	r0, #16
 8005c4e:	f000 fdfd 	bl	800684c <malloc>
 8005c52:	4602      	mov	r2, r0
 8005c54:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c58:	b920      	cbnz	r0, 8005c64 <_dtoa_r+0x34>
 8005c5a:	4ba7      	ldr	r3, [pc, #668]	@ (8005ef8 <_dtoa_r+0x2c8>)
 8005c5c:	21ef      	movs	r1, #239	@ 0xef
 8005c5e:	48a7      	ldr	r0, [pc, #668]	@ (8005efc <_dtoa_r+0x2cc>)
 8005c60:	f001 fc5a 	bl	8007518 <__assert_func>
 8005c64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c68:	6007      	str	r7, [r0, #0]
 8005c6a:	60c7      	str	r7, [r0, #12]
 8005c6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c70:	6819      	ldr	r1, [r3, #0]
 8005c72:	b159      	cbz	r1, 8005c8c <_dtoa_r+0x5c>
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	604a      	str	r2, [r1, #4]
 8005c78:	2301      	movs	r3, #1
 8005c7a:	4093      	lsls	r3, r2
 8005c7c:	608b      	str	r3, [r1, #8]
 8005c7e:	4658      	mov	r0, fp
 8005c80:	f000 feda 	bl	8006a38 <_Bfree>
 8005c84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	1e2b      	subs	r3, r5, #0
 8005c8e:	bfb9      	ittee	lt
 8005c90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c94:	9303      	strlt	r3, [sp, #12]
 8005c96:	2300      	movge	r3, #0
 8005c98:	6033      	strge	r3, [r6, #0]
 8005c9a:	9f03      	ldr	r7, [sp, #12]
 8005c9c:	4b98      	ldr	r3, [pc, #608]	@ (8005f00 <_dtoa_r+0x2d0>)
 8005c9e:	bfbc      	itt	lt
 8005ca0:	2201      	movlt	r2, #1
 8005ca2:	6032      	strlt	r2, [r6, #0]
 8005ca4:	43bb      	bics	r3, r7
 8005ca6:	d112      	bne.n	8005cce <_dtoa_r+0x9e>
 8005ca8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005caa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005cb4:	4323      	orrs	r3, r4
 8005cb6:	f000 854d 	beq.w	8006754 <_dtoa_r+0xb24>
 8005cba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005f14 <_dtoa_r+0x2e4>
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 854f 	beq.w	8006764 <_dtoa_r+0xb34>
 8005cc6:	f10a 0303 	add.w	r3, sl, #3
 8005cca:	f000 bd49 	b.w	8006760 <_dtoa_r+0xb30>
 8005cce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	ec51 0b17 	vmov	r0, r1, d7
 8005cd8:	2300      	movs	r3, #0
 8005cda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005cde:	f7fa fef3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ce2:	4680      	mov	r8, r0
 8005ce4:	b158      	cbz	r0, 8005cfe <_dtoa_r+0xce>
 8005ce6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ce8:	2301      	movs	r3, #1
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cee:	b113      	cbz	r3, 8005cf6 <_dtoa_r+0xc6>
 8005cf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005cf2:	4b84      	ldr	r3, [pc, #528]	@ (8005f04 <_dtoa_r+0x2d4>)
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005f18 <_dtoa_r+0x2e8>
 8005cfa:	f000 bd33 	b.w	8006764 <_dtoa_r+0xb34>
 8005cfe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005d02:	aa16      	add	r2, sp, #88	@ 0x58
 8005d04:	a917      	add	r1, sp, #92	@ 0x5c
 8005d06:	4658      	mov	r0, fp
 8005d08:	f001 f980 	bl	800700c <__d2b>
 8005d0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005d10:	4681      	mov	r9, r0
 8005d12:	2e00      	cmp	r6, #0
 8005d14:	d077      	beq.n	8005e06 <_dtoa_r+0x1d6>
 8005d16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d30:	4619      	mov	r1, r3
 8005d32:	2200      	movs	r2, #0
 8005d34:	4b74      	ldr	r3, [pc, #464]	@ (8005f08 <_dtoa_r+0x2d8>)
 8005d36:	f7fa faa7 	bl	8000288 <__aeabi_dsub>
 8005d3a:	a369      	add	r3, pc, #420	@ (adr r3, 8005ee0 <_dtoa_r+0x2b0>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f7fa fc5a 	bl	80005f8 <__aeabi_dmul>
 8005d44:	a368      	add	r3, pc, #416	@ (adr r3, 8005ee8 <_dtoa_r+0x2b8>)
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	f7fa fa9f 	bl	800028c <__adddf3>
 8005d4e:	4604      	mov	r4, r0
 8005d50:	4630      	mov	r0, r6
 8005d52:	460d      	mov	r5, r1
 8005d54:	f7fa fbe6 	bl	8000524 <__aeabi_i2d>
 8005d58:	a365      	add	r3, pc, #404	@ (adr r3, 8005ef0 <_dtoa_r+0x2c0>)
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	f7fa fc4b 	bl	80005f8 <__aeabi_dmul>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4620      	mov	r0, r4
 8005d68:	4629      	mov	r1, r5
 8005d6a:	f7fa fa8f 	bl	800028c <__adddf3>
 8005d6e:	4604      	mov	r4, r0
 8005d70:	460d      	mov	r5, r1
 8005d72:	f7fa fef1 	bl	8000b58 <__aeabi_d2iz>
 8005d76:	2200      	movs	r2, #0
 8005d78:	4607      	mov	r7, r0
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	4629      	mov	r1, r5
 8005d80:	f7fa feac 	bl	8000adc <__aeabi_dcmplt>
 8005d84:	b140      	cbz	r0, 8005d98 <_dtoa_r+0x168>
 8005d86:	4638      	mov	r0, r7
 8005d88:	f7fa fbcc 	bl	8000524 <__aeabi_i2d>
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	462b      	mov	r3, r5
 8005d90:	f7fa fe9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d94:	b900      	cbnz	r0, 8005d98 <_dtoa_r+0x168>
 8005d96:	3f01      	subs	r7, #1
 8005d98:	2f16      	cmp	r7, #22
 8005d9a:	d851      	bhi.n	8005e40 <_dtoa_r+0x210>
 8005d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8005f0c <_dtoa_r+0x2dc>)
 8005d9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005daa:	f7fa fe97 	bl	8000adc <__aeabi_dcmplt>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d048      	beq.n	8005e44 <_dtoa_r+0x214>
 8005db2:	3f01      	subs	r7, #1
 8005db4:	2300      	movs	r3, #0
 8005db6:	9312      	str	r3, [sp, #72]	@ 0x48
 8005db8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005dba:	1b9b      	subs	r3, r3, r6
 8005dbc:	1e5a      	subs	r2, r3, #1
 8005dbe:	bf44      	itt	mi
 8005dc0:	f1c3 0801 	rsbmi	r8, r3, #1
 8005dc4:	2300      	movmi	r3, #0
 8005dc6:	9208      	str	r2, [sp, #32]
 8005dc8:	bf54      	ite	pl
 8005dca:	f04f 0800 	movpl.w	r8, #0
 8005dce:	9308      	strmi	r3, [sp, #32]
 8005dd0:	2f00      	cmp	r7, #0
 8005dd2:	db39      	blt.n	8005e48 <_dtoa_r+0x218>
 8005dd4:	9b08      	ldr	r3, [sp, #32]
 8005dd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005dd8:	443b      	add	r3, r7
 8005dda:	9308      	str	r3, [sp, #32]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	930a      	str	r3, [sp, #40]	@ 0x28
 8005de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005de2:	2b09      	cmp	r3, #9
 8005de4:	d864      	bhi.n	8005eb0 <_dtoa_r+0x280>
 8005de6:	2b05      	cmp	r3, #5
 8005de8:	bfc4      	itt	gt
 8005dea:	3b04      	subgt	r3, #4
 8005dec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005df0:	f1a3 0302 	sub.w	r3, r3, #2
 8005df4:	bfcc      	ite	gt
 8005df6:	2400      	movgt	r4, #0
 8005df8:	2401      	movle	r4, #1
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d863      	bhi.n	8005ec6 <_dtoa_r+0x296>
 8005dfe:	e8df f003 	tbb	[pc, r3]
 8005e02:	372a      	.short	0x372a
 8005e04:	5535      	.short	0x5535
 8005e06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005e0a:	441e      	add	r6, r3
 8005e0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e10:	2b20      	cmp	r3, #32
 8005e12:	bfc1      	itttt	gt
 8005e14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e18:	409f      	lslgt	r7, r3
 8005e1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e22:	bfd6      	itet	le
 8005e24:	f1c3 0320 	rsble	r3, r3, #32
 8005e28:	ea47 0003 	orrgt.w	r0, r7, r3
 8005e2c:	fa04 f003 	lslle.w	r0, r4, r3
 8005e30:	f7fa fb68 	bl	8000504 <__aeabi_ui2d>
 8005e34:	2201      	movs	r2, #1
 8005e36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e3a:	3e01      	subs	r6, #1
 8005e3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8005e3e:	e777      	b.n	8005d30 <_dtoa_r+0x100>
 8005e40:	2301      	movs	r3, #1
 8005e42:	e7b8      	b.n	8005db6 <_dtoa_r+0x186>
 8005e44:	9012      	str	r0, [sp, #72]	@ 0x48
 8005e46:	e7b7      	b.n	8005db8 <_dtoa_r+0x188>
 8005e48:	427b      	negs	r3, r7
 8005e4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	eba8 0807 	sub.w	r8, r8, r7
 8005e52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e54:	e7c4      	b.n	8005de0 <_dtoa_r+0x1b0>
 8005e56:	2300      	movs	r3, #0
 8005e58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	dc35      	bgt.n	8005ecc <_dtoa_r+0x29c>
 8005e60:	2301      	movs	r3, #1
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	9307      	str	r3, [sp, #28]
 8005e66:	461a      	mov	r2, r3
 8005e68:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e6a:	e00b      	b.n	8005e84 <_dtoa_r+0x254>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e7f3      	b.n	8005e58 <_dtoa_r+0x228>
 8005e70:	2300      	movs	r3, #0
 8005e72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	9307      	str	r3, [sp, #28]
 8005e80:	bfb8      	it	lt
 8005e82:	2301      	movlt	r3, #1
 8005e84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e88:	2100      	movs	r1, #0
 8005e8a:	2204      	movs	r2, #4
 8005e8c:	f102 0514 	add.w	r5, r2, #20
 8005e90:	429d      	cmp	r5, r3
 8005e92:	d91f      	bls.n	8005ed4 <_dtoa_r+0x2a4>
 8005e94:	6041      	str	r1, [r0, #4]
 8005e96:	4658      	mov	r0, fp
 8005e98:	f000 fd8e 	bl	80069b8 <_Balloc>
 8005e9c:	4682      	mov	sl, r0
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d13c      	bne.n	8005f1c <_dtoa_r+0x2ec>
 8005ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f10 <_dtoa_r+0x2e0>)
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	f240 11af 	movw	r1, #431	@ 0x1af
 8005eaa:	e6d8      	b.n	8005c5e <_dtoa_r+0x2e>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e7e0      	b.n	8005e72 <_dtoa_r+0x242>
 8005eb0:	2401      	movs	r4, #1
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	9307      	str	r3, [sp, #28]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2312      	movs	r3, #18
 8005ec4:	e7d0      	b.n	8005e68 <_dtoa_r+0x238>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005eca:	e7f5      	b.n	8005eb8 <_dtoa_r+0x288>
 8005ecc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	9307      	str	r3, [sp, #28]
 8005ed2:	e7d7      	b.n	8005e84 <_dtoa_r+0x254>
 8005ed4:	3101      	adds	r1, #1
 8005ed6:	0052      	lsls	r2, r2, #1
 8005ed8:	e7d8      	b.n	8005e8c <_dtoa_r+0x25c>
 8005eda:	bf00      	nop
 8005edc:	f3af 8000 	nop.w
 8005ee0:	636f4361 	.word	0x636f4361
 8005ee4:	3fd287a7 	.word	0x3fd287a7
 8005ee8:	8b60c8b3 	.word	0x8b60c8b3
 8005eec:	3fc68a28 	.word	0x3fc68a28
 8005ef0:	509f79fb 	.word	0x509f79fb
 8005ef4:	3fd34413 	.word	0x3fd34413
 8005ef8:	08007c5d 	.word	0x08007c5d
 8005efc:	08007c74 	.word	0x08007c74
 8005f00:	7ff00000 	.word	0x7ff00000
 8005f04:	08007c2d 	.word	0x08007c2d
 8005f08:	3ff80000 	.word	0x3ff80000
 8005f0c:	08007d70 	.word	0x08007d70
 8005f10:	08007ccc 	.word	0x08007ccc
 8005f14:	08007c59 	.word	0x08007c59
 8005f18:	08007c2c 	.word	0x08007c2c
 8005f1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f20:	6018      	str	r0, [r3, #0]
 8005f22:	9b07      	ldr	r3, [sp, #28]
 8005f24:	2b0e      	cmp	r3, #14
 8005f26:	f200 80a4 	bhi.w	8006072 <_dtoa_r+0x442>
 8005f2a:	2c00      	cmp	r4, #0
 8005f2c:	f000 80a1 	beq.w	8006072 <_dtoa_r+0x442>
 8005f30:	2f00      	cmp	r7, #0
 8005f32:	dd33      	ble.n	8005f9c <_dtoa_r+0x36c>
 8005f34:	4bad      	ldr	r3, [pc, #692]	@ (80061ec <_dtoa_r+0x5bc>)
 8005f36:	f007 020f 	and.w	r2, r7, #15
 8005f3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f3e:	ed93 7b00 	vldr	d7, [r3]
 8005f42:	05f8      	lsls	r0, r7, #23
 8005f44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005f48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f4c:	d516      	bpl.n	8005f7c <_dtoa_r+0x34c>
 8005f4e:	4ba8      	ldr	r3, [pc, #672]	@ (80061f0 <_dtoa_r+0x5c0>)
 8005f50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f58:	f7fa fc78 	bl	800084c <__aeabi_ddiv>
 8005f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f60:	f004 040f 	and.w	r4, r4, #15
 8005f64:	2603      	movs	r6, #3
 8005f66:	4da2      	ldr	r5, [pc, #648]	@ (80061f0 <_dtoa_r+0x5c0>)
 8005f68:	b954      	cbnz	r4, 8005f80 <_dtoa_r+0x350>
 8005f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f72:	f7fa fc6b 	bl	800084c <__aeabi_ddiv>
 8005f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f7a:	e028      	b.n	8005fce <_dtoa_r+0x39e>
 8005f7c:	2602      	movs	r6, #2
 8005f7e:	e7f2      	b.n	8005f66 <_dtoa_r+0x336>
 8005f80:	07e1      	lsls	r1, r4, #31
 8005f82:	d508      	bpl.n	8005f96 <_dtoa_r+0x366>
 8005f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f8c:	f7fa fb34 	bl	80005f8 <__aeabi_dmul>
 8005f90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f94:	3601      	adds	r6, #1
 8005f96:	1064      	asrs	r4, r4, #1
 8005f98:	3508      	adds	r5, #8
 8005f9a:	e7e5      	b.n	8005f68 <_dtoa_r+0x338>
 8005f9c:	f000 80d2 	beq.w	8006144 <_dtoa_r+0x514>
 8005fa0:	427c      	negs	r4, r7
 8005fa2:	4b92      	ldr	r3, [pc, #584]	@ (80061ec <_dtoa_r+0x5bc>)
 8005fa4:	4d92      	ldr	r5, [pc, #584]	@ (80061f0 <_dtoa_r+0x5c0>)
 8005fa6:	f004 020f 	and.w	r2, r4, #15
 8005faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fb6:	f7fa fb1f 	bl	80005f8 <__aeabi_dmul>
 8005fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fbe:	1124      	asrs	r4, r4, #4
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	2602      	movs	r6, #2
 8005fc4:	2c00      	cmp	r4, #0
 8005fc6:	f040 80b2 	bne.w	800612e <_dtoa_r+0x4fe>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1d3      	bne.n	8005f76 <_dtoa_r+0x346>
 8005fce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005fd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80b7 	beq.w	8006148 <_dtoa_r+0x518>
 8005fda:	4b86      	ldr	r3, [pc, #536]	@ (80061f4 <_dtoa_r+0x5c4>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	4620      	mov	r0, r4
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	f7fa fd7b 	bl	8000adc <__aeabi_dcmplt>
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	f000 80ae 	beq.w	8006148 <_dtoa_r+0x518>
 8005fec:	9b07      	ldr	r3, [sp, #28]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 80aa 	beq.w	8006148 <_dtoa_r+0x518>
 8005ff4:	9b00      	ldr	r3, [sp, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	dd37      	ble.n	800606a <_dtoa_r+0x43a>
 8005ffa:	1e7b      	subs	r3, r7, #1
 8005ffc:	9304      	str	r3, [sp, #16]
 8005ffe:	4620      	mov	r0, r4
 8006000:	4b7d      	ldr	r3, [pc, #500]	@ (80061f8 <_dtoa_r+0x5c8>)
 8006002:	2200      	movs	r2, #0
 8006004:	4629      	mov	r1, r5
 8006006:	f7fa faf7 	bl	80005f8 <__aeabi_dmul>
 800600a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800600e:	9c00      	ldr	r4, [sp, #0]
 8006010:	3601      	adds	r6, #1
 8006012:	4630      	mov	r0, r6
 8006014:	f7fa fa86 	bl	8000524 <__aeabi_i2d>
 8006018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800601c:	f7fa faec 	bl	80005f8 <__aeabi_dmul>
 8006020:	4b76      	ldr	r3, [pc, #472]	@ (80061fc <_dtoa_r+0x5cc>)
 8006022:	2200      	movs	r2, #0
 8006024:	f7fa f932 	bl	800028c <__adddf3>
 8006028:	4605      	mov	r5, r0
 800602a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800602e:	2c00      	cmp	r4, #0
 8006030:	f040 808d 	bne.w	800614e <_dtoa_r+0x51e>
 8006034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006038:	4b71      	ldr	r3, [pc, #452]	@ (8006200 <_dtoa_r+0x5d0>)
 800603a:	2200      	movs	r2, #0
 800603c:	f7fa f924 	bl	8000288 <__aeabi_dsub>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006048:	462a      	mov	r2, r5
 800604a:	4633      	mov	r3, r6
 800604c:	f7fa fd64 	bl	8000b18 <__aeabi_dcmpgt>
 8006050:	2800      	cmp	r0, #0
 8006052:	f040 828b 	bne.w	800656c <_dtoa_r+0x93c>
 8006056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800605a:	462a      	mov	r2, r5
 800605c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006060:	f7fa fd3c 	bl	8000adc <__aeabi_dcmplt>
 8006064:	2800      	cmp	r0, #0
 8006066:	f040 8128 	bne.w	80062ba <_dtoa_r+0x68a>
 800606a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800606e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006072:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006074:	2b00      	cmp	r3, #0
 8006076:	f2c0 815a 	blt.w	800632e <_dtoa_r+0x6fe>
 800607a:	2f0e      	cmp	r7, #14
 800607c:	f300 8157 	bgt.w	800632e <_dtoa_r+0x6fe>
 8006080:	4b5a      	ldr	r3, [pc, #360]	@ (80061ec <_dtoa_r+0x5bc>)
 8006082:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006086:	ed93 7b00 	vldr	d7, [r3]
 800608a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800608c:	2b00      	cmp	r3, #0
 800608e:	ed8d 7b00 	vstr	d7, [sp]
 8006092:	da03      	bge.n	800609c <_dtoa_r+0x46c>
 8006094:	9b07      	ldr	r3, [sp, #28]
 8006096:	2b00      	cmp	r3, #0
 8006098:	f340 8101 	ble.w	800629e <_dtoa_r+0x66e>
 800609c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80060a0:	4656      	mov	r6, sl
 80060a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060a6:	4620      	mov	r0, r4
 80060a8:	4629      	mov	r1, r5
 80060aa:	f7fa fbcf 	bl	800084c <__aeabi_ddiv>
 80060ae:	f7fa fd53 	bl	8000b58 <__aeabi_d2iz>
 80060b2:	4680      	mov	r8, r0
 80060b4:	f7fa fa36 	bl	8000524 <__aeabi_i2d>
 80060b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060bc:	f7fa fa9c 	bl	80005f8 <__aeabi_dmul>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4620      	mov	r0, r4
 80060c6:	4629      	mov	r1, r5
 80060c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80060cc:	f7fa f8dc 	bl	8000288 <__aeabi_dsub>
 80060d0:	f806 4b01 	strb.w	r4, [r6], #1
 80060d4:	9d07      	ldr	r5, [sp, #28]
 80060d6:	eba6 040a 	sub.w	r4, r6, sl
 80060da:	42a5      	cmp	r5, r4
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	f040 8117 	bne.w	8006312 <_dtoa_r+0x6e2>
 80060e4:	f7fa f8d2 	bl	800028c <__adddf3>
 80060e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060ec:	4604      	mov	r4, r0
 80060ee:	460d      	mov	r5, r1
 80060f0:	f7fa fd12 	bl	8000b18 <__aeabi_dcmpgt>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	f040 80f9 	bne.w	80062ec <_dtoa_r+0x6bc>
 80060fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060fe:	4620      	mov	r0, r4
 8006100:	4629      	mov	r1, r5
 8006102:	f7fa fce1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006106:	b118      	cbz	r0, 8006110 <_dtoa_r+0x4e0>
 8006108:	f018 0f01 	tst.w	r8, #1
 800610c:	f040 80ee 	bne.w	80062ec <_dtoa_r+0x6bc>
 8006110:	4649      	mov	r1, r9
 8006112:	4658      	mov	r0, fp
 8006114:	f000 fc90 	bl	8006a38 <_Bfree>
 8006118:	2300      	movs	r3, #0
 800611a:	7033      	strb	r3, [r6, #0]
 800611c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800611e:	3701      	adds	r7, #1
 8006120:	601f      	str	r7, [r3, #0]
 8006122:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 831d 	beq.w	8006764 <_dtoa_r+0xb34>
 800612a:	601e      	str	r6, [r3, #0]
 800612c:	e31a      	b.n	8006764 <_dtoa_r+0xb34>
 800612e:	07e2      	lsls	r2, r4, #31
 8006130:	d505      	bpl.n	800613e <_dtoa_r+0x50e>
 8006132:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006136:	f7fa fa5f 	bl	80005f8 <__aeabi_dmul>
 800613a:	3601      	adds	r6, #1
 800613c:	2301      	movs	r3, #1
 800613e:	1064      	asrs	r4, r4, #1
 8006140:	3508      	adds	r5, #8
 8006142:	e73f      	b.n	8005fc4 <_dtoa_r+0x394>
 8006144:	2602      	movs	r6, #2
 8006146:	e742      	b.n	8005fce <_dtoa_r+0x39e>
 8006148:	9c07      	ldr	r4, [sp, #28]
 800614a:	9704      	str	r7, [sp, #16]
 800614c:	e761      	b.n	8006012 <_dtoa_r+0x3e2>
 800614e:	4b27      	ldr	r3, [pc, #156]	@ (80061ec <_dtoa_r+0x5bc>)
 8006150:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006152:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006156:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800615a:	4454      	add	r4, sl
 800615c:	2900      	cmp	r1, #0
 800615e:	d053      	beq.n	8006208 <_dtoa_r+0x5d8>
 8006160:	4928      	ldr	r1, [pc, #160]	@ (8006204 <_dtoa_r+0x5d4>)
 8006162:	2000      	movs	r0, #0
 8006164:	f7fa fb72 	bl	800084c <__aeabi_ddiv>
 8006168:	4633      	mov	r3, r6
 800616a:	462a      	mov	r2, r5
 800616c:	f7fa f88c 	bl	8000288 <__aeabi_dsub>
 8006170:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006174:	4656      	mov	r6, sl
 8006176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800617a:	f7fa fced 	bl	8000b58 <__aeabi_d2iz>
 800617e:	4605      	mov	r5, r0
 8006180:	f7fa f9d0 	bl	8000524 <__aeabi_i2d>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800618c:	f7fa f87c 	bl	8000288 <__aeabi_dsub>
 8006190:	3530      	adds	r5, #48	@ 0x30
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800619a:	f806 5b01 	strb.w	r5, [r6], #1
 800619e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061a2:	f7fa fc9b 	bl	8000adc <__aeabi_dcmplt>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d171      	bne.n	800628e <_dtoa_r+0x65e>
 80061aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061ae:	4911      	ldr	r1, [pc, #68]	@ (80061f4 <_dtoa_r+0x5c4>)
 80061b0:	2000      	movs	r0, #0
 80061b2:	f7fa f869 	bl	8000288 <__aeabi_dsub>
 80061b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061ba:	f7fa fc8f 	bl	8000adc <__aeabi_dcmplt>
 80061be:	2800      	cmp	r0, #0
 80061c0:	f040 8095 	bne.w	80062ee <_dtoa_r+0x6be>
 80061c4:	42a6      	cmp	r6, r4
 80061c6:	f43f af50 	beq.w	800606a <_dtoa_r+0x43a>
 80061ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061ce:	4b0a      	ldr	r3, [pc, #40]	@ (80061f8 <_dtoa_r+0x5c8>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	f7fa fa11 	bl	80005f8 <__aeabi_dmul>
 80061d6:	4b08      	ldr	r3, [pc, #32]	@ (80061f8 <_dtoa_r+0x5c8>)
 80061d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061dc:	2200      	movs	r2, #0
 80061de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e2:	f7fa fa09 	bl	80005f8 <__aeabi_dmul>
 80061e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061ea:	e7c4      	b.n	8006176 <_dtoa_r+0x546>
 80061ec:	08007d70 	.word	0x08007d70
 80061f0:	08007d48 	.word	0x08007d48
 80061f4:	3ff00000 	.word	0x3ff00000
 80061f8:	40240000 	.word	0x40240000
 80061fc:	401c0000 	.word	0x401c0000
 8006200:	40140000 	.word	0x40140000
 8006204:	3fe00000 	.word	0x3fe00000
 8006208:	4631      	mov	r1, r6
 800620a:	4628      	mov	r0, r5
 800620c:	f7fa f9f4 	bl	80005f8 <__aeabi_dmul>
 8006210:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006214:	9415      	str	r4, [sp, #84]	@ 0x54
 8006216:	4656      	mov	r6, sl
 8006218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800621c:	f7fa fc9c 	bl	8000b58 <__aeabi_d2iz>
 8006220:	4605      	mov	r5, r0
 8006222:	f7fa f97f 	bl	8000524 <__aeabi_i2d>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800622e:	f7fa f82b 	bl	8000288 <__aeabi_dsub>
 8006232:	3530      	adds	r5, #48	@ 0x30
 8006234:	f806 5b01 	strb.w	r5, [r6], #1
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	42a6      	cmp	r6, r4
 800623e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006242:	f04f 0200 	mov.w	r2, #0
 8006246:	d124      	bne.n	8006292 <_dtoa_r+0x662>
 8006248:	4bac      	ldr	r3, [pc, #688]	@ (80064fc <_dtoa_r+0x8cc>)
 800624a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800624e:	f7fa f81d 	bl	800028c <__adddf3>
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800625a:	f7fa fc5d 	bl	8000b18 <__aeabi_dcmpgt>
 800625e:	2800      	cmp	r0, #0
 8006260:	d145      	bne.n	80062ee <_dtoa_r+0x6be>
 8006262:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006266:	49a5      	ldr	r1, [pc, #660]	@ (80064fc <_dtoa_r+0x8cc>)
 8006268:	2000      	movs	r0, #0
 800626a:	f7fa f80d 	bl	8000288 <__aeabi_dsub>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006276:	f7fa fc31 	bl	8000adc <__aeabi_dcmplt>
 800627a:	2800      	cmp	r0, #0
 800627c:	f43f aef5 	beq.w	800606a <_dtoa_r+0x43a>
 8006280:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006282:	1e73      	subs	r3, r6, #1
 8006284:	9315      	str	r3, [sp, #84]	@ 0x54
 8006286:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800628a:	2b30      	cmp	r3, #48	@ 0x30
 800628c:	d0f8      	beq.n	8006280 <_dtoa_r+0x650>
 800628e:	9f04      	ldr	r7, [sp, #16]
 8006290:	e73e      	b.n	8006110 <_dtoa_r+0x4e0>
 8006292:	4b9b      	ldr	r3, [pc, #620]	@ (8006500 <_dtoa_r+0x8d0>)
 8006294:	f7fa f9b0 	bl	80005f8 <__aeabi_dmul>
 8006298:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800629c:	e7bc      	b.n	8006218 <_dtoa_r+0x5e8>
 800629e:	d10c      	bne.n	80062ba <_dtoa_r+0x68a>
 80062a0:	4b98      	ldr	r3, [pc, #608]	@ (8006504 <_dtoa_r+0x8d4>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062a8:	f7fa f9a6 	bl	80005f8 <__aeabi_dmul>
 80062ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062b0:	f7fa fc28 	bl	8000b04 <__aeabi_dcmpge>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	f000 8157 	beq.w	8006568 <_dtoa_r+0x938>
 80062ba:	2400      	movs	r4, #0
 80062bc:	4625      	mov	r5, r4
 80062be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062c0:	43db      	mvns	r3, r3
 80062c2:	9304      	str	r3, [sp, #16]
 80062c4:	4656      	mov	r6, sl
 80062c6:	2700      	movs	r7, #0
 80062c8:	4621      	mov	r1, r4
 80062ca:	4658      	mov	r0, fp
 80062cc:	f000 fbb4 	bl	8006a38 <_Bfree>
 80062d0:	2d00      	cmp	r5, #0
 80062d2:	d0dc      	beq.n	800628e <_dtoa_r+0x65e>
 80062d4:	b12f      	cbz	r7, 80062e2 <_dtoa_r+0x6b2>
 80062d6:	42af      	cmp	r7, r5
 80062d8:	d003      	beq.n	80062e2 <_dtoa_r+0x6b2>
 80062da:	4639      	mov	r1, r7
 80062dc:	4658      	mov	r0, fp
 80062de:	f000 fbab 	bl	8006a38 <_Bfree>
 80062e2:	4629      	mov	r1, r5
 80062e4:	4658      	mov	r0, fp
 80062e6:	f000 fba7 	bl	8006a38 <_Bfree>
 80062ea:	e7d0      	b.n	800628e <_dtoa_r+0x65e>
 80062ec:	9704      	str	r7, [sp, #16]
 80062ee:	4633      	mov	r3, r6
 80062f0:	461e      	mov	r6, r3
 80062f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062f6:	2a39      	cmp	r2, #57	@ 0x39
 80062f8:	d107      	bne.n	800630a <_dtoa_r+0x6da>
 80062fa:	459a      	cmp	sl, r3
 80062fc:	d1f8      	bne.n	80062f0 <_dtoa_r+0x6c0>
 80062fe:	9a04      	ldr	r2, [sp, #16]
 8006300:	3201      	adds	r2, #1
 8006302:	9204      	str	r2, [sp, #16]
 8006304:	2230      	movs	r2, #48	@ 0x30
 8006306:	f88a 2000 	strb.w	r2, [sl]
 800630a:	781a      	ldrb	r2, [r3, #0]
 800630c:	3201      	adds	r2, #1
 800630e:	701a      	strb	r2, [r3, #0]
 8006310:	e7bd      	b.n	800628e <_dtoa_r+0x65e>
 8006312:	4b7b      	ldr	r3, [pc, #492]	@ (8006500 <_dtoa_r+0x8d0>)
 8006314:	2200      	movs	r2, #0
 8006316:	f7fa f96f 	bl	80005f8 <__aeabi_dmul>
 800631a:	2200      	movs	r2, #0
 800631c:	2300      	movs	r3, #0
 800631e:	4604      	mov	r4, r0
 8006320:	460d      	mov	r5, r1
 8006322:	f7fa fbd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006326:	2800      	cmp	r0, #0
 8006328:	f43f aebb 	beq.w	80060a2 <_dtoa_r+0x472>
 800632c:	e6f0      	b.n	8006110 <_dtoa_r+0x4e0>
 800632e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006330:	2a00      	cmp	r2, #0
 8006332:	f000 80db 	beq.w	80064ec <_dtoa_r+0x8bc>
 8006336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006338:	2a01      	cmp	r2, #1
 800633a:	f300 80bf 	bgt.w	80064bc <_dtoa_r+0x88c>
 800633e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006340:	2a00      	cmp	r2, #0
 8006342:	f000 80b7 	beq.w	80064b4 <_dtoa_r+0x884>
 8006346:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800634a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800634c:	4646      	mov	r6, r8
 800634e:	9a08      	ldr	r2, [sp, #32]
 8006350:	2101      	movs	r1, #1
 8006352:	441a      	add	r2, r3
 8006354:	4658      	mov	r0, fp
 8006356:	4498      	add	r8, r3
 8006358:	9208      	str	r2, [sp, #32]
 800635a:	f000 fc21 	bl	8006ba0 <__i2b>
 800635e:	4605      	mov	r5, r0
 8006360:	b15e      	cbz	r6, 800637a <_dtoa_r+0x74a>
 8006362:	9b08      	ldr	r3, [sp, #32]
 8006364:	2b00      	cmp	r3, #0
 8006366:	dd08      	ble.n	800637a <_dtoa_r+0x74a>
 8006368:	42b3      	cmp	r3, r6
 800636a:	9a08      	ldr	r2, [sp, #32]
 800636c:	bfa8      	it	ge
 800636e:	4633      	movge	r3, r6
 8006370:	eba8 0803 	sub.w	r8, r8, r3
 8006374:	1af6      	subs	r6, r6, r3
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	9308      	str	r3, [sp, #32]
 800637a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800637c:	b1f3      	cbz	r3, 80063bc <_dtoa_r+0x78c>
 800637e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 80b7 	beq.w	80064f4 <_dtoa_r+0x8c4>
 8006386:	b18c      	cbz	r4, 80063ac <_dtoa_r+0x77c>
 8006388:	4629      	mov	r1, r5
 800638a:	4622      	mov	r2, r4
 800638c:	4658      	mov	r0, fp
 800638e:	f000 fcc7 	bl	8006d20 <__pow5mult>
 8006392:	464a      	mov	r2, r9
 8006394:	4601      	mov	r1, r0
 8006396:	4605      	mov	r5, r0
 8006398:	4658      	mov	r0, fp
 800639a:	f000 fc17 	bl	8006bcc <__multiply>
 800639e:	4649      	mov	r1, r9
 80063a0:	9004      	str	r0, [sp, #16]
 80063a2:	4658      	mov	r0, fp
 80063a4:	f000 fb48 	bl	8006a38 <_Bfree>
 80063a8:	9b04      	ldr	r3, [sp, #16]
 80063aa:	4699      	mov	r9, r3
 80063ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063ae:	1b1a      	subs	r2, r3, r4
 80063b0:	d004      	beq.n	80063bc <_dtoa_r+0x78c>
 80063b2:	4649      	mov	r1, r9
 80063b4:	4658      	mov	r0, fp
 80063b6:	f000 fcb3 	bl	8006d20 <__pow5mult>
 80063ba:	4681      	mov	r9, r0
 80063bc:	2101      	movs	r1, #1
 80063be:	4658      	mov	r0, fp
 80063c0:	f000 fbee 	bl	8006ba0 <__i2b>
 80063c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063c6:	4604      	mov	r4, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 81cf 	beq.w	800676c <_dtoa_r+0xb3c>
 80063ce:	461a      	mov	r2, r3
 80063d0:	4601      	mov	r1, r0
 80063d2:	4658      	mov	r0, fp
 80063d4:	f000 fca4 	bl	8006d20 <__pow5mult>
 80063d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063da:	2b01      	cmp	r3, #1
 80063dc:	4604      	mov	r4, r0
 80063de:	f300 8095 	bgt.w	800650c <_dtoa_r+0x8dc>
 80063e2:	9b02      	ldr	r3, [sp, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f040 8087 	bne.w	80064f8 <_dtoa_r+0x8c8>
 80063ea:	9b03      	ldr	r3, [sp, #12]
 80063ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f040 8089 	bne.w	8006508 <_dtoa_r+0x8d8>
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063fc:	0d1b      	lsrs	r3, r3, #20
 80063fe:	051b      	lsls	r3, r3, #20
 8006400:	b12b      	cbz	r3, 800640e <_dtoa_r+0x7de>
 8006402:	9b08      	ldr	r3, [sp, #32]
 8006404:	3301      	adds	r3, #1
 8006406:	9308      	str	r3, [sp, #32]
 8006408:	f108 0801 	add.w	r8, r8, #1
 800640c:	2301      	movs	r3, #1
 800640e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006410:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 81b0 	beq.w	8006778 <_dtoa_r+0xb48>
 8006418:	6923      	ldr	r3, [r4, #16]
 800641a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800641e:	6918      	ldr	r0, [r3, #16]
 8006420:	f000 fb72 	bl	8006b08 <__hi0bits>
 8006424:	f1c0 0020 	rsb	r0, r0, #32
 8006428:	9b08      	ldr	r3, [sp, #32]
 800642a:	4418      	add	r0, r3
 800642c:	f010 001f 	ands.w	r0, r0, #31
 8006430:	d077      	beq.n	8006522 <_dtoa_r+0x8f2>
 8006432:	f1c0 0320 	rsb	r3, r0, #32
 8006436:	2b04      	cmp	r3, #4
 8006438:	dd6b      	ble.n	8006512 <_dtoa_r+0x8e2>
 800643a:	9b08      	ldr	r3, [sp, #32]
 800643c:	f1c0 001c 	rsb	r0, r0, #28
 8006440:	4403      	add	r3, r0
 8006442:	4480      	add	r8, r0
 8006444:	4406      	add	r6, r0
 8006446:	9308      	str	r3, [sp, #32]
 8006448:	f1b8 0f00 	cmp.w	r8, #0
 800644c:	dd05      	ble.n	800645a <_dtoa_r+0x82a>
 800644e:	4649      	mov	r1, r9
 8006450:	4642      	mov	r2, r8
 8006452:	4658      	mov	r0, fp
 8006454:	f000 fcbe 	bl	8006dd4 <__lshift>
 8006458:	4681      	mov	r9, r0
 800645a:	9b08      	ldr	r3, [sp, #32]
 800645c:	2b00      	cmp	r3, #0
 800645e:	dd05      	ble.n	800646c <_dtoa_r+0x83c>
 8006460:	4621      	mov	r1, r4
 8006462:	461a      	mov	r2, r3
 8006464:	4658      	mov	r0, fp
 8006466:	f000 fcb5 	bl	8006dd4 <__lshift>
 800646a:	4604      	mov	r4, r0
 800646c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800646e:	2b00      	cmp	r3, #0
 8006470:	d059      	beq.n	8006526 <_dtoa_r+0x8f6>
 8006472:	4621      	mov	r1, r4
 8006474:	4648      	mov	r0, r9
 8006476:	f000 fd19 	bl	8006eac <__mcmp>
 800647a:	2800      	cmp	r0, #0
 800647c:	da53      	bge.n	8006526 <_dtoa_r+0x8f6>
 800647e:	1e7b      	subs	r3, r7, #1
 8006480:	9304      	str	r3, [sp, #16]
 8006482:	4649      	mov	r1, r9
 8006484:	2300      	movs	r3, #0
 8006486:	220a      	movs	r2, #10
 8006488:	4658      	mov	r0, fp
 800648a:	f000 faf7 	bl	8006a7c <__multadd>
 800648e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006490:	4681      	mov	r9, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 8172 	beq.w	800677c <_dtoa_r+0xb4c>
 8006498:	2300      	movs	r3, #0
 800649a:	4629      	mov	r1, r5
 800649c:	220a      	movs	r2, #10
 800649e:	4658      	mov	r0, fp
 80064a0:	f000 faec 	bl	8006a7c <__multadd>
 80064a4:	9b00      	ldr	r3, [sp, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	4605      	mov	r5, r0
 80064aa:	dc67      	bgt.n	800657c <_dtoa_r+0x94c>
 80064ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	dc41      	bgt.n	8006536 <_dtoa_r+0x906>
 80064b2:	e063      	b.n	800657c <_dtoa_r+0x94c>
 80064b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80064b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064ba:	e746      	b.n	800634a <_dtoa_r+0x71a>
 80064bc:	9b07      	ldr	r3, [sp, #28]
 80064be:	1e5c      	subs	r4, r3, #1
 80064c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064c2:	42a3      	cmp	r3, r4
 80064c4:	bfbf      	itttt	lt
 80064c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80064c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80064ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80064cc:	1ae3      	sublt	r3, r4, r3
 80064ce:	bfb4      	ite	lt
 80064d0:	18d2      	addlt	r2, r2, r3
 80064d2:	1b1c      	subge	r4, r3, r4
 80064d4:	9b07      	ldr	r3, [sp, #28]
 80064d6:	bfbc      	itt	lt
 80064d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80064da:	2400      	movlt	r4, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	bfb5      	itete	lt
 80064e0:	eba8 0603 	sublt.w	r6, r8, r3
 80064e4:	9b07      	ldrge	r3, [sp, #28]
 80064e6:	2300      	movlt	r3, #0
 80064e8:	4646      	movge	r6, r8
 80064ea:	e730      	b.n	800634e <_dtoa_r+0x71e>
 80064ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80064f0:	4646      	mov	r6, r8
 80064f2:	e735      	b.n	8006360 <_dtoa_r+0x730>
 80064f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064f6:	e75c      	b.n	80063b2 <_dtoa_r+0x782>
 80064f8:	2300      	movs	r3, #0
 80064fa:	e788      	b.n	800640e <_dtoa_r+0x7de>
 80064fc:	3fe00000 	.word	0x3fe00000
 8006500:	40240000 	.word	0x40240000
 8006504:	40140000 	.word	0x40140000
 8006508:	9b02      	ldr	r3, [sp, #8]
 800650a:	e780      	b.n	800640e <_dtoa_r+0x7de>
 800650c:	2300      	movs	r3, #0
 800650e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006510:	e782      	b.n	8006418 <_dtoa_r+0x7e8>
 8006512:	d099      	beq.n	8006448 <_dtoa_r+0x818>
 8006514:	9a08      	ldr	r2, [sp, #32]
 8006516:	331c      	adds	r3, #28
 8006518:	441a      	add	r2, r3
 800651a:	4498      	add	r8, r3
 800651c:	441e      	add	r6, r3
 800651e:	9208      	str	r2, [sp, #32]
 8006520:	e792      	b.n	8006448 <_dtoa_r+0x818>
 8006522:	4603      	mov	r3, r0
 8006524:	e7f6      	b.n	8006514 <_dtoa_r+0x8e4>
 8006526:	9b07      	ldr	r3, [sp, #28]
 8006528:	9704      	str	r7, [sp, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	dc20      	bgt.n	8006570 <_dtoa_r+0x940>
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006532:	2b02      	cmp	r3, #2
 8006534:	dd1e      	ble.n	8006574 <_dtoa_r+0x944>
 8006536:	9b00      	ldr	r3, [sp, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	f47f aec0 	bne.w	80062be <_dtoa_r+0x68e>
 800653e:	4621      	mov	r1, r4
 8006540:	2205      	movs	r2, #5
 8006542:	4658      	mov	r0, fp
 8006544:	f000 fa9a 	bl	8006a7c <__multadd>
 8006548:	4601      	mov	r1, r0
 800654a:	4604      	mov	r4, r0
 800654c:	4648      	mov	r0, r9
 800654e:	f000 fcad 	bl	8006eac <__mcmp>
 8006552:	2800      	cmp	r0, #0
 8006554:	f77f aeb3 	ble.w	80062be <_dtoa_r+0x68e>
 8006558:	4656      	mov	r6, sl
 800655a:	2331      	movs	r3, #49	@ 0x31
 800655c:	f806 3b01 	strb.w	r3, [r6], #1
 8006560:	9b04      	ldr	r3, [sp, #16]
 8006562:	3301      	adds	r3, #1
 8006564:	9304      	str	r3, [sp, #16]
 8006566:	e6ae      	b.n	80062c6 <_dtoa_r+0x696>
 8006568:	9c07      	ldr	r4, [sp, #28]
 800656a:	9704      	str	r7, [sp, #16]
 800656c:	4625      	mov	r5, r4
 800656e:	e7f3      	b.n	8006558 <_dtoa_r+0x928>
 8006570:	9b07      	ldr	r3, [sp, #28]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 8104 	beq.w	8006784 <_dtoa_r+0xb54>
 800657c:	2e00      	cmp	r6, #0
 800657e:	dd05      	ble.n	800658c <_dtoa_r+0x95c>
 8006580:	4629      	mov	r1, r5
 8006582:	4632      	mov	r2, r6
 8006584:	4658      	mov	r0, fp
 8006586:	f000 fc25 	bl	8006dd4 <__lshift>
 800658a:	4605      	mov	r5, r0
 800658c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800658e:	2b00      	cmp	r3, #0
 8006590:	d05a      	beq.n	8006648 <_dtoa_r+0xa18>
 8006592:	6869      	ldr	r1, [r5, #4]
 8006594:	4658      	mov	r0, fp
 8006596:	f000 fa0f 	bl	80069b8 <_Balloc>
 800659a:	4606      	mov	r6, r0
 800659c:	b928      	cbnz	r0, 80065aa <_dtoa_r+0x97a>
 800659e:	4b84      	ldr	r3, [pc, #528]	@ (80067b0 <_dtoa_r+0xb80>)
 80065a0:	4602      	mov	r2, r0
 80065a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80065a6:	f7ff bb5a 	b.w	8005c5e <_dtoa_r+0x2e>
 80065aa:	692a      	ldr	r2, [r5, #16]
 80065ac:	3202      	adds	r2, #2
 80065ae:	0092      	lsls	r2, r2, #2
 80065b0:	f105 010c 	add.w	r1, r5, #12
 80065b4:	300c      	adds	r0, #12
 80065b6:	f7ff faa2 	bl	8005afe <memcpy>
 80065ba:	2201      	movs	r2, #1
 80065bc:	4631      	mov	r1, r6
 80065be:	4658      	mov	r0, fp
 80065c0:	f000 fc08 	bl	8006dd4 <__lshift>
 80065c4:	f10a 0301 	add.w	r3, sl, #1
 80065c8:	9307      	str	r3, [sp, #28]
 80065ca:	9b00      	ldr	r3, [sp, #0]
 80065cc:	4453      	add	r3, sl
 80065ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065d0:	9b02      	ldr	r3, [sp, #8]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	462f      	mov	r7, r5
 80065d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065da:	4605      	mov	r5, r0
 80065dc:	9b07      	ldr	r3, [sp, #28]
 80065de:	4621      	mov	r1, r4
 80065e0:	3b01      	subs	r3, #1
 80065e2:	4648      	mov	r0, r9
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	f7ff fa98 	bl	8005b1a <quorem>
 80065ea:	4639      	mov	r1, r7
 80065ec:	9002      	str	r0, [sp, #8]
 80065ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065f2:	4648      	mov	r0, r9
 80065f4:	f000 fc5a 	bl	8006eac <__mcmp>
 80065f8:	462a      	mov	r2, r5
 80065fa:	9008      	str	r0, [sp, #32]
 80065fc:	4621      	mov	r1, r4
 80065fe:	4658      	mov	r0, fp
 8006600:	f000 fc70 	bl	8006ee4 <__mdiff>
 8006604:	68c2      	ldr	r2, [r0, #12]
 8006606:	4606      	mov	r6, r0
 8006608:	bb02      	cbnz	r2, 800664c <_dtoa_r+0xa1c>
 800660a:	4601      	mov	r1, r0
 800660c:	4648      	mov	r0, r9
 800660e:	f000 fc4d 	bl	8006eac <__mcmp>
 8006612:	4602      	mov	r2, r0
 8006614:	4631      	mov	r1, r6
 8006616:	4658      	mov	r0, fp
 8006618:	920e      	str	r2, [sp, #56]	@ 0x38
 800661a:	f000 fa0d 	bl	8006a38 <_Bfree>
 800661e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006620:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006622:	9e07      	ldr	r6, [sp, #28]
 8006624:	ea43 0102 	orr.w	r1, r3, r2
 8006628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800662a:	4319      	orrs	r1, r3
 800662c:	d110      	bne.n	8006650 <_dtoa_r+0xa20>
 800662e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006632:	d029      	beq.n	8006688 <_dtoa_r+0xa58>
 8006634:	9b08      	ldr	r3, [sp, #32]
 8006636:	2b00      	cmp	r3, #0
 8006638:	dd02      	ble.n	8006640 <_dtoa_r+0xa10>
 800663a:	9b02      	ldr	r3, [sp, #8]
 800663c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006640:	9b00      	ldr	r3, [sp, #0]
 8006642:	f883 8000 	strb.w	r8, [r3]
 8006646:	e63f      	b.n	80062c8 <_dtoa_r+0x698>
 8006648:	4628      	mov	r0, r5
 800664a:	e7bb      	b.n	80065c4 <_dtoa_r+0x994>
 800664c:	2201      	movs	r2, #1
 800664e:	e7e1      	b.n	8006614 <_dtoa_r+0x9e4>
 8006650:	9b08      	ldr	r3, [sp, #32]
 8006652:	2b00      	cmp	r3, #0
 8006654:	db04      	blt.n	8006660 <_dtoa_r+0xa30>
 8006656:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006658:	430b      	orrs	r3, r1
 800665a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800665c:	430b      	orrs	r3, r1
 800665e:	d120      	bne.n	80066a2 <_dtoa_r+0xa72>
 8006660:	2a00      	cmp	r2, #0
 8006662:	dded      	ble.n	8006640 <_dtoa_r+0xa10>
 8006664:	4649      	mov	r1, r9
 8006666:	2201      	movs	r2, #1
 8006668:	4658      	mov	r0, fp
 800666a:	f000 fbb3 	bl	8006dd4 <__lshift>
 800666e:	4621      	mov	r1, r4
 8006670:	4681      	mov	r9, r0
 8006672:	f000 fc1b 	bl	8006eac <__mcmp>
 8006676:	2800      	cmp	r0, #0
 8006678:	dc03      	bgt.n	8006682 <_dtoa_r+0xa52>
 800667a:	d1e1      	bne.n	8006640 <_dtoa_r+0xa10>
 800667c:	f018 0f01 	tst.w	r8, #1
 8006680:	d0de      	beq.n	8006640 <_dtoa_r+0xa10>
 8006682:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006686:	d1d8      	bne.n	800663a <_dtoa_r+0xa0a>
 8006688:	9a00      	ldr	r2, [sp, #0]
 800668a:	2339      	movs	r3, #57	@ 0x39
 800668c:	7013      	strb	r3, [r2, #0]
 800668e:	4633      	mov	r3, r6
 8006690:	461e      	mov	r6, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006698:	2a39      	cmp	r2, #57	@ 0x39
 800669a:	d052      	beq.n	8006742 <_dtoa_r+0xb12>
 800669c:	3201      	adds	r2, #1
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	e612      	b.n	80062c8 <_dtoa_r+0x698>
 80066a2:	2a00      	cmp	r2, #0
 80066a4:	dd07      	ble.n	80066b6 <_dtoa_r+0xa86>
 80066a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80066aa:	d0ed      	beq.n	8006688 <_dtoa_r+0xa58>
 80066ac:	9a00      	ldr	r2, [sp, #0]
 80066ae:	f108 0301 	add.w	r3, r8, #1
 80066b2:	7013      	strb	r3, [r2, #0]
 80066b4:	e608      	b.n	80062c8 <_dtoa_r+0x698>
 80066b6:	9b07      	ldr	r3, [sp, #28]
 80066b8:	9a07      	ldr	r2, [sp, #28]
 80066ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80066be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d028      	beq.n	8006716 <_dtoa_r+0xae6>
 80066c4:	4649      	mov	r1, r9
 80066c6:	2300      	movs	r3, #0
 80066c8:	220a      	movs	r2, #10
 80066ca:	4658      	mov	r0, fp
 80066cc:	f000 f9d6 	bl	8006a7c <__multadd>
 80066d0:	42af      	cmp	r7, r5
 80066d2:	4681      	mov	r9, r0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	f04f 020a 	mov.w	r2, #10
 80066dc:	4639      	mov	r1, r7
 80066de:	4658      	mov	r0, fp
 80066e0:	d107      	bne.n	80066f2 <_dtoa_r+0xac2>
 80066e2:	f000 f9cb 	bl	8006a7c <__multadd>
 80066e6:	4607      	mov	r7, r0
 80066e8:	4605      	mov	r5, r0
 80066ea:	9b07      	ldr	r3, [sp, #28]
 80066ec:	3301      	adds	r3, #1
 80066ee:	9307      	str	r3, [sp, #28]
 80066f0:	e774      	b.n	80065dc <_dtoa_r+0x9ac>
 80066f2:	f000 f9c3 	bl	8006a7c <__multadd>
 80066f6:	4629      	mov	r1, r5
 80066f8:	4607      	mov	r7, r0
 80066fa:	2300      	movs	r3, #0
 80066fc:	220a      	movs	r2, #10
 80066fe:	4658      	mov	r0, fp
 8006700:	f000 f9bc 	bl	8006a7c <__multadd>
 8006704:	4605      	mov	r5, r0
 8006706:	e7f0      	b.n	80066ea <_dtoa_r+0xaba>
 8006708:	9b00      	ldr	r3, [sp, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	bfcc      	ite	gt
 800670e:	461e      	movgt	r6, r3
 8006710:	2601      	movle	r6, #1
 8006712:	4456      	add	r6, sl
 8006714:	2700      	movs	r7, #0
 8006716:	4649      	mov	r1, r9
 8006718:	2201      	movs	r2, #1
 800671a:	4658      	mov	r0, fp
 800671c:	f000 fb5a 	bl	8006dd4 <__lshift>
 8006720:	4621      	mov	r1, r4
 8006722:	4681      	mov	r9, r0
 8006724:	f000 fbc2 	bl	8006eac <__mcmp>
 8006728:	2800      	cmp	r0, #0
 800672a:	dcb0      	bgt.n	800668e <_dtoa_r+0xa5e>
 800672c:	d102      	bne.n	8006734 <_dtoa_r+0xb04>
 800672e:	f018 0f01 	tst.w	r8, #1
 8006732:	d1ac      	bne.n	800668e <_dtoa_r+0xa5e>
 8006734:	4633      	mov	r3, r6
 8006736:	461e      	mov	r6, r3
 8006738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800673c:	2a30      	cmp	r2, #48	@ 0x30
 800673e:	d0fa      	beq.n	8006736 <_dtoa_r+0xb06>
 8006740:	e5c2      	b.n	80062c8 <_dtoa_r+0x698>
 8006742:	459a      	cmp	sl, r3
 8006744:	d1a4      	bne.n	8006690 <_dtoa_r+0xa60>
 8006746:	9b04      	ldr	r3, [sp, #16]
 8006748:	3301      	adds	r3, #1
 800674a:	9304      	str	r3, [sp, #16]
 800674c:	2331      	movs	r3, #49	@ 0x31
 800674e:	f88a 3000 	strb.w	r3, [sl]
 8006752:	e5b9      	b.n	80062c8 <_dtoa_r+0x698>
 8006754:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006756:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80067b4 <_dtoa_r+0xb84>
 800675a:	b11b      	cbz	r3, 8006764 <_dtoa_r+0xb34>
 800675c:	f10a 0308 	add.w	r3, sl, #8
 8006760:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	4650      	mov	r0, sl
 8006766:	b019      	add	sp, #100	@ 0x64
 8006768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800676e:	2b01      	cmp	r3, #1
 8006770:	f77f ae37 	ble.w	80063e2 <_dtoa_r+0x7b2>
 8006774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006776:	930a      	str	r3, [sp, #40]	@ 0x28
 8006778:	2001      	movs	r0, #1
 800677a:	e655      	b.n	8006428 <_dtoa_r+0x7f8>
 800677c:	9b00      	ldr	r3, [sp, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	f77f aed6 	ble.w	8006530 <_dtoa_r+0x900>
 8006784:	4656      	mov	r6, sl
 8006786:	4621      	mov	r1, r4
 8006788:	4648      	mov	r0, r9
 800678a:	f7ff f9c6 	bl	8005b1a <quorem>
 800678e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006792:	f806 8b01 	strb.w	r8, [r6], #1
 8006796:	9b00      	ldr	r3, [sp, #0]
 8006798:	eba6 020a 	sub.w	r2, r6, sl
 800679c:	4293      	cmp	r3, r2
 800679e:	ddb3      	ble.n	8006708 <_dtoa_r+0xad8>
 80067a0:	4649      	mov	r1, r9
 80067a2:	2300      	movs	r3, #0
 80067a4:	220a      	movs	r2, #10
 80067a6:	4658      	mov	r0, fp
 80067a8:	f000 f968 	bl	8006a7c <__multadd>
 80067ac:	4681      	mov	r9, r0
 80067ae:	e7ea      	b.n	8006786 <_dtoa_r+0xb56>
 80067b0:	08007ccc 	.word	0x08007ccc
 80067b4:	08007c50 	.word	0x08007c50

080067b8 <_free_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4605      	mov	r5, r0
 80067bc:	2900      	cmp	r1, #0
 80067be:	d041      	beq.n	8006844 <_free_r+0x8c>
 80067c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067c4:	1f0c      	subs	r4, r1, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	bfb8      	it	lt
 80067ca:	18e4      	addlt	r4, r4, r3
 80067cc:	f000 f8e8 	bl	80069a0 <__malloc_lock>
 80067d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006848 <_free_r+0x90>)
 80067d2:	6813      	ldr	r3, [r2, #0]
 80067d4:	b933      	cbnz	r3, 80067e4 <_free_r+0x2c>
 80067d6:	6063      	str	r3, [r4, #4]
 80067d8:	6014      	str	r4, [r2, #0]
 80067da:	4628      	mov	r0, r5
 80067dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067e0:	f000 b8e4 	b.w	80069ac <__malloc_unlock>
 80067e4:	42a3      	cmp	r3, r4
 80067e6:	d908      	bls.n	80067fa <_free_r+0x42>
 80067e8:	6820      	ldr	r0, [r4, #0]
 80067ea:	1821      	adds	r1, r4, r0
 80067ec:	428b      	cmp	r3, r1
 80067ee:	bf01      	itttt	eq
 80067f0:	6819      	ldreq	r1, [r3, #0]
 80067f2:	685b      	ldreq	r3, [r3, #4]
 80067f4:	1809      	addeq	r1, r1, r0
 80067f6:	6021      	streq	r1, [r4, #0]
 80067f8:	e7ed      	b.n	80067d6 <_free_r+0x1e>
 80067fa:	461a      	mov	r2, r3
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	b10b      	cbz	r3, 8006804 <_free_r+0x4c>
 8006800:	42a3      	cmp	r3, r4
 8006802:	d9fa      	bls.n	80067fa <_free_r+0x42>
 8006804:	6811      	ldr	r1, [r2, #0]
 8006806:	1850      	adds	r0, r2, r1
 8006808:	42a0      	cmp	r0, r4
 800680a:	d10b      	bne.n	8006824 <_free_r+0x6c>
 800680c:	6820      	ldr	r0, [r4, #0]
 800680e:	4401      	add	r1, r0
 8006810:	1850      	adds	r0, r2, r1
 8006812:	4283      	cmp	r3, r0
 8006814:	6011      	str	r1, [r2, #0]
 8006816:	d1e0      	bne.n	80067da <_free_r+0x22>
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	6053      	str	r3, [r2, #4]
 800681e:	4408      	add	r0, r1
 8006820:	6010      	str	r0, [r2, #0]
 8006822:	e7da      	b.n	80067da <_free_r+0x22>
 8006824:	d902      	bls.n	800682c <_free_r+0x74>
 8006826:	230c      	movs	r3, #12
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	e7d6      	b.n	80067da <_free_r+0x22>
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	1821      	adds	r1, r4, r0
 8006830:	428b      	cmp	r3, r1
 8006832:	bf04      	itt	eq
 8006834:	6819      	ldreq	r1, [r3, #0]
 8006836:	685b      	ldreq	r3, [r3, #4]
 8006838:	6063      	str	r3, [r4, #4]
 800683a:	bf04      	itt	eq
 800683c:	1809      	addeq	r1, r1, r0
 800683e:	6021      	streq	r1, [r4, #0]
 8006840:	6054      	str	r4, [r2, #4]
 8006842:	e7ca      	b.n	80067da <_free_r+0x22>
 8006844:	bd38      	pop	{r3, r4, r5, pc}
 8006846:	bf00      	nop
 8006848:	20000804 	.word	0x20000804

0800684c <malloc>:
 800684c:	4b02      	ldr	r3, [pc, #8]	@ (8006858 <malloc+0xc>)
 800684e:	4601      	mov	r1, r0
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	f000 b825 	b.w	80068a0 <_malloc_r>
 8006856:	bf00      	nop
 8006858:	200000c4 	.word	0x200000c4

0800685c <sbrk_aligned>:
 800685c:	b570      	push	{r4, r5, r6, lr}
 800685e:	4e0f      	ldr	r6, [pc, #60]	@ (800689c <sbrk_aligned+0x40>)
 8006860:	460c      	mov	r4, r1
 8006862:	6831      	ldr	r1, [r6, #0]
 8006864:	4605      	mov	r5, r0
 8006866:	b911      	cbnz	r1, 800686e <sbrk_aligned+0x12>
 8006868:	f000 fe46 	bl	80074f8 <_sbrk_r>
 800686c:	6030      	str	r0, [r6, #0]
 800686e:	4621      	mov	r1, r4
 8006870:	4628      	mov	r0, r5
 8006872:	f000 fe41 	bl	80074f8 <_sbrk_r>
 8006876:	1c43      	adds	r3, r0, #1
 8006878:	d103      	bne.n	8006882 <sbrk_aligned+0x26>
 800687a:	f04f 34ff 	mov.w	r4, #4294967295
 800687e:	4620      	mov	r0, r4
 8006880:	bd70      	pop	{r4, r5, r6, pc}
 8006882:	1cc4      	adds	r4, r0, #3
 8006884:	f024 0403 	bic.w	r4, r4, #3
 8006888:	42a0      	cmp	r0, r4
 800688a:	d0f8      	beq.n	800687e <sbrk_aligned+0x22>
 800688c:	1a21      	subs	r1, r4, r0
 800688e:	4628      	mov	r0, r5
 8006890:	f000 fe32 	bl	80074f8 <_sbrk_r>
 8006894:	3001      	adds	r0, #1
 8006896:	d1f2      	bne.n	800687e <sbrk_aligned+0x22>
 8006898:	e7ef      	b.n	800687a <sbrk_aligned+0x1e>
 800689a:	bf00      	nop
 800689c:	20000800 	.word	0x20000800

080068a0 <_malloc_r>:
 80068a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a4:	1ccd      	adds	r5, r1, #3
 80068a6:	f025 0503 	bic.w	r5, r5, #3
 80068aa:	3508      	adds	r5, #8
 80068ac:	2d0c      	cmp	r5, #12
 80068ae:	bf38      	it	cc
 80068b0:	250c      	movcc	r5, #12
 80068b2:	2d00      	cmp	r5, #0
 80068b4:	4606      	mov	r6, r0
 80068b6:	db01      	blt.n	80068bc <_malloc_r+0x1c>
 80068b8:	42a9      	cmp	r1, r5
 80068ba:	d904      	bls.n	80068c6 <_malloc_r+0x26>
 80068bc:	230c      	movs	r3, #12
 80068be:	6033      	str	r3, [r6, #0]
 80068c0:	2000      	movs	r0, #0
 80068c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800699c <_malloc_r+0xfc>
 80068ca:	f000 f869 	bl	80069a0 <__malloc_lock>
 80068ce:	f8d8 3000 	ldr.w	r3, [r8]
 80068d2:	461c      	mov	r4, r3
 80068d4:	bb44      	cbnz	r4, 8006928 <_malloc_r+0x88>
 80068d6:	4629      	mov	r1, r5
 80068d8:	4630      	mov	r0, r6
 80068da:	f7ff ffbf 	bl	800685c <sbrk_aligned>
 80068de:	1c43      	adds	r3, r0, #1
 80068e0:	4604      	mov	r4, r0
 80068e2:	d158      	bne.n	8006996 <_malloc_r+0xf6>
 80068e4:	f8d8 4000 	ldr.w	r4, [r8]
 80068e8:	4627      	mov	r7, r4
 80068ea:	2f00      	cmp	r7, #0
 80068ec:	d143      	bne.n	8006976 <_malloc_r+0xd6>
 80068ee:	2c00      	cmp	r4, #0
 80068f0:	d04b      	beq.n	800698a <_malloc_r+0xea>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	4639      	mov	r1, r7
 80068f6:	4630      	mov	r0, r6
 80068f8:	eb04 0903 	add.w	r9, r4, r3
 80068fc:	f000 fdfc 	bl	80074f8 <_sbrk_r>
 8006900:	4581      	cmp	r9, r0
 8006902:	d142      	bne.n	800698a <_malloc_r+0xea>
 8006904:	6821      	ldr	r1, [r4, #0]
 8006906:	1a6d      	subs	r5, r5, r1
 8006908:	4629      	mov	r1, r5
 800690a:	4630      	mov	r0, r6
 800690c:	f7ff ffa6 	bl	800685c <sbrk_aligned>
 8006910:	3001      	adds	r0, #1
 8006912:	d03a      	beq.n	800698a <_malloc_r+0xea>
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	442b      	add	r3, r5
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	f8d8 3000 	ldr.w	r3, [r8]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	bb62      	cbnz	r2, 800697c <_malloc_r+0xdc>
 8006922:	f8c8 7000 	str.w	r7, [r8]
 8006926:	e00f      	b.n	8006948 <_malloc_r+0xa8>
 8006928:	6822      	ldr	r2, [r4, #0]
 800692a:	1b52      	subs	r2, r2, r5
 800692c:	d420      	bmi.n	8006970 <_malloc_r+0xd0>
 800692e:	2a0b      	cmp	r2, #11
 8006930:	d917      	bls.n	8006962 <_malloc_r+0xc2>
 8006932:	1961      	adds	r1, r4, r5
 8006934:	42a3      	cmp	r3, r4
 8006936:	6025      	str	r5, [r4, #0]
 8006938:	bf18      	it	ne
 800693a:	6059      	strne	r1, [r3, #4]
 800693c:	6863      	ldr	r3, [r4, #4]
 800693e:	bf08      	it	eq
 8006940:	f8c8 1000 	streq.w	r1, [r8]
 8006944:	5162      	str	r2, [r4, r5]
 8006946:	604b      	str	r3, [r1, #4]
 8006948:	4630      	mov	r0, r6
 800694a:	f000 f82f 	bl	80069ac <__malloc_unlock>
 800694e:	f104 000b 	add.w	r0, r4, #11
 8006952:	1d23      	adds	r3, r4, #4
 8006954:	f020 0007 	bic.w	r0, r0, #7
 8006958:	1ac2      	subs	r2, r0, r3
 800695a:	bf1c      	itt	ne
 800695c:	1a1b      	subne	r3, r3, r0
 800695e:	50a3      	strne	r3, [r4, r2]
 8006960:	e7af      	b.n	80068c2 <_malloc_r+0x22>
 8006962:	6862      	ldr	r2, [r4, #4]
 8006964:	42a3      	cmp	r3, r4
 8006966:	bf0c      	ite	eq
 8006968:	f8c8 2000 	streq.w	r2, [r8]
 800696c:	605a      	strne	r2, [r3, #4]
 800696e:	e7eb      	b.n	8006948 <_malloc_r+0xa8>
 8006970:	4623      	mov	r3, r4
 8006972:	6864      	ldr	r4, [r4, #4]
 8006974:	e7ae      	b.n	80068d4 <_malloc_r+0x34>
 8006976:	463c      	mov	r4, r7
 8006978:	687f      	ldr	r7, [r7, #4]
 800697a:	e7b6      	b.n	80068ea <_malloc_r+0x4a>
 800697c:	461a      	mov	r2, r3
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	42a3      	cmp	r3, r4
 8006982:	d1fb      	bne.n	800697c <_malloc_r+0xdc>
 8006984:	2300      	movs	r3, #0
 8006986:	6053      	str	r3, [r2, #4]
 8006988:	e7de      	b.n	8006948 <_malloc_r+0xa8>
 800698a:	230c      	movs	r3, #12
 800698c:	6033      	str	r3, [r6, #0]
 800698e:	4630      	mov	r0, r6
 8006990:	f000 f80c 	bl	80069ac <__malloc_unlock>
 8006994:	e794      	b.n	80068c0 <_malloc_r+0x20>
 8006996:	6005      	str	r5, [r0, #0]
 8006998:	e7d6      	b.n	8006948 <_malloc_r+0xa8>
 800699a:	bf00      	nop
 800699c:	20000804 	.word	0x20000804

080069a0 <__malloc_lock>:
 80069a0:	4801      	ldr	r0, [pc, #4]	@ (80069a8 <__malloc_lock+0x8>)
 80069a2:	f7ff b8aa 	b.w	8005afa <__retarget_lock_acquire_recursive>
 80069a6:	bf00      	nop
 80069a8:	200007fc 	.word	0x200007fc

080069ac <__malloc_unlock>:
 80069ac:	4801      	ldr	r0, [pc, #4]	@ (80069b4 <__malloc_unlock+0x8>)
 80069ae:	f7ff b8a5 	b.w	8005afc <__retarget_lock_release_recursive>
 80069b2:	bf00      	nop
 80069b4:	200007fc 	.word	0x200007fc

080069b8 <_Balloc>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	69c6      	ldr	r6, [r0, #28]
 80069bc:	4604      	mov	r4, r0
 80069be:	460d      	mov	r5, r1
 80069c0:	b976      	cbnz	r6, 80069e0 <_Balloc+0x28>
 80069c2:	2010      	movs	r0, #16
 80069c4:	f7ff ff42 	bl	800684c <malloc>
 80069c8:	4602      	mov	r2, r0
 80069ca:	61e0      	str	r0, [r4, #28]
 80069cc:	b920      	cbnz	r0, 80069d8 <_Balloc+0x20>
 80069ce:	4b18      	ldr	r3, [pc, #96]	@ (8006a30 <_Balloc+0x78>)
 80069d0:	4818      	ldr	r0, [pc, #96]	@ (8006a34 <_Balloc+0x7c>)
 80069d2:	216b      	movs	r1, #107	@ 0x6b
 80069d4:	f000 fda0 	bl	8007518 <__assert_func>
 80069d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069dc:	6006      	str	r6, [r0, #0]
 80069de:	60c6      	str	r6, [r0, #12]
 80069e0:	69e6      	ldr	r6, [r4, #28]
 80069e2:	68f3      	ldr	r3, [r6, #12]
 80069e4:	b183      	cbz	r3, 8006a08 <_Balloc+0x50>
 80069e6:	69e3      	ldr	r3, [r4, #28]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069ee:	b9b8      	cbnz	r0, 8006a20 <_Balloc+0x68>
 80069f0:	2101      	movs	r1, #1
 80069f2:	fa01 f605 	lsl.w	r6, r1, r5
 80069f6:	1d72      	adds	r2, r6, #5
 80069f8:	0092      	lsls	r2, r2, #2
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 fdaa 	bl	8007554 <_calloc_r>
 8006a00:	b160      	cbz	r0, 8006a1c <_Balloc+0x64>
 8006a02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a06:	e00e      	b.n	8006a26 <_Balloc+0x6e>
 8006a08:	2221      	movs	r2, #33	@ 0x21
 8006a0a:	2104      	movs	r1, #4
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f000 fda1 	bl	8007554 <_calloc_r>
 8006a12:	69e3      	ldr	r3, [r4, #28]
 8006a14:	60f0      	str	r0, [r6, #12]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e4      	bne.n	80069e6 <_Balloc+0x2e>
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
 8006a20:	6802      	ldr	r2, [r0, #0]
 8006a22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a26:	2300      	movs	r3, #0
 8006a28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a2c:	e7f7      	b.n	8006a1e <_Balloc+0x66>
 8006a2e:	bf00      	nop
 8006a30:	08007c5d 	.word	0x08007c5d
 8006a34:	08007cdd 	.word	0x08007cdd

08006a38 <_Bfree>:
 8006a38:	b570      	push	{r4, r5, r6, lr}
 8006a3a:	69c6      	ldr	r6, [r0, #28]
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	b976      	cbnz	r6, 8006a60 <_Bfree+0x28>
 8006a42:	2010      	movs	r0, #16
 8006a44:	f7ff ff02 	bl	800684c <malloc>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	61e8      	str	r0, [r5, #28]
 8006a4c:	b920      	cbnz	r0, 8006a58 <_Bfree+0x20>
 8006a4e:	4b09      	ldr	r3, [pc, #36]	@ (8006a74 <_Bfree+0x3c>)
 8006a50:	4809      	ldr	r0, [pc, #36]	@ (8006a78 <_Bfree+0x40>)
 8006a52:	218f      	movs	r1, #143	@ 0x8f
 8006a54:	f000 fd60 	bl	8007518 <__assert_func>
 8006a58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a5c:	6006      	str	r6, [r0, #0]
 8006a5e:	60c6      	str	r6, [r0, #12]
 8006a60:	b13c      	cbz	r4, 8006a72 <_Bfree+0x3a>
 8006a62:	69eb      	ldr	r3, [r5, #28]
 8006a64:	6862      	ldr	r2, [r4, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a6c:	6021      	str	r1, [r4, #0]
 8006a6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a72:	bd70      	pop	{r4, r5, r6, pc}
 8006a74:	08007c5d 	.word	0x08007c5d
 8006a78:	08007cdd 	.word	0x08007cdd

08006a7c <__multadd>:
 8006a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a80:	690d      	ldr	r5, [r1, #16]
 8006a82:	4607      	mov	r7, r0
 8006a84:	460c      	mov	r4, r1
 8006a86:	461e      	mov	r6, r3
 8006a88:	f101 0c14 	add.w	ip, r1, #20
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	f8dc 3000 	ldr.w	r3, [ip]
 8006a92:	b299      	uxth	r1, r3
 8006a94:	fb02 6101 	mla	r1, r2, r1, r6
 8006a98:	0c1e      	lsrs	r6, r3, #16
 8006a9a:	0c0b      	lsrs	r3, r1, #16
 8006a9c:	fb02 3306 	mla	r3, r2, r6, r3
 8006aa0:	b289      	uxth	r1, r1
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006aa8:	4285      	cmp	r5, r0
 8006aaa:	f84c 1b04 	str.w	r1, [ip], #4
 8006aae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ab2:	dcec      	bgt.n	8006a8e <__multadd+0x12>
 8006ab4:	b30e      	cbz	r6, 8006afa <__multadd+0x7e>
 8006ab6:	68a3      	ldr	r3, [r4, #8]
 8006ab8:	42ab      	cmp	r3, r5
 8006aba:	dc19      	bgt.n	8006af0 <__multadd+0x74>
 8006abc:	6861      	ldr	r1, [r4, #4]
 8006abe:	4638      	mov	r0, r7
 8006ac0:	3101      	adds	r1, #1
 8006ac2:	f7ff ff79 	bl	80069b8 <_Balloc>
 8006ac6:	4680      	mov	r8, r0
 8006ac8:	b928      	cbnz	r0, 8006ad6 <__multadd+0x5a>
 8006aca:	4602      	mov	r2, r0
 8006acc:	4b0c      	ldr	r3, [pc, #48]	@ (8006b00 <__multadd+0x84>)
 8006ace:	480d      	ldr	r0, [pc, #52]	@ (8006b04 <__multadd+0x88>)
 8006ad0:	21ba      	movs	r1, #186	@ 0xba
 8006ad2:	f000 fd21 	bl	8007518 <__assert_func>
 8006ad6:	6922      	ldr	r2, [r4, #16]
 8006ad8:	3202      	adds	r2, #2
 8006ada:	f104 010c 	add.w	r1, r4, #12
 8006ade:	0092      	lsls	r2, r2, #2
 8006ae0:	300c      	adds	r0, #12
 8006ae2:	f7ff f80c 	bl	8005afe <memcpy>
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	4638      	mov	r0, r7
 8006aea:	f7ff ffa5 	bl	8006a38 <_Bfree>
 8006aee:	4644      	mov	r4, r8
 8006af0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006af4:	3501      	adds	r5, #1
 8006af6:	615e      	str	r6, [r3, #20]
 8006af8:	6125      	str	r5, [r4, #16]
 8006afa:	4620      	mov	r0, r4
 8006afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b00:	08007ccc 	.word	0x08007ccc
 8006b04:	08007cdd 	.word	0x08007cdd

08006b08 <__hi0bits>:
 8006b08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	bf36      	itet	cc
 8006b10:	0403      	lslcc	r3, r0, #16
 8006b12:	2000      	movcs	r0, #0
 8006b14:	2010      	movcc	r0, #16
 8006b16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b1a:	bf3c      	itt	cc
 8006b1c:	021b      	lslcc	r3, r3, #8
 8006b1e:	3008      	addcc	r0, #8
 8006b20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b24:	bf3c      	itt	cc
 8006b26:	011b      	lslcc	r3, r3, #4
 8006b28:	3004      	addcc	r0, #4
 8006b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b2e:	bf3c      	itt	cc
 8006b30:	009b      	lslcc	r3, r3, #2
 8006b32:	3002      	addcc	r0, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	db05      	blt.n	8006b44 <__hi0bits+0x3c>
 8006b38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b3c:	f100 0001 	add.w	r0, r0, #1
 8006b40:	bf08      	it	eq
 8006b42:	2020      	moveq	r0, #32
 8006b44:	4770      	bx	lr

08006b46 <__lo0bits>:
 8006b46:	6803      	ldr	r3, [r0, #0]
 8006b48:	4602      	mov	r2, r0
 8006b4a:	f013 0007 	ands.w	r0, r3, #7
 8006b4e:	d00b      	beq.n	8006b68 <__lo0bits+0x22>
 8006b50:	07d9      	lsls	r1, r3, #31
 8006b52:	d421      	bmi.n	8006b98 <__lo0bits+0x52>
 8006b54:	0798      	lsls	r0, r3, #30
 8006b56:	bf49      	itett	mi
 8006b58:	085b      	lsrmi	r3, r3, #1
 8006b5a:	089b      	lsrpl	r3, r3, #2
 8006b5c:	2001      	movmi	r0, #1
 8006b5e:	6013      	strmi	r3, [r2, #0]
 8006b60:	bf5c      	itt	pl
 8006b62:	6013      	strpl	r3, [r2, #0]
 8006b64:	2002      	movpl	r0, #2
 8006b66:	4770      	bx	lr
 8006b68:	b299      	uxth	r1, r3
 8006b6a:	b909      	cbnz	r1, 8006b70 <__lo0bits+0x2a>
 8006b6c:	0c1b      	lsrs	r3, r3, #16
 8006b6e:	2010      	movs	r0, #16
 8006b70:	b2d9      	uxtb	r1, r3
 8006b72:	b909      	cbnz	r1, 8006b78 <__lo0bits+0x32>
 8006b74:	3008      	adds	r0, #8
 8006b76:	0a1b      	lsrs	r3, r3, #8
 8006b78:	0719      	lsls	r1, r3, #28
 8006b7a:	bf04      	itt	eq
 8006b7c:	091b      	lsreq	r3, r3, #4
 8006b7e:	3004      	addeq	r0, #4
 8006b80:	0799      	lsls	r1, r3, #30
 8006b82:	bf04      	itt	eq
 8006b84:	089b      	lsreq	r3, r3, #2
 8006b86:	3002      	addeq	r0, #2
 8006b88:	07d9      	lsls	r1, r3, #31
 8006b8a:	d403      	bmi.n	8006b94 <__lo0bits+0x4e>
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	f100 0001 	add.w	r0, r0, #1
 8006b92:	d003      	beq.n	8006b9c <__lo0bits+0x56>
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	4770      	bx	lr
 8006b98:	2000      	movs	r0, #0
 8006b9a:	4770      	bx	lr
 8006b9c:	2020      	movs	r0, #32
 8006b9e:	4770      	bx	lr

08006ba0 <__i2b>:
 8006ba0:	b510      	push	{r4, lr}
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	f7ff ff07 	bl	80069b8 <_Balloc>
 8006baa:	4602      	mov	r2, r0
 8006bac:	b928      	cbnz	r0, 8006bba <__i2b+0x1a>
 8006bae:	4b05      	ldr	r3, [pc, #20]	@ (8006bc4 <__i2b+0x24>)
 8006bb0:	4805      	ldr	r0, [pc, #20]	@ (8006bc8 <__i2b+0x28>)
 8006bb2:	f240 1145 	movw	r1, #325	@ 0x145
 8006bb6:	f000 fcaf 	bl	8007518 <__assert_func>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	6144      	str	r4, [r0, #20]
 8006bbe:	6103      	str	r3, [r0, #16]
 8006bc0:	bd10      	pop	{r4, pc}
 8006bc2:	bf00      	nop
 8006bc4:	08007ccc 	.word	0x08007ccc
 8006bc8:	08007cdd 	.word	0x08007cdd

08006bcc <__multiply>:
 8006bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd0:	4614      	mov	r4, r2
 8006bd2:	690a      	ldr	r2, [r1, #16]
 8006bd4:	6923      	ldr	r3, [r4, #16]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	bfa8      	it	ge
 8006bda:	4623      	movge	r3, r4
 8006bdc:	460f      	mov	r7, r1
 8006bde:	bfa4      	itt	ge
 8006be0:	460c      	movge	r4, r1
 8006be2:	461f      	movge	r7, r3
 8006be4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006be8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006bec:	68a3      	ldr	r3, [r4, #8]
 8006bee:	6861      	ldr	r1, [r4, #4]
 8006bf0:	eb0a 0609 	add.w	r6, sl, r9
 8006bf4:	42b3      	cmp	r3, r6
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	bfb8      	it	lt
 8006bfa:	3101      	addlt	r1, #1
 8006bfc:	f7ff fedc 	bl	80069b8 <_Balloc>
 8006c00:	b930      	cbnz	r0, 8006c10 <__multiply+0x44>
 8006c02:	4602      	mov	r2, r0
 8006c04:	4b44      	ldr	r3, [pc, #272]	@ (8006d18 <__multiply+0x14c>)
 8006c06:	4845      	ldr	r0, [pc, #276]	@ (8006d1c <__multiply+0x150>)
 8006c08:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c0c:	f000 fc84 	bl	8007518 <__assert_func>
 8006c10:	f100 0514 	add.w	r5, r0, #20
 8006c14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c18:	462b      	mov	r3, r5
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	4543      	cmp	r3, r8
 8006c1e:	d321      	bcc.n	8006c64 <__multiply+0x98>
 8006c20:	f107 0114 	add.w	r1, r7, #20
 8006c24:	f104 0214 	add.w	r2, r4, #20
 8006c28:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006c2c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006c30:	9302      	str	r3, [sp, #8]
 8006c32:	1b13      	subs	r3, r2, r4
 8006c34:	3b15      	subs	r3, #21
 8006c36:	f023 0303 	bic.w	r3, r3, #3
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	f104 0715 	add.w	r7, r4, #21
 8006c40:	42ba      	cmp	r2, r7
 8006c42:	bf38      	it	cc
 8006c44:	2304      	movcc	r3, #4
 8006c46:	9301      	str	r3, [sp, #4]
 8006c48:	9b02      	ldr	r3, [sp, #8]
 8006c4a:	9103      	str	r1, [sp, #12]
 8006c4c:	428b      	cmp	r3, r1
 8006c4e:	d80c      	bhi.n	8006c6a <__multiply+0x9e>
 8006c50:	2e00      	cmp	r6, #0
 8006c52:	dd03      	ble.n	8006c5c <__multiply+0x90>
 8006c54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d05b      	beq.n	8006d14 <__multiply+0x148>
 8006c5c:	6106      	str	r6, [r0, #16]
 8006c5e:	b005      	add	sp, #20
 8006c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c64:	f843 2b04 	str.w	r2, [r3], #4
 8006c68:	e7d8      	b.n	8006c1c <__multiply+0x50>
 8006c6a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c6e:	f1ba 0f00 	cmp.w	sl, #0
 8006c72:	d024      	beq.n	8006cbe <__multiply+0xf2>
 8006c74:	f104 0e14 	add.w	lr, r4, #20
 8006c78:	46a9      	mov	r9, r5
 8006c7a:	f04f 0c00 	mov.w	ip, #0
 8006c7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c82:	f8d9 3000 	ldr.w	r3, [r9]
 8006c86:	fa1f fb87 	uxth.w	fp, r7
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c90:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006c94:	f8d9 7000 	ldr.w	r7, [r9]
 8006c98:	4463      	add	r3, ip
 8006c9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c9e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006ca2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006cac:	4572      	cmp	r2, lr
 8006cae:	f849 3b04 	str.w	r3, [r9], #4
 8006cb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006cb6:	d8e2      	bhi.n	8006c7e <__multiply+0xb2>
 8006cb8:	9b01      	ldr	r3, [sp, #4]
 8006cba:	f845 c003 	str.w	ip, [r5, r3]
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006cc4:	3104      	adds	r1, #4
 8006cc6:	f1b9 0f00 	cmp.w	r9, #0
 8006cca:	d021      	beq.n	8006d10 <__multiply+0x144>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	f104 0c14 	add.w	ip, r4, #20
 8006cd2:	46ae      	mov	lr, r5
 8006cd4:	f04f 0a00 	mov.w	sl, #0
 8006cd8:	f8bc b000 	ldrh.w	fp, [ip]
 8006cdc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006ce0:	fb09 770b 	mla	r7, r9, fp, r7
 8006ce4:	4457      	add	r7, sl
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006cec:	f84e 3b04 	str.w	r3, [lr], #4
 8006cf0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006cf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cf8:	f8be 3000 	ldrh.w	r3, [lr]
 8006cfc:	fb09 330a 	mla	r3, r9, sl, r3
 8006d00:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006d04:	4562      	cmp	r2, ip
 8006d06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d0a:	d8e5      	bhi.n	8006cd8 <__multiply+0x10c>
 8006d0c:	9f01      	ldr	r7, [sp, #4]
 8006d0e:	51eb      	str	r3, [r5, r7]
 8006d10:	3504      	adds	r5, #4
 8006d12:	e799      	b.n	8006c48 <__multiply+0x7c>
 8006d14:	3e01      	subs	r6, #1
 8006d16:	e79b      	b.n	8006c50 <__multiply+0x84>
 8006d18:	08007ccc 	.word	0x08007ccc
 8006d1c:	08007cdd 	.word	0x08007cdd

08006d20 <__pow5mult>:
 8006d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d24:	4615      	mov	r5, r2
 8006d26:	f012 0203 	ands.w	r2, r2, #3
 8006d2a:	4607      	mov	r7, r0
 8006d2c:	460e      	mov	r6, r1
 8006d2e:	d007      	beq.n	8006d40 <__pow5mult+0x20>
 8006d30:	4c25      	ldr	r4, [pc, #148]	@ (8006dc8 <__pow5mult+0xa8>)
 8006d32:	3a01      	subs	r2, #1
 8006d34:	2300      	movs	r3, #0
 8006d36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d3a:	f7ff fe9f 	bl	8006a7c <__multadd>
 8006d3e:	4606      	mov	r6, r0
 8006d40:	10ad      	asrs	r5, r5, #2
 8006d42:	d03d      	beq.n	8006dc0 <__pow5mult+0xa0>
 8006d44:	69fc      	ldr	r4, [r7, #28]
 8006d46:	b97c      	cbnz	r4, 8006d68 <__pow5mult+0x48>
 8006d48:	2010      	movs	r0, #16
 8006d4a:	f7ff fd7f 	bl	800684c <malloc>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	61f8      	str	r0, [r7, #28]
 8006d52:	b928      	cbnz	r0, 8006d60 <__pow5mult+0x40>
 8006d54:	4b1d      	ldr	r3, [pc, #116]	@ (8006dcc <__pow5mult+0xac>)
 8006d56:	481e      	ldr	r0, [pc, #120]	@ (8006dd0 <__pow5mult+0xb0>)
 8006d58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d5c:	f000 fbdc 	bl	8007518 <__assert_func>
 8006d60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d64:	6004      	str	r4, [r0, #0]
 8006d66:	60c4      	str	r4, [r0, #12]
 8006d68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d70:	b94c      	cbnz	r4, 8006d86 <__pow5mult+0x66>
 8006d72:	f240 2171 	movw	r1, #625	@ 0x271
 8006d76:	4638      	mov	r0, r7
 8006d78:	f7ff ff12 	bl	8006ba0 <__i2b>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d82:	4604      	mov	r4, r0
 8006d84:	6003      	str	r3, [r0, #0]
 8006d86:	f04f 0900 	mov.w	r9, #0
 8006d8a:	07eb      	lsls	r3, r5, #31
 8006d8c:	d50a      	bpl.n	8006da4 <__pow5mult+0x84>
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4622      	mov	r2, r4
 8006d92:	4638      	mov	r0, r7
 8006d94:	f7ff ff1a 	bl	8006bcc <__multiply>
 8006d98:	4631      	mov	r1, r6
 8006d9a:	4680      	mov	r8, r0
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	f7ff fe4b 	bl	8006a38 <_Bfree>
 8006da2:	4646      	mov	r6, r8
 8006da4:	106d      	asrs	r5, r5, #1
 8006da6:	d00b      	beq.n	8006dc0 <__pow5mult+0xa0>
 8006da8:	6820      	ldr	r0, [r4, #0]
 8006daa:	b938      	cbnz	r0, 8006dbc <__pow5mult+0x9c>
 8006dac:	4622      	mov	r2, r4
 8006dae:	4621      	mov	r1, r4
 8006db0:	4638      	mov	r0, r7
 8006db2:	f7ff ff0b 	bl	8006bcc <__multiply>
 8006db6:	6020      	str	r0, [r4, #0]
 8006db8:	f8c0 9000 	str.w	r9, [r0]
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	e7e4      	b.n	8006d8a <__pow5mult+0x6a>
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dc6:	bf00      	nop
 8006dc8:	08007d38 	.word	0x08007d38
 8006dcc:	08007c5d 	.word	0x08007c5d
 8006dd0:	08007cdd 	.word	0x08007cdd

08006dd4 <__lshift>:
 8006dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd8:	460c      	mov	r4, r1
 8006dda:	6849      	ldr	r1, [r1, #4]
 8006ddc:	6923      	ldr	r3, [r4, #16]
 8006dde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006de2:	68a3      	ldr	r3, [r4, #8]
 8006de4:	4607      	mov	r7, r0
 8006de6:	4691      	mov	r9, r2
 8006de8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006dec:	f108 0601 	add.w	r6, r8, #1
 8006df0:	42b3      	cmp	r3, r6
 8006df2:	db0b      	blt.n	8006e0c <__lshift+0x38>
 8006df4:	4638      	mov	r0, r7
 8006df6:	f7ff fddf 	bl	80069b8 <_Balloc>
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	b948      	cbnz	r0, 8006e12 <__lshift+0x3e>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	4b28      	ldr	r3, [pc, #160]	@ (8006ea4 <__lshift+0xd0>)
 8006e02:	4829      	ldr	r0, [pc, #164]	@ (8006ea8 <__lshift+0xd4>)
 8006e04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e08:	f000 fb86 	bl	8007518 <__assert_func>
 8006e0c:	3101      	adds	r1, #1
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	e7ee      	b.n	8006df0 <__lshift+0x1c>
 8006e12:	2300      	movs	r3, #0
 8006e14:	f100 0114 	add.w	r1, r0, #20
 8006e18:	f100 0210 	add.w	r2, r0, #16
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	4553      	cmp	r3, sl
 8006e20:	db33      	blt.n	8006e8a <__lshift+0xb6>
 8006e22:	6920      	ldr	r0, [r4, #16]
 8006e24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e28:	f104 0314 	add.w	r3, r4, #20
 8006e2c:	f019 091f 	ands.w	r9, r9, #31
 8006e30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e38:	d02b      	beq.n	8006e92 <__lshift+0xbe>
 8006e3a:	f1c9 0e20 	rsb	lr, r9, #32
 8006e3e:	468a      	mov	sl, r1
 8006e40:	2200      	movs	r2, #0
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	fa00 f009 	lsl.w	r0, r0, r9
 8006e48:	4310      	orrs	r0, r2
 8006e4a:	f84a 0b04 	str.w	r0, [sl], #4
 8006e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e52:	459c      	cmp	ip, r3
 8006e54:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e58:	d8f3      	bhi.n	8006e42 <__lshift+0x6e>
 8006e5a:	ebac 0304 	sub.w	r3, ip, r4
 8006e5e:	3b15      	subs	r3, #21
 8006e60:	f023 0303 	bic.w	r3, r3, #3
 8006e64:	3304      	adds	r3, #4
 8006e66:	f104 0015 	add.w	r0, r4, #21
 8006e6a:	4584      	cmp	ip, r0
 8006e6c:	bf38      	it	cc
 8006e6e:	2304      	movcc	r3, #4
 8006e70:	50ca      	str	r2, [r1, r3]
 8006e72:	b10a      	cbz	r2, 8006e78 <__lshift+0xa4>
 8006e74:	f108 0602 	add.w	r6, r8, #2
 8006e78:	3e01      	subs	r6, #1
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	612e      	str	r6, [r5, #16]
 8006e7e:	4621      	mov	r1, r4
 8006e80:	f7ff fdda 	bl	8006a38 <_Bfree>
 8006e84:	4628      	mov	r0, r5
 8006e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e8e:	3301      	adds	r3, #1
 8006e90:	e7c5      	b.n	8006e1e <__lshift+0x4a>
 8006e92:	3904      	subs	r1, #4
 8006e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e98:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e9c:	459c      	cmp	ip, r3
 8006e9e:	d8f9      	bhi.n	8006e94 <__lshift+0xc0>
 8006ea0:	e7ea      	b.n	8006e78 <__lshift+0xa4>
 8006ea2:	bf00      	nop
 8006ea4:	08007ccc 	.word	0x08007ccc
 8006ea8:	08007cdd 	.word	0x08007cdd

08006eac <__mcmp>:
 8006eac:	690a      	ldr	r2, [r1, #16]
 8006eae:	4603      	mov	r3, r0
 8006eb0:	6900      	ldr	r0, [r0, #16]
 8006eb2:	1a80      	subs	r0, r0, r2
 8006eb4:	b530      	push	{r4, r5, lr}
 8006eb6:	d10e      	bne.n	8006ed6 <__mcmp+0x2a>
 8006eb8:	3314      	adds	r3, #20
 8006eba:	3114      	adds	r1, #20
 8006ebc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ec0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ec4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ec8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ecc:	4295      	cmp	r5, r2
 8006ece:	d003      	beq.n	8006ed8 <__mcmp+0x2c>
 8006ed0:	d205      	bcs.n	8006ede <__mcmp+0x32>
 8006ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed6:	bd30      	pop	{r4, r5, pc}
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	d3f3      	bcc.n	8006ec4 <__mcmp+0x18>
 8006edc:	e7fb      	b.n	8006ed6 <__mcmp+0x2a>
 8006ede:	2001      	movs	r0, #1
 8006ee0:	e7f9      	b.n	8006ed6 <__mcmp+0x2a>
	...

08006ee4 <__mdiff>:
 8006ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee8:	4689      	mov	r9, r1
 8006eea:	4606      	mov	r6, r0
 8006eec:	4611      	mov	r1, r2
 8006eee:	4648      	mov	r0, r9
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	f7ff ffdb 	bl	8006eac <__mcmp>
 8006ef6:	1e05      	subs	r5, r0, #0
 8006ef8:	d112      	bne.n	8006f20 <__mdiff+0x3c>
 8006efa:	4629      	mov	r1, r5
 8006efc:	4630      	mov	r0, r6
 8006efe:	f7ff fd5b 	bl	80069b8 <_Balloc>
 8006f02:	4602      	mov	r2, r0
 8006f04:	b928      	cbnz	r0, 8006f12 <__mdiff+0x2e>
 8006f06:	4b3f      	ldr	r3, [pc, #252]	@ (8007004 <__mdiff+0x120>)
 8006f08:	f240 2137 	movw	r1, #567	@ 0x237
 8006f0c:	483e      	ldr	r0, [pc, #248]	@ (8007008 <__mdiff+0x124>)
 8006f0e:	f000 fb03 	bl	8007518 <__assert_func>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f18:	4610      	mov	r0, r2
 8006f1a:	b003      	add	sp, #12
 8006f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f20:	bfbc      	itt	lt
 8006f22:	464b      	movlt	r3, r9
 8006f24:	46a1      	movlt	r9, r4
 8006f26:	4630      	mov	r0, r6
 8006f28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f2c:	bfba      	itte	lt
 8006f2e:	461c      	movlt	r4, r3
 8006f30:	2501      	movlt	r5, #1
 8006f32:	2500      	movge	r5, #0
 8006f34:	f7ff fd40 	bl	80069b8 <_Balloc>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	b918      	cbnz	r0, 8006f44 <__mdiff+0x60>
 8006f3c:	4b31      	ldr	r3, [pc, #196]	@ (8007004 <__mdiff+0x120>)
 8006f3e:	f240 2145 	movw	r1, #581	@ 0x245
 8006f42:	e7e3      	b.n	8006f0c <__mdiff+0x28>
 8006f44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f48:	6926      	ldr	r6, [r4, #16]
 8006f4a:	60c5      	str	r5, [r0, #12]
 8006f4c:	f109 0310 	add.w	r3, r9, #16
 8006f50:	f109 0514 	add.w	r5, r9, #20
 8006f54:	f104 0e14 	add.w	lr, r4, #20
 8006f58:	f100 0b14 	add.w	fp, r0, #20
 8006f5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f64:	9301      	str	r3, [sp, #4]
 8006f66:	46d9      	mov	r9, fp
 8006f68:	f04f 0c00 	mov.w	ip, #0
 8006f6c:	9b01      	ldr	r3, [sp, #4]
 8006f6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f76:	9301      	str	r3, [sp, #4]
 8006f78:	fa1f f38a 	uxth.w	r3, sl
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	b283      	uxth	r3, r0
 8006f80:	1acb      	subs	r3, r1, r3
 8006f82:	0c00      	lsrs	r0, r0, #16
 8006f84:	4463      	add	r3, ip
 8006f86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006f8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f94:	4576      	cmp	r6, lr
 8006f96:	f849 3b04 	str.w	r3, [r9], #4
 8006f9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f9e:	d8e5      	bhi.n	8006f6c <__mdiff+0x88>
 8006fa0:	1b33      	subs	r3, r6, r4
 8006fa2:	3b15      	subs	r3, #21
 8006fa4:	f023 0303 	bic.w	r3, r3, #3
 8006fa8:	3415      	adds	r4, #21
 8006faa:	3304      	adds	r3, #4
 8006fac:	42a6      	cmp	r6, r4
 8006fae:	bf38      	it	cc
 8006fb0:	2304      	movcc	r3, #4
 8006fb2:	441d      	add	r5, r3
 8006fb4:	445b      	add	r3, fp
 8006fb6:	461e      	mov	r6, r3
 8006fb8:	462c      	mov	r4, r5
 8006fba:	4544      	cmp	r4, r8
 8006fbc:	d30e      	bcc.n	8006fdc <__mdiff+0xf8>
 8006fbe:	f108 0103 	add.w	r1, r8, #3
 8006fc2:	1b49      	subs	r1, r1, r5
 8006fc4:	f021 0103 	bic.w	r1, r1, #3
 8006fc8:	3d03      	subs	r5, #3
 8006fca:	45a8      	cmp	r8, r5
 8006fcc:	bf38      	it	cc
 8006fce:	2100      	movcc	r1, #0
 8006fd0:	440b      	add	r3, r1
 8006fd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fd6:	b191      	cbz	r1, 8006ffe <__mdiff+0x11a>
 8006fd8:	6117      	str	r7, [r2, #16]
 8006fda:	e79d      	b.n	8006f18 <__mdiff+0x34>
 8006fdc:	f854 1b04 	ldr.w	r1, [r4], #4
 8006fe0:	46e6      	mov	lr, ip
 8006fe2:	0c08      	lsrs	r0, r1, #16
 8006fe4:	fa1c fc81 	uxtah	ip, ip, r1
 8006fe8:	4471      	add	r1, lr
 8006fea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006fee:	b289      	uxth	r1, r1
 8006ff0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ff4:	f846 1b04 	str.w	r1, [r6], #4
 8006ff8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ffc:	e7dd      	b.n	8006fba <__mdiff+0xd6>
 8006ffe:	3f01      	subs	r7, #1
 8007000:	e7e7      	b.n	8006fd2 <__mdiff+0xee>
 8007002:	bf00      	nop
 8007004:	08007ccc 	.word	0x08007ccc
 8007008:	08007cdd 	.word	0x08007cdd

0800700c <__d2b>:
 800700c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007010:	460f      	mov	r7, r1
 8007012:	2101      	movs	r1, #1
 8007014:	ec59 8b10 	vmov	r8, r9, d0
 8007018:	4616      	mov	r6, r2
 800701a:	f7ff fccd 	bl	80069b8 <_Balloc>
 800701e:	4604      	mov	r4, r0
 8007020:	b930      	cbnz	r0, 8007030 <__d2b+0x24>
 8007022:	4602      	mov	r2, r0
 8007024:	4b23      	ldr	r3, [pc, #140]	@ (80070b4 <__d2b+0xa8>)
 8007026:	4824      	ldr	r0, [pc, #144]	@ (80070b8 <__d2b+0xac>)
 8007028:	f240 310f 	movw	r1, #783	@ 0x30f
 800702c:	f000 fa74 	bl	8007518 <__assert_func>
 8007030:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007034:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007038:	b10d      	cbz	r5, 800703e <__d2b+0x32>
 800703a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	f1b8 0300 	subs.w	r3, r8, #0
 8007044:	d023      	beq.n	800708e <__d2b+0x82>
 8007046:	4668      	mov	r0, sp
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	f7ff fd7c 	bl	8006b46 <__lo0bits>
 800704e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007052:	b1d0      	cbz	r0, 800708a <__d2b+0x7e>
 8007054:	f1c0 0320 	rsb	r3, r0, #32
 8007058:	fa02 f303 	lsl.w	r3, r2, r3
 800705c:	430b      	orrs	r3, r1
 800705e:	40c2      	lsrs	r2, r0
 8007060:	6163      	str	r3, [r4, #20]
 8007062:	9201      	str	r2, [sp, #4]
 8007064:	9b01      	ldr	r3, [sp, #4]
 8007066:	61a3      	str	r3, [r4, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	bf0c      	ite	eq
 800706c:	2201      	moveq	r2, #1
 800706e:	2202      	movne	r2, #2
 8007070:	6122      	str	r2, [r4, #16]
 8007072:	b1a5      	cbz	r5, 800709e <__d2b+0x92>
 8007074:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007078:	4405      	add	r5, r0
 800707a:	603d      	str	r5, [r7, #0]
 800707c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007080:	6030      	str	r0, [r6, #0]
 8007082:	4620      	mov	r0, r4
 8007084:	b003      	add	sp, #12
 8007086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800708a:	6161      	str	r1, [r4, #20]
 800708c:	e7ea      	b.n	8007064 <__d2b+0x58>
 800708e:	a801      	add	r0, sp, #4
 8007090:	f7ff fd59 	bl	8006b46 <__lo0bits>
 8007094:	9b01      	ldr	r3, [sp, #4]
 8007096:	6163      	str	r3, [r4, #20]
 8007098:	3020      	adds	r0, #32
 800709a:	2201      	movs	r2, #1
 800709c:	e7e8      	b.n	8007070 <__d2b+0x64>
 800709e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80070a6:	6038      	str	r0, [r7, #0]
 80070a8:	6918      	ldr	r0, [r3, #16]
 80070aa:	f7ff fd2d 	bl	8006b08 <__hi0bits>
 80070ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070b2:	e7e5      	b.n	8007080 <__d2b+0x74>
 80070b4:	08007ccc 	.word	0x08007ccc
 80070b8:	08007cdd 	.word	0x08007cdd

080070bc <__ssputs_r>:
 80070bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c0:	688e      	ldr	r6, [r1, #8]
 80070c2:	461f      	mov	r7, r3
 80070c4:	42be      	cmp	r6, r7
 80070c6:	680b      	ldr	r3, [r1, #0]
 80070c8:	4682      	mov	sl, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	4690      	mov	r8, r2
 80070ce:	d82d      	bhi.n	800712c <__ssputs_r+0x70>
 80070d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80070d8:	d026      	beq.n	8007128 <__ssputs_r+0x6c>
 80070da:	6965      	ldr	r5, [r4, #20]
 80070dc:	6909      	ldr	r1, [r1, #16]
 80070de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070e2:	eba3 0901 	sub.w	r9, r3, r1
 80070e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070ea:	1c7b      	adds	r3, r7, #1
 80070ec:	444b      	add	r3, r9
 80070ee:	106d      	asrs	r5, r5, #1
 80070f0:	429d      	cmp	r5, r3
 80070f2:	bf38      	it	cc
 80070f4:	461d      	movcc	r5, r3
 80070f6:	0553      	lsls	r3, r2, #21
 80070f8:	d527      	bpl.n	800714a <__ssputs_r+0x8e>
 80070fa:	4629      	mov	r1, r5
 80070fc:	f7ff fbd0 	bl	80068a0 <_malloc_r>
 8007100:	4606      	mov	r6, r0
 8007102:	b360      	cbz	r0, 800715e <__ssputs_r+0xa2>
 8007104:	6921      	ldr	r1, [r4, #16]
 8007106:	464a      	mov	r2, r9
 8007108:	f7fe fcf9 	bl	8005afe <memcpy>
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007116:	81a3      	strh	r3, [r4, #12]
 8007118:	6126      	str	r6, [r4, #16]
 800711a:	6165      	str	r5, [r4, #20]
 800711c:	444e      	add	r6, r9
 800711e:	eba5 0509 	sub.w	r5, r5, r9
 8007122:	6026      	str	r6, [r4, #0]
 8007124:	60a5      	str	r5, [r4, #8]
 8007126:	463e      	mov	r6, r7
 8007128:	42be      	cmp	r6, r7
 800712a:	d900      	bls.n	800712e <__ssputs_r+0x72>
 800712c:	463e      	mov	r6, r7
 800712e:	6820      	ldr	r0, [r4, #0]
 8007130:	4632      	mov	r2, r6
 8007132:	4641      	mov	r1, r8
 8007134:	f000 f9c6 	bl	80074c4 <memmove>
 8007138:	68a3      	ldr	r3, [r4, #8]
 800713a:	1b9b      	subs	r3, r3, r6
 800713c:	60a3      	str	r3, [r4, #8]
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	4433      	add	r3, r6
 8007142:	6023      	str	r3, [r4, #0]
 8007144:	2000      	movs	r0, #0
 8007146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800714a:	462a      	mov	r2, r5
 800714c:	f000 fa28 	bl	80075a0 <_realloc_r>
 8007150:	4606      	mov	r6, r0
 8007152:	2800      	cmp	r0, #0
 8007154:	d1e0      	bne.n	8007118 <__ssputs_r+0x5c>
 8007156:	6921      	ldr	r1, [r4, #16]
 8007158:	4650      	mov	r0, sl
 800715a:	f7ff fb2d 	bl	80067b8 <_free_r>
 800715e:	230c      	movs	r3, #12
 8007160:	f8ca 3000 	str.w	r3, [sl]
 8007164:	89a3      	ldrh	r3, [r4, #12]
 8007166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800716a:	81a3      	strh	r3, [r4, #12]
 800716c:	f04f 30ff 	mov.w	r0, #4294967295
 8007170:	e7e9      	b.n	8007146 <__ssputs_r+0x8a>
	...

08007174 <_svfiprintf_r>:
 8007174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007178:	4698      	mov	r8, r3
 800717a:	898b      	ldrh	r3, [r1, #12]
 800717c:	061b      	lsls	r3, r3, #24
 800717e:	b09d      	sub	sp, #116	@ 0x74
 8007180:	4607      	mov	r7, r0
 8007182:	460d      	mov	r5, r1
 8007184:	4614      	mov	r4, r2
 8007186:	d510      	bpl.n	80071aa <_svfiprintf_r+0x36>
 8007188:	690b      	ldr	r3, [r1, #16]
 800718a:	b973      	cbnz	r3, 80071aa <_svfiprintf_r+0x36>
 800718c:	2140      	movs	r1, #64	@ 0x40
 800718e:	f7ff fb87 	bl	80068a0 <_malloc_r>
 8007192:	6028      	str	r0, [r5, #0]
 8007194:	6128      	str	r0, [r5, #16]
 8007196:	b930      	cbnz	r0, 80071a6 <_svfiprintf_r+0x32>
 8007198:	230c      	movs	r3, #12
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	f04f 30ff 	mov.w	r0, #4294967295
 80071a0:	b01d      	add	sp, #116	@ 0x74
 80071a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a6:	2340      	movs	r3, #64	@ 0x40
 80071a8:	616b      	str	r3, [r5, #20]
 80071aa:	2300      	movs	r3, #0
 80071ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80071ae:	2320      	movs	r3, #32
 80071b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80071b8:	2330      	movs	r3, #48	@ 0x30
 80071ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007358 <_svfiprintf_r+0x1e4>
 80071be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071c2:	f04f 0901 	mov.w	r9, #1
 80071c6:	4623      	mov	r3, r4
 80071c8:	469a      	mov	sl, r3
 80071ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071ce:	b10a      	cbz	r2, 80071d4 <_svfiprintf_r+0x60>
 80071d0:	2a25      	cmp	r2, #37	@ 0x25
 80071d2:	d1f9      	bne.n	80071c8 <_svfiprintf_r+0x54>
 80071d4:	ebba 0b04 	subs.w	fp, sl, r4
 80071d8:	d00b      	beq.n	80071f2 <_svfiprintf_r+0x7e>
 80071da:	465b      	mov	r3, fp
 80071dc:	4622      	mov	r2, r4
 80071de:	4629      	mov	r1, r5
 80071e0:	4638      	mov	r0, r7
 80071e2:	f7ff ff6b 	bl	80070bc <__ssputs_r>
 80071e6:	3001      	adds	r0, #1
 80071e8:	f000 80a7 	beq.w	800733a <_svfiprintf_r+0x1c6>
 80071ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071ee:	445a      	add	r2, fp
 80071f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80071f2:	f89a 3000 	ldrb.w	r3, [sl]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 809f 	beq.w	800733a <_svfiprintf_r+0x1c6>
 80071fc:	2300      	movs	r3, #0
 80071fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007206:	f10a 0a01 	add.w	sl, sl, #1
 800720a:	9304      	str	r3, [sp, #16]
 800720c:	9307      	str	r3, [sp, #28]
 800720e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007212:	931a      	str	r3, [sp, #104]	@ 0x68
 8007214:	4654      	mov	r4, sl
 8007216:	2205      	movs	r2, #5
 8007218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800721c:	484e      	ldr	r0, [pc, #312]	@ (8007358 <_svfiprintf_r+0x1e4>)
 800721e:	f7f8 ffd7 	bl	80001d0 <memchr>
 8007222:	9a04      	ldr	r2, [sp, #16]
 8007224:	b9d8      	cbnz	r0, 800725e <_svfiprintf_r+0xea>
 8007226:	06d0      	lsls	r0, r2, #27
 8007228:	bf44      	itt	mi
 800722a:	2320      	movmi	r3, #32
 800722c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007230:	0711      	lsls	r1, r2, #28
 8007232:	bf44      	itt	mi
 8007234:	232b      	movmi	r3, #43	@ 0x2b
 8007236:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800723a:	f89a 3000 	ldrb.w	r3, [sl]
 800723e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007240:	d015      	beq.n	800726e <_svfiprintf_r+0xfa>
 8007242:	9a07      	ldr	r2, [sp, #28]
 8007244:	4654      	mov	r4, sl
 8007246:	2000      	movs	r0, #0
 8007248:	f04f 0c0a 	mov.w	ip, #10
 800724c:	4621      	mov	r1, r4
 800724e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007252:	3b30      	subs	r3, #48	@ 0x30
 8007254:	2b09      	cmp	r3, #9
 8007256:	d94b      	bls.n	80072f0 <_svfiprintf_r+0x17c>
 8007258:	b1b0      	cbz	r0, 8007288 <_svfiprintf_r+0x114>
 800725a:	9207      	str	r2, [sp, #28]
 800725c:	e014      	b.n	8007288 <_svfiprintf_r+0x114>
 800725e:	eba0 0308 	sub.w	r3, r0, r8
 8007262:	fa09 f303 	lsl.w	r3, r9, r3
 8007266:	4313      	orrs	r3, r2
 8007268:	9304      	str	r3, [sp, #16]
 800726a:	46a2      	mov	sl, r4
 800726c:	e7d2      	b.n	8007214 <_svfiprintf_r+0xa0>
 800726e:	9b03      	ldr	r3, [sp, #12]
 8007270:	1d19      	adds	r1, r3, #4
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	9103      	str	r1, [sp, #12]
 8007276:	2b00      	cmp	r3, #0
 8007278:	bfbb      	ittet	lt
 800727a:	425b      	neglt	r3, r3
 800727c:	f042 0202 	orrlt.w	r2, r2, #2
 8007280:	9307      	strge	r3, [sp, #28]
 8007282:	9307      	strlt	r3, [sp, #28]
 8007284:	bfb8      	it	lt
 8007286:	9204      	strlt	r2, [sp, #16]
 8007288:	7823      	ldrb	r3, [r4, #0]
 800728a:	2b2e      	cmp	r3, #46	@ 0x2e
 800728c:	d10a      	bne.n	80072a4 <_svfiprintf_r+0x130>
 800728e:	7863      	ldrb	r3, [r4, #1]
 8007290:	2b2a      	cmp	r3, #42	@ 0x2a
 8007292:	d132      	bne.n	80072fa <_svfiprintf_r+0x186>
 8007294:	9b03      	ldr	r3, [sp, #12]
 8007296:	1d1a      	adds	r2, r3, #4
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	9203      	str	r2, [sp, #12]
 800729c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072a0:	3402      	adds	r4, #2
 80072a2:	9305      	str	r3, [sp, #20]
 80072a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007368 <_svfiprintf_r+0x1f4>
 80072a8:	7821      	ldrb	r1, [r4, #0]
 80072aa:	2203      	movs	r2, #3
 80072ac:	4650      	mov	r0, sl
 80072ae:	f7f8 ff8f 	bl	80001d0 <memchr>
 80072b2:	b138      	cbz	r0, 80072c4 <_svfiprintf_r+0x150>
 80072b4:	9b04      	ldr	r3, [sp, #16]
 80072b6:	eba0 000a 	sub.w	r0, r0, sl
 80072ba:	2240      	movs	r2, #64	@ 0x40
 80072bc:	4082      	lsls	r2, r0
 80072be:	4313      	orrs	r3, r2
 80072c0:	3401      	adds	r4, #1
 80072c2:	9304      	str	r3, [sp, #16]
 80072c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c8:	4824      	ldr	r0, [pc, #144]	@ (800735c <_svfiprintf_r+0x1e8>)
 80072ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072ce:	2206      	movs	r2, #6
 80072d0:	f7f8 ff7e 	bl	80001d0 <memchr>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d036      	beq.n	8007346 <_svfiprintf_r+0x1d2>
 80072d8:	4b21      	ldr	r3, [pc, #132]	@ (8007360 <_svfiprintf_r+0x1ec>)
 80072da:	bb1b      	cbnz	r3, 8007324 <_svfiprintf_r+0x1b0>
 80072dc:	9b03      	ldr	r3, [sp, #12]
 80072de:	3307      	adds	r3, #7
 80072e0:	f023 0307 	bic.w	r3, r3, #7
 80072e4:	3308      	adds	r3, #8
 80072e6:	9303      	str	r3, [sp, #12]
 80072e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ea:	4433      	add	r3, r6
 80072ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80072ee:	e76a      	b.n	80071c6 <_svfiprintf_r+0x52>
 80072f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80072f4:	460c      	mov	r4, r1
 80072f6:	2001      	movs	r0, #1
 80072f8:	e7a8      	b.n	800724c <_svfiprintf_r+0xd8>
 80072fa:	2300      	movs	r3, #0
 80072fc:	3401      	adds	r4, #1
 80072fe:	9305      	str	r3, [sp, #20]
 8007300:	4619      	mov	r1, r3
 8007302:	f04f 0c0a 	mov.w	ip, #10
 8007306:	4620      	mov	r0, r4
 8007308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800730c:	3a30      	subs	r2, #48	@ 0x30
 800730e:	2a09      	cmp	r2, #9
 8007310:	d903      	bls.n	800731a <_svfiprintf_r+0x1a6>
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0c6      	beq.n	80072a4 <_svfiprintf_r+0x130>
 8007316:	9105      	str	r1, [sp, #20]
 8007318:	e7c4      	b.n	80072a4 <_svfiprintf_r+0x130>
 800731a:	fb0c 2101 	mla	r1, ip, r1, r2
 800731e:	4604      	mov	r4, r0
 8007320:	2301      	movs	r3, #1
 8007322:	e7f0      	b.n	8007306 <_svfiprintf_r+0x192>
 8007324:	ab03      	add	r3, sp, #12
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	462a      	mov	r2, r5
 800732a:	4b0e      	ldr	r3, [pc, #56]	@ (8007364 <_svfiprintf_r+0x1f0>)
 800732c:	a904      	add	r1, sp, #16
 800732e:	4638      	mov	r0, r7
 8007330:	f7fd fe88 	bl	8005044 <_printf_float>
 8007334:	1c42      	adds	r2, r0, #1
 8007336:	4606      	mov	r6, r0
 8007338:	d1d6      	bne.n	80072e8 <_svfiprintf_r+0x174>
 800733a:	89ab      	ldrh	r3, [r5, #12]
 800733c:	065b      	lsls	r3, r3, #25
 800733e:	f53f af2d 	bmi.w	800719c <_svfiprintf_r+0x28>
 8007342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007344:	e72c      	b.n	80071a0 <_svfiprintf_r+0x2c>
 8007346:	ab03      	add	r3, sp, #12
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	462a      	mov	r2, r5
 800734c:	4b05      	ldr	r3, [pc, #20]	@ (8007364 <_svfiprintf_r+0x1f0>)
 800734e:	a904      	add	r1, sp, #16
 8007350:	4638      	mov	r0, r7
 8007352:	f7fe f90f 	bl	8005574 <_printf_i>
 8007356:	e7ed      	b.n	8007334 <_svfiprintf_r+0x1c0>
 8007358:	08007e38 	.word	0x08007e38
 800735c:	08007e42 	.word	0x08007e42
 8007360:	08005045 	.word	0x08005045
 8007364:	080070bd 	.word	0x080070bd
 8007368:	08007e3e 	.word	0x08007e3e

0800736c <__sflush_r>:
 800736c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007374:	0716      	lsls	r6, r2, #28
 8007376:	4605      	mov	r5, r0
 8007378:	460c      	mov	r4, r1
 800737a:	d454      	bmi.n	8007426 <__sflush_r+0xba>
 800737c:	684b      	ldr	r3, [r1, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	dc02      	bgt.n	8007388 <__sflush_r+0x1c>
 8007382:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	dd48      	ble.n	800741a <__sflush_r+0xae>
 8007388:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800738a:	2e00      	cmp	r6, #0
 800738c:	d045      	beq.n	800741a <__sflush_r+0xae>
 800738e:	2300      	movs	r3, #0
 8007390:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007394:	682f      	ldr	r7, [r5, #0]
 8007396:	6a21      	ldr	r1, [r4, #32]
 8007398:	602b      	str	r3, [r5, #0]
 800739a:	d030      	beq.n	80073fe <__sflush_r+0x92>
 800739c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	0759      	lsls	r1, r3, #29
 80073a2:	d505      	bpl.n	80073b0 <__sflush_r+0x44>
 80073a4:	6863      	ldr	r3, [r4, #4]
 80073a6:	1ad2      	subs	r2, r2, r3
 80073a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073aa:	b10b      	cbz	r3, 80073b0 <__sflush_r+0x44>
 80073ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80073ae:	1ad2      	subs	r2, r2, r3
 80073b0:	2300      	movs	r3, #0
 80073b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073b4:	6a21      	ldr	r1, [r4, #32]
 80073b6:	4628      	mov	r0, r5
 80073b8:	47b0      	blx	r6
 80073ba:	1c43      	adds	r3, r0, #1
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	d106      	bne.n	80073ce <__sflush_r+0x62>
 80073c0:	6829      	ldr	r1, [r5, #0]
 80073c2:	291d      	cmp	r1, #29
 80073c4:	d82b      	bhi.n	800741e <__sflush_r+0xb2>
 80073c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007470 <__sflush_r+0x104>)
 80073c8:	410a      	asrs	r2, r1
 80073ca:	07d6      	lsls	r6, r2, #31
 80073cc:	d427      	bmi.n	800741e <__sflush_r+0xb2>
 80073ce:	2200      	movs	r2, #0
 80073d0:	6062      	str	r2, [r4, #4]
 80073d2:	04d9      	lsls	r1, r3, #19
 80073d4:	6922      	ldr	r2, [r4, #16]
 80073d6:	6022      	str	r2, [r4, #0]
 80073d8:	d504      	bpl.n	80073e4 <__sflush_r+0x78>
 80073da:	1c42      	adds	r2, r0, #1
 80073dc:	d101      	bne.n	80073e2 <__sflush_r+0x76>
 80073de:	682b      	ldr	r3, [r5, #0]
 80073e0:	b903      	cbnz	r3, 80073e4 <__sflush_r+0x78>
 80073e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80073e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073e6:	602f      	str	r7, [r5, #0]
 80073e8:	b1b9      	cbz	r1, 800741a <__sflush_r+0xae>
 80073ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073ee:	4299      	cmp	r1, r3
 80073f0:	d002      	beq.n	80073f8 <__sflush_r+0x8c>
 80073f2:	4628      	mov	r0, r5
 80073f4:	f7ff f9e0 	bl	80067b8 <_free_r>
 80073f8:	2300      	movs	r3, #0
 80073fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80073fc:	e00d      	b.n	800741a <__sflush_r+0xae>
 80073fe:	2301      	movs	r3, #1
 8007400:	4628      	mov	r0, r5
 8007402:	47b0      	blx	r6
 8007404:	4602      	mov	r2, r0
 8007406:	1c50      	adds	r0, r2, #1
 8007408:	d1c9      	bne.n	800739e <__sflush_r+0x32>
 800740a:	682b      	ldr	r3, [r5, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0c6      	beq.n	800739e <__sflush_r+0x32>
 8007410:	2b1d      	cmp	r3, #29
 8007412:	d001      	beq.n	8007418 <__sflush_r+0xac>
 8007414:	2b16      	cmp	r3, #22
 8007416:	d11e      	bne.n	8007456 <__sflush_r+0xea>
 8007418:	602f      	str	r7, [r5, #0]
 800741a:	2000      	movs	r0, #0
 800741c:	e022      	b.n	8007464 <__sflush_r+0xf8>
 800741e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007422:	b21b      	sxth	r3, r3
 8007424:	e01b      	b.n	800745e <__sflush_r+0xf2>
 8007426:	690f      	ldr	r7, [r1, #16]
 8007428:	2f00      	cmp	r7, #0
 800742a:	d0f6      	beq.n	800741a <__sflush_r+0xae>
 800742c:	0793      	lsls	r3, r2, #30
 800742e:	680e      	ldr	r6, [r1, #0]
 8007430:	bf08      	it	eq
 8007432:	694b      	ldreq	r3, [r1, #20]
 8007434:	600f      	str	r7, [r1, #0]
 8007436:	bf18      	it	ne
 8007438:	2300      	movne	r3, #0
 800743a:	eba6 0807 	sub.w	r8, r6, r7
 800743e:	608b      	str	r3, [r1, #8]
 8007440:	f1b8 0f00 	cmp.w	r8, #0
 8007444:	dde9      	ble.n	800741a <__sflush_r+0xae>
 8007446:	6a21      	ldr	r1, [r4, #32]
 8007448:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800744a:	4643      	mov	r3, r8
 800744c:	463a      	mov	r2, r7
 800744e:	4628      	mov	r0, r5
 8007450:	47b0      	blx	r6
 8007452:	2800      	cmp	r0, #0
 8007454:	dc08      	bgt.n	8007468 <__sflush_r+0xfc>
 8007456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800745a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800745e:	81a3      	strh	r3, [r4, #12]
 8007460:	f04f 30ff 	mov.w	r0, #4294967295
 8007464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007468:	4407      	add	r7, r0
 800746a:	eba8 0800 	sub.w	r8, r8, r0
 800746e:	e7e7      	b.n	8007440 <__sflush_r+0xd4>
 8007470:	dfbffffe 	.word	0xdfbffffe

08007474 <_fflush_r>:
 8007474:	b538      	push	{r3, r4, r5, lr}
 8007476:	690b      	ldr	r3, [r1, #16]
 8007478:	4605      	mov	r5, r0
 800747a:	460c      	mov	r4, r1
 800747c:	b913      	cbnz	r3, 8007484 <_fflush_r+0x10>
 800747e:	2500      	movs	r5, #0
 8007480:	4628      	mov	r0, r5
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	b118      	cbz	r0, 800748e <_fflush_r+0x1a>
 8007486:	6a03      	ldr	r3, [r0, #32]
 8007488:	b90b      	cbnz	r3, 800748e <_fflush_r+0x1a>
 800748a:	f7fe fa1f 	bl	80058cc <__sinit>
 800748e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0f3      	beq.n	800747e <_fflush_r+0xa>
 8007496:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007498:	07d0      	lsls	r0, r2, #31
 800749a:	d404      	bmi.n	80074a6 <_fflush_r+0x32>
 800749c:	0599      	lsls	r1, r3, #22
 800749e:	d402      	bmi.n	80074a6 <_fflush_r+0x32>
 80074a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074a2:	f7fe fb2a 	bl	8005afa <__retarget_lock_acquire_recursive>
 80074a6:	4628      	mov	r0, r5
 80074a8:	4621      	mov	r1, r4
 80074aa:	f7ff ff5f 	bl	800736c <__sflush_r>
 80074ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074b0:	07da      	lsls	r2, r3, #31
 80074b2:	4605      	mov	r5, r0
 80074b4:	d4e4      	bmi.n	8007480 <_fflush_r+0xc>
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	059b      	lsls	r3, r3, #22
 80074ba:	d4e1      	bmi.n	8007480 <_fflush_r+0xc>
 80074bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074be:	f7fe fb1d 	bl	8005afc <__retarget_lock_release_recursive>
 80074c2:	e7dd      	b.n	8007480 <_fflush_r+0xc>

080074c4 <memmove>:
 80074c4:	4288      	cmp	r0, r1
 80074c6:	b510      	push	{r4, lr}
 80074c8:	eb01 0402 	add.w	r4, r1, r2
 80074cc:	d902      	bls.n	80074d4 <memmove+0x10>
 80074ce:	4284      	cmp	r4, r0
 80074d0:	4623      	mov	r3, r4
 80074d2:	d807      	bhi.n	80074e4 <memmove+0x20>
 80074d4:	1e43      	subs	r3, r0, #1
 80074d6:	42a1      	cmp	r1, r4
 80074d8:	d008      	beq.n	80074ec <memmove+0x28>
 80074da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074e2:	e7f8      	b.n	80074d6 <memmove+0x12>
 80074e4:	4402      	add	r2, r0
 80074e6:	4601      	mov	r1, r0
 80074e8:	428a      	cmp	r2, r1
 80074ea:	d100      	bne.n	80074ee <memmove+0x2a>
 80074ec:	bd10      	pop	{r4, pc}
 80074ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074f6:	e7f7      	b.n	80074e8 <memmove+0x24>

080074f8 <_sbrk_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4d06      	ldr	r5, [pc, #24]	@ (8007514 <_sbrk_r+0x1c>)
 80074fc:	2300      	movs	r3, #0
 80074fe:	4604      	mov	r4, r0
 8007500:	4608      	mov	r0, r1
 8007502:	602b      	str	r3, [r5, #0]
 8007504:	f7fa f810 	bl	8001528 <_sbrk>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	d102      	bne.n	8007512 <_sbrk_r+0x1a>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	b103      	cbz	r3, 8007512 <_sbrk_r+0x1a>
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	200007f8 	.word	0x200007f8

08007518 <__assert_func>:
 8007518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800751a:	4614      	mov	r4, r2
 800751c:	461a      	mov	r2, r3
 800751e:	4b09      	ldr	r3, [pc, #36]	@ (8007544 <__assert_func+0x2c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4605      	mov	r5, r0
 8007524:	68d8      	ldr	r0, [r3, #12]
 8007526:	b954      	cbnz	r4, 800753e <__assert_func+0x26>
 8007528:	4b07      	ldr	r3, [pc, #28]	@ (8007548 <__assert_func+0x30>)
 800752a:	461c      	mov	r4, r3
 800752c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007530:	9100      	str	r1, [sp, #0]
 8007532:	462b      	mov	r3, r5
 8007534:	4905      	ldr	r1, [pc, #20]	@ (800754c <__assert_func+0x34>)
 8007536:	f000 f86f 	bl	8007618 <fiprintf>
 800753a:	f000 f87f 	bl	800763c <abort>
 800753e:	4b04      	ldr	r3, [pc, #16]	@ (8007550 <__assert_func+0x38>)
 8007540:	e7f4      	b.n	800752c <__assert_func+0x14>
 8007542:	bf00      	nop
 8007544:	200000c4 	.word	0x200000c4
 8007548:	08007e8e 	.word	0x08007e8e
 800754c:	08007e60 	.word	0x08007e60
 8007550:	08007e53 	.word	0x08007e53

08007554 <_calloc_r>:
 8007554:	b570      	push	{r4, r5, r6, lr}
 8007556:	fba1 5402 	umull	r5, r4, r1, r2
 800755a:	b93c      	cbnz	r4, 800756c <_calloc_r+0x18>
 800755c:	4629      	mov	r1, r5
 800755e:	f7ff f99f 	bl	80068a0 <_malloc_r>
 8007562:	4606      	mov	r6, r0
 8007564:	b928      	cbnz	r0, 8007572 <_calloc_r+0x1e>
 8007566:	2600      	movs	r6, #0
 8007568:	4630      	mov	r0, r6
 800756a:	bd70      	pop	{r4, r5, r6, pc}
 800756c:	220c      	movs	r2, #12
 800756e:	6002      	str	r2, [r0, #0]
 8007570:	e7f9      	b.n	8007566 <_calloc_r+0x12>
 8007572:	462a      	mov	r2, r5
 8007574:	4621      	mov	r1, r4
 8007576:	f7fe fa42 	bl	80059fe <memset>
 800757a:	e7f5      	b.n	8007568 <_calloc_r+0x14>

0800757c <__ascii_mbtowc>:
 800757c:	b082      	sub	sp, #8
 800757e:	b901      	cbnz	r1, 8007582 <__ascii_mbtowc+0x6>
 8007580:	a901      	add	r1, sp, #4
 8007582:	b142      	cbz	r2, 8007596 <__ascii_mbtowc+0x1a>
 8007584:	b14b      	cbz	r3, 800759a <__ascii_mbtowc+0x1e>
 8007586:	7813      	ldrb	r3, [r2, #0]
 8007588:	600b      	str	r3, [r1, #0]
 800758a:	7812      	ldrb	r2, [r2, #0]
 800758c:	1e10      	subs	r0, r2, #0
 800758e:	bf18      	it	ne
 8007590:	2001      	movne	r0, #1
 8007592:	b002      	add	sp, #8
 8007594:	4770      	bx	lr
 8007596:	4610      	mov	r0, r2
 8007598:	e7fb      	b.n	8007592 <__ascii_mbtowc+0x16>
 800759a:	f06f 0001 	mvn.w	r0, #1
 800759e:	e7f8      	b.n	8007592 <__ascii_mbtowc+0x16>

080075a0 <_realloc_r>:
 80075a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a4:	4680      	mov	r8, r0
 80075a6:	4615      	mov	r5, r2
 80075a8:	460c      	mov	r4, r1
 80075aa:	b921      	cbnz	r1, 80075b6 <_realloc_r+0x16>
 80075ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075b0:	4611      	mov	r1, r2
 80075b2:	f7ff b975 	b.w	80068a0 <_malloc_r>
 80075b6:	b92a      	cbnz	r2, 80075c4 <_realloc_r+0x24>
 80075b8:	f7ff f8fe 	bl	80067b8 <_free_r>
 80075bc:	2400      	movs	r4, #0
 80075be:	4620      	mov	r0, r4
 80075c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c4:	f000 f841 	bl	800764a <_malloc_usable_size_r>
 80075c8:	4285      	cmp	r5, r0
 80075ca:	4606      	mov	r6, r0
 80075cc:	d802      	bhi.n	80075d4 <_realloc_r+0x34>
 80075ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80075d2:	d8f4      	bhi.n	80075be <_realloc_r+0x1e>
 80075d4:	4629      	mov	r1, r5
 80075d6:	4640      	mov	r0, r8
 80075d8:	f7ff f962 	bl	80068a0 <_malloc_r>
 80075dc:	4607      	mov	r7, r0
 80075de:	2800      	cmp	r0, #0
 80075e0:	d0ec      	beq.n	80075bc <_realloc_r+0x1c>
 80075e2:	42b5      	cmp	r5, r6
 80075e4:	462a      	mov	r2, r5
 80075e6:	4621      	mov	r1, r4
 80075e8:	bf28      	it	cs
 80075ea:	4632      	movcs	r2, r6
 80075ec:	f7fe fa87 	bl	8005afe <memcpy>
 80075f0:	4621      	mov	r1, r4
 80075f2:	4640      	mov	r0, r8
 80075f4:	f7ff f8e0 	bl	80067b8 <_free_r>
 80075f8:	463c      	mov	r4, r7
 80075fa:	e7e0      	b.n	80075be <_realloc_r+0x1e>

080075fc <__ascii_wctomb>:
 80075fc:	4603      	mov	r3, r0
 80075fe:	4608      	mov	r0, r1
 8007600:	b141      	cbz	r1, 8007614 <__ascii_wctomb+0x18>
 8007602:	2aff      	cmp	r2, #255	@ 0xff
 8007604:	d904      	bls.n	8007610 <__ascii_wctomb+0x14>
 8007606:	228a      	movs	r2, #138	@ 0x8a
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	f04f 30ff 	mov.w	r0, #4294967295
 800760e:	4770      	bx	lr
 8007610:	700a      	strb	r2, [r1, #0]
 8007612:	2001      	movs	r0, #1
 8007614:	4770      	bx	lr
	...

08007618 <fiprintf>:
 8007618:	b40e      	push	{r1, r2, r3}
 800761a:	b503      	push	{r0, r1, lr}
 800761c:	4601      	mov	r1, r0
 800761e:	ab03      	add	r3, sp, #12
 8007620:	4805      	ldr	r0, [pc, #20]	@ (8007638 <fiprintf+0x20>)
 8007622:	f853 2b04 	ldr.w	r2, [r3], #4
 8007626:	6800      	ldr	r0, [r0, #0]
 8007628:	9301      	str	r3, [sp, #4]
 800762a:	f000 f83f 	bl	80076ac <_vfiprintf_r>
 800762e:	b002      	add	sp, #8
 8007630:	f85d eb04 	ldr.w	lr, [sp], #4
 8007634:	b003      	add	sp, #12
 8007636:	4770      	bx	lr
 8007638:	200000c4 	.word	0x200000c4

0800763c <abort>:
 800763c:	b508      	push	{r3, lr}
 800763e:	2006      	movs	r0, #6
 8007640:	f000 fa08 	bl	8007a54 <raise>
 8007644:	2001      	movs	r0, #1
 8007646:	f7f9 fef6 	bl	8001436 <_exit>

0800764a <_malloc_usable_size_r>:
 800764a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800764e:	1f18      	subs	r0, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	bfbc      	itt	lt
 8007654:	580b      	ldrlt	r3, [r1, r0]
 8007656:	18c0      	addlt	r0, r0, r3
 8007658:	4770      	bx	lr

0800765a <__sfputc_r>:
 800765a:	6893      	ldr	r3, [r2, #8]
 800765c:	3b01      	subs	r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	b410      	push	{r4}
 8007662:	6093      	str	r3, [r2, #8]
 8007664:	da08      	bge.n	8007678 <__sfputc_r+0x1e>
 8007666:	6994      	ldr	r4, [r2, #24]
 8007668:	42a3      	cmp	r3, r4
 800766a:	db01      	blt.n	8007670 <__sfputc_r+0x16>
 800766c:	290a      	cmp	r1, #10
 800766e:	d103      	bne.n	8007678 <__sfputc_r+0x1e>
 8007670:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007674:	f000 b932 	b.w	80078dc <__swbuf_r>
 8007678:	6813      	ldr	r3, [r2, #0]
 800767a:	1c58      	adds	r0, r3, #1
 800767c:	6010      	str	r0, [r2, #0]
 800767e:	7019      	strb	r1, [r3, #0]
 8007680:	4608      	mov	r0, r1
 8007682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007686:	4770      	bx	lr

08007688 <__sfputs_r>:
 8007688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768a:	4606      	mov	r6, r0
 800768c:	460f      	mov	r7, r1
 800768e:	4614      	mov	r4, r2
 8007690:	18d5      	adds	r5, r2, r3
 8007692:	42ac      	cmp	r4, r5
 8007694:	d101      	bne.n	800769a <__sfputs_r+0x12>
 8007696:	2000      	movs	r0, #0
 8007698:	e007      	b.n	80076aa <__sfputs_r+0x22>
 800769a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800769e:	463a      	mov	r2, r7
 80076a0:	4630      	mov	r0, r6
 80076a2:	f7ff ffda 	bl	800765a <__sfputc_r>
 80076a6:	1c43      	adds	r3, r0, #1
 80076a8:	d1f3      	bne.n	8007692 <__sfputs_r+0xa>
 80076aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076ac <_vfiprintf_r>:
 80076ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b0:	460d      	mov	r5, r1
 80076b2:	b09d      	sub	sp, #116	@ 0x74
 80076b4:	4614      	mov	r4, r2
 80076b6:	4698      	mov	r8, r3
 80076b8:	4606      	mov	r6, r0
 80076ba:	b118      	cbz	r0, 80076c4 <_vfiprintf_r+0x18>
 80076bc:	6a03      	ldr	r3, [r0, #32]
 80076be:	b90b      	cbnz	r3, 80076c4 <_vfiprintf_r+0x18>
 80076c0:	f7fe f904 	bl	80058cc <__sinit>
 80076c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076c6:	07d9      	lsls	r1, r3, #31
 80076c8:	d405      	bmi.n	80076d6 <_vfiprintf_r+0x2a>
 80076ca:	89ab      	ldrh	r3, [r5, #12]
 80076cc:	059a      	lsls	r2, r3, #22
 80076ce:	d402      	bmi.n	80076d6 <_vfiprintf_r+0x2a>
 80076d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076d2:	f7fe fa12 	bl	8005afa <__retarget_lock_acquire_recursive>
 80076d6:	89ab      	ldrh	r3, [r5, #12]
 80076d8:	071b      	lsls	r3, r3, #28
 80076da:	d501      	bpl.n	80076e0 <_vfiprintf_r+0x34>
 80076dc:	692b      	ldr	r3, [r5, #16]
 80076de:	b99b      	cbnz	r3, 8007708 <_vfiprintf_r+0x5c>
 80076e0:	4629      	mov	r1, r5
 80076e2:	4630      	mov	r0, r6
 80076e4:	f000 f938 	bl	8007958 <__swsetup_r>
 80076e8:	b170      	cbz	r0, 8007708 <_vfiprintf_r+0x5c>
 80076ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076ec:	07dc      	lsls	r4, r3, #31
 80076ee:	d504      	bpl.n	80076fa <_vfiprintf_r+0x4e>
 80076f0:	f04f 30ff 	mov.w	r0, #4294967295
 80076f4:	b01d      	add	sp, #116	@ 0x74
 80076f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fa:	89ab      	ldrh	r3, [r5, #12]
 80076fc:	0598      	lsls	r0, r3, #22
 80076fe:	d4f7      	bmi.n	80076f0 <_vfiprintf_r+0x44>
 8007700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007702:	f7fe f9fb 	bl	8005afc <__retarget_lock_release_recursive>
 8007706:	e7f3      	b.n	80076f0 <_vfiprintf_r+0x44>
 8007708:	2300      	movs	r3, #0
 800770a:	9309      	str	r3, [sp, #36]	@ 0x24
 800770c:	2320      	movs	r3, #32
 800770e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007712:	f8cd 800c 	str.w	r8, [sp, #12]
 8007716:	2330      	movs	r3, #48	@ 0x30
 8007718:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80078c8 <_vfiprintf_r+0x21c>
 800771c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007720:	f04f 0901 	mov.w	r9, #1
 8007724:	4623      	mov	r3, r4
 8007726:	469a      	mov	sl, r3
 8007728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800772c:	b10a      	cbz	r2, 8007732 <_vfiprintf_r+0x86>
 800772e:	2a25      	cmp	r2, #37	@ 0x25
 8007730:	d1f9      	bne.n	8007726 <_vfiprintf_r+0x7a>
 8007732:	ebba 0b04 	subs.w	fp, sl, r4
 8007736:	d00b      	beq.n	8007750 <_vfiprintf_r+0xa4>
 8007738:	465b      	mov	r3, fp
 800773a:	4622      	mov	r2, r4
 800773c:	4629      	mov	r1, r5
 800773e:	4630      	mov	r0, r6
 8007740:	f7ff ffa2 	bl	8007688 <__sfputs_r>
 8007744:	3001      	adds	r0, #1
 8007746:	f000 80a7 	beq.w	8007898 <_vfiprintf_r+0x1ec>
 800774a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800774c:	445a      	add	r2, fp
 800774e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007750:	f89a 3000 	ldrb.w	r3, [sl]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 809f 	beq.w	8007898 <_vfiprintf_r+0x1ec>
 800775a:	2300      	movs	r3, #0
 800775c:	f04f 32ff 	mov.w	r2, #4294967295
 8007760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007764:	f10a 0a01 	add.w	sl, sl, #1
 8007768:	9304      	str	r3, [sp, #16]
 800776a:	9307      	str	r3, [sp, #28]
 800776c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007770:	931a      	str	r3, [sp, #104]	@ 0x68
 8007772:	4654      	mov	r4, sl
 8007774:	2205      	movs	r2, #5
 8007776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800777a:	4853      	ldr	r0, [pc, #332]	@ (80078c8 <_vfiprintf_r+0x21c>)
 800777c:	f7f8 fd28 	bl	80001d0 <memchr>
 8007780:	9a04      	ldr	r2, [sp, #16]
 8007782:	b9d8      	cbnz	r0, 80077bc <_vfiprintf_r+0x110>
 8007784:	06d1      	lsls	r1, r2, #27
 8007786:	bf44      	itt	mi
 8007788:	2320      	movmi	r3, #32
 800778a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800778e:	0713      	lsls	r3, r2, #28
 8007790:	bf44      	itt	mi
 8007792:	232b      	movmi	r3, #43	@ 0x2b
 8007794:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007798:	f89a 3000 	ldrb.w	r3, [sl]
 800779c:	2b2a      	cmp	r3, #42	@ 0x2a
 800779e:	d015      	beq.n	80077cc <_vfiprintf_r+0x120>
 80077a0:	9a07      	ldr	r2, [sp, #28]
 80077a2:	4654      	mov	r4, sl
 80077a4:	2000      	movs	r0, #0
 80077a6:	f04f 0c0a 	mov.w	ip, #10
 80077aa:	4621      	mov	r1, r4
 80077ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077b0:	3b30      	subs	r3, #48	@ 0x30
 80077b2:	2b09      	cmp	r3, #9
 80077b4:	d94b      	bls.n	800784e <_vfiprintf_r+0x1a2>
 80077b6:	b1b0      	cbz	r0, 80077e6 <_vfiprintf_r+0x13a>
 80077b8:	9207      	str	r2, [sp, #28]
 80077ba:	e014      	b.n	80077e6 <_vfiprintf_r+0x13a>
 80077bc:	eba0 0308 	sub.w	r3, r0, r8
 80077c0:	fa09 f303 	lsl.w	r3, r9, r3
 80077c4:	4313      	orrs	r3, r2
 80077c6:	9304      	str	r3, [sp, #16]
 80077c8:	46a2      	mov	sl, r4
 80077ca:	e7d2      	b.n	8007772 <_vfiprintf_r+0xc6>
 80077cc:	9b03      	ldr	r3, [sp, #12]
 80077ce:	1d19      	adds	r1, r3, #4
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	9103      	str	r1, [sp, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	bfbb      	ittet	lt
 80077d8:	425b      	neglt	r3, r3
 80077da:	f042 0202 	orrlt.w	r2, r2, #2
 80077de:	9307      	strge	r3, [sp, #28]
 80077e0:	9307      	strlt	r3, [sp, #28]
 80077e2:	bfb8      	it	lt
 80077e4:	9204      	strlt	r2, [sp, #16]
 80077e6:	7823      	ldrb	r3, [r4, #0]
 80077e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80077ea:	d10a      	bne.n	8007802 <_vfiprintf_r+0x156>
 80077ec:	7863      	ldrb	r3, [r4, #1]
 80077ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80077f0:	d132      	bne.n	8007858 <_vfiprintf_r+0x1ac>
 80077f2:	9b03      	ldr	r3, [sp, #12]
 80077f4:	1d1a      	adds	r2, r3, #4
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	9203      	str	r2, [sp, #12]
 80077fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077fe:	3402      	adds	r4, #2
 8007800:	9305      	str	r3, [sp, #20]
 8007802:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80078d8 <_vfiprintf_r+0x22c>
 8007806:	7821      	ldrb	r1, [r4, #0]
 8007808:	2203      	movs	r2, #3
 800780a:	4650      	mov	r0, sl
 800780c:	f7f8 fce0 	bl	80001d0 <memchr>
 8007810:	b138      	cbz	r0, 8007822 <_vfiprintf_r+0x176>
 8007812:	9b04      	ldr	r3, [sp, #16]
 8007814:	eba0 000a 	sub.w	r0, r0, sl
 8007818:	2240      	movs	r2, #64	@ 0x40
 800781a:	4082      	lsls	r2, r0
 800781c:	4313      	orrs	r3, r2
 800781e:	3401      	adds	r4, #1
 8007820:	9304      	str	r3, [sp, #16]
 8007822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007826:	4829      	ldr	r0, [pc, #164]	@ (80078cc <_vfiprintf_r+0x220>)
 8007828:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800782c:	2206      	movs	r2, #6
 800782e:	f7f8 fccf 	bl	80001d0 <memchr>
 8007832:	2800      	cmp	r0, #0
 8007834:	d03f      	beq.n	80078b6 <_vfiprintf_r+0x20a>
 8007836:	4b26      	ldr	r3, [pc, #152]	@ (80078d0 <_vfiprintf_r+0x224>)
 8007838:	bb1b      	cbnz	r3, 8007882 <_vfiprintf_r+0x1d6>
 800783a:	9b03      	ldr	r3, [sp, #12]
 800783c:	3307      	adds	r3, #7
 800783e:	f023 0307 	bic.w	r3, r3, #7
 8007842:	3308      	adds	r3, #8
 8007844:	9303      	str	r3, [sp, #12]
 8007846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007848:	443b      	add	r3, r7
 800784a:	9309      	str	r3, [sp, #36]	@ 0x24
 800784c:	e76a      	b.n	8007724 <_vfiprintf_r+0x78>
 800784e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007852:	460c      	mov	r4, r1
 8007854:	2001      	movs	r0, #1
 8007856:	e7a8      	b.n	80077aa <_vfiprintf_r+0xfe>
 8007858:	2300      	movs	r3, #0
 800785a:	3401      	adds	r4, #1
 800785c:	9305      	str	r3, [sp, #20]
 800785e:	4619      	mov	r1, r3
 8007860:	f04f 0c0a 	mov.w	ip, #10
 8007864:	4620      	mov	r0, r4
 8007866:	f810 2b01 	ldrb.w	r2, [r0], #1
 800786a:	3a30      	subs	r2, #48	@ 0x30
 800786c:	2a09      	cmp	r2, #9
 800786e:	d903      	bls.n	8007878 <_vfiprintf_r+0x1cc>
 8007870:	2b00      	cmp	r3, #0
 8007872:	d0c6      	beq.n	8007802 <_vfiprintf_r+0x156>
 8007874:	9105      	str	r1, [sp, #20]
 8007876:	e7c4      	b.n	8007802 <_vfiprintf_r+0x156>
 8007878:	fb0c 2101 	mla	r1, ip, r1, r2
 800787c:	4604      	mov	r4, r0
 800787e:	2301      	movs	r3, #1
 8007880:	e7f0      	b.n	8007864 <_vfiprintf_r+0x1b8>
 8007882:	ab03      	add	r3, sp, #12
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	462a      	mov	r2, r5
 8007888:	4b12      	ldr	r3, [pc, #72]	@ (80078d4 <_vfiprintf_r+0x228>)
 800788a:	a904      	add	r1, sp, #16
 800788c:	4630      	mov	r0, r6
 800788e:	f7fd fbd9 	bl	8005044 <_printf_float>
 8007892:	4607      	mov	r7, r0
 8007894:	1c78      	adds	r0, r7, #1
 8007896:	d1d6      	bne.n	8007846 <_vfiprintf_r+0x19a>
 8007898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800789a:	07d9      	lsls	r1, r3, #31
 800789c:	d405      	bmi.n	80078aa <_vfiprintf_r+0x1fe>
 800789e:	89ab      	ldrh	r3, [r5, #12]
 80078a0:	059a      	lsls	r2, r3, #22
 80078a2:	d402      	bmi.n	80078aa <_vfiprintf_r+0x1fe>
 80078a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078a6:	f7fe f929 	bl	8005afc <__retarget_lock_release_recursive>
 80078aa:	89ab      	ldrh	r3, [r5, #12]
 80078ac:	065b      	lsls	r3, r3, #25
 80078ae:	f53f af1f 	bmi.w	80076f0 <_vfiprintf_r+0x44>
 80078b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078b4:	e71e      	b.n	80076f4 <_vfiprintf_r+0x48>
 80078b6:	ab03      	add	r3, sp, #12
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	462a      	mov	r2, r5
 80078bc:	4b05      	ldr	r3, [pc, #20]	@ (80078d4 <_vfiprintf_r+0x228>)
 80078be:	a904      	add	r1, sp, #16
 80078c0:	4630      	mov	r0, r6
 80078c2:	f7fd fe57 	bl	8005574 <_printf_i>
 80078c6:	e7e4      	b.n	8007892 <_vfiprintf_r+0x1e6>
 80078c8:	08007e38 	.word	0x08007e38
 80078cc:	08007e42 	.word	0x08007e42
 80078d0:	08005045 	.word	0x08005045
 80078d4:	08007689 	.word	0x08007689
 80078d8:	08007e3e 	.word	0x08007e3e

080078dc <__swbuf_r>:
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078de:	460e      	mov	r6, r1
 80078e0:	4614      	mov	r4, r2
 80078e2:	4605      	mov	r5, r0
 80078e4:	b118      	cbz	r0, 80078ee <__swbuf_r+0x12>
 80078e6:	6a03      	ldr	r3, [r0, #32]
 80078e8:	b90b      	cbnz	r3, 80078ee <__swbuf_r+0x12>
 80078ea:	f7fd ffef 	bl	80058cc <__sinit>
 80078ee:	69a3      	ldr	r3, [r4, #24]
 80078f0:	60a3      	str	r3, [r4, #8]
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	071a      	lsls	r2, r3, #28
 80078f6:	d501      	bpl.n	80078fc <__swbuf_r+0x20>
 80078f8:	6923      	ldr	r3, [r4, #16]
 80078fa:	b943      	cbnz	r3, 800790e <__swbuf_r+0x32>
 80078fc:	4621      	mov	r1, r4
 80078fe:	4628      	mov	r0, r5
 8007900:	f000 f82a 	bl	8007958 <__swsetup_r>
 8007904:	b118      	cbz	r0, 800790e <__swbuf_r+0x32>
 8007906:	f04f 37ff 	mov.w	r7, #4294967295
 800790a:	4638      	mov	r0, r7
 800790c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	6922      	ldr	r2, [r4, #16]
 8007912:	1a98      	subs	r0, r3, r2
 8007914:	6963      	ldr	r3, [r4, #20]
 8007916:	b2f6      	uxtb	r6, r6
 8007918:	4283      	cmp	r3, r0
 800791a:	4637      	mov	r7, r6
 800791c:	dc05      	bgt.n	800792a <__swbuf_r+0x4e>
 800791e:	4621      	mov	r1, r4
 8007920:	4628      	mov	r0, r5
 8007922:	f7ff fda7 	bl	8007474 <_fflush_r>
 8007926:	2800      	cmp	r0, #0
 8007928:	d1ed      	bne.n	8007906 <__swbuf_r+0x2a>
 800792a:	68a3      	ldr	r3, [r4, #8]
 800792c:	3b01      	subs	r3, #1
 800792e:	60a3      	str	r3, [r4, #8]
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	6022      	str	r2, [r4, #0]
 8007936:	701e      	strb	r6, [r3, #0]
 8007938:	6962      	ldr	r2, [r4, #20]
 800793a:	1c43      	adds	r3, r0, #1
 800793c:	429a      	cmp	r2, r3
 800793e:	d004      	beq.n	800794a <__swbuf_r+0x6e>
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	07db      	lsls	r3, r3, #31
 8007944:	d5e1      	bpl.n	800790a <__swbuf_r+0x2e>
 8007946:	2e0a      	cmp	r6, #10
 8007948:	d1df      	bne.n	800790a <__swbuf_r+0x2e>
 800794a:	4621      	mov	r1, r4
 800794c:	4628      	mov	r0, r5
 800794e:	f7ff fd91 	bl	8007474 <_fflush_r>
 8007952:	2800      	cmp	r0, #0
 8007954:	d0d9      	beq.n	800790a <__swbuf_r+0x2e>
 8007956:	e7d6      	b.n	8007906 <__swbuf_r+0x2a>

08007958 <__swsetup_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4b29      	ldr	r3, [pc, #164]	@ (8007a00 <__swsetup_r+0xa8>)
 800795c:	4605      	mov	r5, r0
 800795e:	6818      	ldr	r0, [r3, #0]
 8007960:	460c      	mov	r4, r1
 8007962:	b118      	cbz	r0, 800796c <__swsetup_r+0x14>
 8007964:	6a03      	ldr	r3, [r0, #32]
 8007966:	b90b      	cbnz	r3, 800796c <__swsetup_r+0x14>
 8007968:	f7fd ffb0 	bl	80058cc <__sinit>
 800796c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007970:	0719      	lsls	r1, r3, #28
 8007972:	d422      	bmi.n	80079ba <__swsetup_r+0x62>
 8007974:	06da      	lsls	r2, r3, #27
 8007976:	d407      	bmi.n	8007988 <__swsetup_r+0x30>
 8007978:	2209      	movs	r2, #9
 800797a:	602a      	str	r2, [r5, #0]
 800797c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007980:	81a3      	strh	r3, [r4, #12]
 8007982:	f04f 30ff 	mov.w	r0, #4294967295
 8007986:	e033      	b.n	80079f0 <__swsetup_r+0x98>
 8007988:	0758      	lsls	r0, r3, #29
 800798a:	d512      	bpl.n	80079b2 <__swsetup_r+0x5a>
 800798c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800798e:	b141      	cbz	r1, 80079a2 <__swsetup_r+0x4a>
 8007990:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007994:	4299      	cmp	r1, r3
 8007996:	d002      	beq.n	800799e <__swsetup_r+0x46>
 8007998:	4628      	mov	r0, r5
 800799a:	f7fe ff0d 	bl	80067b8 <_free_r>
 800799e:	2300      	movs	r3, #0
 80079a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80079a2:	89a3      	ldrh	r3, [r4, #12]
 80079a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80079a8:	81a3      	strh	r3, [r4, #12]
 80079aa:	2300      	movs	r3, #0
 80079ac:	6063      	str	r3, [r4, #4]
 80079ae:	6923      	ldr	r3, [r4, #16]
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	f043 0308 	orr.w	r3, r3, #8
 80079b8:	81a3      	strh	r3, [r4, #12]
 80079ba:	6923      	ldr	r3, [r4, #16]
 80079bc:	b94b      	cbnz	r3, 80079d2 <__swsetup_r+0x7a>
 80079be:	89a3      	ldrh	r3, [r4, #12]
 80079c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80079c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079c8:	d003      	beq.n	80079d2 <__swsetup_r+0x7a>
 80079ca:	4621      	mov	r1, r4
 80079cc:	4628      	mov	r0, r5
 80079ce:	f000 f883 	bl	8007ad8 <__smakebuf_r>
 80079d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079d6:	f013 0201 	ands.w	r2, r3, #1
 80079da:	d00a      	beq.n	80079f2 <__swsetup_r+0x9a>
 80079dc:	2200      	movs	r2, #0
 80079de:	60a2      	str	r2, [r4, #8]
 80079e0:	6962      	ldr	r2, [r4, #20]
 80079e2:	4252      	negs	r2, r2
 80079e4:	61a2      	str	r2, [r4, #24]
 80079e6:	6922      	ldr	r2, [r4, #16]
 80079e8:	b942      	cbnz	r2, 80079fc <__swsetup_r+0xa4>
 80079ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80079ee:	d1c5      	bne.n	800797c <__swsetup_r+0x24>
 80079f0:	bd38      	pop	{r3, r4, r5, pc}
 80079f2:	0799      	lsls	r1, r3, #30
 80079f4:	bf58      	it	pl
 80079f6:	6962      	ldrpl	r2, [r4, #20]
 80079f8:	60a2      	str	r2, [r4, #8]
 80079fa:	e7f4      	b.n	80079e6 <__swsetup_r+0x8e>
 80079fc:	2000      	movs	r0, #0
 80079fe:	e7f7      	b.n	80079f0 <__swsetup_r+0x98>
 8007a00:	200000c4 	.word	0x200000c4

08007a04 <_raise_r>:
 8007a04:	291f      	cmp	r1, #31
 8007a06:	b538      	push	{r3, r4, r5, lr}
 8007a08:	4605      	mov	r5, r0
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	d904      	bls.n	8007a18 <_raise_r+0x14>
 8007a0e:	2316      	movs	r3, #22
 8007a10:	6003      	str	r3, [r0, #0]
 8007a12:	f04f 30ff 	mov.w	r0, #4294967295
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
 8007a18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007a1a:	b112      	cbz	r2, 8007a22 <_raise_r+0x1e>
 8007a1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a20:	b94b      	cbnz	r3, 8007a36 <_raise_r+0x32>
 8007a22:	4628      	mov	r0, r5
 8007a24:	f000 f830 	bl	8007a88 <_getpid_r>
 8007a28:	4622      	mov	r2, r4
 8007a2a:	4601      	mov	r1, r0
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a32:	f000 b817 	b.w	8007a64 <_kill_r>
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d00a      	beq.n	8007a50 <_raise_r+0x4c>
 8007a3a:	1c59      	adds	r1, r3, #1
 8007a3c:	d103      	bne.n	8007a46 <_raise_r+0x42>
 8007a3e:	2316      	movs	r3, #22
 8007a40:	6003      	str	r3, [r0, #0]
 8007a42:	2001      	movs	r0, #1
 8007a44:	e7e7      	b.n	8007a16 <_raise_r+0x12>
 8007a46:	2100      	movs	r1, #0
 8007a48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	4798      	blx	r3
 8007a50:	2000      	movs	r0, #0
 8007a52:	e7e0      	b.n	8007a16 <_raise_r+0x12>

08007a54 <raise>:
 8007a54:	4b02      	ldr	r3, [pc, #8]	@ (8007a60 <raise+0xc>)
 8007a56:	4601      	mov	r1, r0
 8007a58:	6818      	ldr	r0, [r3, #0]
 8007a5a:	f7ff bfd3 	b.w	8007a04 <_raise_r>
 8007a5e:	bf00      	nop
 8007a60:	200000c4 	.word	0x200000c4

08007a64 <_kill_r>:
 8007a64:	b538      	push	{r3, r4, r5, lr}
 8007a66:	4d07      	ldr	r5, [pc, #28]	@ (8007a84 <_kill_r+0x20>)
 8007a68:	2300      	movs	r3, #0
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	4608      	mov	r0, r1
 8007a6e:	4611      	mov	r1, r2
 8007a70:	602b      	str	r3, [r5, #0]
 8007a72:	f7f9 fcd0 	bl	8001416 <_kill>
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	d102      	bne.n	8007a80 <_kill_r+0x1c>
 8007a7a:	682b      	ldr	r3, [r5, #0]
 8007a7c:	b103      	cbz	r3, 8007a80 <_kill_r+0x1c>
 8007a7e:	6023      	str	r3, [r4, #0]
 8007a80:	bd38      	pop	{r3, r4, r5, pc}
 8007a82:	bf00      	nop
 8007a84:	200007f8 	.word	0x200007f8

08007a88 <_getpid_r>:
 8007a88:	f7f9 bcbd 	b.w	8001406 <_getpid>

08007a8c <__swhatbuf_r>:
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	460c      	mov	r4, r1
 8007a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a94:	2900      	cmp	r1, #0
 8007a96:	b096      	sub	sp, #88	@ 0x58
 8007a98:	4615      	mov	r5, r2
 8007a9a:	461e      	mov	r6, r3
 8007a9c:	da0d      	bge.n	8007aba <__swhatbuf_r+0x2e>
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007aa4:	f04f 0100 	mov.w	r1, #0
 8007aa8:	bf14      	ite	ne
 8007aaa:	2340      	movne	r3, #64	@ 0x40
 8007aac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	6031      	str	r1, [r6, #0]
 8007ab4:	602b      	str	r3, [r5, #0]
 8007ab6:	b016      	add	sp, #88	@ 0x58
 8007ab8:	bd70      	pop	{r4, r5, r6, pc}
 8007aba:	466a      	mov	r2, sp
 8007abc:	f000 f848 	bl	8007b50 <_fstat_r>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	dbec      	blt.n	8007a9e <__swhatbuf_r+0x12>
 8007ac4:	9901      	ldr	r1, [sp, #4]
 8007ac6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007aca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007ace:	4259      	negs	r1, r3
 8007ad0:	4159      	adcs	r1, r3
 8007ad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ad6:	e7eb      	b.n	8007ab0 <__swhatbuf_r+0x24>

08007ad8 <__smakebuf_r>:
 8007ad8:	898b      	ldrh	r3, [r1, #12]
 8007ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007adc:	079d      	lsls	r5, r3, #30
 8007ade:	4606      	mov	r6, r0
 8007ae0:	460c      	mov	r4, r1
 8007ae2:	d507      	bpl.n	8007af4 <__smakebuf_r+0x1c>
 8007ae4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	6123      	str	r3, [r4, #16]
 8007aec:	2301      	movs	r3, #1
 8007aee:	6163      	str	r3, [r4, #20]
 8007af0:	b003      	add	sp, #12
 8007af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007af4:	ab01      	add	r3, sp, #4
 8007af6:	466a      	mov	r2, sp
 8007af8:	f7ff ffc8 	bl	8007a8c <__swhatbuf_r>
 8007afc:	9f00      	ldr	r7, [sp, #0]
 8007afe:	4605      	mov	r5, r0
 8007b00:	4639      	mov	r1, r7
 8007b02:	4630      	mov	r0, r6
 8007b04:	f7fe fecc 	bl	80068a0 <_malloc_r>
 8007b08:	b948      	cbnz	r0, 8007b1e <__smakebuf_r+0x46>
 8007b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b0e:	059a      	lsls	r2, r3, #22
 8007b10:	d4ee      	bmi.n	8007af0 <__smakebuf_r+0x18>
 8007b12:	f023 0303 	bic.w	r3, r3, #3
 8007b16:	f043 0302 	orr.w	r3, r3, #2
 8007b1a:	81a3      	strh	r3, [r4, #12]
 8007b1c:	e7e2      	b.n	8007ae4 <__smakebuf_r+0xc>
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	6020      	str	r0, [r4, #0]
 8007b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b26:	81a3      	strh	r3, [r4, #12]
 8007b28:	9b01      	ldr	r3, [sp, #4]
 8007b2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b2e:	b15b      	cbz	r3, 8007b48 <__smakebuf_r+0x70>
 8007b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b34:	4630      	mov	r0, r6
 8007b36:	f000 f81d 	bl	8007b74 <_isatty_r>
 8007b3a:	b128      	cbz	r0, 8007b48 <__smakebuf_r+0x70>
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	f023 0303 	bic.w	r3, r3, #3
 8007b42:	f043 0301 	orr.w	r3, r3, #1
 8007b46:	81a3      	strh	r3, [r4, #12]
 8007b48:	89a3      	ldrh	r3, [r4, #12]
 8007b4a:	431d      	orrs	r5, r3
 8007b4c:	81a5      	strh	r5, [r4, #12]
 8007b4e:	e7cf      	b.n	8007af0 <__smakebuf_r+0x18>

08007b50 <_fstat_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4d07      	ldr	r5, [pc, #28]	@ (8007b70 <_fstat_r+0x20>)
 8007b54:	2300      	movs	r3, #0
 8007b56:	4604      	mov	r4, r0
 8007b58:	4608      	mov	r0, r1
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	602b      	str	r3, [r5, #0]
 8007b5e:	f7f9 fcba 	bl	80014d6 <_fstat>
 8007b62:	1c43      	adds	r3, r0, #1
 8007b64:	d102      	bne.n	8007b6c <_fstat_r+0x1c>
 8007b66:	682b      	ldr	r3, [r5, #0]
 8007b68:	b103      	cbz	r3, 8007b6c <_fstat_r+0x1c>
 8007b6a:	6023      	str	r3, [r4, #0]
 8007b6c:	bd38      	pop	{r3, r4, r5, pc}
 8007b6e:	bf00      	nop
 8007b70:	200007f8 	.word	0x200007f8

08007b74 <_isatty_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	4d06      	ldr	r5, [pc, #24]	@ (8007b90 <_isatty_r+0x1c>)
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	602b      	str	r3, [r5, #0]
 8007b80:	f7f9 fcb9 	bl	80014f6 <_isatty>
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	d102      	bne.n	8007b8e <_isatty_r+0x1a>
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	b103      	cbz	r3, 8007b8e <_isatty_r+0x1a>
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}
 8007b90:	200007f8 	.word	0x200007f8

08007b94 <_init>:
 8007b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b96:	bf00      	nop
 8007b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b9a:	bc08      	pop	{r3}
 8007b9c:	469e      	mov	lr, r3
 8007b9e:	4770      	bx	lr

08007ba0 <_fini>:
 8007ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba2:	bf00      	nop
 8007ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ba6:	bc08      	pop	{r3}
 8007ba8:	469e      	mov	lr, r3
 8007baa:	4770      	bx	lr
